debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	movw	lr, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	lr, #:upper16:.LANCHOR0
	ldr	r3, [lr]
	cmp	lr, r3
	beq	.L2
	sub	r3, r3, #4
	mov	ip, #0
.L5:
	ldr	r1, [r3, #20]
	cmp	r1, #0
	beq	.L3
	str	ip, [r1, #128]
	str	ip, [r1, #132]
	str	ip, [r1, #136]
	ldr	r3, [r3, #4]
	cmp	lr, r3
	sub	r3, r3, #4
	bne	.L5
.L2:
	ldr	pc, [sp], #4
.L3:
	ldr	r3, [r3, #4]
	cmp	lr, r3
	sub	r3, r3, #4
	bne	.L5
	ldr	pc, [sp], #4
	.fnend
	.size	debug_reset_stats, .-debug_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_open, %function
debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_open, .-debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_txcommand_complete, %function
rmnet_txcommand_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #164
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #440]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #440]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
	.fnend
	.size	rmnet_txcommand_complete, .-rmnet_txcommand_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_reset_stats, %function
rmnet_smd_debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r6, r4, #164
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #424]
	str	r3, [r4, #428]
	str	r3, [r4, #432]
	str	r3, [r4, #436]
	str	r3, [r4, #440]
	str	r3, [r4, #444]
	str	r3, [r4, #448]
	str	r3, [r4, #452]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_debug_reset_stats, .-rmnet_smd_debug_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_open, %function
rmnet_smd_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	rmnet_smd_debug_open, .-rmnet_smd_debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_disconnect_work, %function
rmnet_sdio_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	rmnet_sdio_disconnect_work, .-rmnet_sdio_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_reset_stats, %function
rmnet_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #324]
	str	r1, [r3, #352]
	str	r1, [r3, #356]
	str	r1, [r3, #360]
	str	r1, [r3, #364]
	str	r1, [r3, #368]
	bx	lr
	.fnend
	.size	rmnet_sdio_reset_stats, .-rmnet_sdio_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_suspend, %function
rmnet_mux_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #368]
	cmp	r3, #0
	beq	.L16
	ldr	r3, [r0, #348]
	bic	r3, r3, #2
	str	r3, [r0, #348]
.L16:
	bx	lr
	.fnend
	.size	rmnet_mux_suspend, .-rmnet_mux_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_unbind, %function
rmnet_mux_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	str	r3, [r1, #172]
	bx	lr
	.fnend
	.size	rmnet_mux_unbind, .-rmnet_mux_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_reset_stats, %function
rmnet_mux_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #308]
	str	r1, [r3, #396]
	str	r1, [r3, #400]
	str	r1, [r3, #404]
	str	r1, [r3, #408]
	str	r1, [r3, #412]
	str	r1, [r3, #416]
	str	r1, [r3, #420]
	bx	lr
	.fnend
	.size	rmnet_mux_reset_stats, .-rmnet_mux_reset_stats
	.align	2
	.global	usb_rmnet_mux_ctrl_release
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_release, %function
usb_rmnet_mux_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, #0
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #124]
	add	r7, r6, #364
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r5, [r6, #352]
	str	r5, [r4, #124]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	usb_rmnet_mux_ctrl_release, .-usb_rmnet_mux_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_control_complete, %function
audio_control_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	audio_control_complete, .-audio_control_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_close, %function
audio_pcm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #8]
	add	r6, r5, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r6
	str	r4, [r5, #92]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_close, .-audio_pcm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_prepare, %function
audio_pcm_prepare:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	ip, [r1, #208]
	mov	lr, #0
	mov	r0, lr
	ldr	r4, [ip, #60]
	ldr	r2, [ip, #80]
	ldr	r3, [ip, #200]
	mul	r2, r2, r4
	str	lr, [r3, #128]
	lsr	r2, r2, #3
	str	r2, [r3, #124]
	ldr	r2, [ip, #540]
	str	r2, [r3, #112]
	ldr	ip, [r1, #208]
	ldr	lr, [ip, #68]
	ldr	r1, [ip, #80]
	str	r2, [r3, #120]
	mul	r1, r1, lr
	add	r2, r2, r1, lsr #3
	str	r2, [r3, #116]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_prepare, .-audio_pcm_prepare
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_pointer, %function
audio_pcm_pointer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #208]
	ldr	r0, [r3, #80]
	ldr	r2, [r3, #200]
	ldr	r1, [r2, #112]
	ldr	r3, [r2, #120]
	sub	r3, r3, r1
	lsl	r3, r3, #3
	udiv	r0, r3, r0
	bx	lr
	.fnend
	.size	audio_pcm_pointer, .-audio_pcm_pointer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_ioctl, %function
ffs_ep0_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #26496
	cmp	r1, r3
	ldr	r3, [r0, #124]
	beq	.L45
	ldr	r0, [r3]
	cmp	r0, #0
	beq	.L39
	ldr	r3, [r0]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L39
	bx	r3
.L45:
	ldr	r3, [r3, #132]
	cmp	r3, #0
	beq	.L36
	mov	r0, r2
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r2, [r3, #8]
	ldr	lr, [r3, #32]
	ldrh	r1, [r2, #178]
	cmp	r1, #0
	beq	.L37
	uxtb	r0, r0
	mov	r3, lr
.L35:
	mov	ip, r3
	ldrsh	r2, [r3], #2
	cmp	r2, #0
	blt	.L34
	cmp	r2, r0
	beq	.L46
.L34:
	subs	r1, r1, #1
	bne	.L35
.L37:
	mvn	r0, #32
	ldr	pc, [sp], #4
.L46:
	sub	r0, ip, lr
	asr	r0, r0, #1
	ldr	pc, [sp], #4
.L39:
	mvn	r0, #24
	bx	lr
.L36:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	ffs_ep0_ioctl, .-ffs_ep0_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write_room, %function
gs_write_room:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r1, r0
	cmp	r3, #0
	moveq	r5, r3
	beq	.L48
	ldr	r2, [r4, #92]
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r2
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r5, r3, r2
	mls	r5, r2, r5, r3
.L48:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_write_room, .-gs_write_room
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_chars_in_buffer, %function
gs_chars_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #92]
	mov	r1, r0
	mov	r0, r4
	ldr	r3, [r4, #100]
	ldr	r2, [r4, #104]
	add	r2, r2, ip
	sub	r3, r2, r3
	udiv	r4, r3, ip
	mls	r4, ip, r4, r3
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gs_chars_in_buffer, .-gs_chars_in_buffer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_break_ctl, %function
gs_break_ctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r5, [r0, #272]
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r5, #4]
	cmp	r0, #0
	moveq	r4, r0
	beq	.L54
	ldr	r4, [r0, #124]
	cmp	r4, #0
	beq	.L54
	mov	r1, r6
	blx	r4
	mov	r4, r0
.L54:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_break_ctl, .-gs_break_ctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_tiocmget, %function
gs_tiocmget:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #272]
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r5, [r6, #4]
	cmp	r5, #0
	mvneq	r4, #18
	beq	.L59
	ldr	r4, [r5, #108]
	cmp	r4, #0
	beq	.L60
	mov	r0, r5
	blx	r4
	subs	r4, r0, #0
	movne	r4, #2
.L60:
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L62
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	orrne	r4, r4, #4
.L62:
	ldrh	r3, [r5, #104]
	tst	r3, #64
	orrne	r4, r4, #64
	tst	r3, #128
	orrne	r4, r4, #128
.L59:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_tiocmget, .-gs_tiocmget
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_tiocmset, %function
gs_tiocmset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r0, #272]
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r8, [r6, #4]
	cmp	r8, #0
	beq	.L84
	ands	r0, r7, #128
	and	r9, r5, #128
	bne	.L106
	mov	r4, r0
.L81:
	cmp	r9, #0
	beq	.L82
	ldr	r2, [r8, #132]
	cmp	r2, #0
	beq	.L82
	ldrh	r3, [r8, #104]
	mov	r1, #0
	mov	r0, r8
	bic	r3, r3, #128
	strh	r3, [r8, #104]	@ movhi
	blx	r2
	mov	r4, r0
.L82:
	tst	r7, #64
	and	r5, r5, #64
	beq	.L83
	ldr	r2, [r8, #128]
	cmp	r2, #0
	beq	.L80
	ldrh	r3, [r8, #104]
	mov	r1, #1
	mov	r0, r8
	orr	r3, r3, #64
	strh	r3, [r8, #104]	@ movhi
	blx	r2
	mov	r4, r0
.L83:
	cmp	r5, #0
	beq	.L80
	ldr	r2, [r8, #128]
	cmp	r2, #0
	beq	.L80
	ldrh	r3, [r8, #104]
	mov	r0, r8
	mov	r1, #0
	bic	r3, r3, #64
	strh	r3, [r8, #104]	@ movhi
	blx	r2
	mov	r4, r0
.L80:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L106:
	ldr	r4, [r8, #132]
	cmp	r4, #0
	beq	.L82
	ldrh	r3, [r8, #104]
	mov	r1, #1
	mov	r0, r8
	orr	r3, r3, #128
	strh	r3, [r8, #104]	@ movhi
	blx	r4
	mov	r4, r0
	b	.L81
.L84:
	mvn	r4, #18
	b	.L80
	.fnend
	.size	gs_tiocmset, .-gs_tiocmset
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_write_reset, %function
debug_write_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r1, r0
	mov	r0, r4
	str	r3, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	debug_write_reset, .-debug_write_reset
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_reset_stats, %function
debug_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L110
	mov	r5, #0
	add	r6, r7, #4
	mov	r9, r5
.L111:
	ldr	r4, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #104
	add	r8, r4, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r8
	str	r9, [r4, #180]
	str	r9, [r4, #184]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7]
	cmp	r3, r5
	bhi	.L111
.L110:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	debug_sdio_reset_stats, .-debug_sdio_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_reset_stats, %function
debug_smd_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #212]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L118
	mov	r5, #0
	add	r6, r7, #216
	mov	r9, r5
.L119:
	ldr	r4, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #104
	add	r8, r4, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r8
	str	r9, [r4, #164]
	str	r9, [r4, #168]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #212]
	cmp	r3, r5
	bhi	.L119
.L118:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	debug_smd_reset_stats, .-debug_smd_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_reset_stats, %function
gbam_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #424]
	cmp	r2, #0
	ble	.L130
	ldr	r4, [r3, #428]
	cmp	r4, #0
	beq	.L130
	add	r7, r4, #4
	add	r8, r4, #8
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r8
	bl	_raw_spin_lock
	mov	r3, #0
	mov	r0, r8
	str	r3, [r4, #240]
	str	r3, [r4, #244]
	str	r3, [r4, #248]
	str	r3, [r4, #260]
	str	r3, [r4, #264]
	str	r3, [r4, #268]
	str	r3, [r4, #272]
	str	r3, [r4, #276]
	str	r3, [r4, #280]
	bl	_raw_spin_unlock
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L130:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	gbam_reset_stats, .-gbam_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_reset_stats, %function
gsmd_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r5, .L142
	strd	r6, [sp, #8]
	mov	r7, #0
	strd	r8, [sp, #16]
	mov	r9, r2
	str	r10, [sp, #24]
	add	r8, r5, #504
	str	lr, [sp, #28]
.L136:
	ldr	r4, [r5]
	add	r5, r5, #84
	cmp	r4, #0
	add	r6, r4, #108
	mov	r0, r6
	beq	.L135
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r6
	str	r7, [r4, #92]
	str	r7, [r4, #96]
	bl	_raw_spin_unlock_irqrestore
.L135:
	cmp	r5, r8
	bne	.L136
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L143:
	.align	2
.L142:
	.word	.LANCHOR1+512
	.fnend
	.size	gsmd_ctrl_reset_stats, .-gsmd_ctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_receive, %function
ghsic_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	subs	r4, r0, #0
	moveq	r0, r4
	str	lr, [sp, #4]
	beq	.L144
	ldr	r3, [r4, #52]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L144
	ldr	r0, [r4, #8]
	blx	r3
	ldr	r3, [r4, #100]
	add	r3, r3, #1
	str	r3, [r4, #100]
.L144:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ghsic_ctrl_receive, .-ghsic_ctrl_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_reset_stats, %function
gctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	str	r10, [sp, #24]
	mov	r10, r2
	ldr	r3, [r9, #1016]
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L155
	mov	r5, #0
	add	r6, r9, #1020
	mov	r8, r5
.L154:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r7, r4, #4
	mov	r0, r7
	beq	.L151
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r8, [r4, #96]
	str	r8, [r4, #100]
	add	r5, r5, #1
	add	r6, r6, #104
	str	r8, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r9, #1016]
	cmp	r3, r5
	bhi	.L154
.L155:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L151:
	add	r5, r5, #1
	add	r6, r6, #104
	cmp	r5, r3
	bcc	.L154
	b	.L155
	.fnend
	.size	gctrl_reset_stats, .-gctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_reset_stats, %function
ghsic_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	movw	fp, #:lower16:.LANCHOR1
	mov	r10, r2
	movt	fp, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [fp, #1436]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #0
	beq	.L163
	mov	r6, #0
	add	r7, fp, #1440
	mov	r5, r6
.L162:
	ldr	r4, [r7]
	cmp	r4, #0
	add	r8, r4, #80
	add	r9, r4, #48
	mov	r0, r8
	beq	.L159
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r8
	str	r5, [r4, #188]
	str	r5, [r4, #204]
	add	r6, r6, #1
	add	r7, r7, #104
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r9
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [fp, #1436]
	cmp	r3, r6
	bhi	.L162
.L163:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L159:
	add	r6, r6, #1
	add	r7, r7, #104
	cmp	r6, r3
	bcc	.L162
	b	.L163
	.fnend
	.size	ghsic_data_reset_stats, .-ghsic_data_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_reset_stats, %function
ghsuart_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #1856]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L171
	ldr	r6, .L173
	mov	r5, #0
	mov	r9, r5
.L170:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r8, r4, #8
	mov	r0, r8
	beq	.L167
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r8
	str	r9, [r4, #96]
	str	r9, [r4, #100]
	add	r5, r5, #1
	add	r6, r6, #84
	str	r9, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #1856]
	cmp	r3, r5
	bhi	.L170
.L171:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L167:
	add	r5, r5, #1
	add	r6, r6, #84
	cmp	r5, r3
	bcc	.L170
	b	.L171
.L174:
	.align	2
.L173:
	.word	.LANCHOR1+1860
	.fnend
	.size	ghsuart_ctrl_reset_stats, .-ghsuart_ctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_reset_stats, %function
ghsuart_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #2028]
	strd	r10, [sp, #24]
	mov	fp, r2
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #0
	beq	.L181
	mov	r5, #0
	add	r6, r7, #2032
	mov	r9, r5
.L180:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r8, r4, #104
	add	r10, r4, #72
	mov	r0, r8
	beq	.L177
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r8
	str	r9, [r4, #204]
	str	r9, [r4, #212]
	add	r5, r5, #1
	add	r6, r6, #84
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r10
	str	r9, [r4, #208]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #2028]
	cmp	r3, r5
	bhi	.L180
.L181:
	mov	r0, fp
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L177:
	add	r5, r5, #1
	add	r6, r6, #84
	cmp	r5, r3
	bcc	.L180
	b	.L181
	.fnend
	.size	ghsuart_data_reset_stats, .-ghsuart_data_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_open, %function
modem_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #2200]
	bx	lr
	.fnend
	.size	modem_open, .-modem_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_poll, %function
modem_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L185
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L185
	ldr	r1, .L195
	blx	r3
.L185:
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	add	sp, sp, #4
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2200]
	cmp	r0, #0
	movne	r0, #65
	ldr	pc, [sp], #4
.L196:
	.align	2
.L195:
	.word	.LANCHOR1+2204
	.fnend
	.size	modem_poll, .-modem_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_release, %function
ccid_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r1, #124]
	mov	r0, #0
	str	r0, [r3, #116]
	bx	lr
	.fnend
	.size	ccid_ctrl_release, .-ccid_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_snd_free, %function
f_midi_snd_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_snd_free, .-f_midi_snd_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_open, %function
f_midi_in_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #12]
	ldr	r2, [r0, #28]
	ldr	r2, [r2, #200]
	add	r3, r2, r3, lsl #2
	ldr	r1, [r3, #232]
	cmp	r1, #0
	beq	.L201
	str	r0, [r3, #104]
	ldr	r3, [r0, #12]
	mov	r1, #0
	mov	r0, r1
	add	r3, r3, #58
	ldr	r3, [r2, r3, lsl #2]
	strb	r1, [r3, #9]
	bx	lr
.L201:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	f_midi_in_open, .-f_midi_in_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_open, %function
f_midi_out_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #12]
	mov	r3, r0
	ldr	r1, [r0, #28]
	cmp	r2, #15
	ldr	r1, [r1, #200]
	addle	r2, r2, #42
	movle	r0, #0
	mvngt	r0, #21
	strle	r3, [r1, r2, lsl #2]
	bx	lr
	.fnend
	.size	f_midi_out_open, .-f_midi_out_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_alt, %function
ecm_qc_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #120]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L207
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	subs	r0, r0, #0
	movne	r0, #1
	bx	lr
.L207:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_qc_get_alt, .-ecm_qc_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_get_alt, %function
mbim_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #196]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L210
	ldrb	r3, [r0, #197]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L211
	ldrb	r0, [r0, #198]	@ zero_extendqisi2
	bx	lr
.L210:
	mov	r0, #0
	bx	lr
.L211:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	mbim_get_alt, .-mbim_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_get_alt, %function
ecm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L214
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	subs	r0, r0, #0
	movne	r0, #1
	bx	lr
.L214:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_get_alt, .-ecm_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ueth_change_mtu, %function
ueth_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #1152
	mov	r6, r1
	mov	r0, r7
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	bne	.L217
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	bhi	.L218
	mov	r5, r3
	str	r6, [r4, #356]
.L216:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L217:
	mvn	r5, #15
	b	.L216
.L218:
	mvn	r5, #33
	b	.L216
	.fnend
	.size	ueth_change_mtu, .-ueth_change_mtu
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ueth_qc_change_mtu, %function
ueth_qc_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #1152
	mov	r6, r1
	mov	r0, r7
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	bne	.L222
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	bhi	.L223
	mov	r5, r3
	str	r6, [r4, #356]
.L221:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L222:
	mvn	r5, #15
	b	.L221
.L223:
	mvn	r5, #33
	b	.L221
	.fnend
	.size	ueth_qc_change_mtu, .-ueth_qc_change_mtu
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_start_xmit, %function
eth_qc_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	eth_qc_start_xmit, .-eth_qc_start_xmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_get_alt, %function
f_audio_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r1
	beq	.L230
	ldrb	r3, [r3, #17]	@ zero_extendqisi2
	cmp	r3, r1
	ldrbeq	r0, [r0, #249]	@ zero_extendqisi2
	movne	r0, #0
	bx	lr
.L230:
	ldrb	r0, [r0, #248]	@ zero_extendqisi2
	bx	lr
	.fnend
	.size	f_audio_get_alt, .-f_audio_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_disable, %function
f_audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #2216]
	bx	lr
	.fnend
	.size	f_audio_disable, .-f_audio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	generic_set_cmd, %function
generic_set_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, r0
	add	r1, r1, #4
	mov	r0, #0
	str	r2, [r3, r1, lsl #2]
	bx	lr
	.fnend
	.size	generic_set_cmd, .-generic_set_cmd
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	generic_get_cmd, %function
generic_get_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	ldr	r0, [r0, r1, lsl #2]
	bx	lr
	.fnend
	.size	generic_get_cmd, .-generic_get_cmd
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_out_max_packet_size_store, %function
conn_gadget_out_max_packet_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r3
	bx	lr
	.fnend
	.size	conn_gadget_out_max_packet_size_store, .-conn_gadget_out_max_packet_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_get_alt, %function
ncm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L237
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	subs	r0, r0, #0
	movne	r0, #1
	bx	lr
.L237:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ncm_get_alt, .-ncm_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_unbind_config, %function
audio_source_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mvn	r2, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	bx	lr
	.fnend
	.size	audio_source_function_unbind_config, .-audio_source_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_bind_config, %function
uasp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mvn	r0, #18
	bx	lr
	.fnend
	.size	uasp_function_bind_config, .-uasp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_set_endpoint_complete, %function
audio_set_endpoint_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r1, #32]
	ldr	r4, [r1, #44]
	str	r2, [sp, #4]
	cmp	r4, r2
	bne	.L240
	ldr	r6, [r5, #272]
	cmp	r6, r2
	beq	.L240
	add	r0, sp, #4
	ldm	r1, {r1, r2}
	bl	memcpy
	ldrb	r1, [r5, #268]	@ zero_extendqisi2
	mov	r0, r6
	ldr	r2, [sp, #4]
	ldr	r3, [r6, #36]
	blx	r3
	str	r4, [r5, #272]
.L240:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_set_endpoint_complete, .-audio_set_endpoint_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_init, %function
midi_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L252
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4, #4]
	beq	.L250
.L248:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
.L246:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L252:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r4, #4]
	b	.L248
.L250:
	mvn	r0, #11
	b	.L246
	.fnend
	.size	midi_function_init, .-midi_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_init, %function
ecm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L253
	mov	r2, #6
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r3, r0
	movne	r0, #0
	mvneq	r0, #11
	str	r3, [r4, #4]
.L253:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_init, .-ecm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_init, %function
rndis_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L258
	mov	r2, #272
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r3, r0
	movne	r0, #0
	mvneq	r0, #11
	str	r3, [r4, #4]
.L258:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_init, .-rndis_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_init, %function
audio_source_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L266
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L269
.L264:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	str	r3, [r4, #4]
.L263:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L266:
	mov	r3, #16
	b	.L264
.L269:
	mvn	r0, #11
	b	.L263
	.fnend
	.size	audio_source_function_init, .-audio_source_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_request_new, %function
adb_request_new:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #208
	str	lr, [sp, #12]
	ldr	r2, [r0, #8]
	ldr	r3, [r2, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L270
	mov	r0, r6
	mov	r1, #208
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L276
.L270:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L276:
	ldr	r2, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L270
	.fnend
	.size	adb_request_new, .-adb_request_new
	.set	conn_gadget_request_new,adb_request_new
	.set	mtp_request_new,adb_request_new
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_alloc_ep_req, %function
midi_alloc_ep_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r1, #32
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L277
	mov	r0, r5
	mov	r1, #32
	str	r5, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L283
.L277:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L283:
	ldr	r2, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L277
	.fnend
	.size	midi_alloc_ep_req, .-midi_alloc_ep_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_unbind, %function
ccid_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L287
.L285:
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #16]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L287:
	ldr	r0, [r1, #8]
	bl	kfree
	b	.L285
	.fnend
	.size	ccid_function_unbind, .-ccid_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_alloc_ctrl_pkt, %function
rmnet_mux_alloc_ctrl_pkt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	orr	r6, r1, #32768
	str	lr, [sp, #12]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L293
	mov	r0, r3
	mov	r2, #16
	mov	r1, r6
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L288
.L289:
	mov	r1, r6
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	strne	r5, [r4, #4]
	beq	.L299
.L288:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L293:
	mov	r4, #16
	b	.L289
.L299:
	mov	r0, r4
	mov	r4, r3
	bl	kfree
	b	.L288
	.fnend
	.size	rmnet_mux_alloc_ctrl_pkt, .-rmnet_mux_alloc_ctrl_pkt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_receive, %function
ghsuart_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	moveq	r5, r4
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	beq	.L301
	ldr	r3, [r4, #68]
	cmp	r3, #0
	moveq	r5, r3
	beq	.L301
	ldr	r0, [r4, #12]
	blx	r3
	ldr	r3, [r4, #100]
	mov	r5, r0
	add	r3, r3, #1
	str	r3, [r4, #100]
.L301:
	mov	r0, r6
	bl	kfree
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ghsuart_ctrl_receive, .-ghsuart_ctrl_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_alloc_ctrl_pkt, %function
mbim_alloc_ctrl_pkt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L310
	mov	r0, r3
	mov	r2, #16
	orr	r1, r1, #32768
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L314
.L306:
	mov	r1, r6
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	strne	r5, [r4, #4]
	beq	.L315
.L305:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L310:
	mov	r4, #16
	b	.L306
.L314:
	mvn	r4, #11
	b	.L305
.L315:
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L305
	.fnend
	.size	mbim_alloc_ctrl_pkt, .-mbim_alloc_ctrl_pkt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_cleanup, %function
ecm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_cleanup, .-ecm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_cleanup, %function
midi_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree
	.fnend
	.size	midi_function_cleanup, .-midi_function_cleanup
	.section	.rodata.str1.4,"aMS",%progbits,1
	.align	2
.LC0:
	.ascii	"rmnet notify ep error %d\012\000"
	.align	2
.LC1:
	.ascii	"rmnet notify ep enqueue error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_notify_complete, %function
rmnet_smd_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r6, #84]
	cmn	r2, #104
	beq	.L320
	cmp	r2, #0
	mov	r4, r1
	mov	r5, r0
	beq	.L321
	cmn	r2, #108
	beq	.L320
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC0
	movt	r1, #:upper16:.LC0
	add	r0, r0, #32
	bl	dev_err
.L321:
	ldr	r3, [r6, #96]
	cmp	r3, r5
	beq	.L339
.L319:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L320:
	mov	r3, #0
	str	r3, [r6, #172]
	b	.L319
.L339:
	add	r5, r6, #172
	.syntax divided
@ 99 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L319
	ldr	r0, [r6, #96]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L319
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1
	movt	r1, #:upper16:.LC1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_smd_notify_complete, .-rmnet_smd_notify_complete
	.section	.rodata.str1.4
	.align	2
.LC2:
	.ascii	"rmnet notifyep error %d\012\000"
	.align	2
.LC3:
	.ascii	"rmnet notify ep enq error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_notify_complete, %function
rmnet_sdio_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #84]
	cmn	r2, #104
	beq	.L341
	cmp	r2, #0
	mov	r5, r1
	beq	.L342
	cmn	r2, #108
	beq	.L341
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC2
	movt	r1, #:upper16:.LC2
	add	r0, r0, #32
	bl	dev_err
.L342:
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L340
	add	r6, r4, #196
	.syntax divided
@ 99 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L340
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L360
.L340:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L341:
	mov	r3, #0
	str	r3, [r4, #196]
	b	.L340
.L360:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC3
	movt	r1, #:upper16:.LC3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_sdio_notify_complete, .-rmnet_sdio_notify_complete
	.section	.rodata.str1.4
	.align	2
.LC4:
	.ascii	"rmnet_mux notifyep error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_notify_complete, %function
rmnet_mux_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #84]
	cmn	r2, #104
	beq	.L362
	cmp	r2, #0
	mov	r5, r1
	beq	.L363
	cmn	r2, #108
	beq	.L362
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC4
	movt	r1, #:upper16:.LC4
	add	r0, r0, #32
	bl	dev_err
.L363:
	add	r6, r4, #372
	.syntax divided
@ 99 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L378
.L361:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L378:
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L361
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC3
	movt	r1, #:upper16:.LC3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
.L362:
	mov	r3, #0
	str	r3, [r4, #372]
	b	.L361
	.fnend
	.size	rmnet_mux_notify_complete, .-rmnet_mux_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_ethaddr_store, %function
rndis_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	movw	r5, #52429
	str	r6, [sp, #8]
	movt	r5, 52428
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	ldr	lr, [r0, #4]
	mov	r2, #0
	mov	r1, #2
	ldr	r3, .L386
	mov	r0, r2
	str	r1, [lr]
	strh	r2, [lr, #4]	@ movhi
	b	.L380
.L381:
	sub	r2, r0, r2
	add	r0, r0, #1
	add	r2, r2, #1
	cmp	r0, #256
	ldrb	r1, [lr, r2]	@ zero_extendqisi2
	eor	ip, ip, r1
	strb	ip, [lr, r2]
	beq	.L384
.L380:
	ldrb	ip, [r3], #1	@ zero_extendqisi2
	umull	r1, r2, r5, r0
	cmp	ip, #0
	mov	r1, r2
	bic	r2, r2, #3
	add	r2, r2, r1, lsr #2
	bne	.L381
.L384:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L387:
	.align	2
.L386:
	.word	.LANCHOR1+2220
	.fnend
	.size	rndis_ethaddr_store, .-rndis_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_hw_params, %function
audio_pcm_hw_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	movw	r2, #44100
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #284]
	.pad #8
	sub	sp, sp, #8
	ldr	r1, [r1, #296]
	cmp	r3, #2
	cmpeq	r1, r2
	bne	.L394
	ldr	r1, [r0]
	mov	r4, r0
	add	r6, r0, #172
	ldr	r3, [r1]
	ldr	r0, [r3, #496]
	ldrd	r2, [r0, #248]
	orrs	r3, r2, r3
	beq	.L401
.L390:
	mov	r3, #2
	mov	r0, #0
	add	r2, r4, #184
	str	r3, [r4, #172]
	ldr	r3, [r1]
	ldr	r3, [r3, #496]
	str	r3, [r4, #176]
	str	r0, [r4, #192]
	ldr	r3, [r1]
	ldr	r1, [r5, #380]
	ldr	r0, [r3, #496]
	cmp	r0, #0
	beq	.L391
	ldr	ip, [r0, #276]
	cmp	ip, #0
	beq	.L391
.L392:
	mov	r7, #0
	mov	r3, #208
	str	r7, [sp]
	ldr	r8, [ip]
	blx	r8
	cmp	r0, r7
	str	r0, [r4, #180]
	beq	.L396
	ldr	r2, [r5, #380]
	cmp	r6, r7
	ldr	r3, [r4, #208]
	str	r2, [r4, #188]
	beq	.L393
	str	r6, [r3, #552]
	ldr	r2, [r4, #180]
	mov	r0, r7
	str	r2, [r3, #540]
	ldr	r2, [r4, #184]
	str	r2, [r3, #544]
	ldr	r2, [r4, #188]
	str	r2, [r3, #548]
.L388:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L391:
	movw	r3, #:lower16:arm_dma_ops
	movt	r3, #:upper16:arm_dma_ops
	cmp	r3, #0
	movne	ip, r3
	bne	.L392
	.syntax divided
@ 175 "/home/jprim/hlte/lolz/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 175, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L401:
	mvn	r2, #0
	mov	r3, #0
	strd	r2, [r0, #248]
	ldr	r1, [r4]
	b	.L390
.L393:
	add	r2, r3, #544
	mov	r4, #0
	str	r6, [r3, #540]
	mov	r5, #0
	mov	r0, r6
	str	r6, [r3, #552]
	strd	r4, [r2]
	b	.L388
.L394:
	mvn	r0, #21
	b	.L388
.L396:
	mvn	r0, #11
	b	.L388
	.fnend
	.size	audio_pcm_hw_params, .-audio_pcm_hw_params
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_open, %function
ffs_ep0_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	ldr	r2, [r3, #92]
	cmp	r2, #3
	beq	.L404
	add	r2, r3, #84
	str	r3, [r1, #124]
	.syntax divided
@ 45 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r2, r3, #88
	.syntax divided
@ 45 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	bx	lr
.L404:
	mvn	r0, #15
	bx	lr
	.fnend
	.size	ffs_ep0_open, .-ffs_ep0_open
	.section	.rodata.str1.4
	.align	2
.LC5:
	.ascii	"setup complete --> %d, %d/%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_setup_complete, %function
composite_setup_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmp	r3, #0
	bne	.L406
	ldr	r2, [r1, #4]
	ldr	ip, [r1, #48]
	cmp	ip, r2
	bxeq	lr
.L406:
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	ldrh	ip, [r2, #18]
	tst	ip, #4
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	lr, [r1, #4]
	mov	r0, r2
	movw	r2, #:lower16:.LC5
	ldr	ip, [r1, #48]
	movt	r2, #:upper16:.LC5
	ldr	r1, [r4]
	stm	sp, {ip, lr}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	composite_setup_complete, .-composite_setup_complete
	.section	.rodata.str1.4
	.align	2
.LC6:
	.ascii	"resume\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_resume, %function
composite_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	movw	r3, #:lower16:.LANCHOR2
	mov	r5, r0
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r2, [r3, #42]
	tst	r2, #4
	bne	.L438
.L416:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	ldr	r3, [r3, #40]
	cmp	r3, #0
	beq	.L417
	mov	r0, r5
	blx	r3
.L417:
	ldr	r1, [r5, #12]
	cmp	r1, #0
	beq	.L419
	mov	r2, r1
	ldr	r4, [r2, #36]!
	cmp	r2, r4
	sub	r4, r4, #72
	beq	.L420
.L424:
	ldr	r3, [r4, #60]
	mov	r0, r4
	cmp	r3, #0
	beq	.L421
	blx	r3
	ldr	r1, [r5, #12]
	ldr	r4, [r4, #72]
	add	r2, r1, #36
	cmp	r2, r4
	sub	r4, r4, #72
	bne	.L424
.L420:
	ldrb	r3, [r1, #23]	@ zero_extendqisi2
	cmp	r3, #0
	ldrne	r1, [r5, #64]
	moveq	r1, #500
	mulne	r1, r1, r3
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L419
	mov	r0, r6
	blx	r3
.L419:
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r5, #16]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L421:
	ldr	r4, [r4, #72]
	cmp	r2, r4
	sub	r4, r4, #72
	bne	.L424
	b	.L420
.L438:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC6
	add	r0, r3, #24
	movt	r2, #:upper16:.LC6
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L416
	.fnend
	.size	composite_resume, .-composite_resume
	.section	.rodata.str1.4
	.align	2
.LC7:
	.ascii	"suspend\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_suspend, %function
composite_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	add	r0, r0, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	movw	r3, #:lower16:.LANCHOR2
	mov	r6, r0
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r2, [r3, #66]
	tst	r2, #4
	bne	.L453
.L440:
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L444
	ldr	r4, [r3, #36]!
	cmp	r3, r4
	sub	r4, r4, #72
	beq	.L444
.L447:
	ldr	r2, [r4, #56]
	mov	r0, r4
	cmp	r2, #0
	beq	.L445
	blx	r2
	ldr	r3, [r6, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L447
.L444:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L443
	mov	r0, r6
	blx	r3
.L443:
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #16]
	ldr	r3, [r5]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L439
	mov	r0, r5
	mov	r1, #2
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L445:
	ldr	r4, [r4, #72]
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L447
	b	.L444
.L453:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC7
	add	r0, r3, #48
	movt	r2, #:upper16:.LC7
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L440
.L439:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	composite_suspend, .-composite_suspend
	.section	.rodata.str1.4
	.align	2
.LC8:
	.ascii	"diag_function_disable\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_disable, %function
diag_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #90]
	tst	r2, #4
	bne	.L471
.L455:
	add	r5, r4, #108
	mov	r6, #0
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r5
	str	r6, [r4, #112]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #124]
	cmp	r3, r6
	beq	.L456
	ldr	r5, [r3, #12]
	cmp	r5, r6
	beq	.L456
	mov	r2, r6
	mov	r1, #1
	ldr	r0, [r3, #16]
	blx	r5
.L456:
	ldr	r0, [r4, #88]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #84]
	str	r5, [r3]
	ldr	r3, [r4, #124]
	cmp	r3, r5
	strne	r5, [r3, #20]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L471:
	ldr	r1, [r4, #116]
	movw	r2, #:lower16:.LC8
	add	r0, r3, #72
	movt	r2, #:upper16:.LC8
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L455
	.fnend
	.size	diag_function_disable, .-diag_function_disable
	.section	.rodata.str1.4
	.align	2
.LC9:
	.ascii	"acm ttyGS%d completion, err %d\012\000"
	.align	2
.LC10:
	.ascii	"acm ttyGS%d short resp, len %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_complete_set_line_coding, %function
acm_complete_set_line_coding:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	ip, [r1, #44]
	ldr	r2, [r3, #20]
	cmp	ip, #0
	ldr	lr, [r2, #24]
	bne	.L484
	ldr	ip, [r1, #48]
	cmp	ip, #7
	beq	.L475
	mov	r4, r0
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #138]
	tst	r2, #4
	bne	.L485
.L476:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L475:
	ldr	r2, [r1]
	add	r1, r3, #160
	ldr	r0, [r2]	@ unaligned
	str	r0, [r3, #160]
	ldrh	r3, [r2, #4]	@ unaligned
	strh	r3, [r1, #4]	@ movhi
	ldrb	r3, [r2, #6]	@ zero_extendqisi2
	strb	r3, [r1, #6]
.L472:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L484:
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #114]
	tst	r2, #4
	beq	.L472
	ldr	r1, [lr]
	movw	r2, #:lower16:.LC9
	add	r0, r0, #96
	ldrb	r3, [r3, #146]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC9
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L472
.L485:
	ldr	r1, [lr]
	movw	r2, #:lower16:.LC10
	add	r0, r0, #120
	ldrb	r3, [r3, #146]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC10
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L476
	.fnend
	.size	acm_complete_set_line_coding, .-acm_complete_set_line_coding
	.section	.rodata.str1.4
	.align	2
.LC11:
	.ascii	"disable\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_disable, %function
f_midi_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	ldrh	r2, [r3, #162]
	tst	r2, #4
	bne	.L492
.L487:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	bx	r3
.L492:
	ldr	r1, [r4, #20]
	add	r0, r3, #144
	movw	r2, #:lower16:.LC11
	movt	r2, #:upper16:.LC11
	ldr	r3, [r1, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L487
	.fnend
	.size	f_midi_disable, .-f_midi_disable
	.section	.rodata.str1.4
	.align	2
.LC12:
	.ascii	"RNDIS %s response error %d, %d/%d\012\000"
	.align	2
.LC13:
	.ascii	"notify/1 --> %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_response_complete, %function
rndis_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r1, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r5, #20]
	cmp	r3, #0
	beq	.L493
	ldr	r7, [r3, #24]
	cmp	r7, #0
	beq	.L493
	ldr	r3, [r1, #44]
	mov	r4, r1
	cmn	r3, #104
	beq	.L497
	cmp	r3, #0
	mov	r6, r0
	beq	.L498
	cmn	r3, #108
	beq	.L497
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #186]
	tst	r2, #4
	bne	.L522
.L498:
	ldr	r3, [r5, #168]
	cmp	r3, r6
	beq	.L523
.L493:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L497:
	mov	r3, #0
	str	r3, [r5, #176]
	b	.L493
.L523:
	add	r6, r5, #176
	.syntax divided
@ 99 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L493
	ldr	r0, [r5, #168]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L493
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	ip, #:lower16:.LANCHOR2
	movt	ip, #:upper16:.LANCHOR2
	ldrh	r3, [ip, #210]
	tst	r3, #4
	beq	.L493
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC13
	mov	r3, r0
	movt	r2, #:upper16:.LC13
	add	r0, ip, #192
	add	r1, r1, #32
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__dynamic_dev_dbg
.L522:
	ldr	lr, [r1, #4]
	movw	r2, #:lower16:.LC12
	add	r0, r0, #168
	ldr	r1, [r7]
	str	r3, [sp]
	movt	r2, #:upper16:.LC12
	ldr	ip, [r4, #48]
	ldr	r3, [r6, #4]
	add	r1, r1, #32
	stmib	sp, {ip, lr}
	bl	__dynamic_dev_dbg
	b	.L498
	.fnend
	.size	rndis_response_complete, .-rndis_response_complete
	.section	.rodata.str1.4
	.align	2
.LC14:
	.ascii	"notify/0 --> %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_response_available, %function
rndis_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r5, r0, #176
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r1, [r0, #172]
	ldr	r6, [r3, #24]
	ldr	r0, [r1]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L524
	ldr	r2, [r4, #168]
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L524
	mov	ip, #0
	mov	r2, #32
	stm	r0, {r3, ip}
	ldr	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L524
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	ip, #:lower16:.LANCHOR2
	movt	ip, #:upper16:.LANCHOR2
	ldrh	r3, [ip, #234]
	tst	r3, #4
	bne	.L538
.L524:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L538:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC14
	mov	r3, r0
	movt	r2, #:upper16:.LC14
	add	r0, ip, #216
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	add	r1, r1, #32
	b	__dynamic_dev_dbg
	.fnend
	.size	rndis_response_available, .-rndis_response_available
	.section	.rodata.str1.4
	.align	2
.LC15:
	.ascii	"packet filter %02x\012\000"
	.align	2
.LC16:
	.ascii	"invalid control req%02x.%02x v%04x i%04x l%d\012\000"
	.align	2
.LC17:
	.ascii	"ecm req%02x.%02x v%04x i%04x l%d\012\000"
	.align	2
.LC18:
	.ascii	"ecm req %02x.%02x response err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_setup, %function
ecm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	movw	r3, #17185
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	ip, [r1, #6]	@ unaligned
	.pad #20
	sub	sp, sp, #20
	ldrh	r1, [r1]	@ unaligned
	ldrh	r6, [r4, #2]	@ unaligned
	ldr	r2, [r0, #20]
	ldrh	r8, [r4, #4]	@ unaligned
	cmp	ip, #0
	cmpeq	r1, r3
	uxth	r9, r6
	ldr	r7, [r2, #24]
	beq	.L550
.L540:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #306
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r5, #94
	bne	.L551
.L539:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L550:
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	mov	r5, r0
	cmp	r3, r8
	bne	.L540
	movw	r10, #:lower16:.LANCHOR2
	movw	r3, #258
	ldr	fp, [r7, #4]
	movt	r10, #:upper16:.LANCHOR2
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L552
.L541:
	movw	r3, #282
	strh	r6, [r5, #98]	@ movhi
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L553
.L543:
	ldrb	r3, [fp, #26]	@ zero_extendqisi2
	mov	r0, #0
	mov	r1, fp
	mov	r2, #32
	str	r0, [fp, #4]
	bfc	r3, #1, #1
	strb	r3, [fp, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L539
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC18
	str	r5, [sp]
	movt	r1, #:upper16:.LC18
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	b	.L539
.L551:
	ldrb	lr, [r4, #1]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC16
	add	r0, r0, #288
	ldr	r1, [r7]
	movt	r2, #:upper16:.LC16
	str	r9, [sp, #4]
	ldrb	r3, [r4]	@ zero_extendqisi2
	mvn	r5, #94
	str	lr, [sp]
	add	r1, r1, #32
	str	r8, [sp, #8]
	str	ip, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L539
.L553:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	mov	r0, #0
	movw	r2, #:lower16:.LC17
	ldr	r1, [r7]
	movt	r2, #:upper16:.LC17
	str	r9, [sp, #4]
	str	r8, [sp, #8]
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	str	r0, [sp, #12]
	ldr	r0, .L554
	bl	__dynamic_dev_dbg
	b	.L543
.L552:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC15
	mov	r3, r9
	movt	r2, #:upper16:.LC15
	add	r0, r10, #240
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L541
.L555:
	.align	2
.L554:
	.word	.LANCHOR2+264
	.fnend
	.size	ecm_setup, .-ecm_setup
	.section	.rodata.str1.4
	.align	2
.LC19:
	.ascii	"Bad control-OUT transfer\012\000"
	.align	2
.LC20:
	.ascii	"Got wrong INPUT SIZE (%d) from host\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_ep0out_complete, %function
ncm_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #0
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r1, #44]
	ldr	ip, [r0]
	ldr	r0, [r1, #32]
	str	r2, [r1, #32]
	cmp	r3, r2
	bne	.L557
	ldr	r3, [r1, #4]
	ldr	r2, [r1, #48]
	cmp	r2, r3
	beq	.L558
.L557:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #330
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L571
.L559:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #24]
	bx	r3
.L558:
	ldr	r3, [r1]
	ldr	r3, [r3]	@ unaligned
	cmp	r3, #2048
	bcc	.L560
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #24]
	cmp	r2, r3
	bcc	.L560
	str	r3, [r0, #112]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L560:
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #354
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	beq	.L559
	ldr	r1, [ip]
	movw	r2, #:lower16:.LC20
	add	r0, r0, #336
	movt	r2, #:upper16:.LC20
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L559
.L571:
	ldr	r1, [ip]
	movw	r2, #:lower16:.LC19
	add	r0, r0, #312
	movt	r2, #:upper16:.LC19
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L559
	.fnend
	.size	ncm_ep0out_complete, .-ncm_ep0out_complete
	.section	.rodata.str1.4
	.align	2
.LC21:
	.ascii	"true\000"
	.align	2
.LC22:
	.ascii	"false\000"
	.align	2
.LC23:
	.ascii	"event %02x --> %d\012\000"
	.align	2
.LC24:
	.ascii	"notify connect %s\012\000"
	.align	2
.LC25:
	.ascii	"notify speed %d\012\000"
	.align	2
.LC26:
	.ascii	"notify --> %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_notify_complete, %function
ncm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r1]
	ldr	r5, [r1, #32]
	ldr	r3, [r5, #20]
	add	r6, r5, #188
	mov	r0, r6
	ldr	r7, [r3, #24]
	bl	_raw_spin_lock
	ldr	ip, [r4, #44]
	cmn	ip, #104
	beq	.L573
	cmp	ip, #0
	beq	.L574
	cmn	ip, #108
	beq	.L573
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #378
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L614
.L574:
	cmp	r4, #0
	str	r4, [r5, #168]
	beq	.L577
	ldrb	r3, [r5, #172]	@ zero_extendqisi2
	ldr	r2, [r5, #20]
	ldr	r7, [r4]
	cmp	r3, #1
	ldr	r8, [r2, #24]
	beq	.L578
	cmp	r3, #2
	beq	.L579
	cmp	r3, #0
	beq	.L577
.L580:
	mvn	r2, #94
	mov	r3, #0
	mov	r0, r6
	strb	r2, [r7]
	ldrb	r2, [r5, #148]	@ zero_extendqisi2
	strh	r2, [r7, #4]	@ unaligned
	str	r3, [r5, #168]
	bl	_raw_spin_unlock
	ldr	r0, [r5, #164]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	blt	.L615
.L577:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L615:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #450
	str	r4, [r5, #168]
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L577
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC26
	mov	r3, r7
	movt	r2, #:upper16:.LC26
	add	r0, r0, #432
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L577
.L573:
	mov	r3, #0
	strb	r3, [r5, #172]
	b	.L574
.L579:
	mov	r3, #0
	mov	r1, #8
	mov	r2, #16
	mov	r0, #42
	strb	r0, [r7, #1]
	strb	r3, [r7, #2]
	strb	r3, [r7, #3]
	strb	r1, [r7, #6]
	strb	r3, [r7, #7]
	ldr	r1, [r4]
	str	r2, [r4, #4]
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L588
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L583:
	movw	r2, #:lower16:.LANCHOR2
	movw	r0, #426
	str	r3, [r1, #8]
	movt	r2, #:upper16:.LANCHOR2
	str	r3, [r1, #12]
	ldrh	r3, [r2, r0]
	tst	r3, #4
	bne	.L616
.L584:
	mov	r3, #1
	strb	r3, [r5, #172]
	b	.L580
.L578:
	mov	r3, #0
	mov	r2, #8
	movw	r0, #:lower16:.LANCHOR2
	strb	r3, [r7, #1]
	ldrb	r1, [r5, #173]	@ zero_extendqisi2
	movt	r0, #:upper16:.LANCHOR2
	strb	r3, [r7, #6]
	strb	r3, [r7, #7]
	movw	r3, #402
	strh	r1, [r7, #2]	@ unaligned
	str	r2, [r4, #4]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L617
.L581:
	mov	r3, #0
	strb	r3, [r5, #172]
	b	.L580
.L588:
	mov	r3, #28672
	movt	r3, 148
	b	.L583
.L614:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC23
	add	r0, r0, #360
	ldrb	r3, [r8, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC23
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L574
.L617:
	ldrb	lr, [r5, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC22
	movw	r3, #:lower16:.LC21
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC22
	movw	r2, #:lower16:.LC24
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC24
	add	r0, r0, #384
	cmp	lr, #0
	moveq	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L581
.L616:
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #2
	bls	.L590
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L585:
	movw	r2, #:lower16:.LC25
	ldr	r0, .L618
	movt	r2, #:upper16:.LC25
	bl	__dynamic_dev_dbg
	b	.L584
.L590:
	mov	r3, #28672
	movt	r3, 148
	b	.L585
.L619:
	.align	2
.L618:
	.word	.LANCHOR2+408
	.fnend
	.size	ncm_notify_complete, .-ncm_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_free_buf, %function
rmnet_smd_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	str	r3, [r0, #424]
	str	r3, [r0, #428]
	str	r3, [r0, #432]
	str	r3, [r0, #436]
	str	r3, [r0, #440]
	str	r3, [r0, #444]
	str	r3, [r0, #448]
	str	r3, [r0, #452]
	ldr	r4, [r9, #140]!
	cmp	r4, r9
	ldr	r6, [r4]
	beq	.L621
.L622:
	mov	r0, r4
	sub	r8, r4, #36
	bl	list_del
	ldr	r7, [r5, #88]
	ldr	r0, [r4, #-36]
	mov	r4, r6
	bl	kfree
	mov	r1, r8
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r6
	ldr	r6, [r6]
	bne	.L622
.L621:
	mov	r9, r5
	ldr	r4, [r9, #148]!
	cmp	r4, r9
	ldr	r6, [r4]
	beq	.L623
.L624:
	mov	r0, r4
	sub	r8, r4, #36
	bl	list_del
	ldr	r7, [r5, #92]
	ldr	r0, [r4, #-36]
	mov	r4, r6
	bl	kfree
	mov	r1, r8
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r6
	ldr	r6, [r6]
	bne	.L624
.L623:
	mov	r8, r5
	ldr	r4, [r8, #108]!
	cmp	r4, r8
	ldr	r6, [r4]
	beq	.L625
.L626:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	mov	r4, r6
	bl	kfree
	mov	r0, r7
	bl	kfree
	cmp	r8, r6
	ldr	r6, [r6]
	bne	.L626
.L625:
	mov	r8, r5
	ldr	r4, [r8, #116]!
	cmp	r4, r8
	ldr	r6, [r4]
	beq	.L627
.L628:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	mov	r4, r6
	bl	kfree
	mov	r0, r7
	bl	kfree
	cmp	r8, r6
	ldr	r6, [r6]
	bne	.L628
.L627:
	ldr	r4, [r5, #96]
	ldr	r6, [r5, #100]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r6
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r3, [r3, #12]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
	.fnend
	.size	rmnet_smd_free_buf, .-rmnet_smd_free_buf
	.section	.rodata.str1.4
	.align	2
.LC27:
	.ascii	"rmnet control SDIO write failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_control_rx_work, %function
rmnet_sdio_control_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #32
	strd	r8, [sp, #16]
	sub	r8, r0, #112
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r9, [r0, #-136]
	b	.L637
.L635:
	bl	list_del
	ldr	r3, [r5, #-104]
	mov	r1, r6
	mov	r0, r7
	sub	r3, r3, #1
	str	r3, [r5, #-104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-4]
	cmn	r3, #19
	bne	.L639
	ldr	r3, [r5, #148]
	add	r3, r3, #1
	str	r3, [r5, #148]
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r10
	bl	kfree
.L637:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #-112]
	mov	r6, r0
	cmp	r4, r8
	mov	r0, r4
	sub	r10, r4, #8
	bne	.L635
	mov	r1, r6
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L639:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC27
	movt	r1, #:upper16:.LC27
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	r0, r0, #32
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	dev_err
	.fnend
	.size	rmnet_sdio_control_rx_work, .-rmnet_sdio_control_rx_work
	.section	.rodata.str1.4
	.align	2
.LC28:
	.ascii	"ctrl resp queue empty %02x.%02x v%04x i%04x l%d\012"
	.ascii	"\000"
	.align	2
.LC29:
	.ascii	"rmnet_mux ep0 enqueue err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_setup, %function
rmnet_mux_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #368]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldr	r8, [r2, #24]
	cmp	r3, #0
	ldrh	r7, [r1, #6]	@ unaligned
	ldr	r10, [r8, #4]
	beq	.L649
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r5, r0
	mov	r4, r1
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L642
	movw	r2, #41217
	cmp	r3, r2
	beq	.L643
	cmp	r3, #8448
	beq	.L656
.L659:
	movw	r5, #:lower16:.LANCHOR2
	movt	r5, #:upper16:.LANCHOR2
.L644:
	movw	r3, #498
	ldrh	r3, [r5, r3]
	tst	r3, #4
	mvneq	r4, #94
	bne	.L660
.L640:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L656:
	movw	r3, #:lower16:rmnet_mux_command_complete
	mov	r6, r7
	str	r0, [r10, #32]
	movt	r3, #:upper16:rmnet_mux_command_complete
	mov	r7, #0
	str	r3, [r10, #28]
.L645:
	ldrb	r3, [r10, #26]	@ zero_extendqisi2
	str	r6, [r10, #4]
	mov	r1, r10
	mov	r2, #32
	bfi	r3, r7, #1, #1
	strb	r3, [r10, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L640
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC29
	mov	r2, r4
	movt	r1, #:upper16:.LC29
	add	r0, r0, #32
	bl	dev_err
	b	.L640
.L643:
	cmp	r6, #0
	bne	.L659
	add	fp, r0, #364
	mov	r0, fp
	bl	_raw_spin_lock
	mov	r2, r5
	ldr	r3, [r2, #336]!
	cmp	r3, r2
	beq	.L661
	mov	r0, r3
	sub	r4, r3, #8
	str	r3, [sp, #20]
	bl	list_del
	ldr	r2, [r5, #344]
	mov	r0, fp
	sub	r2, r2, #1
	str	r2, [r5, #344]
	bl	_raw_spin_unlock
	ldr	r3, [sp, #20]
	ldr	r0, [r10]
	ldmdb	r3, {r1, r6}
	cmp	r7, r6
	movcc	r6, r7
	mov	r2, r6
	bl	memcpy
	ldr	r3, [sp, #20]
	movw	r2, #:lower16:rmnet_mux_response_complete
	str	r5, [r10, #32]
	movt	r2, #:upper16:rmnet_mux_response_complete
	str	r2, [r10, #28]
	ldr	r0, [r3, #-8]
	bl	kfree
	mov	r0, r4
	bl	kfree
	ldr	r3, [r5, #412]
	cmp	r6, r7
	movge	r7, #0
	movlt	r7, #1
	add	r3, r3, #1
	str	r3, [r5, #412]
	b	.L645
.L642:
	ldr	r3, [r0, #348]
	subs	r7, r7, #0
	movne	r7, #1
	ands	r6, r6, #1
	movne	r6, #0
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r0, #348]
	b	.L645
.L660:
	ldr	r1, [r8]
	str	r6, [sp, #4]
	movw	r2, #:lower16:.LC16
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC16
	str	r9, [sp, #8]
	ldr	r0, .L663
	ldrb	r3, [r4]	@ zero_extendqisi2
	mvn	r4, #94
	add	r1, r1, #32
	str	ip, [sp]
	str	r7, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L640
.L661:
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #474
	movt	r5, #:upper16:.LANCHOR2
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L662
.L647:
	mov	r0, fp
	bl	_raw_spin_unlock
	b	.L644
.L649:
	mvn	r4, #106
	b	.L640
.L662:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC28
	add	r0, r5, #456
	ldr	r1, [r8]
	movt	r2, #:upper16:.LC28
	stmib	sp, {r6, r9}
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	str	r7, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L647
.L664:
	.align	2
.L663:
	.word	.LANCHOR2+480
	.fnend
	.size	rmnet_mux_setup, .-rmnet_mux_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_write_complete, %function
diag_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	ldr	r8, [r1, #32]
	ldr	r3, [r5, #136]
	sub	r2, r3, #1
	str	r2, [r5, #136]
	ldr	r2, [r1, #44]
	cmp	r2, #0
	bne	.L666
	ldrh	r2, [r0, #20]
	ldr	r0, [r1, #4]
	cmp	r0, r2
	bcc	.L666
	udiv	ip, r0, r2
	mls	r0, r2, ip, r0
	cmp	r0, #0
	beq	.L679
.L666:
	add	r7, r5, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	add	r2, r5, #100
	ldr	r1, [r5, #104]
	add	r0, r4, #36
	bl	__list_add
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L680
.L667:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #124]
	cmp	r3, #0
	beq	.L665
	ldr	lr, [r3, #12]
	cmp	lr, #0
	beq	.L665
	mov	r2, r8
	mov	r1, #2
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r0, [r3, #16]
	mov	r3, lr
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L680:
	ldr	r3, [r4, #48]
	str	r3, [r8, #8]
	ldr	r3, [r4, #44]
	str	r3, [r8, #12]
	b	.L667
.L665:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L679:
	str	r3, [r5, #136]
	ldr	r3, [r1, #48]
	mov	r2, #32
	str	r0, [r1, #4]
	str	r3, [r8, #8]
	ldr	r3, [r1, #44]
	str	r3, [r8, #12]
	ldr	r0, [r5, #88]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
	.fnend
	.size	diag_write_complete, .-diag_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_read_complete, %function
diag_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r3, [r1, #48]
	ldr	r4, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r4, #108
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave
	mov	r3, r0
	add	r2, r4, #92
	ldr	r1, [r4, #96]
	add	r0, r5, #36
	mov	r5, r3
	bl	__list_add
	mov	r0, r7
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #124]
	ldr	r3, [r4, #132]
	cmp	r0, #0
	add	r3, r3, #1
	str	r3, [r4, #132]
	beq	.L681
	ldr	r3, [r0, #12]
	cmp	r3, #0
	beq	.L681
	mov	r2, r6
	mov	r1, #3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r0, [r0, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L681:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	diag_read_complete, .-diag_read_complete
	.section	.rodata.str1.4
	.align	2
.LC30:
	.ascii	"rmnet data rx enqueue err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_start_rx, %function
rmnet_smd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #164
	mov	r6, r0
	strd	r8, [sp, #16]
	add	r8, r0, #148
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r9, [r0, #84]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r4, r0
	b	.L691
.L693:
	bl	list_del
	mov	r1, r4
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6, #88]
	mov	r1, r10
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	r4, r0
	bne	.L697
.L691:
	ldr	r5, [r6, #148]
	cmp	r8, r5
	mov	r0, r5
	sub	r10, r5, #36
	bne	.L693
.L692:
	mov	r1, r4
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L697:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC30
	mov	r2, r10
	movt	r1, #:upper16:.LC30
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r6, #152]
	bl	__list_add
	b	.L692
	.fnend
	.size	rmnet_smd_start_rx, .-rmnet_smd_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	prealloc, %function
prealloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L719
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	sub	r4, r2, #1
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	cmp	r0, r5
	sub	r5, r5, #36
	bne	.L700
	b	.L722
.L703:
	cmn	r4, #1
	beq	.L702
.L700:
	ldr	r5, [r5, #36]
	mov	r3, r4
	sub	r4, r4, #1
	cmp	r6, r5
	sub	r5, r5, #36
	bne	.L703
	ldr	r2, [r7, #28]
	cmp	r3, #0
	ldrb	r5, [r2, #2]	@ zero_extendqisi2
	lsr	r5, r5, #7
	beq	.L707
.L704:
	movw	r2, #:lower16:tx_complete
	movw	r3, #:lower16:rx_complete
	cmp	r5, #0
	movt	r2, #:upper16:tx_complete
	movt	r3, #:upper16:rx_complete
	movne	r5, r2
	moveq	r5, r3
	b	.L708
.L706:
	str	r5, [r3, #28]
	ldr	r2, [r6]
	bl	__list_add
	cmp	r4, #0
	sub	r4, r4, #1
	beq	.L707
.L708:
	ldr	r3, [r7, #8]
	mov	r1, #32
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r6
	add	r0, r3, #36
	bne	.L706
	ldr	r3, [r6]
	cmp	r6, r3
	mvneq	r0, #11
	beq	.L698
.L707:
	mov	r0, #0
.L698:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L702:
	mov	r0, r5
	ldr	r4, [r0, #36]!
	bl	list_del
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	sub	r5, r4, #36
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r4
	bne	.L702
	b	.L707
.L722:
	ldr	r3, [r1, #28]
	ldrb	r5, [r3, #2]	@ zero_extendqisi2
	lsr	r5, r5, #7
	b	.L704
.L719:
	mvn	r0, #11
	bx	lr
	.fnend
	.size	prealloc, .-prealloc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_start_rx, %function
rmnet_mux_smd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #364
	mov	r6, r0
	strd	r8, [sp, #16]
	add	r8, r0, #112
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r9, [r0, #84]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r4, r0
	b	.L724
.L726:
	bl	list_del
	mov	r1, r4
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6, #88]
	mov	r1, r10
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	r4, r0
	bne	.L730
.L724:
	ldr	r5, [r6, #112]
	cmp	r8, r5
	mov	r0, r5
	sub	r10, r5, #36
	bne	.L726
.L725:
	mov	r1, r4
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L730:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC30
	mov	r2, r10
	movt	r1, #:upper16:.LC30
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r6, #116]
	bl	__list_add
	b	.L725
	.fnend
	.size	rmnet_mux_smd_start_rx, .-rmnet_mux_smd_start_rx
	.section	.rodata.str1.4
	.align	2
.LC31:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_fs.c\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_open, %function
ffs_epfile_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r0, #328]
	ldr	r3, [r2, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	bne	.L738
	str	r2, [r1, #124]
	ldr	r3, [r2, #36]
	add	r1, r3, #84
	.syntax divided
@ 45 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r1, r3, #88
	.syntax divided
@ 45 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #32]
	bx	lr
.L738:
	movw	r0, #:lower16:.LC31
	movw	r1, #946
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC31
	str	lr, [sp, #4]
	bl	warn_slowpath_null
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_epfile_open, .-ffs_epfile_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_mode_sense, %function
do_mode_sense:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #77]	@ zero_extendqisi2
	ldrb	r8, [r0, #76]	@ zero_extendqisi2
	ldr	r5, [r1]
	ldr	r7, [r0, #104]
	tst	r3, #247
	bne	.L749
	ldrb	r4, [r0, #78]	@ zero_extendqisi2
	lsr	r9, r4, #6
	and	r4, r4, #63
	cmp	r9, #3
	moveq	r3, #14592
	mvneq	r0, #21
	movteq	r3, 5
	streq	r3, [r7, #28]
	beq	.L739
	mov	r1, #8
	mov	r0, r5
	bl	__memzero
	sub	r3, r4, #63
	cmp	r8, #26
	ldrb	r2, [r7, #24]	@ zero_extendqisi2
	clz	r3, r3
	lsr	r3, r3, #5
	beq	.L755
	lsl	r2, r2, #6
	add	r6, r5, #8
	bic	r2, r2, #127
	movw	r10, #65535
	strb	r2, [r5, #3]
.L744:
	cmp	r4, #8
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L756
	cmp	r4, #42
	beq	.L748
.L749:
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [r7, #28]
.L739:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L755:
	lsl	r2, r2, #6
	add	r6, r5, #4
	mov	r10, #255
	bic	r2, r2, #127
	strb	r2, [r5, #2]
	b	.L744
.L756:
	mov	r3, #8
	mov	r1, #10
	add	r0, r6, #2
	strb	r3, [r6]
	strb	r1, [r6, #1]
	bl	__memzero
	cmp	r9, #1
	beq	.L746
	mvn	r3, #0
	mov	r2, #4
	strb	r2, [r6, #2]
	strb	r3, [r6, #4]
	strb	r3, [r6, #5]
	str	r3, [r6, #8]	@ unaligned
.L746:
	add	r0, r6, #12
.L747:
	sub	r0, r0, r5
	cmp	r10, r0
	blt	.L749
	cmp	r8, #26
	subeq	r3, r0, #1
	strbeq	r3, [r5]
	beq	.L739
	sub	r3, r0, #2
	ubfx	r2, r3, #8, #8
	strb	r2, [r5]
	strb	r3, [r5, #1]
	b	.L739
.L748:
	mov	r1, #26
	add	r0, r6, #2
	strb	r4, [r6]
	strb	r1, [r6, #1]
	bl	__memzero
	mov	r3, #2
	mov	r1, #4
	mov	r2, #40
	add	r0, r6, #28
	strb	r3, [r6, #2]
	strb	r3, [r6, #3]
	strb	r1, [r6, #4]
	strb	r2, [r6, #6]
	b	.L747
	.fnend
	.size	do_mode_sense, .-do_mode_sense
	.section	.rodata.str1.4
	.align	2
.LC32:
	.ascii	"<3>%s: device is already opened\012\000"
	.text
	.align	2
	.global	usb_rmnet_mux_ctrl_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_open, %function
usb_rmnet_mux_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r3, #2480]
	add	r7, r5, #364
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #352]
	mov	r1, r0
	cmp	r4, #0
	bne	.L761
	mov	r3, #1
	mov	r0, r7
	str	r3, [r5, #352]
	str	r5, [r6, #124]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
.L757:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L761:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	movw	r1, #:lower16:.LANCHOR3
	movw	r0, #:lower16:.LC32
	movt	r1, #:upper16:.LANCHOR3
	movt	r0, #:upper16:.LC32
	bl	printk
	mvn	r0, #15
	b	.L757
	.fnend
	.size	usb_rmnet_mux_ctrl_open, .-usb_rmnet_mux_ctrl_open
	.section	.rodata.str1.4
	.align	2
.LC33:
	.ascii	"<3>%s: ecm req %02x.%02x response err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_setup, %function
ecm_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	movw	r3, #17185
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	ip, [r1, #6]	@ unaligned
	.pad #20
	sub	sp, sp, #20
	ldrh	r1, [r1]	@ unaligned
	ldrh	r7, [r4, #2]	@ unaligned
	ldr	r2, [r0, #20]
	ldrh	r6, [r4, #4]	@ unaligned
	cmp	ip, #0
	cmpeq	r1, r3
	uxth	r9, r7
	ldr	r8, [r2, #24]
	beq	.L773
.L763:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #570
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r5, #94
	bne	.L774
.L762:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L773:
	ldrb	r3, [r0, #120]	@ zero_extendqisi2
	mov	r5, r0
	cmp	r3, r6
	bne	.L763
	movw	r10, #:lower16:.LANCHOR2
	movw	r3, #522
	ldr	fp, [r8, #4]
	movt	r10, #:upper16:.LANCHOR2
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L775
.L764:
	movw	r3, #546
	strh	r7, [r5, #98]	@ movhi
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L776
.L766:
	ldrb	r3, [fp, #26]	@ zero_extendqisi2
	mov	r2, #0
	mov	r1, fp
	str	r2, [fp, #4]
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [fp, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L762
	movw	r0, #:lower16:.LC33
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r5, [sp]
	ldr	r1, .L777
	movt	r0, #:upper16:.LC33
	ldrb	r2, [r4]	@ zero_extendqisi2
	bl	printk
	b	.L762
.L774:
	ldrb	lr, [r4, #1]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC16
	add	r0, r0, #552
	ldr	r1, [r8]
	movt	r2, #:upper16:.LC16
	str	r9, [sp, #4]
	ldrb	r3, [r4]	@ zero_extendqisi2
	mvn	r5, #94
	str	lr, [sp]
	add	r1, r1, #32
	str	r6, [sp, #8]
	str	ip, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L762
.L775:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC15
	mov	r3, r9
	movt	r2, #:upper16:.LC15
	add	r0, r10, #504
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L764
.L776:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	mov	r0, #0
	movw	r2, #:lower16:.LC17
	ldr	r1, [r8]
	movt	r2, #:upper16:.LC17
	str	r9, [sp, #4]
	str	r6, [sp, #8]
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	str	r0, [sp, #12]
	ldr	r0, .L777+4
	bl	__dynamic_dev_dbg
	b	.L766
.L778:
	.align	2
.L777:
	.word	.LANCHOR3+24
	.word	.LANCHOR2+528
	.fnend
	.size	ecm_qc_setup, .-ecm_qc_setup
	.section	.rodata.str1.4
	.align	2
.LC34:
	.ascii	"<3>%s: %s(): cdev or config is NULL.\012\000"
	.align	2
.LC35:
	.ascii	"<6>%s: RNDIS %s response error %d, %d/%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_response_complete, %function
rndis_qc_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r1, #44]
	ldr	r2, [r5, #20]
	cmp	r2, #0
	beq	.L780
	ldr	r7, [r2, #24]
	cmp	r7, #0
	beq	.L780
	cmn	r3, #104
	beq	.L782
	cmp	r3, #0
	mov	r4, r1
	mov	r6, r0
	beq	.L783
	cmn	r3, #108
	bne	.L784
.L782:
	mov	r3, #0
	str	r3, [r5, #164]
.L779:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L784:
	ldr	r2, [r4, #4]
	movw	r0, #:lower16:.LC35
	ldr	ip, [r4, #48]
	movt	r0, #:upper16:.LC35
	ldr	r1, .L807
	str	r2, [sp, #4]
	ldr	r2, [r6, #4]
	str	ip, [sp]
	bl	printk
.L783:
	ldr	r3, [r5, #156]
	cmp	r3, r6
	bne	.L779
	add	r6, r5, #164
	.syntax divided
@ 99 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L779
	ldr	r0, [r5, #156]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L779
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	ip, #:lower16:.LANCHOR2
	movw	r3, #594
	movt	ip, #:upper16:.LANCHOR2
	ldrh	r3, [ip, r3]
	tst	r3, #4
	beq	.L779
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC13
	mov	r3, r0
	movt	r2, #:upper16:.LC13
	add	r0, ip, #576
	add	r1, r1, #32
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__dynamic_dev_dbg
.L780:
	ldr	r2, .L807
	movw	r0, #:lower16:.LC34
	movt	r0, #:upper16:.LC34
	mov	r1, r2
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L808:
	.align	2
.L807:
	.word	.LANCHOR3+40
	.fnend
	.size	rndis_qc_response_complete, .-rndis_qc_response_complete
	.section	.rodata.str1.4
	.align	2
.LC36:
	.ascii	"<6>%s: notify/0 --> %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_response_available, %function
rndis_qc_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r5, r0, #164
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #160]
	ldr	r0, [r1]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L809
	mov	ip, #0
	mov	r2, #32
	stm	r0, {r3, ip}
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L817
.L809:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L817:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC36
	ldr	r1, .L818
	movt	r0, #:upper16:.LC36
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L819:
	.align	2
.L818:
	.word	.LANCHOR3+68
	.fnend
	.size	rndis_qc_response_available, .-rndis_qc_response_available
	.section	.rodata.str1.4
	.align	2
.LC37:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf\000"
	.align	2
.LC38:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf buffer\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_buffer_alloc, %function
f_audio_buffer_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L823
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L825
.L821:
	mov	r0, r5
	movw	r1, #32800
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L826
.L820:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L823:
	mov	r4, #16
	b	.L821
.L826:
	movw	r0, #:lower16:.LC38
	ldr	r1, .L827
	movt	r0, #:upper16:.LC38
	bl	printk
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L820
.L825:
	movw	r0, #:lower16:.LC37
	ldr	r1, .L827
	mvn	r4, #11
	movt	r0, #:upper16:.LC37
	bl	printk
	b	.L820
.L828:
	.align	2
.L827:
	.word	.LANCHOR3+96
	.fnend
	.size	f_audio_buffer_alloc, .-f_audio_buffer_alloc
	.section	.rodata.str1.4
	.align	2
.LC39:
	.ascii	"<6>conn_gadget_release\012\000"
	.align	2
.LC40:
	.ascii	"<6>list_for_each...\012\000"
	.section	.text.unlikely,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_release, %function
conn_gadget_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movw	r0, #:lower16:.LC39
	movw	r4, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC39
	movt	r4, #:upper16:.LANCHOR1
	movw	r6, #:lower16:.LC40
	bl	printk
	ldr	r0, [r4, #2484]
	mov	r5, r4
	movt	r6, #:upper16:.LC40
	add	r0, r0, #88
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2484]
	mov	r1, r0
	ldr	r7, [r3, #136]
	ldr	r4, [r7], #-36
	sub	r4, r4, #36
.L830:
	ldr	r0, [r5, #2484]
	add	r3, r7, #36
	add	r2, r0, #136
	add	r0, r0, #88
	cmp	r3, r2
	beq	.L833
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	printk
	ldr	r3, [r5, #2484]
	mov	r1, r7
	mov	r7, r4
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r0, [r5, #2484]
	add	r0, r0, #88
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r4, #36]
	mov	r1, r0
	sub	r4, r4, #36
	b	.L830
.L833:
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #2484]
	mov	r0, #0
	add	r2, r3, #116
	str	r0, [r3, #216]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	pop	{r4, r5, r6, r7, r8, pc}
	.fnend
	.size	conn_gadget_release, .-conn_gadget_release
	.section	.rodata.str1.4
	.align	2
.LC41:
	.ascii	"NCM16 selected\012\000"
	.align	2
.LC42:
	.ascii	"NCM32 selected\012\000"
	.align	2
.LC43:
	.ascii	"non-CRC mode selected\012\000"
	.align	2
.LC44:
	.ascii	"CRC mode selected\012\000"
	.align	2
.LC45:
	.ascii	"<3>usb:%s * Host asked current MaxDatagramSize, sen"
	.ascii	"ding %d *\012\000"
	.align	2
.LC46:
	.ascii	"ncm req%02x.%02x v%04x i%04x l%d\012\000"
	.align	2
.LC47:
	.ascii	"ncm req %02x.%02x response err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_setup, %function
ncm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r1]	@ unaligned
	movw	r1, #41353
	ldr	r3, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldrh	r9, [r4, #2]	@ unaligned
	ldrh	r10, [r4, #4]	@ unaligned
	rev16	r2, r2
	ldrh	r8, [r4, #6]	@ unaligned
	uxth	r2, r2
	ldr	r6, [r3, #24]
	uxth	r3, r9
	cmp	r2, r1
	ldr	r7, [r6, #4]
	bhi	.L835
	movw	r1, #41343
	mov	r5, r0
	cmp	r2, r1
	bgt	.L836
	movw	r1, #8515
	cmp	r2, r1
	beq	.L837
	sub	r2, r2, #8576
	sub	r2, r2, #4
	uxth	r1, r2
	cmp	r1, #6
	bhi	.L835
	cmp	r2, #6
	ldrls	pc, [pc, r2, asl #2]
	b	.L835
.L846:
	.word	.L849
	.word	.L835
	.word	.L848
	.word	.L835
	.word	.L847
	.word	.L835
	.word	.L845
.L841:
	subs	r2, r3, #0
	movne	r2, #1
	cmp	r8, #1
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L835
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, r10
	beq	.L877
.L835:
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #738
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	mvneq	r5, #94
	bne	.L878
.L834:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L836:
	sub	r2, r2, #41216
	sub	r2, r2, #128
	cmp	r2, #9
	ldrls	pc, [pc, r2, asl #2]
	b	.L835
.L840:
	.word	.L844
	.word	.L835
	.word	.L835
	.word	.L843
	.word	.L835
	.word	.L842
	.word	.L835
	.word	.L841
	.word	.L835
	.word	.L839
.L839:
	subs	r2, r3, #0
	movne	r2, #1
	cmp	r8, #1
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L835
	ldrb	r1, [r0, #148]	@ zero_extendqisi2
	cmp	r1, r10
	bne	.L835
	ldrb	r0, [r0, #180]	@ zero_extendqisi2
	movw	fp, #:lower16:.LANCHOR2
	mov	r9, #2
	ldr	r1, [r7]
	movt	fp, #:upper16:.LANCHOR2
	strb	r0, [r1]
	strb	r2, [r1, #1]
	b	.L851
.L849:
	cmp	r8, #0
	bne	.L835
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, r10
	bne	.L835
	cmp	r3, #0
	beq	.L852
	cmp	r3, #1
	bne	.L835
	movw	fp, #:lower16:.LANCHOR2
	movw	r2, #666
	ldr	r1, .L883
	movt	fp, #:upper16:.LANCHOR2
	ldrh	r2, [fp, r2]
	str	r1, [r0, #176]
	tst	r2, #4
	bne	.L879
.L854:
	mov	r9, #0
	b	.L851
.L848:
	cmp	r3, #0
	cmpeq	r8, #4
	bne	.L835
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, r10
	bne	.L835
	movw	r2, #:lower16:ncm_ep0out_complete
	mov	r9, #4
	movt	r2, #:upper16:ncm_ep0out_complete
	movw	fp, #:lower16:.LANCHOR2
	movt	fp, #:upper16:.LANCHOR2
	str	r9, [r7, #4]
	str	r2, [r7, #28]
	str	r0, [r7, #32]
	b	.L851
.L847:
	cmp	r3, #0
	cmpeq	r8, #2
	bne	.L835
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, r10
	bne	.L835
	movw	r2, #:lower16:ncm_setdgram_complete
	mov	r9, #2
	movt	r2, #:upper16:ncm_setdgram_complete
	movw	fp, #:lower16:.LANCHOR2
	movt	fp, #:upper16:.LANCHOR2
	str	r9, [r7, #4]
	str	r2, [r7, #28]
	str	r0, [r7, #32]
	b	.L851
.L845:
	cmp	r8, #0
	bne	.L835
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, r10
	bne	.L835
	cmp	r3, #0
	beq	.L855
	cmp	r3, #1
	bne	.L835
	movw	fp, #:lower16:.LANCHOR2
	movw	r2, #714
	strb	r3, [r0, #180]
	movt	fp, #:upper16:.LANCHOR2
	ldrh	r2, [fp, r2]
	tst	r2, #4
	moveq	r0, #16777216
	bne	.L880
.L857:
	ldr	r2, [r5, #176]
	mov	r9, #0
	ldr	r1, [r2, #4]
	bic	r1, r1, #16777216
	str	r1, [r2, #4]
	ldr	r1, [r5, #176]
	ldr	r2, [r1, #4]
	orr	r2, r2, r0
	str	r2, [r1, #4]
	b	.L851
.L844:
	subs	r2, r3, #0
	movne	r2, #1
	cmp	r8, #0
	moveq	r2, #1
	cmp	r2, #0
	bne	.L835
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, r10
	bne	.L835
	cmp	r8, #28
	ldr	r1, .L883+4
	movw	fp, #:lower16:.LANCHOR2
	movcc	r9, r8
	movcs	r9, #28
	ldr	r0, [r7]
	mov	r2, r9
	str	r3, [sp, #20]
	movt	fp, #:upper16:.LANCHOR2
	bl	memcpy
	ldr	r3, [sp, #20]
	b	.L851
.L843:
	subs	r2, r3, #0
	movne	r2, #1
	cmp	r8, #1
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L835
	ldrb	r1, [r0, #148]	@ zero_extendqisi2
	cmp	r1, r10
	bne	.L835
	ldr	ip, .L883+8
	movw	fp, #:lower16:.LANCHOR2
	mov	r9, #2
	ldr	r1, [r0, #176]
	movt	fp, #:upper16:.LANCHOR2
	ldr	r0, [r7]
	subs	r1, r1, ip
	movne	r1, #1
	strb	r1, [r0]
	strb	r2, [r0, #1]
	b	.L851
.L842:
	subs	r2, r3, #0
	movne	r2, #1
	cmp	r8, #3
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L835
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, r10
	bne	.L835
	ldr	r2, [r0, #112]
	movw	fp, #:lower16:.LANCHOR2
	mov	r9, #4
	ldr	r1, [r7]
	movt	fp, #:upper16:.LANCHOR2
	lsr	r0, r2, #16
	strb	r2, [r1]
	ubfx	r2, r2, #8, #8
	lsr	ip, r0, #8
	strb	r2, [r1, #1]
	strb	r0, [r1, #2]
	strb	ip, [r1, #3]
.L851:
	movw	r2, #762
	ldrh	r2, [fp, r2]
	tst	r2, #4
	bne	.L881
.L859:
	ldrb	r3, [r7, #26]	@ zero_extendqisi2
	str	r9, [r7, #4]
	mov	r1, r7
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r7, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L834
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC47
	str	r5, [sp]
	movt	r1, #:upper16:.LC47
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	b	.L834
.L837:
	cmp	r8, #0
	bne	.L835
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, r10
	bne	.L835
	movw	fp, #:lower16:.LANCHOR2
	movw	r2, #618
	movt	fp, #:upper16:.LANCHOR2
	ldrh	r2, [fp, r2]
	tst	r2, #4
	bne	.L882
.L850:
	strh	r9, [r5, #98]	@ movhi
	mov	r9, #0
	b	.L851
.L878:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC16
	add	r0, r0, #720
	ldr	r1, [r6]
	movt	r2, #:upper16:.LC16
	str	r3, [sp, #4]
	ldrb	r3, [r4]	@ zero_extendqisi2
	mvn	r5, #94
	str	ip, [sp]
	add	r1, r1, #32
	str	r10, [sp, #8]
	str	r8, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L834
.L881:
	ldr	r1, [r6]
	str	r3, [sp, #4]
	movw	r2, #:lower16:.LC46
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC46
	str	r10, [sp, #8]
	ldr	r0, .L883+12
	str	r8, [sp, #12]
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L859
.L855:
	movw	fp, #:lower16:.LANCHOR2
	movw	r2, #690
	strb	r3, [r0, #180]
	movt	fp, #:upper16:.LANCHOR2
	ldrh	r2, [fp, r2]
	tst	r2, #4
	moveq	r0, r3
	beq	.L857
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC43
	add	r0, fp, #672
	movt	r2, #:upper16:.LC43
	str	r3, [sp, #20]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [sp, #20]
	mov	r0, r3
	b	.L857
.L852:
	movw	fp, #:lower16:.LANCHOR2
	movw	r2, #642
	ldr	r1, .L883+8
	movt	fp, #:upper16:.LANCHOR2
	ldrh	r2, [fp, r2]
	str	r1, [r0, #176]
	tst	r2, #4
	beq	.L854
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC41
	add	r0, fp, #624
	movt	r2, #:upper16:.LC41
	mov	r9, r3
	str	r3, [sp, #20]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [sp, #20]
	b	.L851
.L882:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC15
	add	r0, fp, #600
	movt	r2, #:upper16:.LC15
	str	r3, [sp, #20]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [sp, #20]
	b	.L850
.L880:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC44
	add	r0, fp, #696
	movt	r2, #:upper16:.LC44
	str	r3, [sp, #20]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mov	r0, #16777216
	ldr	r3, [sp, #20]
	b	.L857
.L879:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC42
	add	r0, fp, #648
	movt	r2, #:upper16:.LC42
	str	r3, [sp, #20]
	mov	r9, r8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [sp, #20]
	b	.L851
.L877:
	ldrh	r1, [r0, #182]
	movw	r0, #:lower16:.LC45
	movw	fp, #:lower16:.LANCHOR2
	ldr	r2, [r7]
	movt	r0, #:upper16:.LC45
	str	r3, [sp, #20]
	movt	fp, #:upper16:.LANCHOR2
	mov	r9, #2
	lsr	ip, r1, #8
	strb	r1, [r2]
	ldr	r1, .L883+16
	strb	ip, [r2, #1]
	ldrh	r2, [r5, #182]
	bl	printk
	ldr	r3, [sp, #20]
	b	.L851
.L884:
	.align	2
.L883:
	.word	.LANCHOR0+92
	.word	.LANCHOR0+20
	.word	.LANCHOR0+48
	.word	.LANCHOR2+744
	.word	.LANCHOR3+120
	.fnend
	.size	ncm_setup, .-ncm_setup
	.section	.rodata.str1.4
	.align	2
.LC48:
	.ascii	"<3>usb:%s * Bad control-OUT transfer *\012\000"
	.align	2
.LC49:
	.ascii	"<3>usb:%s * Got wrong MTU SIZE (%d) from host *\012"
	.ascii	"\000"
	.align	2
.LC50:
	.ascii	"<3>usb:%s * MTU SIZE is larger than NTB SIZE (%d) f"
	.ascii	"rom host * \012\000"
	.align	2
.LC51:
	.ascii	"<3>************************************************"
	.ascii	"*\012\000"
	.align	2
.LC52:
	.ascii	"<3>usb:%s * Set MTU SIZE %d *\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_setdgram_complete, %function
ncm_setdgram_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR0
	mov	lr, #0
	movt	r3, #:upper16:.LANCHOR0
	ldr	ip, [r1, #32]
	ldr	r2, [r1, #44]
	mov	r4, r0
	str	lr, [r1, #32]
	ldr	lr, [r3, #24]
	ldr	r0, [r3, #36]
	cmp	r2, #0
	bne	.L886
	ldr	r2, [r1, #4]
	ldr	r5, [r1, #48]
	cmp	r5, r2
	beq	.L887
.L886:
	movw	r0, #:lower16:.LC48
	ldr	r1, .L896
	movt	r0, #:upper16:.LC48
	bl	printk
	b	.L888
.L887:
	ldr	r1, [r1]
	movw	r5, #7500
	ldrb	r6, [r1, #1]	@ zero_extendqisi2
	ldrb	r2, [r1]	@ zero_extendqisi2
	orr	r2, r2, r6, lsl #8
	sub	r1, r2, #1504
	sub	r1, r1, #10
	cmp	r1, r5
	bls	.L889
	movw	r0, #:lower16:.LC49
	ldr	r1, .L896
	movt	r0, #:upper16:.LC49
	bl	printk
	b	.L888
.L889:
	ldrh	r1, [r3, #44]
	cmp	r0, lr
	movcs	r0, lr
	add	r3, r1, #11
	rsb	r1, r1, #0
	and	r3, r3, r1
	add	r3, r3, #12
	add	r3, r3, r2
	cmp	r3, r0
	bls	.L890
	movw	r0, #:lower16:.LC50
	ldr	r1, .L896
	movt	r0, #:upper16:.LC50
	bl	printk
	movw	r0, #:lower16:.LC51
	movt	r0, #:upper16:.LC51
	bl	printk
	b	.L888
.L890:
	ldr	r3, [ip, #184]
	movw	r0, #:lower16:.LC52
	strh	r2, [ip, #182]	@ movhi
	movt	r0, #:upper16:.LC52
	cmp	r3, #0
	subne	r1, r2, #14
	strne	r1, [r3, #356]
	ldr	r1, .L896
	pop	{r4, r5, r6, lr}
	b	printk
.L888:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	pop	{r4, r5, r6, lr}
	ldr	r3, [r3, #24]
	bx	r3
.L897:
	.align	2
.L896:
	.word	.LANCHOR3+132
	.fnend
	.size	ncm_setdgram_complete, .-ncm_setdgram_complete
	.section	.rodata.str1.4
	.align	2
.LC53:
	.ascii	"<3>acc_complete_set_string, err %d\012\000"
	.align	2
.LC54:
	.ascii	"<3>unknown accessory string index %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_set_string, %function
acc_complete_set_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r1, #44]
	ldr	r0, [r0]
	ldr	r5, [r6, #48]
	cmp	r1, #0
	movwne	r0, #:lower16:.LC53
	movtne	r0, #:upper16:.LC53
	bne	.L913
	ldr	r1, [r0, #1640]
	cmp	r1, #5
	ldrls	pc, [pc, r1, asl #2]
	b	.L900
.L902:
	.word	.L907
	.word	.L906
	.word	.L905
	.word	.L904
	.word	.L903
	.word	.L901
.L901:
	add	r7, r0, #1376
	add	r7, r7, #5
.L908:
	cmp	r7, #0
	beq	.L900
	add	r4, r0, #88
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	cmp	r5, #255
	mov	r3, r0
	ldr	r1, [r6]
	movge	r5, #255
	mov	r0, r7
	mov	r2, r5
	mov	r6, r3
	bl	memcpy
	mov	r3, #0
	mov	r1, r6
	mov	r0, r4
	strb	r3, [r7, r5]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L907:
	add	r7, r0, #101
	b	.L908
.L906:
	add	r7, r0, #356
	add	r7, r7, #1
	b	.L908
.L905:
	add	r7, r0, #612
	add	r7, r7, #1
	b	.L908
.L904:
	add	r7, r0, #868
	add	r7, r7, #1
	b	.L908
.L903:
	add	r7, r0, #1120
	add	r7, r7, #5
	b	.L908
.L900:
	movw	r0, #:lower16:.LC54
	movt	r0, #:upper16:.LC54
.L913:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
	.fnend
	.size	acc_complete_set_string, .-acc_complete_set_string
	.section	.rodata.str1.4
	.align	2
.LC55:
	.ascii	"<6>acc_release\012\000"
	.align	2
.LC56:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_accessor"
	.ascii	"y.c\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_release, %function
acc_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC55
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC55
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #2488]
	add	r2, r2, #1648
	add	r2, r2, #4
	.syntax divided
@ 37 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, #0
	.syntax divided
@ 52 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	r0, [r2]
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r0, r1
	mov	r4, r3
	bne	.L915
	movw	r0, #:lower16:.LC56
	movw	r1, #799
	movt	r0, #:upper16:.LC56
	bl	warn_slowpath_null
.L915:
	ldr	r3, [r4, #2488]
	mov	r0, #0
	ldrb	r2, [r3, #100]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #100]
	pop	{r4, pc}
	.fnend
	.size	acc_release, .-acc_release
	.section	.rodata.str1.4
	.align	2
.LC57:
	.ascii	"<6>acc_open\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_open, %function
acc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC57
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC57
	mov	r4, r1
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2488]
	add	r3, r3, #1648
	add	r3, r3, #4
	.syntax divided
@ 37 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #1
	.syntax divided
@ 52 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	r1, [r3]
	strex	ip, r0, [r3]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #0
	bne	.L919
	ldr	r3, [r2, #2488]
	mov	r0, r1
	ldrb	r2, [r3, #100]	@ zero_extendqisi2
	bfi	r2, r1, #1, #1
	strb	r2, [r3, #100]
	str	r3, [r4, #124]
	pop	{r4, pc}
.L919:
	mvn	r0, #15
	pop	{r4, pc}
	.fnend
	.size	acc_open, .-acc_open
	.section	.rodata.str1.4
	.align	2
.LC58:
	.ascii	"<7>usb: %s buf=%s[%d], %s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sua_version_info_store, %function
sua_version_info_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	r6, [r0, #4]
	cmp	r4, #100
	mov	r1, r5
	movls	r2, r4
	movhi	r2, #100
	ldr	r0, [r6, #96]
	add	r0, r0, #235
	bl	memcpy
	ldr	ip, [r6, #96]
	movw	r0, #:lower16:.LC58
	mov	r2, r5
	ldr	r1, .L925
	mov	r3, #4
	movt	r0, #:upper16:.LC58
	add	ip, ip, #235
	str	ip, [sp]
	bl	printk
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L926:
	.align	2
.L925:
	.word	.LANCHOR3+156
	.fnend
	.size	sua_version_info_store, .-sua_version_info_store
	.section	.rodata.str1.4
	.align	2
.LC59:
	.ascii	"<6>%s: Close rndis QC file\000"
	.align	2
.LC60:
	.ascii	"<3>%s: rndis_qc_dev not present\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_release_dev, %function
rndis_qc_release_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC59
	push	{r4, lr}
	.save {r4, lr}
	ldr	r1, .L931
	movw	r4, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC59
	bl	printk
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L931+4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2496]
	mov	r4, r0
	cmp	r3, #0
	bne	.L928
	movw	r0, #:lower16:.LC60
	ldr	r1, .L931
	movt	r0, #:upper16:.LC60
	bl	printk
	ldr	r0, .L931+4
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	pop	{r4, pc}
.L928:
	add	r2, r3, #152
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, .L931+4
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	pop	{r4, pc}
.L932:
	.align	2
.L931:
	.word	.LANCHOR3+180
	.word	.LANCHOR1+2492
	.fnend
	.size	rndis_qc_release_dev, .-rndis_qc_release_dev
	.section	.rodata.str1.4
	.align	2
.LC61:
	.ascii	"<6>%s: Open rndis QC driver\012\000"
	.align	2
.LC62:
	.ascii	"<3>%s: rndis_qc_dev not created yet\012\000"
	.align	2
.LC63:
	.ascii	"<3>%s: Already opened\012\000"
	.align	2
.LC64:
	.ascii	"<6>%s: rndis QC file opened\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_open_dev, %function
rndis_qc_open_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC61
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LC61
	mov	r6, r1
	ldr	r1, .L939
	movw	r4, #:lower16:.LANCHOR1
	bl	printk
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L939+4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2496]
	mov	r5, r0
	cmp	r3, #0
	bne	.L934
	movw	r0, #:lower16:.LC62
	ldr	r1, .L939
	mvn	r4, #18
	movt	r0, #:upper16:.LC62
	bl	printk
	b	.L935
.L934:
	add	r2, r3, #152
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	ldreq	r3, [r4, #2496]
	moveq	r4, #0
	streq	r3, [r6, #124]
	beq	.L935
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC63
	ldr	r1, .L939
	mvn	r4, #15
	movt	r0, #:upper16:.LC63
	bl	printk
.L935:
	ldr	r0, .L939+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	bne	.L933
	movw	r0, #:lower16:.LC64
	ldr	r1, .L939
	movt	r0, #:upper16:.LC64
	bl	printk
.L933:
	mov	r0, r4
	pop	{r4, r5, r6, pc}
.L940:
	.align	2
.L939:
	.word	.LANCHOR3+204
	.word	.LANCHOR1+2492
	.fnend
	.size	rndis_qc_open_dev, .-rndis_qc_open_dev
	.section	.rodata.str1.4
	.align	2
.LC65:
	.ascii	"<6>mtp_release\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_release, %function
mtp_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC65
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC65
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2500]
	add	r2, r3, #108
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	pop	{r4, pc}
	.fnend
	.size	mtp_release, .-mtp_release
	.section	.rodata.str1.4
	.align	2
.LC66:
	.ascii	"<6>mtp_open\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_open, %function
mtp_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC66
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC66
	mov	r4, r1
	bl	printk
	movw	r0, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LANCHOR1
	ldr	r3, [r0, #2500]
	add	r2, r3, #108
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L944
	ldr	r3, [r0, #2500]
	ldr	r2, [r3, #104]
	cmp	r2, #0
	strne	r1, [r3, #104]
	b	.L946
.L944:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	pop	{r4, pc}
.L946:
	mov	r0, #0
	str	r3, [r4, #124]
	pop	{r4, pc}
	.fnend
	.size	mtp_open, .-mtp_open
	.section	.rodata.str1.4
	.align	2
.LC67:
	.ascii	"<3>CCID notify ep error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_notify_complete, %function
ccid_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r1, #44]
	cmp	r1, #0
	bne	.L957
.L949:
	bx	lr
.L957:
	add	r3, r1, #108
	bics	r3, r3, #4
	beq	.L949
	movw	r0, #:lower16:.LC67
	movt	r0, #:upper16:.LC67
	b	printk
	.fnend
	.size	ccid_notify_complete, .-ccid_notify_complete
	.section	.rodata.str1.4
	.align	2
.LC68:
	.ascii	"<6>%s: Close mbim file\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_release, %function
mbim_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC68
	push	{r4, lr}
	.save {r4, lr}
	ldr	r1, .L960
	movt	r0, #:upper16:.LC68
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2504]
	add	r2, r3, #92
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	pop	{r4, pc}
.L961:
	.align	2
.L960:
	.word	.LANCHOR3+224
	.fnend
	.size	mbim_release, .-mbim_release
	.section	.rodata.str1.4
	.align	2
.LC69:
	.ascii	"<6>%s: Open mbim driver\012\000"
	.align	2
.LC70:
	.ascii	"<3>%s: mbim_dev not created yet\012\000"
	.align	2
.LC71:
	.ascii	"<6>%s: Lock mbim_dev->open_excl for open\012\000"
	.align	2
.LC72:
	.ascii	"<3>%s: USB cable not connected\012\000"
	.align	2
.LC73:
	.ascii	"<6>%s: Exit, mbim file opened\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_open, %function
mbim_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC69
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LC69
	mov	r5, r1
	ldr	r1, .L969
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2504]
	cmp	r3, #0
	bne	.L963
	movw	r0, #:lower16:.LC70
	ldr	r1, .L969
	movt	r0, #:upper16:.LC70
	bl	printk
	mvn	r0, #18
	pop	{r4, r5, r6, pc}
.L963:
	mov	r4, r2
	add	r2, r3, #92
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L965
	movw	r0, #:lower16:.LC71
	ldr	r1, .L969
	movt	r0, #:upper16:.LC71
	bl	printk
	ldr	r3, [r4, #2504]
	ldr	r3, [r3, #88]
	cmp	r3, #0
	bne	.L967
	movw	r0, #:lower16:.LC72
	ldr	r1, .L969
	movt	r0, #:upper16:.LC72
	bl	printk
	b	.L967
.L965:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC63
	ldr	r1, .L969
	movt	r0, #:upper16:.LC63
	bl	printk
	mvn	r0, #15
	pop	{r4, r5, r6, pc}
.L967:
	ldr	r3, [r4, #2504]
	mov	r4, #0
	movw	r0, #:lower16:.LC73
	ldr	r1, .L969
	movt	r0, #:upper16:.LC73
	str	r3, [r5, #124]
	str	r4, [r3, #232]
	bl	printk
	mov	r0, r4
	pop	{r4, r5, r6, pc}
.L970:
	.align	2
.L969:
	.word	.LANCHOR3+240
	.fnend
	.size	mbim_open, .-mbim_open
	.section	.rodata.str1.4
	.align	2
.LC74:
	.ascii	"<3>%s: port:%pK port#%d unable to open sdio ch:%s\012"
	.ascii	"\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_open_work, %function
gsdio_open_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, r0
	str	lr, [sp, #-4]!
	.save {lr}
	ldr	ip, [r3, #-4]
	.pad #12
	sub	sp, sp, #12
	sub	r2, r3, #124
	ldr	r1, .L973
	movw	r0, #:lower16:.LC74
	ldr	r3, [r3, #-124]
	movt	r0, #:upper16:.LC74
	ldr	ip, [ip]
	str	ip, [sp]
	bl	printk
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L974:
	.align	2
.L973:
	.word	.LANCHOR3+252
	.fnend
	.size	gsdio_open_work, .-gsdio_open_work
	.section	.rodata.str1.4
	.align	2
.LC75:
	.ascii	"%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	remote_wakeup_show, %function
remote_wakeup_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	mov	r3, r0
	ldr	r0, [r0, #508]
	cmp	r0, #0
	beq	.L975
	ldr	r3, [r3, #500]
	movw	r2, #:lower16:.LC75
	mov	r0, r4
	movt	r2, #:upper16:.LC75
	mov	r1, #4096
	ldrb	r3, [r3, #-98]	@ zero_extendqisi2
	ubfx	r3, r3, #5, #1
	bl	snprintf
	mov	r0, #2
.L975:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	remote_wakeup_show, .-remote_wakeup_show
	.section	.rodata.str1.4
	.align	2
.LC76:
	.ascii	"CONFIGURED\000"
	.align	2
.LC77:
	.ascii	"DISCONNECTED\000"
	.align	2
.LC78:
	.ascii	"CONNECTED\000"
	.align	2
.LC79:
	.ascii	"<7>usb: %s buf=%s\012\000"
	.align	2
.LC80:
	.ascii	"%s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	state_show, %function
state_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r5, [r0, #8]
	cmp	r5, #0
	beq	.L984
	add	r7, r5, #60
	mov	r4, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	r1, r0
	cmp	r3, #0
	movwne	r4, #:lower16:.LC76
	movtne	r4, #:upper16:.LC76
	beq	.L988
.L983:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L982:
	movw	r0, #:lower16:.LC79
	mov	r2, r4
	ldr	r1, .L989
	movt	r0, #:upper16:.LC79
	bl	printk
	movw	r2, #:lower16:.LC80
	mov	r3, r4
	ldrd	r4, [sp]
	mov	r0, r6
	movt	r2, #:upper16:.LC80
	ldrd	r6, [sp, #8]
	mov	r1, #4096
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	snprintf
.L988:
	ldrb	r2, [r4, #48]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC78
	movw	r4, #:lower16:.LC77
	movt	r3, #:upper16:.LC78
	movt	r4, #:upper16:.LC77
	cmp	r2, #0
	movne	r4, r3
	b	.L983
.L984:
	movw	r4, #:lower16:.LC77
	movt	r4, #:upper16:.LC77
	b	.L982
.L990:
	.align	2
.L989:
	.word	.LANCHOR3+268
	.fnend
	.size	state_show, .-state_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	pm_qos_show, %function
pm_qos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	mov	r3, r0
	movw	r2, #:lower16:.LC80
	ldr	lr, [sp, #4]
	mov	r0, r4
	add	r3, r3, #52
	ldr	r4, [sp]
	movt	r2, #:upper16:.LC80
	mov	r1, #4096
	add	sp, sp, #8
	b	snprintf
	.fnend
	.size	pm_qos_show, .-pm_qos_show
	.section	.rodata.str1.4
	.align	2
.LC81:
	.ascii	"<7>usb: %s dev->enabled=%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	enable_show, %function
enable_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	mov	r4, r0
	movw	r0, #:lower16:.LC81
	ldr	r1, .L995
	ldrb	r2, [r4, #16]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC81
	bl	printk
	movw	r2, #:lower16:.LC75
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r5
	movt	r2, #:upper16:.LC75
	mov	r1, #4096
	bl	snprintf
	ldrd	r4, [sp]
	mov	r0, #2
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L996:
	.align	2
.L995:
	.word	.LANCHOR3+280
	.fnend
	.size	enable_show, .-enable_show
	.section	.rodata.str1.4
	.align	2
.LC82:
	.ascii	"%s\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iSerial_show, %function
iSerial_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC82
	ldr	r3, .L998
	movt	r2, #:upper16:.LC82
	mov	r1, #4096
	b	snprintf
.L999:
	.align	2
.L998:
	.word	.LANCHOR1+2220
	.fnend
	.size	iSerial_show, .-iSerial_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iProduct_show, %function
iProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC82
	ldr	r3, .L1001
	movt	r2, #:upper16:.LC82
	mov	r1, #4096
	b	snprintf
.L1002:
	.align	2
.L1001:
	.word	.LANCHOR1+2508
	.fnend
	.size	iProduct_show, .-iProduct_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iManufacturer_show, %function
iManufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC82
	ldr	r3, .L1004
	movt	r2, #:upper16:.LC82
	mov	r1, #4096
	b	snprintf
.L1005:
	.align	2
.L1004:
	.word	.LANCHOR1+2764
	.fnend
	.size	iManufacturer_show, .-iManufacturer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceProtocol_show, %function
bDeviceProtocol_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC75
	ldrb	r3, [r3, #142]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC75
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceProtocol_show, .-bDeviceProtocol_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceSubClass_show, %function
bDeviceSubClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC75
	ldrb	r3, [r3, #141]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC75
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceSubClass_show, .-bDeviceSubClass_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceClass_show, %function
bDeviceClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC75
	ldrb	r3, [r3, #140]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC75
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceClass_show, .-bDeviceClass_show
	.section	.rodata.str1.4
	.align	2
.LC83:
	.ascii	"%04x\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdDevice_show, %function
bcdDevice_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC83
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC83
	ldrh	r3, [r3, #148]
	mov	r1, #4096
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	bcdDevice_show, .-bcdDevice_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idProduct_show, %function
idProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC83
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC83
	ldrh	r3, [r3, #146]
	mov	r1, #4096
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	idProduct_show, .-idProduct_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idVendor_show, %function
idVendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC83
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC83
	ldrh	r3, [r3, #144]
	mov	r1, #4096
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	idVendor_show, .-idVendor_show
	.section	.rodata.str1.4
	.align	2
.LC84:
	.ascii	"%d %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_pcm_show, %function
audio_source_pcm_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC84
	mov	r1, #4096
	movt	r2, #:upper16:.LC84
	mov	r0, r4
	ldm	ip, {r3, ip}
	str	ip, [sp]
	bl	snprintf
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_source_pcm_show, .-audio_source_pcm_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_inquiry_show, %function
mass_storage_inquiry_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC80
	mov	r0, r4
	movt	r2, #:upper16:.LC80
	mov	r1, #4096
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #96]
	add	r3, r3, #180
	b	snprintf
	.fnend
	.size	mass_storage_inquiry_show, .-mass_storage_inquiry_show
	.section	.rodata.str1.4
	.align	2
.LC85:
	.ascii	"%02x:%02x:%02x:%02x:%02x:%02x\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ethaddr_show, %function
ecm_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC85
	mov	r1, #4096
	movt	r2, #:upper16:.LC85
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_ethaddr_show, .-ecm_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_transports_show, %function
ecm_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC80
	ldr	r3, .L1022
	movt	r2, #:upper16:.LC80
	mov	r1, #4096
	b	snprintf
.L1023:
	.align	2
.L1022:
	.word	.LANCHOR1+3020
	.fnend
	.size	ecm_transports_show, .-ecm_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_max_pkt_per_xfer_show, %function
rndis_max_pkt_per_xfer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC75
	mov	r0, r4
	movt	r2, #:upper16:.LC75
	mov	r1, #4096
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #12]	@ zero_extendqisi2
	b	snprintf
	.fnend
	.size	rndis_max_pkt_per_xfer_show, .-rndis_max_pkt_per_xfer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_vendorID_show, %function
rndis_vendorID_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC83
	mov	r0, r4
	movt	r2, #:upper16:.LC83
	mov	r1, #4096
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #8]
	b	snprintf
	.fnend
	.size	rndis_vendorID_show, .-rndis_vendorID_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_ethaddr_show, %function
rndis_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC85
	mov	r1, #4096
	movt	r2, #:upper16:.LC85
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_ethaddr_show, .-rndis_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_wceis_show, %function
rndis_wceis_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC75
	mov	r0, r4
	movt	r2, #:upper16:.LC75
	mov	r1, #4096
	ldrb	r3, [r3, #269]	@ zero_extendqisi2
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_wceis_show, .-rndis_wceis_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_manufacturer_show, %function
rndis_manufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC80
	mov	r0, r4
	movt	r2, #:upper16:.LC80
	mov	r1, #4096
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	add	r3, r3, #13
	b	snprintf
	.fnend
	.size	rndis_manufacturer_show, .-rndis_manufacturer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_xport_names_show, %function
rmnet_xport_names_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC80
	ldr	r3, .L1035
	movt	r2, #:upper16:.LC80
	mov	r1, #4096
	b	snprintf
.L1036:
	.align	2
.L1035:
	.word	.LANCHOR1+3072
	.fnend
	.size	rmnet_xport_names_show, .-rmnet_xport_names_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_transports_show, %function
rmnet_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC80
	ldr	r3, .L1038
	movt	r2, #:upper16:.LC80
	mov	r1, #4096
	b	snprintf
.L1039:
	.align	2
.L1038:
	.word	.LANCHOR1+3124
	.fnend
	.size	rmnet_transports_show, .-rmnet_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_transports_show, %function
mbim_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC80
	ldr	r3, .L1041
	movt	r2, #:upper16:.LC80
	mov	r1, #4096
	b	snprintf
.L1042:
	.align	2
.L1041:
	.word	.LANCHOR1+3176
	.fnend
	.size	mbim_transports_show, .-mbim_transports_show
	.section	.rodata.str1.4
	.align	2
.LC86:
	.ascii	"common->fsg is NULL in %s at %u\012\000"
	.align	2
.LC87:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_mass_sto"
	.ascii	"rage.c\000"
	.align	2
.LC88:
	.ascii	"error in submission: %s --> %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_in_transfer, %function
start_in_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L1044
	ldr	r0, [r4, #88]
	mov	r5, r1
	ldr	r7, [r1, #16]
	ldr	r6, [r4, #100]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq
	mov	r3, #1
	mov	r2, #2
	str	r2, [r5, #4]
	str	r3, [r5, #20]
	ldr	r0, [r4, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L1056
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #4]
	str	r2, [r5, #20]
	beq	.L1056
	cmn	r3, #95
	bne	.L1048
	ldr	r2, [r7, #4]
	cmp	r2, #0
	bne	.L1048
.L1056:
	mov	r0, #1
.L1046:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1048:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC88
	movt	r1, #:upper16:.LC88
	ldr	r2, [r6, #4]
	add	r0, r0, #32
	bl	dev_warn
	b	.L1056
.L1044:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC86
	mov	r3, #796
	ldr	r2, .L1057
	movt	r1, #:upper16:.LC86
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC87
	movw	r1, #550
	movt	r0, #:upper16:.LC87
	bl	warn_slowpath_null
	mov	r0, r4
	b	.L1046
.L1058:
	.align	2
.L1057:
	.word	.LANCHOR3+292
	.fnend
	.size	start_in_transfer, .-start_in_transfer
	.section	.rodata.str1.4
	.align	2
.LC89:
	.ascii	"failed to override string ID\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	override_id, %function
override_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r1
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1060
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L1061
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC89
	movt	r1, #:upper16:.LC89
	add	r0, r0, #32
	bl	dev_warn
	b	.L1060
.L1061:
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r0, #48]
	strb	r3, [r1]
.L1060:
	ldrb	r0, [r4]	@ zero_extendqisi2
	pop	{r4, pc}
	.fnend
	.size	override_id, .-override_id
	.section	.rodata.str1.4
	.align	2
.LC90:
	.ascii	"rmnet %s response error %d, %d/%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_response_complete, %function
rmnet_sdio_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmp	r3, #0
	bxeq	lr
	mov	r2, r1
	add	r1, r3, #108
	bics	r1, r1, #4
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC90
	str	lr, [sp, #4]
	ldr	ip, [r2, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r2, #32]
	movt	r1, #:upper16:.LC90
	ldr	lr, [r2, #48]
	ldr	r2, [r0, #4]
	ldr	r0, [r4, #84]
	ldr	r0, [r0]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r0, r0, #32
	bl	_dev_info
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_sdio_response_complete, .-rmnet_sdio_response_complete
	.section	.rodata.str1.4
	.align	2
.LC91:
	.ascii	"rmnet_mux %s response error %d, %d/%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_response_complete, %function
rmnet_mux_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmp	r3, #0
	bxeq	lr
	mov	r2, r1
	add	r1, r3, #108
	bics	r1, r1, #4
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC91
	str	lr, [sp, #4]
	ldr	ip, [r2, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r2, #32]
	movt	r1, #:upper16:.LC91
	ldr	lr, [r2, #48]
	ldr	r2, [r0, #4]
	ldr	r0, [r4, #84]
	ldr	r0, [r0]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r0, r0, #32
	bl	_dev_info
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_mux_response_complete, .-rmnet_mux_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_show_suspended, %function
composite_show_suspended:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldrb	r2, [r0, #16]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC75
	mov	r0, r4
	movt	r1, #:upper16:.LC75
	and	r2, r2, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	composite_show_suspended, .-composite_show_suspended
	.section	.rodata.str1.4
	.align	2
.LC92:
	.ascii	"%01x\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb30en_show, %function
usb30en_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC92
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r2
	movt	r1, #:upper16:.LC92
	ldrb	r2, [r3, #3226]	@ zero_extendqisi2
	b	sprintf
	.fnend
	.size	usb30en_show, .-usb30en_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_ro, %function
fsg_show_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, r0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r3, #-48]
	movw	r1, #:lower16:.LC75
	movt	r1, #:upper16:.LC75
	cmp	r2, #0
	ldrb	r2, [r3, #-24]	@ zero_extendqisi2
	ubfxne	r2, r2, #1, #1
	andeq	r2, r2, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_ro, .-fsg_show_ro
	.section	.rodata.str1.4
	.align	2
.LC93:
	.ascii	"%u\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_nofua, %function
fsg_show_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC93
	str	lr, [sp, #4]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC93
	mov	r0, r2
	lsr	r2, r3, #7
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_nofua, .-fsg_show_nofua
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_cdrom, %function
fsg_show_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC75
	str	lr, [sp, #4]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC75
	mov	r0, r2
	ubfx	r2, r3, #3, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_cdrom, .-fsg_show_cdrom
	.section	.rodata.str1.4
	.align	2
.LC94:
	.ascii	", H%c=%u\000"
	.align	2
.LC95:
	.ascii	"%s is buggy! Expected length %d but we got %d\012\000"
	.align	2
.LC96:
	.ascii	"using LUN %d from CBW, not LUN %d from CDB\012\000"
	.align	2
.LC97:
	.ascii	"unsupported LUN %d\012\000"
	.section	.rodata.cst4,"aM",%progbits,4
	.align	2
.LC98:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	check_command, %function
check_command:
	.fnstart
	@ args = 8, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	mov	ip, #0
	strd	r6, [sp, #8]
	mov	r5, r1
	mov	r6, r3
	strd	r8, [sp, #16]
	mov	r8, r2
	str	lr, [sp, #24]
	ldrb	r7, [r0, #77]	@ zero_extendqisi2
	.pad #36
	sub	sp, sp, #36
	ldr	r0, [r0, #120]
	movw	lr, #:lower16:.LC98
	movt	lr, #:upper16:.LC98
	ldr	r9, [sp, #68]
	ldr	lr, [lr]
	str	lr, [sp, #28]
	mov	lr,#0
	strb	ip, [sp, #8]
	ldr	r3, [r4, #124]
	lsr	r7, r7, #5
	cmp	r0, ip
	bne	.L1150
.L1099:
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L1100
	cmp	r2, r3
	bls	.L1101
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r8, r0
	str	r3, [r4, #128]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	orr	r2, r2, #4
	strb	r2, [r4, #144]
	beq	.L1102
	cmp	r3, #0
	beq	.L1102
.L1105:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #21
	orr	r3, r3, #4
	strb	r3, [r4, #144]
	b	.L1098
.L1100:
	str	r3, [r4, #136]
	str	r3, [r4, #140]
.L1102:
	ldr	ip, [r4, #72]
	cmp	ip, r5
	beq	.L1104
	blt	.L1105
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #786
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1151
.L1106:
	mov	r5, ip
.L1104:
	ldr	r3, [r4, #96]
	cmp	r3, r7
	beq	.L1107
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #810
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1152
.L1107:
	ldr	r1, [r4, #104]
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L1108
	cmp	r3, #3
	beq	.L1109
	ldrb	r2, [r1, #24]	@ zero_extendqisi2
	mov	r3, #0
	ldr	ip, [r1, #36]
	str	r3, [r1, #28]
	str	r3, [r1, #32]
	bfi	r2, r3, #6, #1
	cmp	ip, r3
	strb	r2, [r1, #24]
	beq	.L1109
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	cmp	r2, #18
	cmpne	r2, #3
	mvnne	r0, #21
	strne	ip, [r1, #28]
	strne	r3, [r1, #36]
	bne	.L1098
.L1109:
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	r5, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	ble	.L1116
.L1118:
	mov	r2, #1
	add	r0, r4, #76
	mov	r3, r2
.L1115:
	ldrb	ip, [r0, #1]!	@ zero_extendqisi2
	cmp	ip, #0
	beq	.L1113
	ands	ip, r6, r3, lsl r2
	beq	.L1153
.L1113:
	add	r2, r2, #1
	cmp	r5, r2
	bgt	.L1115
	cmp	r1, #0
	beq	.L1117
.L1116:
	ldr	r3, [r1]
	ldr	r2, [sp, #64]
	cmp	r3, #0
	movne	r3, #0
	andeq	r3, r2, #1
	cmp	r3, #0
	movne	r3, #14848
	mvnne	r0, #21
	movtne	r3, 2
	strne	r3, [r1, #28]
	bne	.L1098
.L1117:
	mov	r0, #0
.L1098:
	movw	r3, #:lower16:.LC98
	movt	r3, #:upper16:.LC98
	ldr	r2, [r3]
	ldr	r3, [sp, #28]
	eors	r2, r3, r2
	bne	.L1154
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L1150:
	movw	r2, #:lower16:.LANCHOR3
	movw	r1, #:lower16:.LC94
	movt	r2, #:upper16:.LANCHOR3
	movt	r1, #:upper16:.LC94
	add	r0, r2, r0
	ldrb	r2, [r0, #312]	@ zero_extendqisi2
	add	r0, sp, #8
	bl	sprintf
	ldr	r0, [r4, #120]
	ldr	r3, [r4, #124]
	b	.L1099
.L1153:
	cmp	r1, #0
	beq	.L1149
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [r1, #28]
	b	.L1098
.L1108:
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r3, #18
	cmpne	r3, #3
	bfi	r2, r1, #4, #1
	strb	r2, [r4, #144]
	bne	.L1155
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	r5, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	bgt	.L1118
	b	.L1117
.L1155:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #834
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L1149
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC97
	add	r0, r0, #816
	movt	r2, #:upper16:.LC97
	ldr	r3, [r4, #96]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L1149:
	mvn	r0, #21
	b	.L1098
.L1151:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC95
	mov	r3, r9
	add	r0, r0, #768
	movt	r2, #:upper16:.LC95
	stm	sp, {r5, ip}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	ip, [r4, #72]
	b	.L1106
.L1152:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC96
	add	r0, r0, #792
	movt	r2, #:upper16:.LC96
	str	r7, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L1107
.L1101:
	cmp	r8, r0
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	bne	.L1105
	b	.L1102
.L1154:
	bl	__stack_chk_fail
	.fnend
	.size	check_command, .-check_command
	.section	.rodata.str1.4
	.align	2
.LC99:
	.ascii	"%s\015\012\000"
	.align	2
.LC100:
	.ascii	"<7>usb: %s version %s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sua_version_info_show, %function
sua_version_info_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC99
	mov	r0, r4
	movt	r1, #:upper16:.LC99
	ldr	r2, [r3, #96]
	add	r2, r2, #235
	bl	sprintf
	mov	r3, r0
	movw	r0, #:lower16:.LC100
	ldr	r1, .L1158
	mov	r2, r4
	movt	r0, #:upper16:.LC100
	mov	r4, r3
	bl	printk
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1159:
	.align	2
.L1158:
	.word	.LANCHOR3+316
	.fnend
	.size	sua_version_info_show, .-sua_version_info_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_product_show, %function
mass_storage_product_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC80
	mov	r0, r4
	movt	r1, #:upper16:.LC80
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #96]
	add	r2, r2, #218
	b	sprintf
	.fnend
	.size	mass_storage_product_show, .-mass_storage_product_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_vendor_show, %function
mass_storage_vendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC80
	mov	r0, r4
	movt	r1, #:upper16:.LC80
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #96]
	add	r2, r2, #209
	b	sprintf
	.fnend
	.size	mass_storage_vendor_show, .-mass_storage_vendor_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_instances_show, %function
acm_instances_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC75
	mov	r0, r4
	movt	r1, #:upper16:.LC75
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3]
	b	sprintf
	.fnend
	.size	acm_instances_show, .-acm_instances_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_alsa_show, %function
midi_alsa_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC84
	mov	r0, r4
	movt	r1, #:upper16:.LC84
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrd	r2, [r3]
	b	sprintf
	.fnend
	.size	midi_alsa_show, .-midi_alsa_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	count_configs, %function
count_configs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L1169
	mov	r5, r0
	ldr	r4, [r5, #36]!
	cmp	r5, r4
	sub	r4, r4, #28
	beq	.L1185
.L1170:
	mov	r3, #0
.L1179:
	ldrb	r2, [r4, #45]	@ zero_extendqisi2
	add	r1, r3, #1
	mov	r0, r4
	tst	r2, #4
	beq	.L1176
	bl	count_multi_config
	ldr	r4, [r4, #28]
	mov	r3, r0
	cmp	r5, r4
	sub	r4, r4, #28
	bne	.L1179
.L1178:
	mov	r0, r3
.L1168:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1169:
	ldr	r3, [r3, #16]
	cmp	r3, #3
	beq	.L1184
	sub	r3, r3, #5
	mov	ip, #1
	clz	r3, r3
	mov	r2, #0
	lsr	r3, r3, #5
.L1172:
	mov	r5, r0
	ldr	r4, [r5, #36]!
	cmp	r1, #6
	moveq	r2, ip
	cmp	r5, r4
	sub	r4, r4, #28
	beq	.L1185
	cmp	r3, #0
	movne	r3, #0
	beq	.L1189
.L1174:
	ldrb	r2, [r4, #45]	@ zero_extendqisi2
	add	r1, r3, #1
	mov	r0, r4
	tst	r2, #1
	beq	.L1182
	bl	count_multi_config
	ldr	r4, [r4, #28]
	mov	r3, r0
	cmp	r5, r4
	sub	r4, r4, #28
	bne	.L1174
	b	.L1178
.L1182:
	ldr	r4, [r4, #28]
	cmp	r5, r4
	sub	r4, r4, #28
	bne	.L1174
	b	.L1178
.L1176:
	ldr	r4, [r4, #28]
	cmp	r5, r4
	sub	r4, r4, #28
	bne	.L1179
	b	.L1178
.L1189:
	cmp	r2, #0
	beq	.L1170
.L1175:
	ldrb	r2, [r4, #45]	@ zero_extendqisi2
	add	r1, r3, #1
	mov	r0, r4
	tst	r2, #2
	beq	.L1180
	bl	count_multi_config
	ldr	r4, [r4, #28]
	mov	r3, r0
	cmp	r5, r4
	sub	r4, r4, #28
	bne	.L1175
	b	.L1178
.L1180:
	ldr	r4, [r4, #28]
	cmp	r5, r4
	sub	r4, r4, #28
	bne	.L1175
	b	.L1178
.L1184:
	mov	ip, #0
	mov	r2, #1
	mov	r3, ip
	b	.L1172
.L1185:
	mov	r0, #0
	b	.L1168
	.fnend
	.size	count_configs, .-count_configs
	.section	.rodata.str1.4
	.align	2
.LC101:
	.ascii	"/home/jprim/hlte/lolz/include/linux/netdevice.h\000"
	.align	2
.LC102:
	.ascii	"<6>netif_stop_queue() cannot be called before regis"
	.ascii	"ter_netdev()\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_stop, %function
eth_qc_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #576]
	ldr	r6, [r0, #1156]
	cmp	r1, #0
	beq	.L1202
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L1193:
	add	r5, r4, #1152
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r4, r0
	cmp	r3, #0
	beq	.L1192
	ldr	r3, [r6, #116]
	cmp	r3, #0
	beq	.L1192
	mov	r0, r6
	blx	r3
.L1192:
	mov	r0, r5
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1202:
	movw	r0, #:lower16:.LC101
	movw	r1, #1847
	movt	r0, #:upper16:.LC101
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC102
	movt	r0, #:upper16:.LC102
	bl	printk
	b	.L1193
	.fnend
	.size	eth_qc_stop, .-eth_qc_stop
	.section	.rodata.str1.4
	.align	2
.LC103:
	.ascii	"qdss_ctrl_read_complete\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_ctrl_read_complete, %function
qdss_ctrl_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #858
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r4, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, r2]
	ldr	r5, [r0]
	ldr	r7, [r1, #32]
	tst	r2, #4
	bne	.L1210
.L1204:
	ldr	r3, [r4, #48]
	add	r8, r5, #188
	mov	r0, r8
	str	r3, [r7, #8]
	ldr	r3, [r4, #44]
	str	r3, [r7, #12]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	add	r2, r5, #140
	ldr	r1, [r5, #144]
	add	r0, r4, #36
	bl	__list_add
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	lr, [r5, #124]
	cmp	lr, #0
	beq	.L1203
	mov	r2, r7
	mov	ip, lr
	ldrd	r6, [sp, #8]
	mov	r3, #0
	mov	r1, #2
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r5, #128]
	ldrd	r4, [sp]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L1203:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1210:
	movw	r1, #:lower16:.LC103
	add	r0, r3, #840
	movt	r1, #:upper16:.LC103
	bl	__dynamic_pr_debug
	b	.L1204
	.fnend
	.size	qdss_ctrl_read_complete, .-qdss_ctrl_read_complete
	.section	.rodata.str1.4
	.align	2
.LC104:
	.ascii	"qdss_ctrl_write_complete\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_ctrl_write_complete, %function
qdss_ctrl_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #882
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r4, r1
	str	r8, [sp, #16]
	mov	r6, r0
	str	lr, [sp, #20]
	ldrh	r2, [r3, r2]
	ldr	r5, [r0]
	ldr	r7, [r1, #32]
	tst	r2, #4
	bne	.L1223
.L1212:
	ldr	r3, [r4, #44]
	cmp	r3, #0
	bne	.L1213
	ldrh	r3, [r6, #20]
	ldr	r2, [r4, #4]
	cmp	r2, r3
	bcc	.L1213
	udiv	r1, r2, r3
	mls	r3, r3, r1, r2
	cmp	r3, #0
	beq	.L1224
.L1213:
	add	r8, r5, #188
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	add	r2, r5, #148
	ldr	r1, [r5, #152]
	add	r0, r4, #36
	bl	__list_add
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L1225
.L1214:
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	lr, [r5, #124]
	cmp	lr, #0
	beq	.L1211
	mov	r2, r7
	mov	ip, lr
	ldrd	r6, [sp, #8]
	mov	r3, #0
	mov	r1, #4
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r5, #128]
	ldrd	r4, [sp]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L1225:
	ldr	r3, [r4, #48]
	str	r3, [r7, #8]
	ldr	r3, [r4, #44]
	str	r3, [r7, #12]
	b	.L1214
.L1211:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1224:
	ldr	r0, [r4, #48]
	str	r3, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	str	r0, [r7, #8]
	ldr	r3, [r4, #44]
	str	r3, [r7, #12]
	ldr	r0, [r5, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
.L1223:
	movw	r1, #:lower16:.LC104
	add	r0, r3, #864
	movt	r1, #:upper16:.LC104
	bl	__dynamic_pr_debug
	b	.L1212
	.fnend
	.size	qdss_ctrl_write_complete, .-qdss_ctrl_write_complete
	.section	.rodata.str1.4
	.align	2
.LC105:
	.ascii	"<3>%s: port is null\012\000"
	.align	2
.LC106:
	.ascii	"%s: USB disconnected\012\000"
	.align	2
.LC107:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d\012"
	.ascii	"\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_start_rx, %function
gsmd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	subs	r7, r0, #0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	beq	.L1241
	add	r8, r7, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #68]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1242
	add	r10, r7, #12
	mov	fp, #2048
	ldr	r9, [r3, #92]
	b	.L1230
.L1244:
	ldr	r4, [r7, #12]
	cmp	r10, r4
	mov	r0, r4
	sub	r6, r4, #36
	beq	.L1229
	bl	list_del
	mov	r1, r5
	mov	r0, r8
	str	fp, [r4, #-32]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r9, #8]
	mov	r1, r6
	mov	r2, #208
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	mov	r6, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	cmp	r6, #0
	mov	r5, r0
	bne	.L1243
.L1230:
	ldr	r3, [r7, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	bne	.L1244
.L1229:
	mov	r1, r5
	mov	r0, r8
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L1242:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #906
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L1229
	movw	r1, #:lower16:.LC106
	ldr	r2, .L1245
	add	r0, r0, #888
	movt	r1, #:upper16:.LC106
	bl	__dynamic_pr_debug
	b	.L1229
.L1241:
	ldr	r1, .L1245
	movw	r0, #:lower16:.LC105
	movt	r0, #:upper16:.LC105
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L1243:
	movw	r0, #:lower16:.LC107
	mov	r2, r7
	ldr	r1, .L1245
	movt	r0, #:upper16:.LC107
	ldr	r3, [r7]
	bl	printk
	mov	r2, r10
	mov	r0, r4
	ldr	r1, [r7, #16]
	bl	__list_add
	b	.L1229
.L1246:
	.align	2
.L1245:
	.word	.LANCHOR3+340
	.fnend
	.size	gsmd_start_rx, .-gsmd_start_rx
	.section	.rodata.str1.4
	.align	2
.LC108:
	.ascii	"<3>%s: port->port_usb is NULL\000"
	.align	2
.LC109:
	.ascii	"%s: dequeue\012\000"
	.align	2
.LC110:
	.ascii	"<3>%s: error dequeuing transfer, %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_stop, %function
gbam_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bne	.L1248
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L1269
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #930
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1270
.L1250:
	ldr	r0, [r3, #88]
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	beq	.L1254
	movw	r0, #:lower16:.LC110
	ldr	r1, .L1274
	movt	r0, #:upper16:.LC110
	bl	printk
	b	.L1254
.L1248:
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L1271
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #954
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1272
.L1253:
	ldr	r0, [r3, #84]
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	bne	.L1273
.L1254:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L1271:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r1, .L1274+4
	movw	r0, #:lower16:.LC108
.L1268:
	movt	r0, #:upper16:.LC108
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1269:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r1, .L1274
	movw	r0, #:lower16:.LC108
	b	.L1268
.L1272:
	movw	r1, #:lower16:.LC109
	ldr	r2, .L1274+4
	add	r0, r0, #936
	movt	r1, #:upper16:.LC109
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L1253
.L1270:
	movw	r1, #:lower16:.LC109
	ldr	r2, .L1274
	add	r0, r0, #912
	movt	r1, #:upper16:.LC109
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L1250
.L1273:
	movw	r0, #:lower16:.LC110
	ldr	r1, .L1274+4
	movt	r0, #:upper16:.LC110
	bl	printk
	b	.L1254
.L1275:
	.align	2
.L1274:
	.word	.LANCHOR3+356
	.word	.LANCHOR3+380
	.fnend
	.size	gbam_stop, .-gbam_stop
	.section	.rodata.str1.4
	.align	2
.LC111:
	.ascii	"%s: enqueue\012\000"
	.align	2
.LC112:
	.ascii	"<3>%s: error enqueuing transfer, %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start_endless_rx, %function
gbam_start_endless_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #4
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L1287
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #978
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1288
.L1278:
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L1289
.L1279:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L1288:
	movw	r1, #:lower16:.LC111
	ldr	r2, .L1290
	add	r0, r0, #960
	movt	r1, #:upper16:.LC111
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L1278
.L1287:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC108
	ldr	r1, .L1290
	movt	r0, #:upper16:.LC108
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1289:
	movw	r0, #:lower16:.LC112
	ldr	r1, .L1290
	movt	r0, #:upper16:.LC112
	bl	printk
	b	.L1279
.L1291:
	.align	2
.L1290:
	.word	.LANCHOR3+404
	.fnend
	.size	gbam_start_endless_rx, .-gbam_start_endless_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start_endless_tx, %function
gbam_start_endless_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #8
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L1303
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #1002
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1304
.L1294:
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L1305
.L1295:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L1304:
	movw	r1, #:lower16:.LC111
	ldr	r2, .L1306
	add	r0, r0, #984
	movt	r1, #:upper16:.LC111
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L1294
.L1303:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC108
	ldr	r1, .L1306
	movt	r0, #:upper16:.LC108
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1305:
	movw	r0, #:lower16:.LC112
	ldr	r1, .L1306
	movt	r0, #:upper16:.LC112
	bl	printk
	b	.L1295
.L1307:
	.align	2
.L1306:
	.word	.LANCHOR3+428
	.fnend
	.size	gbam_start_endless_tx, .-gbam_start_endless_tx
	.section	.rodata.str1.4
	.align	2
.LC113:
	.ascii	"%s: woken up by peer\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_wake_cb, %function
gbam_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1026
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	ldr	r4, [r0, #16]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L1315
.L1309:
	ldr	r3, [r4, #128]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L1310
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L1315:
	movw	r1, #:lower16:.LC113
	ldr	r2, .L1316
	add	r0, r3, #1008
	movt	r1, #:upper16:.LC113
	bl	__dynamic_pr_debug
	b	.L1309
.L1310:
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #94
	ldr	pc, [sp], #4
.L1317:
	.align	2
.L1316:
	.word	.LANCHOR3+452
	.fnend
	.size	gbam_wake_cb, .-gbam_wake_cb
	.section	.rodata.str1.4
	.align	2
.LC114:
	.ascii	"%s status: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_endless_tx_complete, %function
gbam_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1050
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r2, [r3, r2]
	mov	r3, r1
	tst	r2, #4
	bne	.L1320
	bx	lr
.L1320:
	movw	r1, #:lower16:.LC114
	ldr	r2, .L1321
	ldr	r0, .L1321+4
	movt	r1, #:upper16:.LC114
	ldr	r3, [r3, #44]
	b	__dynamic_pr_debug
.L1322:
	.align	2
.L1321:
	.word	.LANCHOR3+468
	.word	.LANCHOR2+1032
	.fnend
	.size	gbam_endless_tx_complete, .-gbam_endless_tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_endless_rx_complete, %function
gbam_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1074
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r3]
	mov	r3, r1
	tst	r2, #4
	bne	.L1325
	bx	lr
.L1325:
	movw	r1, #:lower16:.LC114
	ldr	r2, .L1326
	add	r0, r0, #1056
	movt	r1, #:upper16:.LC114
	ldr	r3, [r3, #44]
	b	__dynamic_pr_debug
.L1327:
	.align	2
.L1326:
	.word	.LANCHOR3+496
	.fnend
	.size	gbam_endless_rx_complete, .-gbam_endless_rx_complete
	.section	.rodata.str1.4
	.align	2
.LC115:
	.ascii	"Close rmnet control file\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_release, %function
rmnet_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1098
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	ldr	r4, [r1, #124]
	tst	r3, #4
	bne	.L1334
.L1329:
	add	r6, r4, #52
	mov	r5, #0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r6
	strb	r5, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	add	r3, r4, #16
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1334:
	movw	r1, #:lower16:.LC115
	ldr	r0, .L1335
	movt	r1, #:upper16:.LC115
	bl	__dynamic_pr_debug
	b	.L1329
.L1336:
	.align	2
.L1335:
	.word	.LANCHOR2+1080
	.fnend
	.size	rmnet_ctrl_release, .-rmnet_ctrl_release
	.section	.rodata.str1.4
	.align	2
.LC116:
	.ascii	"Open rmnet_ctrl_qti device file\012\000"
	.align	2
.LC117:
	.ascii	"Already opened\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_open, %function
rmnet_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #1122
	movt	r5, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r6, r1
	ldrh	r3, [r5, r3]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	tst	r3, #4
	bne	.L1346
.L1338:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3228]
	add	r2, r3, #16
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r7, [r2]
	add	r7, r7, #1
	strex	r1, r7, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r7, #1
	bne	.L1339
	ldr	r3, [r4, #3228]
	add	r0, r3, #52
	str	r3, [r6, #124]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #3228]
	mov	r1, r0
	add	r0, r3, #52
	strb	r7, [r3, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L1337:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1346:
	movw	r1, #:lower16:.LC116
	add	r0, r5, #1104
	movt	r1, #:upper16:.LC116
	bl	__dynamic_pr_debug
	b	.L1338
.L1339:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #1146
	ldrh	r3, [r5, r3]
	tst	r3, #4
	mvneq	r0, #15
	beq	.L1337
	movw	r1, #:lower16:.LC117
	ldr	r0, .L1347
	movt	r1, #:upper16:.LC117
	bl	__dynamic_pr_debug
	mvn	r0, #15
	b	.L1337
.L1348:
	.align	2
.L1347:
	.word	.LANCHOR2+1128
	.fnend
	.size	rmnet_ctrl_open, .-rmnet_ctrl_open
	.section	.rodata.str1.4
	.align	2
.LC118:
	.ascii	"<3>%s: Invalid portno#%d\012\000"
	.align	2
.LC119:
	.ascii	"%s: ctrl_pkt:%d bytes\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_send_cpkt_tomodem, %function
ghsic_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	movw	lr, #:lower16:.LANCHOR1
	movt	lr, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	ldr	r0, [lr, #1016]
	cmp	ip, r0
	bcs	.L1360
	mov	r0, #104
	mla	ip, r0, ip, lr
	ldr	r5, [ip, #1020]
	cmp	r5, #0
	beq	.L1361
	mov	r4, r1
	mov	r0, r2
	mov	r1, #32
	mov	r6, r2
	bl	__kmalloc
	subs	r7, r0, #0
	beq	.L1355
	mov	r1, r4
	mov	r2, r6
	bl	memcpy
	ldr	r0, [r5, #84]
	ands	r4, r0, #1
	beq	.L1362
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1170
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1363
.L1354:
	ldr	r3, [r5, #96]
	mov	r4, #0
	add	r3, r3, #1
	str	r3, [r5, #96]
.L1349:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1362:
	ldr	r3, [r5, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r5, #104]
	bl	kfree
	b	.L1349
.L1363:
	movw	r1, #:lower16:.LC119
	ldr	r2, .L1364
	mov	r3, r6
	movt	r1, #:upper16:.LC119
	add	r0, r0, #1152
	bl	__dynamic_pr_debug
	b	.L1354
.L1355:
	mvn	r4, #11
	b	.L1349
.L1360:
	movw	r0, #:lower16:.LC118
	ldr	r1, .L1364
	mov	r2, ip
	movt	r0, #:upper16:.LC118
	mvn	r4, #18
	bl	printk
	b	.L1349
.L1361:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L1364
	mvn	r4, #18
	movt	r0, #:upper16:.LC105
	bl	printk
	b	.L1349
.L1365:
	.align	2
.L1364:
	.word	.LANCHOR3+524
	.fnend
	.size	ghsic_send_cpkt_tomodem, .-ghsic_send_cpkt_tomodem
	.section	.rodata.str1.4
	.align	2
.LC120:
	.ascii	"%s - input control lines: dcd%c dsr%c break%c ring%"
	.ascii	"c framing%c parity%c overrun%c\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_status, %function
ghsic_ctrl_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1194
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	mov	r4, r1
	.pad #24
	sub	sp, sp, #24
	tst	r3, #4
	bne	.L1393
.L1367:
	ldr	r0, [r5, #8]
	str	r4, [r5, #92]
	cmp	r0, #0
	beq	.L1366
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L1366
	mov	r1, r4
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L1366:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1393:
	tst	r1, #1
	movw	r1, #:lower16:.LC120
	ldr	r2, .L1394
	movne	r3, #43
	moveq	r3, #45
	ldr	r0, .L1394+4
	tst	r4, #2
	movt	r1, #:upper16:.LC120
	movne	ip, #43
	moveq	ip, #45
	tst	r4, #4
	movne	r6, #43
	moveq	r6, #45
	str	ip, [sp]
	tst	r4, #8
	movne	lr, #43
	moveq	lr, #45
	tst	r4, #16
	movne	ip, #43
	moveq	ip, #45
	stmib	sp, {r6, lr}
	tst	r4, #32
	movne	lr, #43
	moveq	lr, #45
	str	ip, [sp, #12]
	tst	r4, #64
	movne	ip, #43
	moveq	ip, #45
	str	lr, [sp, #16]
	str	ip, [sp, #20]
	bl	__dynamic_pr_debug
	b	.L1367
.L1395:
	.align	2
.L1394:
	.word	.LANCHOR3+548
	.word	.LANCHOR2+1176
	.fnend
	.size	ghsic_ctrl_status, .-ghsic_ctrl_status
	.section	.rodata.str1.4
	.align	2
.LC121:
	.ascii	"<3>%s: write error:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_cpkt_tomodem, %function
ghsuart_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	movw	lr, #:lower16:.LANCHOR1
	movt	lr, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	ldr	r0, [lr, #1856]
	cmp	ip, r0
	bcs	.L1411
	mov	r0, #84
	mla	ip, r0, ip, lr
	ldr	r4, [ip, #1860]
	cmp	r4, #0
	beq	.L1412
	ldr	r0, [r4, #88]
	tst	r0, #4
	ubfx	r0, r0, #2, #1
	beq	.L1413
	mov	r6, r1
	mov	r0, r2
	mov	r1, #32
	mov	r5, r2
	bl	__kmalloc
	subs	r7, r0, #0
	mvneq	r0, #11
	beq	.L1396
	mov	r1, r6
	mov	r2, r5
	bl	memcpy
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1218
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1414
.L1401:
	ldr	r1, .L1416
	ldr	r0, .L1416+4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L1415
.L1402:
	ldr	r3, [r4, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #104]
	bl	kfree
	mvn	r0, #18
.L1396:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1413:
	ldr	r3, [r4, #104]
	add	r3, r3, #1
	str	r3, [r4, #104]
	b	.L1396
.L1414:
	movw	r1, #:lower16:.LC119
	ldr	r2, .L1416
	mov	r3, r5
	movt	r1, #:upper16:.LC119
	add	r0, r0, #1200
	bl	__dynamic_pr_debug
	b	.L1401
.L1415:
	movw	r0, #:lower16:.LC121
	ldr	r1, .L1416
	mvn	r2, #18
	movt	r0, #:upper16:.LC121
	bl	printk
	b	.L1402
.L1412:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L1416
	movt	r0, #:upper16:.LC105
	bl	printk
	mvn	r0, #18
	b	.L1396
.L1411:
	movw	r0, #:lower16:.LC118
	ldr	r1, .L1416
	mov	r2, ip
	movt	r0, #:upper16:.LC118
	bl	printk
	mvn	r0, #18
	b	.L1396
.L1417:
	.align	2
.L1416:
	.word	.LANCHOR3+568
	.word	.LANCHOR0+156
	.fnend
	.size	ghsuart_send_cpkt_tomodem, .-ghsuart_send_cpkt_tomodem
	.section	.rodata.str1.4
	.align	2
.LC122:
	.ascii	"<3>%s: Bad control-OUT transfer\012\000"
	.align	2
.LC123:
	.ascii	"<3>%s: Illegal INPUT SIZE (%d) from host\012\000"
	.align	2
.LC124:
	.ascii	"<3>%s: Illegal NTB length %d\012\000"
	.align	2
.LC125:
	.ascii	"%s: Set NTB INPUT SIZE %d\012\000"
	.align	2
.LC126:
	.ascii	"<3>%s: %s: Failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_ep0out_complete, %function
mbim_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r1, #32]
	ldr	r2, [r1, #44]
	str	r3, [r1, #32]
	cmp	r2, r3
	bne	.L1419
	ldr	r0, [r1, #4]
	ldr	r3, [r1, #48]
	cmp	r3, r0
	bne	.L1419
	cmp	r3, #4
	beq	.L1435
	cmp	r3, #8
	bne	.L1425
	ldr	r2, [r1]
	ldr	r4, [r2]	@ unaligned
	cmp	r4, #2048
	bcc	.L1426
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #184]
	cmp	r3, r4
	bcc	.L1426
	ldrb	r1, [r2, #5]	@ zero_extendqisi2
	ldrb	r3, [r2, #4]	@ zero_extendqisi2
	orr	r3, r3, r1, lsl #8
	strh	r3, [r6, #228]	@ movhi
.L1424:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1242
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L1436
.L1428:
	str	r4, [r6, #224]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1435:
	ldr	r3, [r1]
	ldr	r4, [r3]	@ unaligned
	cmp	r4, #2048
	bcc	.L1426
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #184]
	cmp	r3, r4
	bcs	.L1424
.L1426:
	movw	r0, #:lower16:.LC123
	ldr	r1, .L1437
	mov	r2, r4
	movt	r0, #:upper16:.LC123
	bl	printk
	b	.L1421
.L1436:
	movw	r1, #:lower16:.LC125
	ldr	r2, .L1437
	mov	r3, r4
	movt	r1, #:upper16:.LC125
	ldr	r0, .L1437+4
	bl	__dynamic_pr_debug
	b	.L1428
.L1425:
	movw	r0, #:lower16:.LC124
	ldr	r1, .L1437
	movt	r0, #:upper16:.LC124
	bl	printk
.L1421:
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r2, .L1437
	movw	r0, #:lower16:.LC126
	movt	r0, #:upper16:.LC126
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	mov	r1, r2
	b	printk
.L1419:
	movw	r0, #:lower16:.LC122
	ldr	r1, .L1437
	movt	r0, #:upper16:.LC122
	bl	printk
	b	.L1421
.L1438:
	.align	2
.L1437:
	.word	.LANCHOR3+596
	.word	.LANCHOR2+1224
	.fnend
	.size	mbim_ep0out_complete, .-mbim_ep0out_complete
	.section	.rodata.str1.4
	.align	2
.LC127:
	.ascii	"%s: %s: dequeue\012\000"
	.align	2
.LC128:
	.ascii	"<3>%s: %s: error dequeuing transfer, %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_stop, %function
bam_data_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	bne	.L1440
	cmp	r3, #0
	beq	.L1439
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #1266
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1463
.L1443:
	ldr	r0, [r3, #12]
	ldr	r1, [r4, #36]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r3, r0, #0
	ldrne	r2, .L1465
	bne	.L1462
.L1439:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1440:
	cmp	r3, #0
	beq	.L1439
	movw	r2, #:lower16:.LANCHOR2
	movw	r1, #1290
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r2, [r2, r1]
	tst	r2, #4
	bne	.L1464
.L1445:
	ldr	r0, [r3, #8]
	ldr	r1, [r4, #40]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r3, r0, #0
	beq	.L1439
	ldr	r2, .L1465+4
.L1462:
	movw	r0, #:lower16:.LC128
	mov	r1, r2
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC128
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L1464:
	ldr	r3, .L1465+4
	movw	r1, #:lower16:.LC127
	ldr	r0, .L1465+8
	movt	r1, #:upper16:.LC127
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #4]
	b	.L1445
.L1463:
	ldr	r3, .L1465
	movw	r1, #:lower16:.LC127
	add	r0, r0, #1248
	movt	r1, #:upper16:.LC127
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #4]
	b	.L1443
.L1466:
	.align	2
.L1465:
	.word	.LANCHOR3+620
	.word	.LANCHOR3+648
	.word	.LANCHOR2+1272
	.fnend
	.size	bam_data_stop, .-bam_data_stop
	.section	.rodata.str1.4
	.align	2
.LC129:
	.ascii	"%s: %s: status: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_endless_tx_complete, %function
bam_data_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1314
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bxeq	lr
	mov	r2, r1
	ldr	r3, .L1476
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	ip, [r2, #44]
	.pad #12
	sub	sp, sp, #12
	movw	r1, #:lower16:.LC129
	movt	r1, #:upper16:.LC129
	add	r0, r0, #1296
	mov	r2, r3
	str	ip, [sp]
	bl	__dynamic_pr_debug
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1477:
	.align	2
.L1476:
	.word	.LANCHOR3+676
	.fnend
	.size	bam_data_endless_tx_complete, .-bam_data_endless_tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_endless_rx_complete, %function
bam_data_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1338
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bxeq	lr
	mov	r2, r1
	ldr	r3, .L1487
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	ip, [r2, #44]
	.pad #12
	sub	sp, sp, #12
	movw	r1, #:lower16:.LC129
	movt	r1, #:upper16:.LC129
	ldr	r0, .L1487+4
	mov	r2, r3
	str	ip, [sp]
	bl	__dynamic_pr_debug
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1488:
	.align	2
.L1487:
	.word	.LANCHOR3+708
	.word	.LANCHOR2+1320
	.fnend
	.size	bam_data_endless_rx_complete, .-bam_data_endless_rx_complete
	.section	.rodata.str1.4
	.align	2
.LC130:
	.ascii	"%s: USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERF"
	.ascii	"ACE\000"
	.align	2
.LC131:
	.ascii	"%s: bRequest 0x%x, w_value 0x%04x, len %d, entity %"
	.ascii	"d\012\000"
	.align	2
.LC132:
	.ascii	"%s: USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_INTERFA"
	.ascii	"CE\000"
	.align	2
.LC133:
	.ascii	"%s: USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_ENDPOI"
	.ascii	"NT\000"
	.align	2
.LC134:
	.ascii	"%s: bRequest 0x%x, w_value 0x%04x, len %d, endp %d,"
	.ascii	" epnum %d\012\000"
	.align	2
.LC135:
	.ascii	"<3>%s: Unknown command\000"
	.align	2
.LC136:
	.ascii	"%s: USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_ENDPOIN"
	.ascii	"T\000"
	.align	2
.LC137:
	.ascii	"%s: bRequest 0x%x, w_value 0x%04x, len %d, ep %d\012"
	.ascii	"\000"
	.align	2
.LC138:
	.ascii	"<3>%s: Unknown control request %02x.%02x v%04x i%04"
	.ascii	"x l%d\012\000"
	.align	2
.LC139:
	.ascii	"%s: audio req %02x.%02x v%04x i%04x l%d\012\000"
	.align	2
.LC140:
	.ascii	"<3>%s: audio response failed on err %d\012\000"
	.align	2
.LC141:
	.ascii	"<3>%s: STALL\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_setup, %function
f_audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r2, [r1]	@ zero_extendqisi2
	.pad #52
	sub	sp, sp, #52
	ldrh	r1, [r1, #4]	@ unaligned
	ldr	r3, [r0, #20]
	cmp	r2, #161
	str	r1, [sp, #20]
	ldrh	r1, [r4, #2]	@ unaligned
	ldr	r8, [r3, #24]
	str	r1, [sp, #24]
	ldrh	r3, [r4, #6]	@ unaligned
	ldr	r7, [r8, #4]
	str	r3, [sp, #28]
	beq	.L1490
	bhi	.L1491
	cmp	r2, #33
	bne	.L1567
	movw	r6, #:lower16:.LANCHOR2
	movw	r3, #1362
	movt	r6, #:upper16:.LANCHOR2
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L1568
	ldr	r9, [sp, #20]
	mov	r10, r7
	str	r1, [sp, #36]
	ldr	fp, [sp, #28]
.L1496:
	movw	r2, #1386
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	lsr	ip, r9, #8
	ldrh	r2, [r6, r2]
	mov	r9, ip
	and	r1, r3, #15
	tst	r2, #4
	str	r1, [sp, #32]
	bne	.L1569
.L1497:
	mov	r2, r5
	ldr	r3, [r2, #252]!
	cmp	r3, r2
	bne	.L1502
	b	.L1498
.L1499:
	ldr	r3, [r3]
	cmp	r3, r2
	beq	.L1498
.L1502:
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, r9
	bne	.L1499
	ldr	r2, [r3, #8]!
	cmp	r3, r2
	beq	.L1498
	ldr	r1, [sp, #36]
	lsr	r0, r1, #8
	b	.L1501
.L1500:
	ldr	r2, [r2]
	cmp	r3, r2
	beq	.L1498
.L1501:
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r1, r0
	bne	.L1500
	str	r2, [r5, #272]
.L1498:
	ldr	r2, [sp, #32]
	movw	r3, #:lower16:f_audio_complete
	mov	r9, fp
	movt	r3, #:upper16:f_audio_complete
	strb	r2, [r5, #268]
	str	r3, [r10, #28]
	str	r5, [r10, #32]
.L1503:
	movw	r3, #1554
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L1570
.L1528:
	ldrb	r3, [r7, #26]	@ zero_extendqisi2
	str	r9, [r7, #4]
	mov	r1, r7
	mov	r2, #32
	orr	r3, r3, #2
	strb	r3, [r7, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L1571
.L1489:
	mov	r0, r4
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1491:
	cmp	r2, #162
	bne	.L1494
	movw	r6, #:lower16:.LANCHOR2
	movw	r3, #1506
	movt	r6, #:upper16:.LANCHOR2
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L1572
	ldr	r9, [sp, #20]
	mov	r0, r1
	str	r7, [sp, #36]
	ldr	r3, [sp, #28]
	str	r3, [sp, #32]
.L1521:
	movw	r2, #1530
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	lsr	fp, r0, #8
	ldrh	r2, [r6, r2]
	and	r9, r9, #127
	and	r10, r3, #15
	tst	r2, #4
	bne	.L1573
.L1522:
	ldr	r3, [r5, #260]!
	cmp	r5, r3
	beq	.L1513
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r9
	beq	.L1524
.L1574:
	ldr	r3, [r3]
	cmp	r5, r3
	beq	.L1513
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r9
	bne	.L1574
.L1524:
	ldr	r2, [r3, #8]!
	cmp	r3, r2
	beq	.L1513
.L1527:
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r1, fp
	bne	.L1575
	sub	r3, r10, #1
	cmp	r3, #3
	bhi	.L1513
	add	r10, r10, #4
	ldr	r9, [sp, #32]
	add	r1, sp, #44
	ldr	r3, [sp, #36]
	ldr	r0, [r3]
	ldr	r3, [r2, r10, lsl #2]
	mov	r2, r9
	str	r3, [sp, #44]
	bl	memcpy
	movw	r3, #1554
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L1528
.L1570:
	ldrd	r2, [sp, #20]
	movw	r1, #:lower16:.LC139
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC139
	ldr	r0, .L1582
	str	r3, [sp, #4]
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	ip, [sp]
	str	r2, [sp, #8]
	ldr	r2, [sp, #28]
	str	r2, [sp, #12]
	ldr	r2, .L1582+4
	bl	__dynamic_pr_debug
	b	.L1528
.L1567:
	cmp	r2, #34
	bne	.L1494
	movw	r6, #:lower16:.LANCHOR2
	movw	r3, #1458
	movt	r6, #:upper16:.LANCHOR2
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L1576
	ldr	r0, [sp, #20]
	mov	r2, r1
	mov	fp, r7
	ldr	r3, [sp, #28]
	str	r3, [sp, #32]
.L1511:
	movw	r1, #1482
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	lsr	ip, r2, #8
	ldrh	r1, [r6, r1]
	and	r9, r0, #127
	str	ip, [sp, #36]
	and	r10, r3, #15
	tst	r1, #4
	bne	.L1577
.L1512:
	mov	r2, r5
	ldr	r3, [r2, #260]!
	cmp	r3, r2
	beq	.L1513
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, r9
	beq	.L1514
.L1578:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L1513
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, r9
	bne	.L1578
.L1514:
	ldr	r2, [r3, #8]!
	cmp	r3, r2
	beq	.L1513
	ldr	r0, [sp, #36]
.L1517:
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r1, r0
	bne	.L1579
	cmp	r10, #4
	bhi	.L1518
	cmp	r10, #0
	beq	.L1520
	movw	r3, #:lower16:audio_set_endpoint_complete
	strb	r10, [r5, #268]
	ldr	r9, [sp, #32]
	movt	r3, #:upper16:audio_set_endpoint_complete
	str	r2, [r5, #272]
	str	r3, [fp, #28]
	str	r5, [fp, #32]
	b	.L1503
.L1490:
	movw	r6, #:lower16:.LANCHOR2
	movw	r3, #1410
	movt	r6, #:upper16:.LANCHOR2
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L1580
	ldr	r9, [sp, #20]
	mov	r10, r7
	str	r1, [sp, #32]
	ldr	fp, [sp, #28]
.L1504:
	movw	r2, #1434
	lsr	ip, r9, #8
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrh	r2, [r6, r2]
	mvn	r1, #94
	mov	r9, ip
	str	r1, [sp, #44]
	tst	r2, #4
	bne	.L1581
.L1505:
	mov	r1, r5
	ldr	r2, [r1, #252]!
	cmp	r1, r2
	bne	.L1510
	b	.L1506
.L1507:
	ldr	r2, [r2]
	cmp	r1, r2
	beq	.L1506
.L1510:
	ldrb	r0, [r2, #16]	@ zero_extendqisi2
	cmp	r0, r9
	bne	.L1507
	ldr	r0, [r2, #8]!
	cmp	r2, r0
	beq	.L1506
	ldr	r1, [sp, #32]
	lsr	ip, r1, #8
	b	.L1509
.L1508:
	ldr	r0, [r0]
	cmp	r2, r0
	beq	.L1506
.L1509:
	ldrb	r1, [r0, #12]	@ zero_extendqisi2
	cmp	r1, ip
	bne	.L1508
	ldr	r9, [r0, #40]
	cmp	r9, #0
	beq	.L1508
	and	r1, r3, #15
	blx	r9
	str	r0, [sp, #44]
.L1506:
	movw	r3, #:lower16:f_audio_complete
	mov	r2, fp
	str	r5, [r10, #32]
	movt	r3, #:upper16:f_audio_complete
	add	r1, sp, #44
	ldr	r0, [r10]
	mov	r9, fp
	str	r3, [r10, #28]
	bl	memcpy
	b	.L1503
.L1518:
	cmp	r10, #5
	bne	.L1520
.L1513:
	movw	r0, #:lower16:.LC141
	ldr	r1, .L1582+4
	mvn	r4, #94
	movt	r0, #:upper16:.LC141
	bl	printk
	b	.L1489
.L1575:
	ldr	r2, [r2]
	cmp	r3, r2
	bne	.L1527
	b	.L1513
.L1579:
	ldr	r2, [r2]
	cmp	r3, r2
	bne	.L1517
	b	.L1513
.L1572:
	movw	r1, #:lower16:.LC136
	ldr	r2, .L1582+4
	add	r0, r6, #1488
	movt	r1, #:upper16:.LC136
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #20]
	ldrh	r2, [r4, #6]	@ unaligned
	ldrh	r9, [r4, #4]	@ unaligned
	ldr	r3, [r3, #24]
	str	r2, [sp, #32]
	ldrh	r0, [r4, #2]	@ unaligned
	ldr	r3, [r3, #4]
	str	r3, [sp, #36]
	b	.L1521
.L1568:
	movw	r1, #:lower16:.LC130
	ldr	r2, .L1582+4
	add	r0, r6, #1344
	movt	r1, #:upper16:.LC130
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #20]
	ldrh	r2, [r4, #2]	@ unaligned
	ldrh	r9, [r4, #4]	@ unaligned
	ldrh	fp, [r4, #6]	@ unaligned
	ldr	r3, [r3, #24]
	str	r2, [sp, #36]
	ldr	r10, [r3, #4]
	b	.L1496
.L1576:
	movw	r1, #:lower16:.LC133
	ldr	r2, .L1582+4
	add	r0, r6, #1440
	movt	r1, #:upper16:.LC133
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #20]
	ldrh	r2, [r4, #6]	@ unaligned
	ldrh	r0, [r4, #4]	@ unaligned
	ldr	r3, [r3, #24]
	str	r2, [sp, #32]
	ldrh	r2, [r4, #2]	@ unaligned
	ldr	fp, [r3, #4]
	b	.L1511
.L1577:
	ldr	ip, [sp, #32]
	movw	r1, #:lower16:.LC134
	movt	r1, #:upper16:.LC134
	stm	sp, {r2, ip}
	ldr	r2, .L1582+8
	str	r0, [sp, #8]
	ldr	r0, .L1582+12
	str	r9, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L1512
.L1573:
	ldr	ip, [sp, #32]
	movw	r1, #:lower16:.LC137
	ldr	r2, .L1582+16
	movt	r1, #:upper16:.LC137
	stm	sp, {r0, ip}
	ldr	r0, .L1582+20
	str	r9, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L1522
.L1569:
	ldr	r0, [sp, #36]
	movw	r1, #:lower16:.LC131
	ldr	r2, .L1582+24
	movt	r1, #:upper16:.LC131
	stm	sp, {r0, fp, ip}
	ldr	r0, .L1582+28
	bl	__dynamic_pr_debug
	b	.L1497
.L1580:
	movw	r1, #:lower16:.LC132
	ldr	r2, .L1582+4
	add	r0, r6, #1392
	movt	r1, #:upper16:.LC132
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #20]
	ldrh	r2, [r4, #2]	@ unaligned
	ldrh	r9, [r4, #4]	@ unaligned
	ldrh	fp, [r4, #6]	@ unaligned
	ldr	r3, [r3, #24]
	str	r2, [sp, #32]
	ldr	r10, [r3, #4]
	b	.L1504
.L1581:
	ldr	r0, [sp, #32]
	movw	r1, #:lower16:.LC131
	ldr	r2, .L1582+32
	movt	r1, #:upper16:.LC131
	stm	sp, {r0, fp, ip}
	ldr	r0, .L1582+36
	str	r3, [sp, #36]
	bl	__dynamic_pr_debug
	ldr	r3, [sp, #36]
	b	.L1505
.L1494:
	ldr	ip, [sp, #20]
	movw	r0, #:lower16:.LC138
	ldr	r1, [sp, #24]
	movt	r0, #:upper16:.LC138
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	stm	sp, {r1, ip}
	ldr	ip, [sp, #28]
	ldr	r1, .L1582+4
	str	ip, [sp, #8]
	bl	printk
	b	.L1513
.L1520:
	movw	r0, #:lower16:.LC135
	ldr	r1, .L1582+8
	movt	r0, #:upper16:.LC135
	bl	printk
	b	.L1513
.L1571:
	movw	r0, #:lower16:.LC140
	ldr	r1, .L1582+4
	mov	r2, r4
	movt	r0, #:upper16:.LC140
	bl	printk
	b	.L1489
.L1583:
	.align	2
.L1582:
	.word	.LANCHOR2+1536
	.word	.LANCHOR3+740
	.word	.LANCHOR3+796
	.word	.LANCHOR2+1464
	.word	.LANCHOR3+820
	.word	.LANCHOR2+1512
	.word	.LANCHOR3+756
	.word	.LANCHOR2+1368
	.word	.LANCHOR3+776
	.word	.LANCHOR2+1416
	.fnend
	.size	f_audio_setup, .-f_audio_setup
	.section	.rodata.str1.4
	.align	2
.LC142:
	.ascii	"%s: setting streaming_enabled to false.\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_unbind_config, %function
android_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r1, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r1, #3232]!
	ldr	r0, [r0, #24]
	cmp	r3, r1
	beq	.L1585
	sub	r3, r3, #512
	b	.L1586
.L1599:
	ldr	r3, [r3, #512]
	cmp	r3, r1
	sub	r3, r3, #512
	beq	.L1585
.L1586:
	ldr	r2, [r3, #8]
	cmp	r0, r2
	bne	.L1599
.L1585:
	ldr	r3, [r0]
	ldrb	r2, [r3, #378]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L1588
	movw	r2, #:lower16:.LANCHOR2
	movw	r0, #1578
	movt	r2, #:upper16:.LANCHOR2
	mov	r1, #0
	ldrh	r2, [r2, r0]
	strb	r1, [r3, #378]
	tst	r2, #4
	bne	.L1600
.L1588:
	mov	r6, r5
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L1584
.L1593:
	ldr	r0, [r4]
	mov	r1, r5
	ldr	r3, [r0, #44]
	cmp	r3, #0
	beq	.L1591
	blx	r3
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L1593
.L1584:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1591:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L1593
	b	.L1584
.L1600:
	movw	r1, #:lower16:.LC142
	ldr	r2, .L1601
	movt	r1, #:upper16:.LC142
	ldr	r0, .L1601+4
	bl	__dynamic_pr_debug
	b	.L1588
.L1602:
	.align	2
.L1601:
	.word	.LANCHOR3+844
	.word	.LANCHOR2+1560
	.fnend
	.size	android_unbind_config, .-android_unbind_config
	.section	.rodata.str1.4
	.align	2
.LC143:
	.ascii	"<3>%s: %s is enabled in other device\012\000"
	.align	2
.LC144:
	.ascii	"<3>%s: Failed to alloc f_holder\012\000"
	.align	2
.LC145:
	.ascii	"%s: func:%s is enabled.\012\000"
	.align	2
.LC146:
	.ascii	"%s: set streaming_enabled to true\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_enable_function, %function
android_enable_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r2
	str	lr, [sp, #32]
	ldr	r9, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r0, #8]
	ldr	r3, [r0, #44]
	ldr	r5, [r9], #4
	str	r3, [sp]
	ldr	r3, [r2]
	cmp	r5, #0
	str	r3, [sp, #4]
	beq	.L1604
	movw	r10, #:lower16:.LC143
	mov	r7, r0
	mov	r8, r1
	movt	r10, #:upper16:.LC143
.L1613:
	ldr	r4, [r5]
	mov	r0, fp
	mov	r1, r4
	bl	strcmp
	subs	r6, r0, #0
	bne	.L1605
	ldr	r2, [r5, #20]
	cmp	r2, r7
	cmpne	r2, #0
	bne	.L1627
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L1614
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L1628
.L1607:
	add	r2, r8, #112
	str	r7, [r5, #20]
	movw	r7, #:lower16:.LANCHOR2
	str	r5, [r0], #4
	ldr	r1, [r8, #116]
	movt	r7, #:upper16:.LANCHOR2
	bl	__list_add
	movw	r3, #1602
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L1629
.L1609:
	ldr	r2, [sp]
	ldr	r8, [r5]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	ble	.L1603
	add	r3, r3, r3, lsl #2
	add	r4, r2, #12
	add	r5, r4, r3, lsl #1
	b	.L1612
.L1610:
	cmp	r5, r4
	beq	.L1603
.L1612:
	mov	r1, r4
	mov	r0, r8
	bl	strcmp
	cmp	r0, #0
	add	r4, r4, #10
	bne	.L1610
	movw	r3, #1626
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L1630
.L1611:
	ldr	r2, [sp, #4]
	mov	r3, #1
	mov	r6, #0
	strb	r3, [r2, #378]
.L1603:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1627:
	ldr	r1, .L1631
	mov	r2, r4
	mov	r0, r10
	bl	printk
.L1605:
	ldr	r5, [r9], #4
	cmp	r5, #0
	bne	.L1613
.L1604:
	mvn	r6, #21
	b	.L1603
.L1614:
	mov	r0, #16
	b	.L1607
.L1629:
	movw	r1, #:lower16:.LC145
	ldr	r2, .L1631
	add	r0, r7, #1584
	movt	r1, #:upper16:.LC145
	ldr	r3, [r5]
	bl	__dynamic_pr_debug
	b	.L1609
.L1630:
	movw	r1, #:lower16:.LC146
	ldr	r2, .L1631+4
	movt	r1, #:upper16:.LC146
	ldr	r0, .L1631+8
	bl	__dynamic_pr_debug
	b	.L1611
.L1628:
	movw	r0, #:lower16:.LC144
	ldr	r1, .L1631
	mvn	r6, #11
	movt	r0, #:upper16:.LC144
	bl	printk
	b	.L1603
.L1632:
	.align	2
.L1631:
	.word	.LANCHOR3+868
	.word	.LANCHOR3+892
	.word	.LANCHOR2+1608
	.fnend
	.size	android_enable_function, .-android_enable_function
	.section	.rodata.str1.4
	.align	2
.LC147:
	.ascii	"ccid_bulk_release\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_release, %function
ccid_bulk_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1650
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	ldr	r4, [r1, #124]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1639
.L1634:
	mov	r0, #0
	str	r0, [r4, #152]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1639:
	movw	r1, #:lower16:.LC147
	add	r0, r0, #1632
	movt	r1, #:upper16:.LC147
	bl	__dynamic_pr_debug
	b	.L1634
	.fnend
	.size	ccid_bulk_release, .-ccid_bulk_release
	.section	.rodata.str1.4
	.align	2
.LC148:
	.ascii	"%s:dev:%pK port#%d\012\000"
	.align	2
.LC149:
	.ascii	"%s: usb cable is not connected\012\000"
	.align	2
.LC150:
	.ascii	"<3>ctrl resp queue empty  req%02x.%02x v%04x i%04x "
	.ascii	"l%d\012\000"
	.align	2
.LC151:
	.ascii	"rmnet ep0 enqueue err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_setup, %function
frmnet_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #1674
	movt	r5, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r4, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r5, r3]
	.pad #28
	sub	sp, sp, #28
	ldr	r8, [r0, #128]
	mov	r3, r0
	ldrh	r10, [r1, #4]	@ unaligned
	ldrh	r9, [r1, #2]	@ unaligned
	tst	r2, #4
	ldrh	r7, [r1, #6]	@ unaligned
	ldr	r6, [r8, #4]
	bne	.L1656
.L1641:
	ldr	r2, [r3, #120]
	cmp	r2, #0
	beq	.L1657
	ldrh	r2, [r4]	@ unaligned
	movw	r1, #8482
	rev16	r2, r2
	uxth	r2, r2
	cmp	r2, r1
	beq	.L1644
	movw	r1, #41217
	cmp	r2, r1
	beq	.L1645
	cmp	r2, #8448
	beq	.L1658
.L1646:
	movw	r3, #1722
	ldrh	r3, [r5, r3]
	tst	r3, #4
	mvneq	r4, #94
	bne	.L1659
.L1640:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1658:
	movw	r2, #:lower16:frmnet_cmd_complete
	mov	r4, r7
	movt	r2, #:upper16:frmnet_cmd_complete
	mov	r7, #0
	strd	r2, [r6, #28]
.L1647:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r4, [r6, #4]
	mov	r1, r6
	mov	r2, #32
	bfi	r3, r7, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1640
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC151
	mov	r2, r4
	movt	r1, #:upper16:.LC151
	add	r0, r0, #32
	bl	dev_err
	b	.L1640
.L1645:
	cmp	r9, #0
	bne	.L1646
	add	fp, r3, #132
	str	r3, [sp, #20]
	mov	r0, fp
	bl	_raw_spin_lock
	ldr	r3, [sp, #20]
	mov	r0, r3
	ldr	r3, [r0, #144]!
	cmp	r3, r0
	beq	.L1660
	mov	r0, r3
	sub	r5, r3, #8
	str	r3, [sp, #20]
	bl	list_del
	mov	r0, fp
	bl	_raw_spin_unlock
	ldr	r3, [sp, #20]
	ldr	r0, [r6]
	ldmdb	r3, {r1, r4}
	cmp	r7, r4
	movcc	r4, r7
	cmp	r4, r7
	mov	r2, r4
	movge	r7, #0
	movlt	r7, #1
	bl	memcpy
	ldr	r3, [sp, #20]
	ldr	r0, [r3, #-8]
	bl	kfree
	mov	r0, r5
	bl	kfree
	b	.L1647
.L1644:
	ldr	r5, [r3, #100]
	subs	r7, r7, #0
	movne	r7, #1
	cmp	r5, #0
	moveq	r4, r5
	beq	.L1647
	ldrb	ip, [r3, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LANCHOR1
	mov	r2, r9
	movt	r1, #:upper16:.LANCHOR1
	mov	r0, r3
	mov	r4, #0
	add	ip, ip, ip, lsl #1
	add	r1, r1, ip, lsl #3
	ldrb	r1, [r1, #3252]	@ zero_extendqisi2
	blx	r5
	b	.L1647
.L1656:
	ldrb	ip, [r0, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC148
	ldr	r2, .L1661
	movt	r1, #:upper16:.LC148
	ldr	r0, .L1661+4
	str	ip, [sp]
	str	r3, [sp, #20]
	bl	__dynamic_pr_debug
	ldr	r3, [sp, #20]
	b	.L1641
.L1659:
	ldr	r1, [r8]
	str	r9, [sp, #4]
	movw	r2, #:lower16:.LC16
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC16
	str	r10, [sp, #8]
	ldr	r0, .L1661+8
	ldrb	r3, [r4]	@ zero_extendqisi2
	mvn	r4, #94
	add	r1, r1, #32
	str	ip, [sp]
	str	r7, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L1640
.L1657:
	movw	r3, #1698
	ldrh	r3, [r5, r3]
	tst	r3, #4
	mvneq	r4, #106
	beq	.L1640
	movw	r1, #:lower16:.LC149
	ldr	r2, .L1661
	mvn	r4, #106
	movt	r1, #:upper16:.LC149
	ldr	r0, .L1661+12
	bl	__dynamic_pr_debug
	b	.L1640
.L1660:
	movw	r0, #:lower16:.LC150
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	mov	r3, r9
	ldrb	r1, [r4]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC150
	str	r10, [sp]
	str	r7, [sp, #4]
	bl	printk
	mov	r0, fp
	bl	_raw_spin_unlock
	b	.L1646
.L1662:
	.align	2
.L1661:
	.word	.LANCHOR3+916
	.word	.LANCHOR2+1656
	.word	.LANCHOR2+1704
	.word	.LANCHOR2+1680
	.fnend
	.size	frmnet_setup, .-frmnet_setup
	.section	.rodata.str1.4
	.align	2
.LC152:
	.ascii	"%s: dev:%pK port#%d\012\000"
	.align	2
.LC153:
	.ascii	"<3>rmnet notify ep error %d\012\000"
	.align	2
.LC154:
	.ascii	"%s: Invalid notify_count=%lu to decrement\012\000"
	.align	2
.LC155:
	.ascii	"<3>%s: Invalid notify_count=%lu to decrement\012\000"
	.align	2
.LC156:
	.ascii	"ep enqueue error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_notify_complete, %function
frmnet_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r3, #1746
	mov	r4, r1
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR2
	movt	r7, #:upper16:.LANCHOR2
	strd	r8, [sp, #16]
	ldrh	r2, [r7, r3]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r8, [r1, #32]
	ldr	r6, [r1, #44]
	tst	r2, #4
	bne	.L1694
.L1664:
	cmp	r6, #0
	bne	.L1695
.L1665:
	ldr	r3, [r8, #124]
	cmp	r3, #0
	bne	.L1696
.L1663:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L1695:
	bgt	.L1666
	add	r2, r6, #108
	bics	r5, r2, #4
	beq	.L1697
.L1666:
	movw	r0, #:lower16:.LC153
	mov	r1, r6
	movt	r0, #:upper16:.LC153
	bl	printk
	b	.L1665
.L1697:
	add	r4, r8, #132
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r4
	str	r5, [r8, #152]
.L1692:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock_irqrestore
.L1696:
	add	r6, r8, #132
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r8, #152]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1669
	sub	r3, r3, #1
	mov	r1, r0
	cmp	r3, #0
	mov	r0, r6
	str	r3, [r8, #152]
	beq	.L1692
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r8, #136]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	beq	.L1663
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r3, r8
	mov	r9, r0
	ldr	r5, [r3, #144]!
	cmp	r5, r3
	beq	.L1673
	ldr	r2, [r8, #152]
	cmp	r2, #0
	beq	.L1674
	sub	r2, r2, #1
	mov	r0, r5
	str	r2, [r8, #152]
	sub	r8, r5, #8
	bl	list_del
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
.L1673:
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #1794
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L1663
	ldr	r0, .L1699
	movw	r1, #:lower16:.LC156
	mov	r2, r4
	movt	r1, #:upper16:.LC156
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	__dynamic_pr_debug
.L1694:
	ldrb	ip, [r8, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC152
	mov	r3, r8
	ldr	r2, .L1699+4
	movt	r1, #:upper16:.LC152
	add	r0, r7, #1728
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L1664
.L1669:
	movw	r2, #1770
	ldrh	r2, [r7, r2]
	tst	r2, #4
	bne	.L1698
.L1671:
	mov	r1, r5
.L1693:
	mov	r0, r6
	b	.L1692
.L1698:
	movw	r1, #:lower16:.LC154
	ldr	r2, .L1699+4
	movt	r1, #:upper16:.LC154
	ldr	r0, .L1699+8
	bl	__dynamic_pr_debug
	b	.L1671
.L1674:
	movw	r0, #:lower16:.LC155
	ldr	r1, .L1699+4
	movt	r0, #:upper16:.LC155
	bl	printk
	mov	r1, r9
	b	.L1693
.L1700:
	.align	2
.L1699:
	.word	.LANCHOR2+1776
	.word	.LANCHOR3+932
	.word	.LANCHOR2+1752
	.fnend
	.size	frmnet_notify_complete, .-frmnet_notify_complete
	.section	.rodata.str1.4
	.align	2
.LC157:
	.ascii	"%s: %02x.%02x v%04x i%04x l%u\000"
	.align	2
.LC158:
	.ascii	"<3>%s: response queue error: %d\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_ctrlrequest, %function
mbim_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #12]
	.pad #16
	sub	sp, sp, #16
	ldrh	r7, [r2, #4]	@ unaligned
	ldrh	r8, [r2, #2]	@ unaligned
	ldrh	r6, [r2, #6]	@ unaligned
	cmp	r3, #0
	bne	.L1704
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r3, [r3, #234]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L1704
	mov	r4, r2
	movw	r2, #:lower16:.LANCHOR2
	mov	r5, r1
	movt	r2, #:upper16:.LANCHOR2
	ldrb	r3, [r4]	@ zero_extendqisi2
	movw	r1, #1818
	ldrh	r2, [r2, r1]
	tst	r2, #4
	bne	.L1718
.L1705:
	cmp	r3, #128
	beq	.L1719
	cmp	r3, #192
	bne	.L1704
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #165
	cmpeq	r7, #4
	bne	.L1704
	ldr	r3, [r5, #4]
	cmp	r6, #40
	movcc	r4, r6
	movcs	r4, #40
	ldr	r1, .L1722
	mov	r2, r4
	ldr	r0, [r3]
	bl	memcpy
.L1707:
	ldr	r3, [r5, #4]
	cmp	r6, r4
	mov	r2, #32
	movle	r6, #0
	movgt	r6, #1
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r6, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r5, #4]
	str	r4, [r3, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L1720
.L1701:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1719:
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #6
	beq	.L1721
.L1704:
	mvn	r4, #94
	b	.L1701
.L1721:
	lsr	r3, r8, #8
	cmp	r3, #3
	bne	.L1704
	uxtb	r8, r8
	cmp	r8, #238
	bne	.L1704
	ldr	r3, [r5, #4]
	cmp	r6, #18
	movcc	r4, r6
	movcs	r4, #18
	ldr	r1, .L1722+4
	mov	r2, r4
	ldr	r0, [r3]
	bl	memcpy
	b	.L1707
.L1718:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC157
	ldr	r2, .L1722+8
	movt	r1, #:upper16:.LC157
	ldr	r0, .L1722+12
	str	ip, [sp]
	str	r8, [sp, #4]
	str	r7, [sp, #8]
	str	r6, [sp, #12]
	bl	__dynamic_pr_debug
	ldrb	r3, [r4]	@ zero_extendqisi2
	b	.L1705
.L1720:
	movw	r0, #:lower16:.LC158
	ldr	r1, .L1722+8
	movt	r0, #:upper16:.LC158
	bl	printk
	b	.L1701
.L1723:
	.align	2
.L1722:
	.word	.LANCHOR0+208
	.word	.LANCHOR0+248
	.word	.LANCHOR3+956
	.word	.LANCHOR2+1800
	.fnend
	.size	mbim_function_ctrlrequest, .-mbim_function_ctrlrequest
	.section	.rodata.str1.4
	.align	2
.LC159:
	.ascii	"entity DESCRIPTOR(%02lx); ret = %d\012\000"
	.align	2
.LC160:
	.ascii	"entity INTERFACE(%02x); ret = %d\012\000"
	.align	2
.LC161:
	.ascii	"entity STRING(%02x); ret = %d\012\000"
	.align	2
.LC162:
	.ascii	"entity ENDPOINT(%02x); ret = %d\012\000"
	.align	2
.LC163:
	.ascii	"%s returns %d\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_do_descs, %function
ffs_do_descs:
	.fnstart
	@ args = 4, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.pad #12
	sub	sp, sp, #12
	ldr	r9, [sp, #48]
	mov	r10, r2
	mov	fp, r1
	mov	r6, r3
	mov	r7, r2
	str	r0, [sp, #4]
	mov	r8, #0
.L1740:
	ldr	r3, [sp, #4]
	mov	r1, r8
	mov	r0, #0
	cmp	r8, r3
	mov	r3, r9
	moveq	fp, #0
	mov	r2, fp
	blx	r6
	subs	r4, r0, #0
	bge	.L1726
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1842
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L1724
	movw	r1, #:lower16:.LC159
	mov	r2, r8
	movt	r1, #:upper16:.LC159
	mov	r3, r4
	add	r0, r0, #1824
	bl	__dynamic_pr_debug
	b	.L1724
.L1726:
	cmp	fp, #0
	bne	.L1728
	sub	r4, r10, r7
	b	.L1724
.L1728:
	cmp	r7, #1
	bls	.L1750
	ldrb	r5, [fp]	@ zero_extendqisi2
	cmp	r7, r5
	bcc	.L1750
	ldrb	r3, [fp, #1]	@ zero_extendqisi2
	cmp	r3, #11
	bhi	.L1730
	cmp	r3, #3
	bls	.L1750
	sub	r3, r3, #4
	cmp	r3, #7
	ldrls	pc, [pc, r3, asl #2]
	b	.L1750
.L1732:
	.word	.L1735
	.word	.L1734
	.word	.L1750
	.word	.L1750
	.word	.L1750
	.word	.L1733
	.word	.L1750
	.word	.L1731
.L1730:
	cmp	r3, #48
	beq	.L1736
	b	.L1750
.L1735:
	cmp	r5, #9
	bne	.L1750
	mov	r3, r9
	mov	r2, fp
	add	r1, fp, #2
	mov	r0, #1
	blx	r6
	subs	r4, r0, #0
	bge	.L1737
	movw	r3, #:lower16:.LANCHOR2
	movw	r1, #1866
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r1]
	tst	r3, #4
	beq	.L1729
	movw	r1, #:lower16:.LC160
	ldrb	r2, [fp, #2]	@ zero_extendqisi2
	mov	r3, r4
	movt	r1, #:upper16:.LC160
	ldr	r0, .L1776
	bl	__dynamic_pr_debug
	b	.L1729
.L1737:
	ldrb	r3, [fp, #8]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1739
.L1741:
	sub	r7, r7, r5
	add	fp, fp, r5
	add	r8, r8, #1
	b	.L1740
.L1739:
	mov	r3, r9
	mov	r2, fp
	add	r1, fp, #8
	mov	r0, #2
	blx	r6
	subs	r4, r0, #0
	bge	.L1741
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1890
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L1729
	movw	r1, #:lower16:.LC161
	ldrb	r2, [fp, #8]	@ zero_extendqisi2
	mov	r3, r4
	movt	r1, #:upper16:.LC161
	add	r0, r0, #1872
	bl	__dynamic_pr_debug
	b	.L1729
.L1734:
	sub	r3, r5, #7
	tst	r3, #253
	bne	.L1750
	ldrb	r3, [fp, #2]	@ zero_extendqisi2
	tst	r3, #15
	beq	.L1750
	mov	r3, r9
	mov	r2, fp
	add	r1, fp, #2
	mov	r0, #3
	blx	r6
	subs	r4, r0, #0
	bge	.L1741
	movw	r3, #:lower16:.LANCHOR2
	movw	r1, #1914
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r1]
	tst	r3, #4
	beq	.L1729
	movw	r1, #:lower16:.LC162
	ldrb	r2, [fp, #2]	@ zero_extendqisi2
	mov	r3, r4
	movt	r1, #:upper16:.LC162
	ldr	r0, .L1776+4
	bl	__dynamic_pr_debug
	b	.L1729
.L1733:
	cmp	r5, #5
	beq	.L1741
	b	.L1750
.L1731:
	cmp	r5, #8
	bne	.L1750
	ldrb	r3, [fp, #7]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L1741
	mov	r3, r9
	mov	r2, fp
	add	r1, fp, #7
	mov	r0, #2
	blx	r6
	subs	r4, r0, #0
	bge	.L1741
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1938
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L1729
	movw	r1, #:lower16:.LC161
	ldrb	r2, [fp, #7]	@ zero_extendqisi2
	mov	r3, r4
	movt	r1, #:upper16:.LC161
	add	r0, r0, #1920
	bl	__dynamic_pr_debug
	b	.L1729
.L1736:
	cmp	r5, #6
	beq	.L1741
.L1750:
	mvn	r4, #21
.L1729:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1962
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L1724
	movw	r1, #:lower16:.LC163
	ldr	r2, .L1776+8
	mov	r3, r4
	ldr	r0, .L1776+12
	movt	r1, #:upper16:.LC163
	bl	__dynamic_pr_debug
.L1724:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L1777:
	.align	2
.L1776:
	.word	.LANCHOR2+1848
	.word	.LANCHOR2+1896
	.word	.LANCHOR3+976
	.word	.LANCHOR2+1944
	.fnend
	.size	ffs_do_descs, .-ffs_do_descs
	.section	.rodata.str1.4
	.align	2
.LC164:
	.ascii	"%s: portno:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_unbind, %function
frmnet_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1986
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	mov	r4, r1
	tst	r2, #4
	bne	.L1786
.L1779:
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L1787
	cmp	r3, #2
	bhi	.L1788
.L1781:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r5, [r4, #136]
	ldr	r6, [r4, #140]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L1787:
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L1781
.L1788:
	ldr	r0, [r4, #8]
	bl	kfree
	b	.L1781
.L1786:
	movw	r1, #:lower16:.LC164
	ldr	r2, .L1789
	add	r0, r3, #1968
	movt	r1, #:upper16:.LC164
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	bl	__dynamic_pr_debug
	b	.L1779
.L1790:
	.align	2
.L1789:
	.word	.LANCHOR3+992
	.fnend
	.size	frmnet_unbind, .-frmnet_unbind
	.section	.rodata.str1.4
	.align	2
.LC165:
	.ascii	"queue\000"
	.align	2
.LC166:
	.ascii	"%s: %s %s err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_rx, %function
gs_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #32
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r2, [r0, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r0, #32]
	ldr	r3, [r0, #40]
	ldr	r6, [r2, #92]
	cmp	r7, r5
	beq	.L1792
	mov	r4, r0
	mov	r8, #4096
	b	.L1796
.L1807:
	cmp	r3, #7
	bgt	.L1792
	bl	list_del
	mov	r0, r4
	str	r8, [r5, #-32]
	bl	_raw_spin_unlock
	ldr	r3, [r6, #8]
	mov	r2, #32
	mov	r1, r9
	mov	r0, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L1805
	cmp	r10, #0
	bne	.L1806
	ldr	r5, [r4, #32]
	ldr	r3, [r4, #40]
	cmp	r7, r5
	add	r3, r3, #1
	str	r3, [r4, #40]
	beq	.L1792
.L1796:
	ldr	r2, [r4, #8]
	mov	r0, r5
	sub	r9, r5, #36
	cmp	r2, #0
	bne	.L1807
.L1792:
	mov	r0, r3
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1805:
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r9
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #40]
	b	.L1792
.L1806:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2010
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L1808
.L1795:
	mov	r1, r7
	mov	r0, r5
	ldr	r2, [r4, #32]
	bl	__list_add
	ldr	r3, [r4, #40]
	b	.L1792
.L1808:
	str	r10, [sp, #4]
	ldr	ip, [r6, #4]
	movw	r3, #:lower16:.LC165
	movw	r1, #:lower16:.LC166
	ldr	r2, .L1809
	movt	r3, #:upper16:.LC165
	movt	r1, #:upper16:.LC166
	ldr	r0, .L1809+4
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L1795
.L1810:
	.align	2
.L1809:
	.word	.LANCHOR3+1008
	.word	.LANCHOR2+1992
	.fnend
	.size	gs_start_rx, .-gs_start_rx
	.section	.rodata.str1.4
	.align	2
.LC167:
	.ascii	"uether\000"
	.align	2
.LC168:
	.ascii	"<3>%s: %s: Unable to create workqueue: uether\012\000"
	.section	.init.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_init, %function
gether_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, #0
	.pad #8
	sub	sp, sp, #8
	movw	r0, #:lower16:.LC167
	mov	r3, r4
	movt	r0, #:upper16:.LC167
	mov	r2, #1
	mov	r1, #10
	str	r4, [sp]
	bl	__alloc_workqueue_key
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3312]
	movne	r0, r4
	bne	.L1811
	ldr	r2, .L1815
	movw	r0, #:lower16:.LC168
	movt	r0, #:upper16:.LC168
	mov	r1, r2
	bl	printk
	mvn	r0, #11
.L1811:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L1816:
	.align	2
.L1815:
	.word	.LANCHOR3+1020
	.fnend
	.size	gether_init, .-gether_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_disable, %function
rmnet_smd_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	mov	r3, #0
	str	lr, [sp, #4]
	ldr	r0, [r0, #96]
	str	r3, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1818
	blx	r2
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
.L1818:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1819
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L1819:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1820
	blx	r2
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
.L1820:
	ldr	r3, [r3, #4]
	blx	r3
	add	r1, r4, #408
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #388]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	queue_work
	.fnend
	.size	rmnet_smd_disable, .-rmnet_smd_disable
	.section	.rodata.str1.4
	.align	2
.LC169:
	.ascii	"Probe called for device: %s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_ch_probe, %function
rmnet_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2034
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	movw	r4, #:lower16:.LANCHOR1
	ldrh	ip, [r3, r2]
	movt	r4, #:upper16:.LANCHOR1
	ldr	r2, [r4, #3316]
	tst	ip, #4
	bne	.L1837
.L1832:
	add	r1, r2, #392
	ldr	r0, [r2, #388]
	bl	queue_work
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1837:
	ldr	ip, [r2, #84]
	mov	r1, r0
	add	r0, r3, #2016
	ldr	r3, [r1]
	movw	r2, #:lower16:.LC169
	movt	r2, #:upper16:.LC169
	ldr	r1, [ip]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #3316]
	b	.L1832
	.fnend
	.size	rmnet_smd_ch_probe, .-rmnet_smd_ch_probe
	.section	.rodata.str1.4
	.align	2
.LC170:
	.ascii	"qmi resp empty  req%02x.%02x v%04x i%04x l%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_setup, %function
rmnet_sdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #192]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r8, [r1, #2]	@ unaligned
	ldr	r7, [r2, #24]
	cmp	r3, #0
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r10, [r7, #4]
	beq	.L1847
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r5, r0
	mov	r4, r1
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L1840
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1841
	cmp	r3, #8448
	beq	.L1850
.L1842:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2058
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r4, #94
	bne	.L1851
.L1838:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1850:
	movw	r3, #:lower16:rmnet_sdio_command_complete
	mov	r4, r6
	str	r0, [r10, #32]
	movt	r3, #:upper16:rmnet_sdio_command_complete
	mov	r6, #0
	str	r3, [r10, #28]
.L1843:
	ldrb	r3, [r10, #26]	@ zero_extendqisi2
	str	r4, [r10, #4]
	mov	r1, r10
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r10, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1838
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC151
	mov	r2, r4
	movt	r1, #:upper16:.LC151
	add	r0, r0, #32
	bl	dev_err
	b	.L1838
.L1841:
	cmp	r8, #0
	bne	.L1842
	add	fp, r0, #188
	mov	r0, fp
	bl	_raw_spin_lock
	mov	r2, r5
	ldr	r3, [r2, #120]!
	cmp	r3, r2
	beq	.L1852
	mov	r0, r3
	sub	r8, r3, #8
	str	r3, [sp, #20]
	bl	list_del
	ldr	r2, [r5, #128]
	mov	r0, fp
	sub	r2, r2, #1
	str	r2, [r5, #128]
	bl	_raw_spin_unlock
	ldr	r3, [sp, #20]
	ldr	r0, [r10]
	ldmdb	r3, {r1, r4}
	cmp	r6, r4
	movcc	r4, r6
	mov	r2, r4
	bl	memcpy
	ldr	r3, [sp, #20]
	movw	r2, #:lower16:rmnet_sdio_response_complete
	str	r5, [r10, #32]
	movt	r2, #:upper16:rmnet_sdio_response_complete
	str	r2, [r10, #28]
	ldr	r0, [r3, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	ldr	r3, [r5, #364]
	cmp	r4, r6
	movge	r6, #0
	movlt	r6, #1
	add	r3, r3, #1
	str	r3, [r5, #364]
	b	.L1843
.L1840:
	ldr	r3, [r0, #328]
	tst	r8, #1
	add	r1, r0, #332
	mov	r4, #0
	ldr	r0, [r0, #200]
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r5, #328]
	bl	queue_work
	subs	r6, r6, r4
	movne	r6, #1
	b	.L1843
.L1851:
	ldr	r1, [r7]
	str	r8, [sp, #4]
	movw	r2, #:lower16:.LC16
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC16
	str	r9, [sp, #8]
	ldr	r0, .L1853
	ldrb	r3, [r4]	@ zero_extendqisi2
	mvn	r4, #94
	add	r1, r1, #32
	str	ip, [sp]
	str	r6, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L1838
.L1852:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC170
	str	r8, [sp]
	movt	r1, #:upper16:.LC170
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r9, [sp, #4]
	ldrb	r2, [r4]	@ zero_extendqisi2
	str	r6, [sp, #8]
	add	r0, r0, #32
	bl	_dev_info
	mov	r0, fp
	bl	_raw_spin_unlock
	b	.L1842
.L1847:
	mvn	r4, #106
	b	.L1838
.L1854:
	.align	2
.L1853:
	.word	.LANCHOR2+2040
	.fnend
	.size	rmnet_sdio_setup, .-rmnet_sdio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_unthrottle, %function
gs_unthrottle:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	cmp	r4, #0
	beq	.L1855
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1857
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3320]
	bl	queue_work
.L1857:
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L1855:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_unthrottle, .-gs_unthrottle
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_read_complete, %function
gs_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r5, #48]
	mov	r3, r0
	add	r0, r5, #36
	mov	r5, r3
	add	r2, r4, #48
	ldr	r1, [r4, #52]
	ldr	ip, [r4, #128]
	add	r3, ip, lr
	str	r3, [r4, #128]
	bl	__list_add
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3320]
	bl	queue_work
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gs_read_complete, .-gs_read_complete
	.section	.rodata.str1.4
	.align	2
.LC171:
	.ascii	"%s: ep:%pK port:%pK\012\000"
	.align	2
.LC172:
	.ascii	"<4>%s: port:%pK port#%d unexpected %s status %d\012"
	.ascii	"\000"
	.align	2
.LC173:
	.ascii	"%s: %s shutdown\012\000"
	.text
	.align	2
	.global	gsdio_write_complete
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write_complete, %function
gsdio_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r3, #2082
	mov	r5, r1
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR2
	mov	r7, r0
	movt	r6, #:upper16:.LANCHOR2
	strd	r8, [sp, #16]
	ldrh	r2, [r6, r3]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r0]
	tst	r2, #4
	bne	.L1880
.L1865:
	cmp	r4, #0
	beq	.L1881
	add	r9, r4, #4
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r1, r4
	mov	r8, r0
	add	r0, r5, #36
	ldr	r2, [r1, #52]!
	bl	__list_add
	ldr	r3, [r4, #76]
	add	r3, r3, #1
	str	r3, [r4, #76]
	ldr	r3, [r5, #44]
	cmn	r3, #108
	bne	.L1882
	movw	r3, #2106
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L1883
.L1869:
	mov	r1, r8
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock_irqrestore
.L1882:
	cmp	r3, #0
	bne	.L1884
.L1868:
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3324]
	bl	queue_work
	b	.L1869
.L1883:
	movw	r1, #:lower16:.LC173
	ldr	r2, .L1885
	movt	r1, #:upper16:.LC173
	ldr	r0, .L1885+4
	ldr	r3, [r7, #4]
	bl	__dynamic_pr_debug
	b	.L1869
.L1880:
	movw	r1, #:lower16:.LC171
	mov	r3, r0
	ldr	r2, .L1885
	movt	r1, #:upper16:.LC171
	add	r0, r6, #2064
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L1865
.L1884:
	ldr	ip, [r7, #4]
	movw	r0, #:lower16:.LC172
	mov	r2, r4
	ldr	r1, .L1885
	movt	r0, #:upper16:.LC172
	str	ip, [sp]
	str	r3, [sp, #4]
	ldr	r3, [r4]
	bl	printk
	b	.L1868
.L1881:
	ldr	r1, .L1885
	movw	r0, #:lower16:.LC105
	movt	r0, #:upper16:.LC105
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L1886:
	.align	2
.L1885:
	.word	.LANCHOR3+1032
	.word	.LANCHOR2+2088
	.fnend
	.size	gsdio_write_complete, .-gsdio_write_complete
	.section	.rodata.str1.4
	.align	2
.LC174:
	.ascii	"<3>%s: invalid portno#%d\012\000"
	.align	2
.LC175:
	.ascii	"<3>%s: gser is null\012\000"
	.align	2
.LC176:
	.ascii	"%s: port:%pK port#%d ctrl_bits:%08x\012\000"
	.align	2
.LC177:
	.ascii	"<3>%s: port:%pK port#%d sdio not connected\012\000"
	.text
	.align	2
	.global	gsdio_ctrl_notify_modem
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_notify_modem, %function
gsdio_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	cmp	r1, r3
	bcs	.L1904
	cmp	r0, #0
	mov	r6, r0
	beq	.L1905
	mov	r3, #104
	lsl	ip, r2, #1
	mla	r1, r3, r1, r4
	and	ip, ip, #2
	ldr	r5, [r1, #24]
	ldr	r3, [r5, #176]
	cmp	r3, ip
	beq	.L1887
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2130
	str	ip, [r5, #176]
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1906
.L1891:
	ldr	r3, [r5, #108]
	cmp	r3, #0
	beq	.L1907
	ldr	r3, [r5, #176]
	cmp	r3, #0
	beq	.L1893
	ldr	r3, [r6, #136]
	cmp	r3, #0
	beq	.L1893
	mov	r0, r6
	ldr	r1, [r5, #172]
	blx	r3
.L1893:
	ldr	r0, [r4, #3324]
	add	r1, r5, #80
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
.L1887:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1906:
	str	r2, [sp, #4]
	ldr	ip, [r5]
	movw	r1, #:lower16:.LC176
	ldr	r2, .L1908
	movt	r1, #:upper16:.LC176
	mov	r3, r5
	add	r0, r0, #2112
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L1891
.L1904:
	mov	r2, r1
	ldr	r1, .L1908
	movw	r0, #:lower16:.LC174
	movt	r0, #:upper16:.LC174
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1907:
	ldr	r1, .L1908
	movw	r0, #:lower16:.LC177
	mov	r2, r5
	ldr	r3, [r5]
	movt	r0, #:upper16:.LC177
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1905:
	ldr	r1, .L1908
	movw	r0, #:lower16:.LC175
	movt	r0, #:upper16:.LC175
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1909:
	.align	2
.L1908:
	.word	.LANCHOR3+1056
	.fnend
	.size	gsdio_ctrl_notify_modem, .-gsdio_ctrl_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_write_complete, %function
gsmd_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR2
	movw	r3, #2154
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movt	r2, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #16]
	ldrh	r2, [r2, r3]
	.pad #12
	sub	sp, sp, #12
	mov	r6, r0
	ldr	r4, [r0]
	tst	r2, #4
	bne	.L1926
.L1911:
	cmp	r4, #0
	beq	.L1927
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L1913
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L1913
	cmp	r3, #0
	bne	.L1928
.L1915:
	mov	r1, r4
	add	r0, r5, #36
	ldr	r2, [r1, #44]!
	bl	__list_add
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #52
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3328]
	bl	queue_work
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L1913:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L1926:
	movw	r1, #:lower16:.LC171
	mov	r3, r0
	ldr	r2, .L1929
	movt	r1, #:upper16:.LC171
	ldr	r0, .L1929+4
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L1911
.L1928:
	ldr	ip, [r6, #4]
	movw	r0, #:lower16:.LC172
	mov	r2, r4
	ldr	r1, .L1929
	movt	r0, #:upper16:.LC172
	str	ip, [sp]
	str	r3, [sp, #4]
	ldr	r3, [r4]
	bl	printk
	b	.L1915
.L1927:
	ldr	r1, .L1929
	movw	r0, #:lower16:.LC105
	movt	r0, #:upper16:.LC105
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L1930:
	.align	2
.L1929:
	.word	.LANCHOR3+1080
	.word	.LANCHOR2+2136
	.fnend
	.size	gsmd_write_complete, .-gsmd_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_read_complete, %function
gsmd_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR2
	movw	r3, #2178
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movt	r2, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #16]
	ldrh	ip, [r2, r3]
	.pad #12
	sub	sp, sp, #12
	mov	r7, r0
	ldr	r4, [r0]
	tst	ip, #4
	bne	.L1943
.L1932:
	cmp	r4, #0
	beq	.L1944
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r2, [r4, #72]
	ldr	r2, [r2, #8]
	tst	r2, #1
	beq	.L1934
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L1934
	add	r0, r5, #36
	add	r2, r4, #20
	ldr	r1, [r4, #24]
	bl	__list_add
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #28
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3328]
	bl	queue_work
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L1934:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L1943:
	movw	r1, #:lower16:.LC171
	add	r0, r2, #2160
	ldr	r2, .L1945
	movt	r1, #:upper16:.LC171
	mov	r3, r7
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L1932
.L1944:
	ldr	r1, .L1945
	movw	r0, #:lower16:.LC105
	movt	r0, #:upper16:.LC105
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L1946:
	.align	2
.L1945:
	.word	.LANCHOR3+1100
	.fnend
	.size	gsmd_read_complete, .-gsmd_read_complete
	.section	.rodata.str1.4
	.align	2
.LC178:
	.ascii	"%s: name:%s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_probe, %function
ghsuart_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2202
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L1957
.L1948:
	ldr	r3, [r4, #4]
	movw	r2, #:lower16:.LANCHOR1
	mov	r1, #84
	movt	r2, #:upper16:.LANCHOR1
	mov	r0, #1
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1860]
	add	r1, r4, #88
	add	r6, r4, #8
	bl	_set_bit
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1949
	add	r1, r4, #36
	ldr	r0, [r4, #32]
	bl	queue_work
.L1949:
	mov	r0, r6
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1957:
	movw	r1, #:lower16:.LC178
	ldr	r2, .L1958
	movt	r1, #:upper16:.LC178
	ldr	r0, .L1958+4
	ldr	r3, [r4]
	bl	__dynamic_pr_debug
	b	.L1948
.L1959:
	.align	2
.L1958:
	.word	.LANCHOR3+1120
	.word	.LANCHOR2+2184
	.fnend
	.size	ghsuart_ctrl_probe, .-ghsuart_ctrl_probe
	.section	.rodata.str1.4
	.align	2
.LC179:
	.ascii	"%s: name:%s num_data_ports= %d\012\000"
	.align	2
.LC180:
	.ascii	"<3>%s: invalid port: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_probe, %function
ghsuart_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2226
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #8]
	movw	r4, #:lower16:.LANCHOR1
	ldrh	r2, [r3, r2]
	movt	r4, #:upper16:.LANCHOR1
	mov	r5, r0
	.pad #12
	sub	sp, sp, #12
	ldr	ip, [r4, #2028]
	tst	r2, #4
	bne	.L1971
.L1961:
	ldr	r2, [r5, #4]
	cmp	r2, ip
	bcs	.L1972
	mov	r3, #84
	mov	r0, #1
	mla	r2, r3, r2, r4
	ldr	r4, [r2, #2032]
	add	r1, r4, #188
	bl	_set_bit
	ldr	r0, [r4, #4]
	cmp	r0, #0
	bne	.L1973
.L1960:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L1973:
	add	r1, r4, #112
	ldr	r0, [r4, #108]
	bl	queue_work
	mov	r0, #0
	b	.L1960
.L1971:
	movw	r1, #:lower16:.LC179
	add	r0, r3, #2208
	ldr	r2, .L1974
	movt	r1, #:upper16:.LC179
	str	ip, [sp]
	ldr	r3, [r5]
	bl	__dynamic_pr_debug
	ldr	ip, [r4, #2028]
	b	.L1961
.L1972:
	movw	r0, #:lower16:.LC180
	ldr	r1, .L1974
	movt	r0, #:upper16:.LC180
	bl	printk
	mvn	r0, #21
	b	.L1960
.L1975:
	.align	2
.L1974:
	.word	.LANCHOR3+1140
	.fnend
	.size	ghsuart_data_probe, .-ghsuart_data_probe
	.section	.rodata.str1.4
	.align	2
.LC181:
	.ascii	"smd_control_ch_opened: %lu\012smd_data_ch_opened: %"
	.ascii	"lu\012usb online : %d\012dpkts_from_modem: %lu\012d"
	.ascii	"pkts_to_host: %lu\012pending_dpkts_to_host: %lu\012"
	.ascii	"dpkts_from_host: %lu\012dpkts_to_modem: %lu\012pend"
	.ascii	"ing_dpkts_to_modem: %lu\012cpkts_from_modem: %lu\012"
	.ascii	"cpkts_to_host: %lu\012pending_cpkts_to_host: %lu\012"
	.ascii	"cpkts_from_host: %lu\012cpkts_to_modem: %lu\012pend"
	.ascii	"ing_cpkts_to_modem: %lu\012smd_read_avail_ctrl: %d\012"
	.ascii	"smd_write_avail_ctrl: %d\012smd_read_avail_data: %d"
	.ascii	"\012smd_write_avail_data: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_read_stats, %function
rmnet_smd_debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 192
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #268
	sub	sp, sp, #268
	movw	lr, #:lower16:kmalloc_caches
	str	r1, [sp, #88]
	movt	lr, #:upper16:kmalloc_caches
	strd	r2, [sp, #92]
	add	r5, r4, #260
	add	ip, r4, #324
	ldrd	r2, [r5]
	ldrd	r0, [ip]
	ldrd	r6, [ip, #40]
	strd	r2, [sp, #136]
	ldrd	r2, [r5, #8]
	strd	r2, [sp, #144]
	ldrd	r2, [r5, #16]
	strd	r0, [sp, #200]
	ldrd	r0, [ip, #8]
	strd	r2, [sp, #152]
	ldrd	r2, [r5, #24]
	strd	r0, [sp, #208]
	ldrd	r0, [ip, #16]
	strd	r2, [sp, #160]
	ldrd	r2, [r5, #32]
	strd	r0, [sp, #216]
	ldrd	r0, [ip, #24]
	strd	r2, [sp, #168]
	ldrd	r2, [r5, #40]
	strd	r0, [sp, #224]
	ldrd	r0, [ip, #32]
	strd	r2, [sp, #176]
	strd	r0, [sp, #232]
	ldrd	r0, [r5, #48]
	ldrd	r2, [r5, #56]
	strd	r0, [sp, #184]
	ldrd	r0, [ip, #56]
	strd	r2, [sp, #192]
	add	r3, sp, #256
	strd	r6, [sp, #240]
	ldrd	r6, [ip, #48]
	strd	r0, [r3]
	ldr	r0, [lr, #36]
	strd	r6, [sp, #248]
	cmp	r0, #0
	beq	.L1979
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L1982
.L1977:
	add	r6, r4, #164
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #168]
	ldr	r3, [r4, #436]
	ldr	r2, [r4, #440]
	ldr	r8, [r4, #424]
	ldr	r9, [r4, #428]
	str	r3, [sp, #76]
	ldr	r3, [sp, #180]
	str	r2, [sp, #84]
	ldr	r2, [sp, #244]
	str	r0, [sp, #120]
	ldr	r0, [r4, #260]
	ldr	lr, [r4, #444]
	sub	r1, r9, r8
	ldr	r7, [r4, #432]
	ldr	fp, [r4, #448]
	ldr	r10, [r4, #452]
	str	lr, [sp, #80]
	str	ip, [sp, #100]
	strd	r2, [sp, #124]
	str	r1, [sp, #132]
	bl	smd_read_avail
	mov	ip, r0
	ldr	r0, [r4, #260]
	str	ip, [sp, #108]
	bl	smd_write_avail
	ldr	r3, [sp, #76]
	mov	ip, r0
	ldr	r0, [r4, #324]
	str	ip, [sp, #112]
	sub	r3, r7, r3
	str	r3, [sp, #104]
	bl	smd_read_avail
	ldr	lr, [sp, #80]
	mov	ip, r0
	ldr	r2, [sp, #84]
	ldr	r0, [r4, #324]
	str	ip, [sp, #116]
	sub	r4, lr, r2
	bl	smd_write_avail
	sub	lr, fp, r10
	ldr	r1, [sp, #100]
	mov	ip, r0
	str	r7, [sp, #20]
	ldr	r7, [sp, #76]
	mov	r0, r5
	ldrd	r2, [sp, #124]
	str	lr, [sp, #52]
	ldr	lr, [sp, #108]
	str	r8, [sp, #12]
	ldr	r8, [sp, #80]
	stmib	sp, {r1, r9}
	ldr	r9, [sp, #104]
	ldr	r1, [sp, #132]
	str	r7, [sp, #24]
	str	lr, [sp, #56]
	ldr	r7, [sp, #84]
	ldr	lr, [sp, #112]
	str	r2, [sp]
	movw	r2, #:lower16:.LC181
	movt	r2, #:upper16:.LC181
	str	r1, [sp, #16]
	mov	r1, #512
	str	r9, [sp, #28]
	str	r8, [sp, #32]
	str	lr, [sp, #60]
	ldr	lr, [sp, #116]
	str	r7, [sp, #36]
	str	r4, [sp, #40]
	str	fp, [sp, #44]
	str	r10, [sp, #48]
	str	lr, [sp, #64]
	str	ip, [sp, #68]
	bl	scnprintf
	mov	r4, r0
	mov	r0, r6
	ldr	r1, [sp, #120]
	bl	_raw_spin_unlock_irqrestore
	mov	r3, r5
	str	r4, [sp]
	ldrd	r0, [sp, #88]
	ldr	r2, [sp, #96]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1976:
	mov	r0, r4
	add	sp, sp, #268
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1979:
	mov	r5, #16
	b	.L1977
.L1982:
	mvn	r4, #11
	b	.L1976
	.fnend
	.size	rmnet_smd_debug_read_stats, .-rmnet_smd_debug_read_stats
	.section	.rodata.str1.4
	.align	2
.LC182:
	.ascii	"-*-DATA-*-\012dpkts_tohost:%lu epInPool:%u tx_size:"
	.ascii	"%u drp_cnt:%lu\012dpkts_tomodem:%lu epOutPool:%u rx"
	.ascii	"_size:%u pending:%u\012-*-QMI-*-\012cpkts_tomodem:%"
	.ascii	"lu  qmi_req_q:%u cbits:%d\012cpkts_tolaptop:%lu qmi"
	.ascii	"_resp_q:%u notify_cnt:%d\012-*-MISC-*-\012data_ch_s"
	.ascii	"tatus: %lu ctrl_ch_status: %lu\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_read_stats, %function
rmnet_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	ip, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r7, r2
	mov	r8, r3
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	.pad #64
	sub	sp, sp, #64
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L1986
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L1989
.L1984:
	add	r9, r4, #188
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #196]
	movw	r2, #:lower16:.LC182
	mov	r10, r0
	ldr	ip, [r4, #320]
	movt	r2, #:upper16:.LC182
	mov	r1, #4096
	ldr	r3, [r4, #352]
	mov	r0, r5
	str	ip, [sp, #56]
	ldr	ip, [r4, #316]
	str	lr, [sp, #48]
	str	ip, [sp, #52]
	ldr	ip, [r4, #128]
	str	ip, [sp, #44]
	ldr	ip, [r4, #364]
	str	ip, [sp, #40]
	ldr	ip, [r4, #328]
	str	ip, [sp, #36]
	ldr	ip, [r4, #116]
	str	ip, [sp, #32]
	ldr	ip, [r4, #368]
	str	ip, [sp, #28]
	ldr	ip, [r4, #324]
	str	ip, [sp, #24]
	ldr	ip, [r4, #180]
	str	ip, [sp, #20]
	ldr	ip, [r4, #168]
	str	ip, [sp, #16]
	ldr	ip, [r4, #356]
	str	ip, [sp, #12]
	ldr	ip, [r4, #360]
	str	ip, [sp, #8]
	ldr	ip, [r4, #152]
	str	ip, [sp, #4]
	ldr	ip, [r4, #140]
	str	ip, [sp]
	bl	scnprintf
	mov	r4, r0
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r8
	mov	r1, r7
	str	r4, [sp]
	mov	r0, r6
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1983:
	mov	r0, r4
	add	sp, sp, #64
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1986:
	mov	r5, #16
	b	.L1984
.L1989:
	mvn	r4, #11
	b	.L1983
	.fnend
	.size	rmnet_sdio_read_stats, .-rmnet_sdio_read_stats
	.section	.rodata.str1.4
	.align	2
.LC183:
	.ascii	"UNDEFINED\000"
	.align	2
.LC184:
	.ascii	"dpkts_tomsm:  %lu\012dpkts_tomdm: %lu\012cpkts_tomd"
	.ascii	"m: %lu\012dpkts_tolaptop: %lu\012cpkts_tolaptop:  %"
	.ascii	"lu\012cbits_to_modem: %lu\012tx skb size:     %u\012"
	.ascii	"rx_skb_size:     %u\012dpkts_pending_at_dmux: %u\012"
	.ascii	"tx drp cnt: %lu\012cpkts_drp_cnt: %lu\012cpkt_tx_ql"
	.ascii	"en: %lu\012cpkt_rx_qlen_to_modem: %lu\012xport: %s\012"
	.ascii	"ctr_ch_opened:\011%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_read_stats, %function
rmnet_mux_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	ip, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r7, r2
	mov	r8, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #92
	sub	sp, sp, #92
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L1994
	mov	r2, #1024
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L1998
.L1991:
	add	r10, r4, #364
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #208]
	mov	r9, r0
	ldr	r2, [r4, #360]
	ldr	r1, [r4, #400]
	ldr	ip, [r4, #420]
	str	r3, [sp, #60]
	ldr	r3, [r4, #232]
	ldr	r0, [r4, #408]
	sub	r2, r2, #1
	cmp	r2, #9
	ldr	fp, [r4, #404]
	ldr	lr, [r4, #412]
	str	r3, [sp, #64]
	ldr	r3, [r4, #308]
	str	ip, [sp, #76]
	movwhi	ip, #:lower16:.LC183
	movthi	ip, #:upper16:.LC183
	str	r3, [sp, #68]
	ldr	r3, [r4, #332]
	str	r0, [sp, #72]
	ldr	r0, [r4, #416]
	str	r3, [sp, #80]
	ldr	r3, [r4, #344]
	str	r3, [sp, #84]
	ldr	r3, [r4, #348]
	str	r3, [sp, #56]
	ldr	r3, [r4, #396]
	bls	.L1999
.L1993:
	ldr	r4, [r4, #352]
	movw	r2, #:lower16:.LC184
	str	r1, [sp]
	stmib	sp, {r0, fp, lr}
	movt	r2, #:upper16:.LC184
	ldr	lr, [sp, #56]
	mov	r1, #1024
	mov	r0, r5
	str	lr, [sp, #16]
	ldr	lr, [sp, #60]
	str	ip, [sp, #48]
	str	r4, [sp, #52]
	str	lr, [sp, #20]
	ldr	lr, [sp, #64]
	str	lr, [sp, #24]
	ldr	lr, [sp, #68]
	str	lr, [sp, #28]
	ldr	lr, [sp, #72]
	str	lr, [sp, #32]
	ldr	lr, [sp, #76]
	str	lr, [sp, #36]
	ldr	lr, [sp, #80]
	str	lr, [sp, #40]
	ldr	lr, [sp, #84]
	str	lr, [sp, #44]
	bl	scnprintf
	mov	r4, r0
	mov	r1, r9
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r8
	mov	r1, r7
	str	r4, [sp]
	mov	r0, r6
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1990:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1999:
	movw	ip, #:lower16:.LANCHOR3
	movt	ip, #:upper16:.LANCHOR3
	add	r2, ip, r2, lsl #2
	ldr	ip, [r2, #1160]
	b	.L1993
.L1994:
	mov	r5, #16
	b	.L1991
.L1998:
	mvn	r4, #11
	b	.L1990
	.fnend
	.size	rmnet_mux_read_stats, .-rmnet_mux_read_stats
	.section	.rodata.str1.4
	.align	2
.LC185:
	.ascii	"<3>usb: tty or gser is NULL !!\012\000"
	.align	2
.LC186:
	.ascii	"nbytes_from_host: %lu\012\000"
	.align	2
.LC187:
	.ascii	"nbytes_to_tty: %lu\012\000"
	.align	2
.LC188:
	.ascii	"nbytes_with_usb_OUT_txr: %lu\012\000"
	.align	2
.LC189:
	.ascii	"nbytes_from_tty: %lu\012\000"
	.align	2
.LC190:
	.ascii	"nbytes_to_host: %lu\012\000"
	.align	2
.LC191:
	.ascii	"nbytes_with_usb_IN_txr: %lu\012\000"
	.align	2
.LC192:
	.ascii	"tty_flags: %lu\012\000"
	.align	2
.LC193:
	.ascii	"DTR_status: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_read_status, %function
debug_read_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #20
	sub	sp, sp, #20
	str	r1, [sp, #12]
	ldr	fp, [r4, #4]
	ldr	r7, [r4, #8]
	cmp	fp, #0
	cmpne	r7, #0
	beq	.L2013
	mov	r9, r3
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	mov	r8, r2
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L2006
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L2014
.L2003:
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:.LC186
	mov	r1, #512
	ldr	r3, [r4, #128]
	movt	r2, #:upper16:.LC186
	mov	r10, r0
	mov	r0, r5
	bl	scnprintf
	movw	r2, #:lower16:.LC187
	rsb	r1, r0, #512
	ldr	r3, [r4, #132]
	mov	r6, r0
	movt	r2, #:upper16:.LC187
	add	r0, r5, r0
	bl	scnprintf
	ldr	ip, [r4, #128]
	add	r6, r6, r0
	movw	r2, #:lower16:.LC188
	ldr	r3, [r4, #132]
	rsb	r1, r6, #512
	movt	r2, #:upper16:.LC188
	add	r0, r5, r6
	sub	r3, ip, r3
	bl	scnprintf
	add	r6, r6, r0
	movw	r2, #:lower16:.LC189
	ldr	r3, [r4, #136]
	rsb	r1, r6, #512
	movt	r2, #:upper16:.LC189
	add	r0, r5, r6
	bl	scnprintf
	add	r6, r6, r0
	movw	r2, #:lower16:.LC190
	ldr	r3, [r4, #140]
	rsb	r1, r6, #512
	movt	r2, #:upper16:.LC190
	add	r0, r5, r6
	bl	scnprintf
	ldr	ip, [r4, #136]
	add	r6, r6, r0
	movw	r2, #:lower16:.LC191
	ldr	r3, [r4, #140]
	rsb	r1, r6, #512
	movt	r2, #:upper16:.LC191
	add	r0, r5, r6
	sub	r3, ip, r3
	bl	scnprintf
	add	r6, r6, r0
	movw	r2, #:lower16:.LC192
	ldr	r3, [r7, #156]
	rsb	r1, r6, #512
	add	r0, r5, r6
	movt	r2, #:upper16:.LC192
	bl	scnprintf
	ldr	r3, [fp, #108]
	add	r6, r6, r0
	cmp	r3, #0
	beq	.L2004
	mov	r0, fp
	blx	r3
	cmp	r0, #0
	movw	r2, #:lower16:.LC193
	rsb	r1, r6, #512
	add	r0, r5, r6
	movt	r2, #:upper16:.LC193
	movne	r3, #2
	moveq	r3, #0
	bl	scnprintf
	add	r6, r6, r0
.L2004:
	mov	r0, r4
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r9
	mov	r1, r8
	str	r6, [sp]
	mov	r3, r5
	ldr	r0, [sp, #12]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2000:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2006:
	mov	r5, #16
	b	.L2003
.L2014:
	mvn	r4, #11
	b	.L2000
.L2013:
	movw	r0, #:lower16:.LC185
	mvn	r4, #21
	movt	r0, #:upper16:.LC185
	bl	printk
	b	.L2000
	.fnend
	.size	debug_read_status, .-debug_read_status
	.section	.rodata.str1.4
	.align	2
.LC194:
	.ascii	"###PORT:%d port:%pK###\012nbytes_tolaptop: %lu\012n"
	.ascii	"bytes_tomodem:  %lu\012cbits_to_modem:  %u\012cbits"
	.ascii	"_to_laptop: %u\012read_pool_len:   %lu\012read_queu"
	.ascii	"e_len:  %lu\012write_pool_len:  %lu\012n_read:     "
	.ascii	"     %u\012sdio_open:       %d\012sdio_probe:      "
	.ascii	"%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_read_stats, %function
debug_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	cmp	r0, #0
	beq	.L2021
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L2025
.L2016:
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	ldr	r5, [r8]
	cmp	r5, #0
	beq	.L2019
	mov	r5, #0
	movw	r3, #:lower16:.LC194
	movt	r3, #:upper16:.LC194
	mov	r6, r5
	add	r9, r8, #4
	str	r3, [sp, #48]
.L2018:
	ldr	r4, [r9, #20]
	add	r9, r9, #104
	add	fp, r4, #4
	mov	r0, fp
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #112]
	mov	r3, r6
	rsb	r1, r5, #4096
	mov	r7, r0
	add	r0, r10, r5
	ldr	r2, [sp, #48]
	add	r6, r6, #1
	str	ip, [sp, #40]
	ldr	ip, [r4, #108]
	str	ip, [sp, #36]
	ldr	ip, [r4, #8]
	str	ip, [sp, #32]
	ldr	ip, [r4, #76]
	str	ip, [sp, #28]
	ldr	ip, [r4, #48]
	str	ip, [sp, #24]
	ldr	ip, [r4, #44]
	str	ip, [sp, #20]
	ldr	ip, [r4, #172]
	str	ip, [sp, #16]
	ldr	ip, [r4, #176]
	str	ip, [sp, #12]
	ldr	ip, [r4, #184]
	str	ip, [sp, #8]
	ldr	ip, [r4, #180]
	stm	sp, {r4, ip}
	bl	scnprintf
	mov	r3, r0
	mov	r1, r7
	mov	r0, fp
	add	r5, r5, r3
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8]
	cmp	r3, r6
	bhi	.L2018
.L2019:
	mov	r3, r10
	str	r5, [sp]
	ldrd	r0, [sp, #52]
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L2015:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2021:
	mov	r10, #16
	b	.L2016
.L2025:
	mvn	r4, #11
	b	.L2015
	.fnend
	.size	debug_sdio_read_stats, .-debug_sdio_read_stats
	.section	.rodata.str1.4
	.align	2
.LC195:
	.ascii	"###PORT:%d###\012nbytes_tolaptop: %lu\012nbytes_tom"
	.ascii	"odem:  %lu\012cbits_to_modem:  %u\012cbits_to_lapto"
	.ascii	"p: %u\012n_read: %u\012smd_read_avail: %d\012smd_wr"
	.ascii	"ite_avail: %d\012CH_OPENED: %d\012CH_READY: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_read_stats, %function
debug_smd_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #36]
	.pad #92
	sub	sp, sp, #92
	str	r1, [sp, #76]
	strd	r2, [sp, #80]
	cmp	r0, #0
	beq	.L2033
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #60]
	beq	.L2039
.L2027:
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	ldr	r3, [r8, #212]
	cmp	r3, #0
	beq	.L2031
	mov	r7, #0
	movw	r3, #:lower16:.LC195
	str	r8, [sp, #72]
	add	fp, r8, #216
	movt	r3, #:upper16:.LC195
	mov	r5, r7
	mov	r6, fp
	str	r3, [sp, #68]
.L2030:
	ldr	r9, [r6, #20]
	rsb	fp, r5, #512
	ldr	r3, [sp, #60]
	add	r8, r9, #4
	ldr	r10, [r9, #72]
	add	r3, r3, r5
	mov	r0, r8
	str	r3, [sp, #40]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r9, #8]
	ldr	r4, [r10]
	str	r3, [sp, #56]
	ldr	r3, [r9, #156]
	cmp	r4, #0
	moveq	ip, r4
	str	r3, [sp, #48]
	ldr	r3, [r9, #160]
	str	r0, [sp, #64]
	mov	r0, r4
	str	r3, [sp, #52]
	ldr	r3, [r9, #164]
	ldr	r9, [r9, #168]
	str	r3, [sp, #44]
	beq	.L2029
	bl	smd_read_avail
	ldr	ip, [r10]
	mov	r4, r0
	cmp	ip, #0
	mov	r0, ip
	beq	.L2029
	bl	smd_write_avail
	mov	ip, r0
.L2029:
	ldr	lr, [r10, #8]
	mov	r3, r7
	mov	r1, fp
	ldr	r10, [r10, #8]
	str	r9, [sp]
	add	r7, r7, #1
	str	r4, [sp, #20]
	ldr	r0, [sp, #40]
	add	r6, r6, #104
	ldr	r9, [sp, #48]
	ldr	r2, [sp, #44]
	and	lr, lr, #1
	ubfx	r10, r10, #1, #1
	str	ip, [sp, #24]
	str	r9, [sp, #8]
	ldr	r9, [sp, #52]
	str	r2, [sp, #4]
	ldr	r2, [sp, #68]
	str	lr, [sp, #28]
	str	r9, [sp, #12]
	ldr	r9, [sp, #56]
	str	r10, [sp, #32]
	str	r9, [sp, #16]
	bl	scnprintf
	mov	r3, r0
	mov	r0, r8
	ldr	r1, [sp, #64]
	add	r5, r5, r3
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #72]
	ldr	r3, [r3, #212]
	cmp	r3, r7
	bhi	.L2030
	mov	r3, r5
.L2031:
	ldr	r5, [sp, #60]
	str	r3, [sp]
	ldrd	r0, [sp, #76]
	ldr	r2, [sp, #84]
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2026:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2033:
	mov	r3, #16
	str	r3, [sp, #60]
	b	.L2027
.L2039:
	mvn	r4, #11
	b	.L2026
	.fnend
	.size	debug_smd_read_stats, .-debug_smd_read_stats
	.section	.rodata.str1.4
	.align	2
.LC196:
	.ascii	"#PORT:%d port:%pK data_ch:%pK#\012dpkts_to_usbhost:"
	.ascii	" %lu\012dpkts_to_modem:  %lu\012dpkts_pwith_bam: %u"
	.ascii	"\012to_usbhost_dcnt:  %u\012tomodem__dcnt:  %u\012r"
	.ascii	"x_flow_control_disable_count: %u\012rx_flow_control"
	.ascii	"_enable_count: %u\012rx_flow_control_triggered: %u\012"
	.ascii	"max_num_pkts_pending_with_bam: %u\012tx_buf_len:\011"
	.ascii	" %u\012rx_buf_len:\011 %u\012data_ch_open:   %d\012"
	.ascii	"data_ch_ready:  %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_read_stats, %function
gbam_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r7, r2
	mov	r8, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	cmp	r0, #0
	beq	.L2046
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L2050
.L2041:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #424]
	cmp	r2, #0
	ble	.L2051
	ldr	r4, [r3, #428]
	cmp	r4, #0
	beq	.L2044
	add	r10, r4, #4
	add	fp, r4, #8
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r0, fp
	bl	_raw_spin_lock
	ldr	r0, [r4, #20]
	add	ip, r4, #20
	movw	r2, #:lower16:.LC196
	ldr	r1, [r4, #20]
	movt	r2, #:upper16:.LC196
	mov	r3, #0
	ubfx	r0, r0, #1, #1
	ubfx	r1, r1, #2, #1
	strd	r0, [sp, #52]
	ldr	lr, [r4, #68]
	mov	r1, #1024
	mov	r0, r5
	str	lr, [sp, #48]
	ldr	lr, [r4, #44]
	str	lr, [sp, #44]
	ldr	lr, [r4, #280]
	str	lr, [sp, #40]
	ldr	lr, [r4, #276]
	str	lr, [sp, #36]
	ldr	lr, [r4, #272]
	str	lr, [sp, #32]
	ldr	lr, [r4, #268]
	str	lr, [sp, #28]
	ldr	lr, [r4, #248]
	str	lr, [sp, #24]
	ldr	lr, [r4, #244]
	str	lr, [sp, #20]
	ldr	lr, [r4, #240]
	str	lr, [sp, #16]
	ldr	lr, [r4, #260]
	str	lr, [sp, #12]
	ldr	lr, [r4, #264]
	stm	sp, {r4, ip, lr}
	bl	scnprintf
	mov	r4, r0
	mov	r0, fp
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L2044:
	mov	r2, r8
	mov	r1, r7
	str	r4, [sp]
	mov	r0, r6
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2040:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2051:
	mov	r4, #0
	b	.L2044
.L2046:
	mov	r5, #16
	b	.L2041
.L2050:
	mvn	r4, #11
	b	.L2040
	.fnend
	.size	gbam_read_stats, .-gbam_read_stats
	.section	.rodata.str1.4
	.align	2
.LC197:
	.ascii	"HIGH\000"
	.align	2
.LC198:
	.ascii	"LOW\000"
	.align	2
.LC199:
	.ascii	"#PORT:%d port:%pK ctrl_ch:%pK#\012to_usbhost: %lu\012"
	.ascii	"to_modem:   %lu\012DTR:        %s\012ch_open:    %d"
	.ascii	"\012ch_ready:   %d\012read_avail: %d\012write_avail"
	.ascii	":%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_read_stats, %function
gsmd_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #100
	sub	sp, sp, #100
	str	r1, [sp, #84]
	strd	r2, [sp, #88]
	cmp	r0, #0
	beq	.L2060
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #68]
	beq	.L2071
.L2053:
	ldr	r10, .L2072
	mov	fp, #0
	movw	r3, #:lower16:.LC197
	movw	r2, #:lower16:.LC198
	movw	r1, #:lower16:.LC199
	movt	r3, #:upper16:.LC197
	movt	r2, #:upper16:.LC198
	movt	r1, #:upper16:.LC199
	mov	r5, fp
	str	r3, [sp, #72]
	str	r2, [sp, #76]
	str	r1, [sp, #80]
.L2058:
	ldr	r8, [r10]
	rsb	r9, fp, #1024
	ldr	r3, [sp, #68]
	cmp	r8, #0
	add	r7, r8, #108
	add	r3, r3, fp
	mov	r0, r7
	str	r3, [sp, #44]
	beq	.L2055
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #76]
	str	r0, [sp, #56]
	ldr	r3, [r8, #92]
	ldr	lr, [r8, #88]
	ldr	r6, [r8]
	ldr	ip, [r8, #8]
	str	r3, [sp, #48]
	ldr	r3, [sp, #72]
	cmp	lr, #0
	ldr	r1, [r8, #8]
	moveq	r3, r2
	cmp	r6, #0
	mov	r4, r6
	mov	r0, r6
	ldr	r6, [r8, #96]
	str	r3, [sp, #52]
	and	r3, ip, #1
	mov	ip, r4
	str	r3, [sp, #64]
	ubfx	r3, r1, #1, #1
	str	r3, [sp, #60]
	beq	.L2057
	bl	smd_read_avail
	ldr	ip, [r8]
	mov	r4, r0
	cmp	ip, #0
	mov	r0, ip
	beq	.L2057
	bl	smd_write_avail
	mov	ip, r0
.L2057:
	mov	r1, r9
	mov	r3, r5
	str	r8, [sp]
	ldr	lr, [sp, #48]
	str	r8, [sp, #4]
	str	r6, [sp, #8]
	ldr	r0, [sp, #44]
	ldr	r2, [sp, #80]
	str	lr, [sp, #12]
	ldr	lr, [sp, #52]
	str	r4, [sp, #28]
	str	ip, [sp, #32]
	str	lr, [sp, #16]
	ldr	lr, [sp, #64]
	str	lr, [sp, #20]
	ldr	lr, [sp, #60]
	str	lr, [sp, #24]
	bl	scnprintf
	mov	r2, r0
	mov	r0, r7
	ldr	r1, [sp, #56]
	add	fp, fp, r2
	bl	_raw_spin_unlock_irqrestore
.L2055:
	add	r5, r5, #1
	add	r10, r10, #84
	cmp	r5, #6
	bne	.L2058
	ldr	r5, [sp, #68]
	str	fp, [sp]
	ldrd	r0, [sp, #84]
	ldr	r2, [sp, #92]
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2052:
	mov	r0, r4
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2060:
	mov	r3, #16
	str	r3, [sp, #68]
	b	.L2053
.L2071:
	mvn	r4, #11
	b	.L2052
.L2073:
	.align	2
.L2072:
	.word	.LANCHOR1+512
	.fnend
	.size	gsmd_ctrl_read_stats, .-gsmd_ctrl_read_stats
	.section	.rodata.str1.4
	.align	2
.LC200:
	.ascii	"\012Name:        %s\012#PORT:%d port: %pK\012to_usb"
	.ascii	"host:    %lu\012to_modem:      %lu\012cpkt_drp_cnt:"
	.ascii	"  %lu\012DTR:           %s\012ch_open:       %d\012"
	.ascii	"ch_ready:      %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_read_stats, %function
gctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	cmp	r0, #0
	beq	.L2082
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #40]
	beq	.L2090
.L2075:
	movw	fp, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR1
	ldr	r3, [fp, #1016]
	cmp	r3, #0
	beq	.L2091
	mov	r5, #0
	movw	r2, #:lower16:.LC197
	str	fp, [sp, #56]
	movw	r1, #:lower16:.LC198
	movw	r0, #:lower16:.LC200
	movt	r2, #:upper16:.LC197
	movt	r1, #:upper16:.LC198
	movt	r0, #:upper16:.LC200
	mov	r7, r5
	add	r6, fp, #1020
	str	r2, [sp, #44]
	str	r1, [sp, #48]
	str	r0, [sp, #52]
.L2079:
	ldr	r4, [r6]
	mov	ip, r5
	cmp	r4, #0
	add	r9, r4, #4
	mov	r0, r9
	beq	.L2077
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r0, r4, #96
	ldr	r1, [sp, #44]
	ldm	r0, {r0, r3, fp}
	ldr	r10, [r4, #88]
	ldr	lr, [r4, #84]
	ldr	ip, [r4, #84]
	str	r7, [sp]
	str	r4, [sp, #4]
	ldr	r2, [sp, #52]
	str	r3, [sp, #36]
	ldr	r3, [sp, #48]
	cmp	r10, #0
	str	r0, [sp, #12]
	and	lr, lr, #1
	ubfx	ip, ip, #1, #1
	moveq	r1, r3
	ldr	r3, [sp, #40]
	mov	r10, r1
	rsb	r1, r5, #1024
	add	r0, r3, r5
	ldr	r3, [sp, #36]
	str	r3, [sp, #8]
	ldr	r3, [r6, #24]
	str	fp, [sp, #16]
	str	r10, [sp, #20]
	str	lr, [sp, #24]
	str	ip, [sp, #28]
	bl	scnprintf
	mov	r3, r0
	mov	r1, r8
	mov	r0, r9
	add	r5, r5, r3
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #56]
	mov	ip, r5
	ldr	r3, [r3, #1016]
.L2077:
	add	r7, r7, #1
	add	r6, r6, #104
	cmp	r7, r3
	bcc	.L2079
.L2080:
	ldr	r5, [sp, #40]
	str	ip, [sp]
	ldrd	r0, [sp, #60]
	ldr	r2, [sp, #68]
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2074:
	mov	r0, r4
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2082:
	mov	r3, #16
	str	r3, [sp, #40]
	b	.L2075
.L2091:
	mov	ip, r3
	b	.L2080
.L2090:
	mvn	r4, #11
	b	.L2074
	.fnend
	.size	gctrl_read_stats, .-gctrl_read_stats
	.section	.rodata.str1.4
	.align	2
.LC201:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012\012"
	.ascii	"******UL INFO*****\012\012dpkts_to_modem:   %lu\012"
	.ascii	"tomodem_drp_cnt:  %u\012rx_buf_len:       %u\012tx "
	.ascii	"thld cnt       %u\012tx unthld cnt     %u\012TX_THR"
	.ascii	"OTTLED      %d\012\000"
	.align	2
.LC202:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012rx thld cnt\011   %u\012"
	.ascii	"rx unthld cnt\011   %u\012uthld pnd skbs    %u\012R"
	.ascii	"X_THROTTLED\011   %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_read_stats, %function
ghsic_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #48]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	cmp	r0, #0
	beq	.L2100
	mov	r2, #4096
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L2103
.L2093:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r3, [sp, #48]
	ldr	r3, [r3, #1436]
	cmp	r3, #0
	beq	.L2104
	movw	r2, #:lower16:.LC201
	mov	r5, #0
	movt	r2, #:upper16:.LC201
	movw	r1, #:lower16:.LC202
	movt	r1, #:upper16:.LC202
	mov	r7, r5
	str	r2, [sp, #52]
	ldr	r2, [sp, #48]
	str	r1, [sp, #56]
	add	r6, r2, #1440
.L2098:
	ldr	r4, [r6]
	mov	ip, r5
	cmp	r4, #0
	add	r9, r4, #80
	add	fp, r4, #48
	mov	r0, r9
	beq	.L2095
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #180]
	mov	r8, r0
	rsb	r1, r5, #4096
	ldr	ip, [r4, #180]
	add	r0, r10, r5
	add	r6, r6, #104
	ldr	r3, [r4, #164]
	ldr	r2, [sp, #52]
	and	lr, lr, #1
	ubfx	ip, ip, #1, #1
	ubfx	r3, r3, #1, #1
	str	r3, [sp, #36]
	ldr	r3, [r6, #-80]
	str	ip, [sp, #44]
	ldr	ip, [r4, #208]
	str	ip, [sp, #32]
	ldr	ip, [r4, #204]
	str	ip, [sp, #28]
	ldr	ip, [r4, #72]
	str	ip, [sp, #24]
	ldr	ip, [r4, #212]
	str	ip, [sp, #20]
	ldr	ip, [r4, #188]
	str	r7, [sp]
	add	r7, r7, #1
	stmib	sp, {r4, lr}
	str	ip, [sp, #16]
	ldr	ip, [sp, #44]
	str	ip, [sp, #12]
	bl	scnprintf
	mov	r3, r0
	mov	r1, r8
	mov	r0, r9
	add	r5, r3, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, fp
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #164]
	rsb	r1, r5, #4096
	mov	r8, r0
	ldr	r3, [r4, #192]
	add	r0, r10, r5
	ldr	r2, [sp, #56]
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #16]
	ldr	ip, [r4, #216]
	str	ip, [sp, #12]
	ldr	ip, [r4, #200]
	str	ip, [sp, #8]
	ldr	ip, [r4, #196]
	str	ip, [sp, #4]
	ldr	ip, [r4, #40]
	str	ip, [sp]
	bl	scnprintf
	mov	r3, r0
	mov	r1, r8
	mov	r0, fp
	add	r5, r5, r3
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #48]
	mov	ip, r5
	ldr	r3, [r3, #1436]
	cmp	r3, r7
	bhi	.L2098
.L2097:
	mov	r3, r10
	str	ip, [sp]
	ldrd	r0, [sp, #60]
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L2092:
	mov	r0, r4
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2095:
	add	r7, r7, #1
	add	r6, r6, #104
	cmp	r7, r3
	bcc	.L2098
	b	.L2097
.L2100:
	mov	r10, #16
	b	.L2093
.L2104:
	mov	ip, r3
	b	.L2097
.L2103:
	mvn	r4, #11
	b	.L2092
	.fnend
	.size	ghsic_data_read_stats, .-ghsic_data_read_stats
	.section	.rodata.str1.4
	.align	2
.LC203:
	.ascii	"#PORT:%d port: %pK\012to_usbhost:    %lu\012to_mode"
	.ascii	"m:      %lu\012cpkt_drp_cnt:  %lu\012DTR:          "
	.ascii	" %s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_read_stats, %function
ghsuart_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #52
	sub	sp, sp, #52
	str	r1, [sp, #36]
	strd	r2, [sp, #40]
	cmp	r0, #0
	beq	.L2113
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L2121
.L2106:
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	ldr	ip, [r8, #1856]
	cmp	ip, #0
	beq	.L2111
	movw	r3, #:lower16:.LC197
	movw	r10, #:lower16:.LC203
	ldr	r5, .L2122
	movt	r3, #:upper16:.LC197
	movt	r10, #:upper16:.LC203
	mov	r4, #0
	movw	r2, #:lower16:.LC198
	str	r3, [sp, #24]
	mov	r3, r10
	movt	r2, #:upper16:.LC198
	mov	r1, ip
	mov	r10, r4
	mov	fp, r3
	str	r2, [sp, #28]
	str	r8, [sp, #32]
.L2110:
	ldr	r7, [r5]
	mov	ip, r4
	add	r5, r5, #84
	cmp	r7, #0
	add	r8, r7, #8
	mov	r0, r8
	beq	.L2108
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r7, #92]
	mov	r9, r0
	mov	r3, r10
	ldr	lr, [sp, #28]
	ldr	r1, [r7, #96]
	ldr	r0, [r7, #100]
	ldr	r2, [r7, #104]
	str	r7, [sp]
	cmp	ip, #0
	ldr	r7, [sp, #24]
	moveq	r7, lr
	strd	r0, [sp, #4]
	rsb	r1, r4, #1024
	add	r0, r6, r4
	str	r2, [sp, #12]
	mov	r2, fp
	str	r7, [sp, #16]
	bl	scnprintf
	mov	r2, r0
	mov	r1, r9
	mov	r0, r8
	add	r4, r4, r2
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #32]
	mov	ip, r4
	ldr	r1, [r3, #1856]
.L2108:
	add	r10, r10, #1
	cmp	r10, r1
	bcc	.L2110
.L2111:
	mov	r3, r6
	str	ip, [sp]
	ldrd	r0, [sp, #36]
	ldr	r2, [sp, #44]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r6
	bl	kfree
.L2105:
	mov	r0, r4
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2113:
	mov	r6, #16
	b	.L2106
.L2121:
	mvn	r4, #11
	b	.L2105
.L2123:
	.align	2
.L2122:
	.word	.LANCHOR1+1860
	.fnend
	.size	ghsuart_ctrl_read_stats, .-ghsuart_ctrl_read_stats
	.section	.rodata.str1.4
	.align	2
.LC204:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012d"
	.ascii	"ata_ch_connected: %d\012\012******UL INFO*****\012\012"
	.ascii	"dpkts_to_modem:   %lu\012tomodem_drp_cnt:  %u\012rx"
	.ascii	"_buf_len:       %u\012TX_THROTTLED      %d\012\000"
	.align	2
.LC205:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012RX_THROTTLED\011   %d\012"
	.ascii	"\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_read_stats, %function
ghsuart_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	cmp	r0, #0
	beq	.L2132
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L2136
.L2125:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r3, [sp, #48]
	ldr	r3, [r3, #2028]
	cmp	r3, #0
	beq	.L2129
	mov	r2, r3
	ldr	r3, [sp, #48]
	mov	r5, #0
	movw	r1, #:lower16:.LC204
	movw	r0, #:lower16:.LC205
	str	r7, [sp, #44]
	movt	r1, #:upper16:.LC204
	movt	r0, #:upper16:.LC205
	mov	fp, r5
	add	r6, r3, #2032
	str	r1, [sp, #52]
	str	r0, [sp, #56]
.L2130:
	ldr	r4, [r6]
	mov	r3, r5
	cmp	r4, #0
	add	r9, r4, #104
	add	r7, r4, #72
	mov	r0, r9
	beq	.L2127
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	ldr	r10, [r4, #188]
	rsb	r1, r5, #1024
	ldr	ip, [r4, #188]
	add	r6, r6, #84
	ldr	r3, [r4, #188]
	ldr	r0, [r4, #184]
	and	r10, r10, #1
	ldr	r2, [sp, #52]
	ubfx	ip, ip, #1, #1
	ubfx	r3, r3, #2, #1
	ubfx	r0, r0, #1, #1
	str	r0, [sp, #32]
	ldr	lr, [r4, #96]
	ldr	r0, [sp, #44]
	str	lr, [sp, #28]
	ldr	lr, [r4, #212]
	add	r0, r0, r5
	str	lr, [sp, #24]
	ldr	lr, [r4, #204]
	str	fp, [sp]
	add	fp, fp, #1
	stmib	sp, {r4, r10, ip}
	str	r3, [sp, #16]
	ldr	r3, [r6, #-60]
	str	lr, [sp, #20]
	bl	scnprintf
	mov	r3, r0
	mov	r1, r8
	mov	r0, r9
	add	r5, r3, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #184]
	mov	r8, r0
	rsb	r1, r5, #1024
	ldr	r0, [sp, #44]
	ldr	r3, [r4, #208]
	ldr	r2, [sp, #56]
	ubfx	ip, ip, #2, #1
	add	r0, r0, r5
	str	ip, [sp, #4]
	ldr	ip, [r4, #64]
	str	ip, [sp]
	bl	scnprintf
	mov	r3, r0
	mov	r1, r8
	mov	r0, r7
	add	r5, r5, r3
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #48]
	ldr	r2, [r3, #2028]
	mov	r3, r5
	cmp	r2, fp
	bhi	.L2130
.L2135:
	ldr	r7, [sp, #44]
.L2129:
	str	r3, [sp]
	mov	r3, r7
	ldrd	r0, [sp, #60]
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r7
	bl	kfree
.L2124:
	mov	r0, r4
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2127:
	add	fp, fp, #1
	add	r6, r6, #84
	cmp	fp, r2
	bcc	.L2130
	b	.L2135
.L2132:
	mov	r7, #16
	b	.L2125
.L2136:
	mvn	r4, #11
	b	.L2124
	.fnend
	.size	ghsuart_data_read_stats, .-ghsuart_data_read_stats
	.section	.rodata.str1.4
	.align	2
.LC206:
	.ascii	"---Name: %s---\012endpoints: %s, %s\012dpkts_tolapt"
	.ascii	"op: %lu\012dpkts_tomodem:  %lu\012pkts_tolaptop_pen"
	.ascii	"ding: %u\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_read_stats, %function
debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	mov	r9, r1
	ldr	r4, [r6]
	strd	r10, [sp, #24]
	mov	r10, r2
	mov	fp, r3
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	cmp	r6, r4
	beq	.L2142
	movw	r8, #:lower16:debug_buffer
	movw	r7, #:lower16:.LC206
	sub	r4, r4, #4
	movt	r8, #:upper16:debug_buffer
	movt	r7, #:upper16:.LC206
	mov	r5, #0
.L2141:
	ldr	ip, [r4, #20]
	rsb	r1, r5, #4096
	add	r0, r8, r5
	mov	r2, r7
	mov	lr, r5
	cmp	ip, #0
	beq	.L2139
	ldr	lr, [ip, #136]
	ldr	r3, [r4]
	str	lr, [sp, #16]
	ldr	lr, [ip, #132]
	str	lr, [sp, #12]
	ldr	lr, [ip, #128]
	str	lr, [sp, #8]
	ldr	lr, [ip, #84]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #88]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	scnprintf
	ldr	r4, [r4, #4]
	add	r5, r5, r0
	mov	lr, r5
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L2141
.L2138:
	movw	r3, #:lower16:debug_buffer
	mov	r2, fp
	str	lr, [sp]
	mov	r1, r10
	mov	r0, r9
	movt	r3, #:upper16:debug_buffer
	bl	simple_read_from_buffer
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2139:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L2141
	b	.L2138
.L2142:
	mov	lr, #0
	b	.L2138
	.fnend
	.size	debug_read_stats, .-debug_read_stats
	.section	.exit.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_exit, %function
gether_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3312]
	b	destroy_workqueue
	.fnend
	.size	gether_exit, .-gether_exit
	.section	.rodata.str1.4
	.align	2
.LC207:
	.ascii	"qdss_cleanup\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_cleanup, %function
qdss_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2250
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2155
.L2146:
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	ldr	r4, [r5, #268]!
	cmp	r4, r5
	ldr	r6, [r4]
	beq	.L2145
	ldr	r8, .L2156
	b	.L2150
.L2148:
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, r5
	ldr	r3, [r6]
	beq	.L2145
.L2149:
	mov	r4, r6
	mov	r6, r3
.L2150:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r4, #80]
	bl	destroy_workqueue
	ldr	r3, [r4, #12]
	mov	r1, r7
	mov	r0, r8
	cmp	r3, #0
	bne	.L2148
	mov	r0, r4
	bl	list_del
	sub	r0, r4, #116
	bl	kfree
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, r5
	ldr	r3, [r6]
	bne	.L2149
.L2145:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2155:
	movw	r1, #:lower16:.LC207
	ldr	r0, .L2156+4
	movt	r1, #:upper16:.LC207
	bl	__dynamic_pr_debug
	b	.L2146
.L2157:
	.align	2
.L2156:
	.word	.LANCHOR1+3332
	.word	.LANCHOR2+2232
	.fnend
	.size	qdss_function_cleanup, .-qdss_function_cleanup
	.section	.rodata.str1.4
	.align	2
.LC208:
	.ascii	"<3>%s: grmnet is null\012\000"
	.align	2
.LC209:
	.ascii	"%s: ctrl_tomodem:%d ctrl_bits:%d setbits:%d clearbi"
	.ascii	"ts:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_send_cbits_tomodem, %function
gsmd_ctrl_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #5
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #16
	sub	sp, sp, #16
	bhi	.L2159
	movw	ip, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	ip, #:upper16:.LANCHOR1
	mla	r3, r3, r1, ip
	ldr	r4, [r3, #512]
	cmp	r4, #0
	beq	.L2159
	cmp	r0, #0
	beq	.L2179
	ands	r2, r2, #1
	bne	.L2167
	ldr	r1, [r4, #88]
	mov	r3, r2
	mov	r5, #2
	mov	ip, r5
	mov	r6, r2
	cmp	r1, r3
	beq	.L2158
.L2181:
	ldr	r1, [r4, #8]
	str	r3, [r4, #88]
	tst	r1, #1
	beq	.L2158
	movw	r0, #:lower16:.LANCHOR2
	movw	r1, #2274
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r1, [r0, r1]
	tst	r1, #4
	bne	.L2180
.L2166:
	ldr	r0, [r4]
	mov	r2, r5
	mov	r1, r6
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	smd_tiocmset
.L2167:
	ldr	r1, [r4, #88]
	mov	r6, #2
	mov	r5, #0
	mov	r3, r6
	mov	ip, r5
	cmp	r1, r3
	bne	.L2181
.L2158:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2180:
	movw	r1, #:lower16:.LC209
	add	r0, r0, #2256
	strd	r2, [sp]
	movt	r1, #:upper16:.LC209
	ldr	r2, .L2182
	str	ip, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L2166
.L2159:
	mov	r2, r1
	ldr	r1, .L2182
	movw	r0, #:lower16:.LC118
	movt	r0, #:upper16:.LC118
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2179:
	ldr	r1, .L2182
	movw	r0, #:lower16:.LC208
	movt	r0, #:upper16:.LC208
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2183:
	.align	2
.L2182:
	.word	.LANCHOR3+1200
	.fnend
	.size	gsmd_ctrl_send_cbits_tomodem, .-gsmd_ctrl_send_cbits_tomodem
	.section	.rodata.str1.4
	.align	2
.LC210:
	.ascii	"rmnet command error %d\012\000"
	.align	2
.LC211:
	.ascii	"rmnet control smd write failed\012\000"
	.align	2
.LC212:
	.ascii	"rmnet QMI pool is empty\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_command_complete, %function
rmnet_smd_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r8, [r4, #84]
	cmp	r2, #0
	blt	.L2192
	add	r7, r4, #164
	mov	r5, r1
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r2, [r4, #308]
	ldr	r3, [r4, #448]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #448]
	beq	.L2193
.L2186:
	mov	r3, r4
	ldr	r6, [r3, #108]!
	cmp	r6, r3
	beq	.L2194
	mov	r0, r6
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r6, #-8]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	memcpy
	ldr	r3, [r5, #48]
	mov	r0, r7
	str	r3, [r6, #-4]
	bl	_raw_spin_lock
	mov	r0, r6
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	bl	__list_add
	mov	r0, r7
.L2191:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2193:
	ldr	r0, [r4, #260]
	bl	smd_write_avail
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #308]
	bcc	.L2186
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	ldr	r0, [r4, #260]
	bl	smd_write
	ldr	r3, [r5, #48]
	cmp	r3, r0
	bne	.L2195
.L2188:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #452]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #452]
	b	.L2191
.L2192:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC210
	movt	r1, #:upper16:.LC210
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
.L2194:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC212
	movt	r1, #:upper16:.LC212
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
.L2195:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC211
	movt	r1, #:upper16:.LC211
	add	r0, r0, #32
	bl	dev_err
	b	.L2188
	.fnend
	.size	rmnet_smd_command_complete, .-rmnet_smd_command_complete
	.section	.rodata.str1.4
	.align	2
.LC213:
	.ascii	"RMNET %s response error %d, %d/%d\012\000"
	.align	2
.LC214:
	.ascii	"rmnet data smd write failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_complete_epout, %function
rmnet_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	add	r7, r1, #36
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	add	r6, r5, #164
	ldr	r8, [r5, #84]
	cmn	r3, #104
	beq	.L2208
	cmp	r3, #0
	mov	r4, r1
	beq	.L2198
	cmn	r3, #108
	beq	.L2208
	ldr	r8, [r8]
	movw	r1, #:lower16:.LC213
	ldr	lr, [r4, #4]
	movt	r1, #:upper16:.LC213
	ldr	ip, [r4, #48]
	ldr	r2, [r0, #4]
	add	r0, r8, #32
	stm	sp, {ip, lr}
	bl	dev_err
.L2208:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r1, [r5, #152]
	mov	r0, r7
	add	r2, r5, #148
.L2207:
	bl	__list_add
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2198:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r2, [r5, #372]
	ldr	r3, [r5, #432]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r5, #432]
	bne	.L2200
	ldr	r0, [r5, #324]
	bl	smd_write_avail
	ldr	r3, [r4, #48]
	cmp	r0, r3
	strcc	r3, [r5, #372]
	bcc	.L2200
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r1, [r4]
	ldr	r2, [r4, #48]
	ldr	r0, [r5, #324]
	bl	smd_write
	ldr	r3, [r4, #48]
	cmp	r3, r0
	bne	.L2209
.L2202:
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r0, r7
	add	r2, r5, #148
	ldr	r1, [r5, #152]
	ldr	r3, [r5, #436]
	add	r3, r3, #1
	str	r3, [r5, #436]
	bl	__list_add
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	rmnet_smd_start_rx
.L2200:
	mov	r0, r7
	add	r2, r5, #156
	ldr	r1, [r5, #160]
	b	.L2207
.L2209:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC214
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	b	.L2202
	.fnend
	.size	rmnet_smd_complete_epout, .-rmnet_smd_complete_epout
	.section	.rodata.str1.4
	.align	2
.LC215:
	.ascii	"rmnet SMD data channel full\012\000"
	.align	2
.LC216:
	.ascii	"rmnet SMD data write failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_data_rx_tlet, %function
rmnet_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #164
	add	r9, r0, #156
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	fp, [r0, #84]
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #156]
	mov	r6, r0
	cmp	r9, r4
	beq	.L2215
	add	r10, r5, #148
	b	.L2211
.L2213:
	bl	list_del
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #-36]
	ldr	r2, [r4, #12]
	ldr	r0, [r5, #324]
	bl	smd_write
	mov	r7, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r6, r0
	mov	r2, r10
	mov	r0, r4
	cmp	r3, r7
	bne	.L2221
	ldr	r1, [r5, #152]
	ldr	r3, [r5, #436]
	add	r3, r3, #1
	str	r3, [r5, #436]
	bl	__list_add
	ldr	r4, [r5, #156]
	cmp	r9, r4
	beq	.L2215
.L2211:
	ldr	r0, [r5, #324]
	bl	smd_write_avail
	ldr	r3, [r4, #12]
	mov	r2, r0
	mov	r0, r4
	cmp	r2, r3
	bcs	.L2213
	movw	r2, #:lower16:.LANCHOR2
	movw	r1, #2298
	str	r3, [r5, #372]
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r3, [r2, r1]
	tst	r3, #4
	bne	.L2222
.L2212:
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rmnet_smd_start_rx
.L2215:
	mov	r3, #0
	str	r3, [r5, #372]
	b	.L2212
.L2221:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC216
	movt	r1, #:upper16:.LC216
	add	r0, r0, #32
	bl	dev_err
	b	.L2212
.L2222:
	ldr	r1, [fp]
	movw	r2, #:lower16:.LC215
	movt	r2, #:upper16:.LC215
	ldr	r0, .L2223
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2212
.L2224:
	.align	2
.L2223:
	.word	.LANCHOR2+2280
	.fnend
	.size	rmnet_data_rx_tlet, .-rmnet_data_rx_tlet
	.section	.rodata.str1.4
	.align	2
.LC217:
	.ascii	"rmnet control smd channel full\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_control_rx_tlet, %function
rmnet_control_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #164
	add	r9, r0, #124
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	fp, [r0, #84]
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #124]
	mov	r6, r0
	cmp	r9, r5
	beq	.L2230
	add	r10, r4, #108
	b	.L2226
.L2228:
	bl	list_del
	ldr	r3, [r4, #448]
	mov	r1, r6
	mov	r0, r8
	add	r3, r3, #1
	str	r3, [r4, #448]
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r5, {r1, r2}
	ldr	r0, [r4, #260]
	bl	smd_write
	mov	r7, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #-4]
	mov	r6, r0
	mov	r2, r10
	mov	r0, r5
	cmp	r3, r7
	bne	.L2236
	ldr	r1, [r4, #112]
	ldr	r3, [r4, #452]
	add	r3, r3, #1
	str	r3, [r4, #452]
	bl	__list_add
	ldr	r5, [r4, #124]
	cmp	r9, r5
	beq	.L2230
.L2226:
	ldr	r0, [r4, #260]
	bl	smd_write_avail
	ldr	r3, [r5, #-4]
	mov	r2, r0
	mov	r0, r5
	cmp	r2, r3
	bge	.L2228
	movw	r0, #:lower16:.LANCHOR2
	str	r3, [r4, #308]
	movw	r3, #2322
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L2237
.L2227:
	mov	r1, r6
	mov	r0, r8
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2230:
	mov	r3, #0
	str	r3, [r4, #308]
	b	.L2227
.L2236:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC211
	movt	r1, #:upper16:.LC211
	add	r0, r0, #32
	bl	dev_err
	b	.L2227
.L2237:
	ldr	r1, [fp]
	movw	r2, #:lower16:.LC217
	add	r0, r0, #2304
	movt	r2, #:upper16:.LC217
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2227
	.fnend
	.size	rmnet_control_rx_tlet, .-rmnet_control_rx_tlet
	.section	.rodata.str1.4
	.align	2
.LC218:
	.ascii	"<3>%s: smd_write failed err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_write_w, %function
grmnet_ctrl_smd_write_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r8, [r0, #16]
	add	r8, r8, #108
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r0, [r5, #-68]
	cmp	r0, #0
	beq	.L2239
	sub	r9, r5, #28
	b	.L2241
.L2248:
	bl	smd_write_avail
	ldr	r3, [r4, #-4]
	mov	r2, r0
	mov	r0, r4
	cmp	r2, r3
	blt	.L2239
	bl	list_del
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #-68]
	ldmdb	r4, {r1, r2}
	bl	smd_write
	mov	r7, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-4]
	mov	r6, r0
	cmp	r3, r7
	bne	.L2247
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r10
	bl	kfree
	ldr	r0, [r5, #-68]
	ldr	r3, [r5, #24]
	cmp	r0, #0
	add	r3, r3, #1
	str	r3, [r5, #24]
	beq	.L2239
.L2241:
	ldr	r4, [r5, #-28]
	cmp	r9, r4
	sub	r10, r4, #8
	bne	.L2248
.L2239:
	mov	r1, r6
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L2247:
	movw	r0, #:lower16:.LC218
	ldr	r1, .L2249
	mov	r2, r7
	movt	r0, #:upper16:.LC218
	bl	printk
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r10
	bl	kfree
	b	.L2239
.L2250:
	.align	2
.L2249:
	.word	.LANCHOR3+1232
	.fnend
	.size	grmnet_ctrl_smd_write_w, .-grmnet_ctrl_smd_write_w
	.section	.rodata.str1.4
	.align	2
.LC219:
	.ascii	"rmnet_mux SMD data channel full\012\000"
	.align	2
.LC220:
	.ascii	"rmnet_mux SMD data write failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_data_rx_tlet, %function
rmnet_mux_smd_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #364
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	fp, [r0, #84]
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #368]
	mov	r6, r0
	cmp	r3, #0
	beq	.L2252
	add	r9, r5, #120
	add	r10, r5, #112
	b	.L2256
.L2253:
	ldr	r0, [r5, #128]
	bl	smd_write_avail
	ldr	r3, [r4, #12]
	mov	r2, r0
	mov	r0, r4
	cmp	r2, r3
	bcc	.L2265
	bl	list_del
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #-36]
	ldr	r2, [r4, #12]
	ldr	r0, [r5, #128]
	bl	smd_write
	mov	r7, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r6, r0
	mov	r2, r10
	mov	r0, r4
	cmp	r3, r7
	bne	.L2266
	ldr	r1, [r5, #116]
	ldr	r3, [r5, #396]
	add	r3, r3, #1
	str	r3, [r5, #396]
	bl	__list_add
	ldr	r3, [r5, #368]
	cmp	r3, #0
	beq	.L2252
.L2256:
	ldr	r4, [r5, #120]
	cmp	r9, r4
	bne	.L2253
	mov	r3, #0
	str	r3, [r5, #176]
.L2252:
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rmnet_mux_smd_start_rx
.L2265:
	movw	r2, #:lower16:.LANCHOR2
	movw	r1, #2346
	str	r3, [r5, #176]
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r3, [r2, r1]
	tst	r3, #4
	beq	.L2252
	ldr	r1, [fp]
	movw	r2, #:lower16:.LC219
	movt	r2, #:upper16:.LC219
	ldr	r0, .L2267
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2252
.L2266:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC220
	movt	r1, #:upper16:.LC220
	add	r0, r0, #32
	bl	dev_err
	b	.L2252
.L2268:
	.align	2
.L2267:
	.word	.LANCHOR2+2328
	.fnend
	.size	rmnet_mux_smd_data_rx_tlet, .-rmnet_mux_smd_data_rx_tlet
	.section	.rodata.str1.4
	.align	2
.LC221:
	.ascii	"RMNET_MUX %s response error %d, %d/%d\012\000"
	.align	2
.LC222:
	.ascii	"rmnet_mux data smd write failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_complete_epout, %function
rmnet_mux_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r5, #360]
	cmp	r3, #0
	beq	.L2283
	ldr	r3, [r1, #44]
	add	r8, r1, #36
	add	r7, r5, #364
	ldr	r9, [r5, #84]
	cmn	r3, #104
	beq	.L2282
	cmp	r3, #0
	beq	.L2272
	cmn	r3, #108
	beq	.L2282
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC221
	ldr	r0, [r9]
	movt	r1, #:upper16:.LC221
	ldr	lr, [r4, #4]
	ldr	ip, [r4, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
.L2282:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r1, [r5, #116]
	mov	r0, r8
	add	r2, r5, #112
.L2281:
	bl	__list_add
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock
.L2272:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r5, #176]
	cmp	r3, #0
	bne	.L2274
	ldr	r0, [r5, #128]
	bl	smd_write_avail
	ldr	r3, [r4, #48]
	cmp	r0, r3
	strcc	r3, [r5, #176]
	bcs	.L2284
.L2274:
	mov	r0, r8
	add	r2, r5, #120
	ldr	r1, [r5, #124]
	b	.L2281
.L2283:
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L2284:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r1, [r4]
	ldr	r2, [r4, #48]
	ldr	r0, [r5, #128]
	bl	smd_write
	ldr	r3, [r4, #48]
	cmp	r3, r0
	beq	.L2276
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC222
	movt	r1, #:upper16:.LC222
	add	r0, r0, #32
	bl	dev_err
.L2276:
	ldr	r3, [r5, #396]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r5, #396]
	bl	_raw_spin_lock
	mov	r0, r8
	add	r2, r5, #112
	ldr	r1, [r5, #116]
	bl	__list_add
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	rmnet_mux_smd_start_rx
	.fnend
	.size	rmnet_mux_smd_complete_epout, .-rmnet_mux_smd_complete_epout
	.section	.rodata.str1.4
	.align	2
.LC223:
	.ascii	"rmnet data tx ep error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_complete_epin, %function
rmnet_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	add	r7, r1, #36
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	add	r6, r4, #140
	add	r5, r4, #164
	cmn	r2, #104
	beq	.L2286
	cmp	r2, #0
	beq	.L2287
	cmn	r2, #108
	beq	.L2286
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC223
	movt	r1, #:upper16:.LC223
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2287:
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #140]
	cmp	r3, r6
	beq	.L2301
	mov	r2, r6
	mov	r0, r7
	ldr	r1, [r4, #144]
	bl	__list_add
	ldr	r3, [r4, #424]
	add	r3, r3, #1
	str	r3, [r4, #424]
.L2292:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2301:
	mov	r2, r6
	mov	r0, r7
	ldr	r1, [r4, #144]
	bl	__list_add
	ldr	r3, [r4, #424]
	add	r1, r4, #332
	mov	r0, #0
	add	r6, r4, #328
	add	r3, r3, #1
	str	r3, [r4, #424]
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L2292
	mov	r0, r6
	bl	__tasklet_schedule
	b	.L2292
.L2286:
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r2, r6
	mov	r0, r7
	ldr	r1, [r4, #144]
	bl	__list_add
	b	.L2292
	.fnend
	.size	rmnet_smd_complete_epin, .-rmnet_smd_complete_epin
	.section	.rodata.str1.4
	.align	2
.LC224:
	.ascii	"rmnet_mux data tx ep error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_complete_epin, %function
rmnet_mux_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r3, [r5, #360]
	cmp	r3, #0
	beq	.L2316
	ldr	r2, [r1, #44]
	add	r7, r5, #104
	add	r6, r5, #364
	add	r4, r1, #36
	cmn	r2, #104
	beq	.L2304
	cmp	r2, #0
	beq	.L2305
	cmn	r2, #108
	beq	.L2304
	ldr	r3, [r5, #84]
	movw	r1, #:lower16:.LC224
	movt	r1, #:upper16:.LC224
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2305:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #104]
	mov	r2, r7
	mov	r0, r4
	ldr	r1, [r5, #108]
	cmp	r3, r7
	beq	.L2307
	bl	__list_add
.L2308:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2304:
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r2, r7
	mov	r0, r4
	ldr	r1, [r5, #108]
	bl	__list_add
	b	.L2308
.L2316:
	mov	r6, r0
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r3, #12]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L2307:
	bl	__list_add
	add	r1, r5, #136
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r5, r5, #132
	bne	.L2308
	mov	r0, r5
	bl	__tasklet_schedule
	b	.L2308
	.fnend
	.size	rmnet_mux_smd_complete_epin, .-rmnet_mux_smd_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_setup, %function
rmnet_smd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #168]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r7, [r1, #2]	@ unaligned
	ldr	r6, [r2, #24]
	cmp	r3, #0
	ldrh	r8, [r1, #6]	@ unaligned
	ldr	r10, [r6, #4]
	beq	.L2328
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r5, r0
	mov	r4, r1
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L2319
	movw	r2, #41217
	cmp	r3, r2
	beq	.L2320
	cmp	r3, #8448
	beq	.L2331
.L2321:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2370
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r4, #94
	bne	.L2332
.L2317:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2331:
	movw	r3, #:lower16:rmnet_smd_command_complete
	mov	r4, r8
	str	r0, [r10, #32]
	movt	r3, #:upper16:rmnet_smd_command_complete
	str	r3, [r10, #28]
.L2322:
	ldrb	r3, [r10, #26]	@ zero_extendqisi2
	str	r4, [r10, #4]
	mov	r1, r10
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r10, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L2317
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC151
	mov	r2, r4
	movt	r1, #:upper16:.LC151
	add	r0, r0, #32
	bl	dev_err
	b	.L2317
.L2320:
	cmp	r7, #0
	bne	.L2321
	add	fp, r0, #164
	mov	r0, fp
	bl	_raw_spin_lock
	mov	r2, r5
	ldr	r3, [r2, #132]!
	cmp	r3, r2
	beq	.L2333
	mov	r0, r3
	str	r3, [sp, #20]
	bl	list_del
	mov	r0, fp
	bl	_raw_spin_unlock
	ldr	r3, [sp, #20]
	ldr	r0, [r10]
	ldmdb	r3, {r1, r2}
	bl	memcpy
	ldr	r3, [sp, #20]
	mov	r0, fp
	ldr	r4, [r3, #-4]
	bl	_raw_spin_lock
	ldr	r1, [r5, #116]
	add	r2, r5, #116
	ldr	r3, [sp, #20]
	cmp	r2, r1
	ldr	r1, [r5, #120]
	mov	r0, r3
	beq	.L2324
	bl	__list_add
.L2325:
	mov	r0, fp
	bl	_raw_spin_unlock
	movw	r3, #:lower16:rmnet_txcommand_complete
	str	r5, [r10, #32]
	movt	r3, #:upper16:rmnet_txcommand_complete
	str	r3, [r10, #28]
	b	.L2326
.L2319:
	ands	r1, r7, #1
	ldr	r0, [r0, #260]
	movne	r2, #0
	movne	r1, #2
	moveq	r2, #2
	bl	smd_tiocmset
	mov	r4, r0
.L2326:
	cmp	r4, #0
	blt	.L2317
	b	.L2322
.L2332:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC16
	add	r0, r0, #2352
	ldr	r1, [r6]
	movt	r2, #:upper16:.LC16
	str	r7, [sp, #4]
	ldrb	r3, [r4]	@ zero_extendqisi2
	mvn	r4, #94
	str	ip, [sp]
	add	r1, r1, #32
	str	r9, [sp, #8]
	str	r8, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L2317
.L2324:
	bl	__list_add
	mov	r0, r7
	add	r1, r5, #268
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r3, r5, #264
	bne	.L2325
	mov	r0, r3
	bl	__tasklet_schedule
	b	.L2325
.L2333:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC170
	str	r7, [sp]
	movt	r1, #:upper16:.LC170
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r9, [sp, #4]
	ldrb	r2, [r4]	@ zero_extendqisi2
	str	r8, [sp, #8]
	add	r0, r0, #32
	bl	_dev_info
	mov	r0, fp
	bl	_raw_spin_unlock
	b	.L2321
.L2328:
	mvn	r4, #106
	b	.L2317
	.fnend
	.size	rmnet_smd_setup, .-rmnet_smd_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_unbind, %function
rmnet_smd_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r1, #284
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	tasklet_kill
	add	r0, r4, #264
	bl	tasklet_kill
	add	r0, r4, #348
	bl	tasklet_kill
	add	r0, r4, #328
	bl	tasklet_kill
	ldr	r0, [r4, #388]
	bl	flush_workqueue
	mov	r0, r4
	bl	rmnet_smd_free_buf
	mov	r3, #0
	ldr	r0, [r4, #388]
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	str	r3, [r4, #96]
	bl	destroy_workqueue
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3336]
	bl	debugfs_remove_recursive
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	rmnet_smd_unbind, .-rmnet_smd_unbind
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_exit, %function
ghsuart_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3340]
	b	debugfs_remove_recursive
	.fnend
	.size	ghsuart_ctrl_exit, .-ghsuart_ctrl_exit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_exit, %function
ghsuart_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3344]
	b	debugfs_remove_recursive
	.fnend
	.size	ghsuart_data_exit, .-ghsuart_data_exit
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_cleanup, %function
diag_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r3, #3348]
	bl	debugfs_remove_recursive
	ldr	r4, [r6]
	cmp	r4, r6
	ldr	r5, [r4]
	beq	.L2338
	ldr	r8, .L2344
	b	.L2342
.L2340:
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, r6
	ldr	r3, [r5]
	beq	.L2338
.L2341:
	mov	r4, r5
	mov	r5, r3
.L2342:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	mov	r0, r8
	mov	r1, r7
	cmp	r3, #0
	bne	.L2340
	mov	r0, r4
	sub	r9, r4, #4
	bl	list_del
	mov	r0, r9
	bl	kfree
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, r6
	ldr	r3, [r5]
	bne	.L2341
.L2338:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2345:
	.align	2
.L2344:
	.word	.LANCHOR1+3352
	.fnend
	.size	diag_function_cleanup, .-diag_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_function_cleanup, %function
rmnet_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4, #3356]
	str	lr, [sp, #12]
	cmp	r3, #0
	beq	.L2347
	ldr	r6, .L2354
	mov	r5, #0
.L2348:
	ldr	r0, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #24
	bl	kfree
	ldr	r3, [r4, #3356]
	cmp	r3, r5
	bhi	.L2348
.L2347:
	ldr	r0, [r4, #3360]
	bl	debugfs_remove_recursive
	mov	r3, #0
	ldr	r6, [sp, #8]
	str	r3, [r4, #3356]
	str	r3, [r4, #3364]
	str	r3, [r4, #3368]
	str	r3, [r4, #3372]
	str	r3, [r4, #3376]
	str	r3, [r4, #3380]
	str	r3, [r4, #3384]
	str	r3, [r4, #3388]
	str	r3, [r4, #3392]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2355:
	.align	2
.L2354:
	.word	.LANCHOR1+3240
	.fnend
	.size	rmnet_function_cleanup, .-rmnet_function_cleanup
	.section	.rodata.str1.4
	.align	2
.LC225:
	.ascii	"rmnet data Tx buffers full\012\000"
	.align	2
.LC226:
	.ascii	"rmnet tx data enqueue err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_data_tx_tlet, %function
rmnet_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	add	r5, r0, #164
	strd	r6, [sp, #8]
	add	r7, r0, #140
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r8, [r0, #84]
	b	.L2360
.L2370:
	ldr	r0, [r4, #324]
	bl	smd_read_avail
	mov	r3, r0
	mov	r0, r5
	cmp	r3, r10
	blt	.L2356
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #140]
	mov	r6, r0
	cmp	r7, r9
	mov	r0, r9
	sub	fp, r9, #36
	beq	.L2368
	bl	list_del
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r10
	ldr	r1, [r9, #-36]
	ldr	r0, [r4, #324]
	bl	smd_read
	str	r0, [r9, #-32]
	ldr	r0, [r4, #92]
	mov	r2, #32
	mov	r1, fp
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r2, r0
	mov	r0, r5
	cmp	r2, #0
	bne	.L2369
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #428]
	mov	r1, r0
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #428]
	bl	_raw_spin_unlock_irqrestore
.L2360:
	ldr	r0, [r4, #324]
	bl	smd_cur_packet_size
	subs	r10, r0, #0
	bne	.L2370
.L2356:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2368:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2394
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L2356
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC225
	ldr	r0, .L2371
	movt	r2, #:upper16:.LC225
	add	r1, r1, #32
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_dev_dbg
.L2369:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC226
	movt	r1, #:upper16:.LC226
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r2, r7
	ldr	r1, [r4, #144]
	mov	r4, r0
	mov	r0, r9
	bl	__list_add
	mov	r1, r4
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2372:
	.align	2
.L2371:
	.word	.LANCHOR2+2376
	.fnend
	.size	rmnet_data_tx_tlet, .-rmnet_data_tx_tlet
	.section	.rodata.str1.4
	.align	2
.LC227:
	.ascii	"rmnet QMI Tx buffers full\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_control_tx_tlet, %function
rmnet_control_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	movt	r3, #:upper16:.LC1
	strd	r6, [sp, #8]
	add	r7, r0, #164
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	ldr	r3, [r0, #84]
	str	r3, [sp, #4]
.L2378:
	add	r9, r4, #116
.L2377:
	add	r8, r4, #132
.L2376:
	ldr	r0, [r4, #260]
	add	r6, r4, #172
	bl	smd_cur_packet_size
	subs	r5, r0, #0
	beq	.L2373
	ldr	r0, [r4, #260]
	bl	smd_read_avail
	mov	r3, r0
	mov	r0, r7
	cmp	r3, r5
	blt	.L2373
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #116]
	mov	fp, r0
	cmp	r10, r9
	mov	r0, r10
	beq	.L2385
	bl	list_del
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r5
	ldr	r1, [r10, #-8]
	ldr	r0, [r4, #260]
	bl	smd_read
	mov	r2, r0
	mov	r0, r7
	str	r2, [r10, #-4]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r2, r8
	ldr	r1, [r4, #136]
	ldr	ip, [r4, #444]
	mov	r0, r10
	add	r3, ip, #1
	str	r3, [r4, #444]
	bl	__list_add
	mov	r1, r5
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r5, [r4, #84]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r6]
	add	r2, r2, #1
	strex	r1, r2, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	bne	.L2376
	mov	r1, #0
	mvn	r0, #94
	strb	r0, [r3]
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r0, [r4, #104]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L2377
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r5]
	ldr	r1, [sp]
	add	r0, r0, #32
	bl	dev_err
	b	.L2378
.L2373:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2385:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC227
	movt	r1, #:upper16:.LC227
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mov	r1, fp
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_control_tx_tlet, .-rmnet_control_tx_tlet
	.section	.rodata.str1.4
	.align	2
.LC228:
	.ascii	"%s: port:%pK port#%d pool:%pK\012\000"
	.align	2
.LC229:
	.ascii	"%s: usb is disconnected\012\000"
	.align	2
.LC230:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d err"
	.ascii	":%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_tx_pull, %function
gsmd_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR2
	movw	r3, #2418
	movt	r4, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	sub	r2, r0, #52
	strd	r8, [sp, #16]
	mov	r5, r0
	sub	r9, r0, #8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r4, r3]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #20]
	str	r2, [sp, #12]
	tst	r3, #4
	bne	.L2420
.L2387:
	sub	r6, r5, #48
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L2421
	ldr	r0, [r7]
	ldr	r8, [r3, #88]
	cmp	r0, #0
	bne	.L2395
	b	.L2404
.L2403:
	bl	smd_read_avail
	subs	r10, r0, #0
	beq	.L2399
	ldr	r4, [r5, #-8]
	mov	r0, r4
	sub	fp, r4, #36
	bl	list_del
	cmp	r10, #2048
	ldr	r1, [r4, #-36]
	movlt	r2, r10
	movge	r2, #2048
	ldr	r0, [r7]
	bl	smd_read
	mov	r3, r0
	mov	r0, r6
	str	r3, [r4, #-32]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq
	cmp	r10, #0
	bne	.L2422
	ldr	r2, [r4, #-32]
	ldr	r3, [r5, #116]
	add	r3, r3, r2
	str	r3, [r5, #116]
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L2399
.L2395:
	ldr	r3, [r5, #-8]
	cmp	r9, r3
	bne	.L2403
.L2399:
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L2405
.L2404:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2405
	ldr	r3, [r5, #-8]
	cmp	r9, r3
	beq	.L2405
	movw	r3, #:lower16:.LANCHOR1
	mov	r1, r5
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3328]
	bl	queue_work
.L2405:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L2421:
	movw	r3, #2442
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L2423
.L2389:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	sub	r3, r5, #52
	cmp	r3, #0
	beq	.L2386
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	cmp	r0, #0
	bne	.L2393
	b	.L2386
.L2394:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
.L2393:
	bl	smd_read_avail
	subs	r2, r0, #0
	mov	r1, #0
	bne	.L2394
.L2386:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2420:
	ldr	ip, [r5, #-52]
	movw	r1, #:lower16:.LC228
	mov	r3, r2
	movt	r1, #:upper16:.LC228
	ldr	r2, .L2424
	add	r0, r4, #2400
	str	ip, [sp]
	str	r9, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L2387
.L2423:
	movw	r1, #:lower16:.LC229
	ldr	r2, .L2424
	movt	r1, #:upper16:.LC229
	ldr	r0, .L2424+4
	bl	__dynamic_pr_debug
	b	.L2389
.L2422:
	movw	r0, #:lower16:.LC230
	ldr	r1, .L2424
	str	r10, [sp]
	movt	r0, #:upper16:.LC230
	ldr	r3, [r5, #-52]
	ldr	r2, [sp, #12]
	bl	printk
	ldr	r3, [r5, #16]
	cmp	r3, #0
	bne	.L2401
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L2399
.L2401:
	mov	r0, r4
	mov	r1, r9
	ldr	r2, [r5, #-8]
	bl	__list_add
	b	.L2399
.L2425:
	.align	2
.L2424:
	.word	.LANCHOR3+1256
	.word	.LANCHOR2+2424
	.fnend
	.size	gsmd_tx_pull, .-gsmd_tx_pull
	.section	.rodata.str1.4
	.align	2
.LC231:
	.ascii	"rmnet_mux data Tx buffers full\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_data_tx_tlet, %function
rmnet_mux_smd_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r8, [r0, #84]
	ldr	r3, [r0, #368]
	cmp	r3, #0
	beq	.L2426
	mov	r4, r0
	add	r6, r0, #364
	add	r7, r0, #104
	b	.L2430
.L2444:
	ldr	r0, [r4, #128]
	bl	smd_read_avail
	mov	r3, r0
	mov	r0, r6
	cmp	r3, r10
	blt	.L2426
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #104]
	mov	r5, r0
	cmp	r7, r9
	mov	r0, r9
	sub	fp, r9, #36
	beq	.L2442
	bl	list_del
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r10
	ldr	r1, [r9, #-36]
	ldr	r0, [r4, #128]
	bl	smd_read
	str	r0, [r9, #-32]
	ldr	r0, [r4, #92]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L2443
	ldr	r2, [r4, #368]
	ldr	r3, [r4, #404]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #404]
	beq	.L2426
.L2430:
	ldr	r0, [r4, #128]
	bl	smd_cur_packet_size
	subs	r10, r0, #0
	bne	.L2444
.L2426:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2442:
	mov	r0, r6
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2466
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L2426
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC231
	add	r0, r0, #2448
	movt	r2, #:upper16:.LC231
	add	r1, r1, #32
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_dev_dbg
.L2443:
	ldr	r3, [r8]
	movw	r1, #:lower16:.LC226
	mov	r2, r0
	movt	r1, #:upper16:.LC226
	add	r0, r3, #32
	bl	dev_err
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r2, r7
	ldr	r1, [r4, #108]
	mov	r4, r0
	mov	r0, r9
	bl	__list_add
	mov	r1, r4
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_mux_smd_data_tx_tlet, .-rmnet_mux_smd_data_tx_tlet
	.section	.rodata.str1.4
	.align	2
.LC232:
	.ascii	"%s: port:%pK port#%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_disconnect_work, %function
gsmd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2490
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	mov	r4, r0
	ldrh	r3, [r3, r2]
	.pad #8
	sub	sp, sp, #8
	tst	r3, #4
	bne	.L2451
.L2446:
	ldr	r3, [r4, #-52]
	ldr	r0, [r3]
	bl	smd_close
	ldr	r3, [r4, #-52]
	mov	r2, #0
	str	r2, [r3]
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2451:
	ldr	ip, [r4, #-124]
	movw	r1, #:lower16:.LC232
	sub	r3, r0, #124
	ldr	r2, .L2452
	movt	r1, #:upper16:.LC232
	ldr	r0, .L2452+4
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L2446
.L2453:
	.align	2
.L2452:
	.word	.LANCHOR3+1272
	.word	.LANCHOR2+2472
	.fnend
	.size	gsmd_disconnect_work, .-gsmd_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_disconnect_work, %function
rmnet_smd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	sub	r0, r0, #124
	strd	r6, [sp, #8]
	mov	r5, #0
	mov	r7, r4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	tasklet_kill
	sub	r0, r4, #144
	bl	tasklet_kill
	sub	r0, r4, #60
	bl	tasklet_kill
	sub	r0, r4, #80
	bl	tasklet_kill
	ldr	r0, [r4, #-148]
	bl	smd_close
	str	r5, [r4, #-104]
	ldr	r0, [r4, #-84]
	bl	smd_close
	str	r5, [r4, #-236]
	str	r5, [r4, #-40]
	ldr	r5, [r7, #-252]!
	cmp	r5, r7
	ldr	r6, [r5]
	subne	r8, r4, #260
	beq	.L2459
.L2458:
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	mov	r2, r8
	ldr	r1, [r4, #-256]
	bl	__list_add
	cmp	r7, r6
	mov	r5, r6
	ldr	r6, [r6]
	bne	.L2458
.L2459:
	mov	r7, r4
	ldr	r5, [r7, #-284]!
	cmp	r5, r7
	ldr	r6, [r5]
	subne	r8, r4, #300
	beq	.L2457
.L2462:
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	mov	r2, r8
	ldr	r1, [r4, #-296]
	bl	__list_add
	cmp	r7, r6
	mov	r5, r6
	ldr	r6, [r6]
	bne	.L2462
.L2457:
	mov	r7, r4
	ldr	r5, [r7, #-276]!
	cmp	r5, r7
	ldr	r6, [r5]
	subne	r8, r4, #292
	beq	.L2461
.L2465:
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	mov	r2, r8
	ldr	r1, [r4, #-288]
	bl	__list_add
	cmp	r7, r6
	mov	r5, r6
	ldr	r6, [r6]
	bne	.L2465
.L2461:
	ldrb	r3, [r4, #-152]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L2470
.L2454:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2470:
	sub	r0, r4, #232
	bl	platform_driver_unregister
	mov	r3, #0
	strb	r3, [r4, #-152]
	b	.L2454
	.fnend
	.size	rmnet_smd_disconnect_work, .-rmnet_smd_disconnect_work
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	cleanup, %function
cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, .L2472
	b	platform_driver_unregister
.L2473:
	.align	2
.L2472:
	.word	.LANCHOR0+276
	.fnend
	.size	cleanup, .-cleanup
	.section	.rodata.str1.4
	.align	2
.LC233:
	.ascii	"<3>%s: %s(): Failed to register androidplatform dri"
	.ascii	"ver\012\000"
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	init, %function
init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR1
	push	{r4, lr}
	.save {r4, lr}
	movt	r2, #:upper16:.LANCHOR1
	mov	r4, #0
	movw	r3, #:lower16:.LANCHOR0
	movw	r0, #:lower16:android_disconnect
	movt	r3, #:upper16:.LANCHOR0
	movt	r0, #:upper16:android_disconnect
	str	r4, [r2, #3396]
	movw	lr, #:lower16:android_setup
	movw	ip, #:lower16:android_suspend
	movw	r1, #:lower16:android_resume
	add	r4, r2, #3232
	str	r0, [r3, #372]
	movt	lr, #:upper16:android_setup
	movt	ip, #:upper16:android_suspend
	movt	r1, #:upper16:android_resume
	add	r0, r3, #276
	str	r4, [r2, #3232]
	str	lr, [r3, #368]
	str	ip, [r3, #376]
	str	r1, [r3, #380]
	str	r4, [r2, #3236]
	bl	platform_driver_register
	subs	r4, r0, #0
	beq	.L2474
	ldr	r2, .L2480
	movw	r0, #:lower16:.LC233
	movt	r0, #:upper16:.LC233
	mov	r1, r2
	bl	printk
.L2474:
	mov	r0, r4
	pop	{r4, pc}
.L2481:
	.align	2
.L2480:
	.word	.LANCHOR3+1296
	.fnend
	.size	init, .-init
	.section	.rodata.str1.4
	.align	2
.LC234:
	.ascii	"Unable to open control smd channel: %d\012\000"
	.align	2
.LC235:
	.ascii	"pdrv %s register failed %d\012\000"
	.align	2
.LC236:
	.ascii	"Unable to open data smd channel\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_connect_work, %function
rmnet_smd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	sub	r2, r0, #132
	movw	r3, #:lower16:rmnet_smd_event_notify
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	mov	r1, r2
	movt	r6, #:upper16:.LANCHOR0
	mov	r4, r0
	str	r8, [sp, #16]
	movt	r3, #:upper16:rmnet_smd_event_notify
	str	lr, [sp, #20]
	.pad #24
	sub	sp, sp, #24
	ldr	r8, [r0, #-308]
	ldr	r0, [r6, #444]
	bl	smd_open
	subs	r2, r0, #0
	bne	.L2494
	ldr	r3, [r4, #-88]
	ands	r3, r3, #1
	bne	.L2486
	mov	r2, sp
	str	r3, [sp, #4]
	add	r5, sp, #4
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #16
	sub	r7, r4, #80
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2488
.L2495:
	bl	schedule
.L2488:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #-88]
	tst	r3, #1
	beq	.L2495
	mov	r1, r5
	mov	r0, r7
	bl	finish_wait
.L2486:
	sub	r2, r4, #68
	movw	r3, #:lower16:rmnet_smd_event_notify
	ldr	r0, [r6, #448]
	mov	r1, r2
	movt	r3, #:upper16:rmnet_smd_event_notify
	bl	smd_open
	cmp	r0, #0
	bne	.L2496
	ldr	r3, [r4, #-24]
	ands	r3, r3, #1
	bne	.L2490
	mov	r2, sp
	str	r3, [sp, #4]
	add	r5, sp, #4
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #16
	sub	r6, r4, #16
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2492
.L2497:
	bl	schedule
.L2492:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #-24]
	tst	r3, #1
	beq	.L2497
	mov	r1, r5
	mov	r0, r6
	bl	finish_wait
.L2490:
	mov	r3, #1
	sub	r0, r4, #392
	str	r3, [r4, #-224]
	bl	rmnet_smd_start_rx
.L2482:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2494:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC234
	movt	r1, #:upper16:.LC234
	add	r0, r0, #32
	bl	dev_err
	ldrb	r3, [r4, #-136]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L2482
	sub	r0, r4, #216
	bl	platform_driver_register
	subs	r3, r0, #0
	moveq	r3, #1
	strbeq	r3, [r4, #-136]
	beq	.L2482
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC235
	movt	r1, #:upper16:.LC235
	ldr	r2, [r4, #-196]
	add	r0, r0, #32
	bl	dev_err
	b	.L2482
.L2496:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC236
	movt	r1, #:upper16:.LC236
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #-132]
	bl	smd_close
	b	.L2482
	.fnend
	.size	rmnet_smd_connect_work, .-rmnet_smd_connect_work
	.section	.rodata.str1.4
	.align	2
.LC237:
	.ascii	"<3>%s:smd read_avail failure:%d or channel closed c"
	.ascii	"h=%pK\000"
	.align	2
.LC238:
	.ascii	"<3>%s: SMD sending incorrect pkt\012\000"
	.align	2
.LC239:
	.ascii	"<3>%s: smd read failure %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_read_w, %function
grmnet_ctrl_smd_read_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #32]
	.pad #36
	sub	sp, sp, #36
	add	r9, fp, #108
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	beq	.L2499
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
.L2510:
	bl	smd_cur_packet_size
	subs	r6, r0, #0
	ble	.L2499
	mov	r1, r5
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #208
	mov	r0, r6
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L2498
	mov	r5, #0
.L2508:
	ldr	r0, [r4, #-52]
	bl	smd_read_avail
	subs	r2, r0, #0
	bne	.L2501
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	bne	.L2532
.L2502:
	movw	r0, #:lower16:.LC237
	ldr	r1, .L2536
	movt	r0, #:upper16:.LC237
	bl	printk
	mov	r0, r8
	bl	kfree
.L2498:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2532:
	ldr	r0, [r10, #12]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r3, #:upper16:autoremove_wake_function
	sub	r7, r4, #28
	str	r2, [sp, #12]
	str	r1, [sp, #24]
	str	r0, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #28]
	b	.L2504
.L2533:
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L2503
	bl	schedule
.L2504:
	mov	r2, #2
	add	r1, sp, #12
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r0, [r4, #-52]
	bl	smd_read_avail
	subs	r2, r0, #0
	beq	.L2533
.L2503:
	add	r1, sp, #12
	mov	r0, r7
	str	r2, [sp, #4]
	bl	finish_wait
	ldr	r2, [sp, #4]
.L2501:
	cmp	r2, #0
	ldr	r3, [r4, #-52]
	blt	.L2502
	cmp	r3, #0
	beq	.L2502
	add	r1, r2, r5
	cmp	r1, r6
	bgt	.L2534
	mov	r0, r3
	add	r1, r8, r5
	bl	smd_read
	subs	r2, r0, #0
	ble	.L2535
	add	r5, r5, r2
	cmp	r6, r5
	bgt	.L2508
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [fp, #104]
	mov	r5, r0
	cmp	r3, #0
	beq	.L2509
	ldr	r7, [r3, #92]
	cmp	r7, #0
	beq	.L2509
	mov	r0, r3
	mov	r2, r6
	mov	r1, r8
	blx	r7
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
.L2509:
	mov	r0, r8
	bl	kfree
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	bne	.L2510
.L2499:
	mov	r1, r5
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L2498
.L2534:
	movw	r0, #:lower16:.LC238
	ldr	r1, .L2536
	movt	r0, #:upper16:.LC238
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2498
.L2535:
	movw	r0, #:lower16:.LC239
	ldr	r1, .L2536
	movt	r0, #:upper16:.LC239
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2498
.L2537:
	.align	2
.L2536:
	.word	.LANCHOR3+1304
	.fnend
	.size	grmnet_ctrl_smd_read_w, .-grmnet_ctrl_smd_read_w
	.section	.rodata.str1.4
	.align	2
.LC240:
	.ascii	"<3>%s: mbim dev is null\012\000"
	.align	2
.LC241:
	.ascii	"<3>%s: mbim command error %d\012\000"
	.align	2
.LC242:
	.ascii	"<3>%s: Unable to allocate ctrl pkt\012\000"
	.align	2
.LC243:
	.ascii	"%s: Add to cpkt_req_q packet with len = %d\012\000"
	.align	2
.LC244:
	.ascii	"%s: Wake up read queue\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_cmd_complete, %function
fmbim_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r1, #48]
	cmp	r6, #0
	beq	.L2556
	ldr	r2, [r1, #44]
	mov	r5, r1
	cmp	r2, #0
	blt	.L2557
	movw	r7, #:lower16:.LANCHOR2
	movw	r3, #2514
	movt	r7, #:upper16:.LANCHOR2
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L2558
.L2541:
	mov	r1, #32
	mov	r0, r8
	bl	mbim_alloc_ctrl_pkt
	subs	r4, r0, #0
	beq	.L2559
	movw	r3, #2538
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L2560
.L2543:
	ldr	r0, [r4], #8
	mov	r2, r8
	ldr	r1, [r5]
	add	r5, r6, #204
	bl	memcpy
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r0, r4
	add	r2, r6, #208
	ldr	r1, [r6, #212]
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r3, #2562
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L2561
.L2544:
	add	r0, r6, #108
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L2558:
	ldrb	ip, [r6, #136]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC152
	mov	r3, r6
	ldr	r2, .L2562
	movt	r1, #:upper16:.LC152
	add	r0, r7, #2496
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L2541
.L2560:
	movw	r1, #:lower16:.LC243
	ldr	r2, .L2562
	mov	r3, r8
	movt	r1, #:upper16:.LC243
	ldr	r0, .L2562+4
	bl	__dynamic_pr_debug
	b	.L2543
.L2561:
	movw	r1, #:lower16:.LC244
	ldr	r2, .L2562
	movt	r1, #:upper16:.LC244
	ldr	r0, .L2562+8
	bl	__dynamic_pr_debug
	b	.L2544
.L2556:
	ldr	r1, .L2562
	movw	r0, #:lower16:.LC240
	movt	r0, #:upper16:.LC240
.L2555:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L2559:
	movw	r0, #:lower16:.LC242
	ldr	r1, .L2562
	movt	r0, #:upper16:.LC242
	b	.L2555
.L2557:
	ldr	r1, .L2562
	movw	r0, #:lower16:.LC241
	movt	r0, #:upper16:.LC241
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L2563:
	.align	2
.L2562:
	.word	.LANCHOR3+1328
	.word	.LANCHOR2+2520
	.word	.LANCHOR2+2544
	.fnend
	.size	fmbim_cmd_complete, .-fmbim_cmd_complete
	.section	.rodata.str1.4
	.align	2
.LC245:
	.ascii	"<3>conn_gadget_function_disable cdev %pK\012\000"
	.align	2
.LC246:
	.ascii	"%s: %s: error %d\012\000"
	.align	2
.LC247:
	.ascii	"%s: %s disabled\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_disable, %function
conn_gadget_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC245
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r4, #84]
	movt	r0, #:upper16:.LC245
	bl	printk
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2586
	ldr	r0, [r4, #100]
	movt	r3, #:upper16:.LANCHOR2
	mov	ip, #0
	ldrh	r1, [r3, r2]
	mov	r2, #1
	mov	r5, r3
	str	ip, [r4, #100]
	str	r2, [r4, #104]
	str	r0, [r4, #212]
	tst	r1, #4
	beq	.L2565
	ldr	r3, .L2571
	movw	r1, #:lower16:.LC246
	str	r2, [sp]
	ldr	r0, .L2571+4
	movt	r1, #:upper16:.LC246
	mov	r2, r3
	bl	__dynamic_pr_debug
.L2565:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #200
	bl	__wake_up
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #144
	bl	__wake_up
	movw	r3, #2610
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L2564
	ldr	r2, .L2571
	movw	r1, #:lower16:.LC247
	ldr	r0, .L2571+8
	movt	r1, #:upper16:.LC247
	ldr	r3, [r4]
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, lr}
	b	__dynamic_pr_debug
.L2564:
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L2572:
	.align	2
.L2571:
	.word	.LANCHOR3+1348
	.word	.LANCHOR2+2568
	.word	.LANCHOR2+2592
	.fnend
	.size	conn_gadget_function_disable, .-conn_gadget_function_disable
	.section	.rodata.str1.4
	.align	2
.LC248:
	.ascii	"<6>conn_gadget_flush\012\000"
	.align	2
.LC249:
	.ascii	"<3>%s() _conn_gadget_dev is invalid\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_flush, %function
conn_gadget_flush:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	push	{r4, lr}
	.save {r4, lr}
	movt	r3, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC248
	ldr	r4, [r3, #2484]
	movt	r0, #:upper16:.LC248
	bl	printk
	cmp	r4, #0
	bne	.L2574
	movw	r0, #:lower16:.LC249
	ldr	r1, .L2577
	movt	r0, #:upper16:.LC249
	bl	printk
	mvn	r0, #18
	pop	{r4, pc}
.L2574:
	mov	r2, #1
	add	r0, r4, #200
	mov	r3, #0
	mov	r1, #3
	str	r2, [r4, #216]
	bl	__wake_up
	mov	r0, #0
	pop	{r4, pc}
.L2578:
	.align	2
.L2577:
	.word	.LANCHOR3+1380
	.fnend
	.size	conn_gadget_flush, .-conn_gadget_flush
	.section	.rodata.str1.4
	.align	2
.LC250:
	.ascii	"acc_function_disable\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_disable, %function
acc_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2634
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	mov	r4, r0
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2585
.L2580:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	ldr	r0, [r4, #92]
	bic	r3, r3, #3
	orr	r3, r3, #2
	strb	r3, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	add	r0, r4, #1664
	mov	r3, #0
	ldr	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	__wake_up
.L2585:
	ldr	r3, [r4, #84]
	movw	r2, #:lower16:.LC250
	movt	r2, #:upper16:.LC250
	ldr	r0, .L2586
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2580
.L2587:
	.align	2
.L2586:
	.word	.LANCHOR2+2616
	.fnend
	.size	acc_function_disable, .-acc_function_disable
	.section	.rodata.str1.4
	.align	2
.LC251:
	.ascii	"acc_complete_out set disconnected\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_out, %function
acc_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r4, [r3, #2488]
	str	r2, [r4, #1696]
	ldr	r3, [r1, #44]
	cmn	r3, #108
	beq	.L2595
.L2589:
	add	r0, r4, #1664
	mov	r3, #0
	ldr	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	__wake_up
.L2595:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2658
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L2596
.L2590:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	bic	r3, r3, #3
	orr	r3, r3, #2
	strb	r3, [r4, #100]
	b	.L2589
.L2596:
	movw	r1, #:lower16:.LC251
	add	r0, r0, #2640
	movt	r1, #:upper16:.LC251
	bl	__dynamic_pr_debug
	b	.L2590
	.fnend
	.size	acc_complete_out, .-acc_complete_out
	.section	.rodata.str1.4
	.align	2
.LC252:
	.ascii	"vendor request: %d index: %d value: %d length: %d\012"
	.ascii	"\000"
	.align	2
.LC253:
	.ascii	"class request: %d index: %d value: %d length: %d\012"
	.ascii	"\000"
	.align	2
.LC254:
	.ascii	"MTP_REQ_CANCEL\012\000"
	.align	2
.LC255:
	.ascii	"MTP_REQ_GET_DEVICE_STATUS\012\000"
	.align	2
.LC256:
	.ascii	"%s: response queue error\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_ctrlrequest, %function
mtp_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r2
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r2]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldrh	r8, [r2, #4]	@ unaligned
	ldrh	r9, [r2, #2]	@ unaligned
	ldrh	r6, [r2, #6]	@ unaligned
	cmp	r3, #128
	beq	.L2626
	and	r3, r3, #96
	cmp	r3, #64
	beq	.L2627
	cmp	r3, #32
	bne	.L2601
	movw	r7, #:lower16:.LANCHOR2
	movw	r1, #2706
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	movt	r7, #:upper16:.LANCHOR2
	movw	r2, #:lower16:.LANCHOR1
	ldrh	r1, [r7, r1]
	movt	r2, #:upper16:.LANCHOR1
	ldr	r10, [r2, #2500]
	tst	r1, #4
	bne	.L2628
.L2605:
	cmp	r3, #100
	beq	.L2629
	cmp	r3, #103
	bne	.L2601
	orrs	r3, r8, r9
	bne	.L2601
	ldr	r1, [r5, #4]
	mov	r2, #4
	movw	r3, #2754
	ldr	r8, [r1]
	strh	r2, [r8]	@ movhi
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L2630
.L2609:
	add	r4, r10, #88
	mov	r7, #4
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r10, #104]
	movw	r2, #8193
	movw	r3, #8217
	mov	r1, r0
	mov	r0, r4
	mov	r4, r7
	cmp	ip, #3
	movne	r3, r2
	strh	r3, [r8, #2]	@ movhi
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, r7
	movls	r6, #0
	movhi	r6, #1
.L2602:
	ldr	r3, [r5, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r6, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r5, #4]
	str	r7, [r3, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2631
.L2597:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2629:
	orrs	r3, r8, r9
	bne	.L2601
	movw	r3, #2730
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L2632
.L2607:
	add	r7, r10, #88
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r10, #104]
	mov	r4, r0
	cmp	r3, #2
	beq	.L2633
.L2608:
	mov	r1, r4
	mov	r0, r7
	mov	r4, r6
	mov	r7, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r6, #0
	b	.L2602
.L2626:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #6
	beq	.L2599
.L2601:
	mvn	r4, #94
	b	.L2597
.L2627:
	movw	r2, #:lower16:.LANCHOR2
	movw	r1, #2682
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r2, [r2, r1]
	tst	r2, #4
	bne	.L2634
.L2604:
	cmp	r3, #1
	bne	.L2601
	ldrsb	r3, [r4]
	cmp	r3, #0
	bge	.L2601
	sub	r8, r8, #4
	cmp	r8, #1
	bhi	.L2601
	ldr	r1, .L2635
	cmp	r6, #40
	ldr	r3, [r5, #4]
	movcc	r4, r6
	movcs	r4, #40
.L2625:
	mov	r2, r4
	ldr	r0, [r3]
	mov	r7, r4
	bl	memcpy
	cmp	r6, r4
	movls	r6, #0
	movhi	r6, #1
	b	.L2602
.L2631:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC256
	ldr	r2, .L2635+4
	movt	r1, #:upper16:.LC256
	add	r0, r0, #32
	bl	dev_err
	b	.L2597
.L2599:
	lsr	r3, r9, #8
	cmp	r3, #3
	bne	.L2601
	uxtb	r9, r9
	cmp	r9, #238
	bne	.L2601
	cmp	r6, #18
	ldr	r1, .L2635+8
	movcc	r4, r6
	movcs	r4, #18
	ldr	r3, [r5, #4]
	b	.L2625
.L2628:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC253
	add	r0, r7, #2688
	movt	r2, #:upper16:.LC253
	strd	r8, [sp]
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	b	.L2605
.L2630:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC255
	movt	r2, #:upper16:.LC255
	ldr	r0, .L2635+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2609
.L2634:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC252
	strd	r8, [sp]
	ldr	r0, .L2635+16
	movt	r2, #:upper16:.LC252
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	b	.L2604
.L2633:
	mov	r8, #3
	add	r0, r10, #132
	mov	r1, r8
	mov	r3, #0
	mov	r2, #1
	str	r8, [r10, #104]
	bl	__wake_up
	mov	r1, r8
	add	r0, r10, #144
	mov	r3, #0
	mov	r2, #1
	bl	__wake_up
	b	.L2608
.L2632:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC254
	movt	r2, #:upper16:.LC254
	ldr	r0, .L2635+20
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2607
.L2636:
	.align	2
.L2635:
	.word	.LANCHOR0+472
	.word	.LANCHOR3+1400
	.word	.LANCHOR0+452
	.word	.LANCHOR2+2736
	.word	.LANCHOR2+2664
	.word	.LANCHOR2+2712
	.fnend
	.size	mtp_function_ctrlrequest, .-mtp_function_ctrlrequest
	.section	.rodata.str1.4
	.align	2
.LC257:
	.ascii	"mtp_function_disable\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_disable, %function
mtp_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2778
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2643
.L2638:
	ldr	r0, [r4, #92]
	mov	r5, #0
	str	r5, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, r5
	add	r0, r4, #132
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2643:
	ldr	r3, [r4, #84]
	movw	r2, #:lower16:.LC257
	movt	r2, #:upper16:.LC257
	ldr	r0, .L2644
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2638
.L2645:
	.align	2
.L2644:
	.word	.LANCHOR2+2760
	.fnend
	.size	mtp_function_disable, .-mtp_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_out, %function
mtp_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2500]
	str	r2, [r0, #176]
	ldr	r3, [r1, #44]
	add	r0, r0, #132
	mov	r2, #1
	mov	r1, #3
	cmp	r3, #0
	movne	r3, #4
	strne	r3, [r0, #-28]
	mov	r3, #0
	b	__wake_up
	.fnend
	.size	mtp_complete_out, .-mtp_complete_out
	.section	.rodata.str1.4
	.align	2
.LC258:
	.ascii	"ccid req%02x.%02x v%04x i%04x l%d\012\000"
	.align	2
.LC259:
	.ascii	"<3>ccid ep0 enqueue err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_setup, %function
ccid_function_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, r1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r6, [r1, #4]	@ unaligned
	.pad #16
	sub	sp, sp, #16
	ldrh	r7, [r1, #2]	@ unaligned
	ldrh	lr, [r1, #6]	@ unaligned
	ldr	r1, [r0, #20]
	ldr	r3, [r0, #96]
	ldr	r5, [r1, #24]
	cmp	r3, #0
	ldr	r4, [r5, #4]
	beq	.L2658
	ldrh	r3, [r2]	@ unaligned
	movw	r1, #41218
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r1
	beq	.L2653
	movw	r1, #41219
	cmp	r3, r1
	beq	.L2654
	movw	r1, #8449
	cmp	r3, r1
	beq	.L2664
.L2655:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2802
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r4, #94
	bne	.L2665
.L2651:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2664:
	cmp	lr, #0
	bne	.L2655
	lsr	r3, r7, #8
	mov	ip, r0
	mov	r2, #1
	add	r0, r0, #128
	mov	r1, #3
	strb	r2, [ip, #140]
	mov	r4, lr
	strb	r7, [ip, #141]
	strb	r3, [ip, #142]
	mov	r3, lr
	strb	lr, [ip, #143]
	str	r2, [ip, #144]
	bl	__wake_up
	b	.L2651
.L2654:
	ldr	r3, [r4, #4]
	cmp	lr, r3
	bhi	.L2655
	movw	r3, #:lower16:.LANCHOR0
	ldr	r1, [r4]
	cmp	lr, #4
	movt	r3, #:upper16:.LANCHOR0
	movcc	r8, lr
	ldr	r3, [r3, #531]	@ unaligned
	movcs	r8, #4
	str	r3, [r1]
	b	.L2656
.L2653:
	ldr	r3, [r4, #4]
	cmp	lr, r3
	bhi	.L2655
	movw	r3, #:lower16:.LANCHOR0
	ldr	r1, [r4]
	cmp	lr, #4
	movt	r3, #:upper16:.LANCHOR0
	movcc	r8, lr
	ldr	r3, [r3, #522]	@ unaligned
	movcs	r8, #4
	str	r3, [r1]
.L2656:
	movw	r3, #:lower16:.LANCHOR2
	movw	r1, #2826
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r1]
	tst	r3, #4
	bne	.L2666
.L2657:
	str	r8, [r4, #4]
	ldr	r3, [r5]
	mov	r1, r4
	mov	r2, #32
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L2651
	movw	r0, #:lower16:.LC259
	mov	r1, r4
	movt	r0, #:upper16:.LC259
	bl	printk
	b	.L2651
.L2665:
	movw	r1, #:lower16:.LC16
	add	r0, r0, #2784
	str	r7, [sp]
	movt	r1, #:upper16:.LC16
	str	r6, [sp, #4]
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	ldrb	r2, [r2]	@ zero_extendqisi2
	str	lr, [sp, #8]
	mvn	r4, #94
	bl	__dynamic_pr_debug
	b	.L2651
.L2666:
	movw	r1, #:lower16:.LC258
	ldr	r0, .L2667
	str	r7, [sp]
	movt	r1, #:upper16:.LC258
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	ldrb	r2, [r2]	@ zero_extendqisi2
	stmib	sp, {r6, lr}
	bl	__dynamic_pr_debug
	b	.L2657
.L2658:
	mvn	r4, #106
	b	.L2651
.L2668:
	.align	2
.L2667:
	.word	.LANCHOR2+2808
	.fnend
	.size	ccid_function_setup, .-ccid_function_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_complete_out, %function
ccid_bulk_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #44]
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #3400]
	cmp	r2, #0
	mov	r2, #1
	movne	r3, #1
	add	r0, r1, #160
	str	r2, [r1, #188]
	strne	r3, [r1, #148]
	mov	r3, #0
	mov	r1, #3
	b	__wake_up
	.fnend
	.size	ccid_bulk_complete_out, .-ccid_bulk_complete_out
	.section	.rodata.str1.4
	.align	2
.LC260:
	.ascii	"adb_function_disable cdev %pK\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_disable, %function
adb_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR2
	movw	r3, #2850
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r1, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r1, r3]
	tst	r3, #4
	bne	.L2680
.L2675:
	ldr	r0, [r4, #92]
	mov	r5, #0
	mov	r6, #1
	str	r5, [r4, #100]
	str	r6, [r4, #104]
	strb	r5, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, r5
	mov	r2, r6
	ldr	r6, [sp, #8]
	add	r0, r4, #128
	mov	r1, #3
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2680:
	ldr	r3, [r4, #84]
	add	r0, r1, #2832
	movw	r2, #:lower16:.LC260
	movt	r2, #:upper16:.LC260
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2675
	.fnend
	.size	adb_function_disable, .-adb_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_complete_out, %function
adb_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3404]
	str	r2, [r0, #156]
	ldr	r3, [r1, #44]
	add	r0, r0, #128
	mov	r1, #3
	cmp	r3, #0
	cmnne	r3, #104
	mov	r3, #0
	strne	r2, [r0, #-24]
	mov	r2, #1
	b	__wake_up
	.fnend
	.size	adb_complete_out, .-adb_complete_out
	.section	.rodata.str1.4
	.align	2
.LC261:
	.ascii	"rmnet_mux command error %d\012\000"
	.align	2
.LC262:
	.ascii	"unable to allocate memory for ctrl req\012\000"
	.align	2
.LC263:
	.ascii	"<3>%s: ctrl pkts dropped: cpkts_drp_cnt: %lu\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_command_complete, %function
rmnet_mux_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r8, [r6, #84]
	cmp	r2, #0
	blt	.L2692
	mov	r4, r1
	mov	r1, #32
	ldr	r7, [r4, #48]
	mov	r0, r7
	bl	rmnet_mux_alloc_ctrl_pkt
	subs	r5, r0, #0
	beq	.L2693
	add	r8, r6, #364
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r3, [r6, #352]
	cmp	r3, #0
	beq	.L2694
	ldr	r0, [r5], #8
	mov	r2, r7
	ldr	r1, [r4]
	bl	memcpy
	add	r2, r6, #312
	ldr	r1, [r6, #316]
	mov	r0, r5
	bl	__list_add
	ldr	r3, [r6, #332]
	mov	r0, r8
	add	r3, r3, #1
	str	r3, [r6, #332]
	bl	_raw_spin_unlock
	add	r0, r6, #320
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L2694:
	mov	r0, r8
	bl	_raw_spin_unlock
	ldr	r0, [r5]
	bl	kfree
	mov	r0, r5
	bl	kfree
	ldr	r3, [r6, #420]
	ldr	r1, .L2696
	ldr	r0, .L2696+4
	add	r3, r3, #1
	str	r3, [r6, #420]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L2695
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2692:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC261
	movt	r1, #:upper16:.LC261
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
.L2693:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC262
	movt	r1, #:upper16:.LC262
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
.L2695:
	movw	r0, #:lower16:.LC263
	ldr	r1, .L2696
	movt	r0, #:upper16:.LC263
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r2, [r6, #420]
	ldrd	r6, [sp, #8]
	add	sp, sp, #24
	b	printk
.L2697:
	.align	2
.L2696:
	.word	.LANCHOR3+1416
	.word	.LANCHOR0+568
	.fnend
	.size	rmnet_mux_command_complete, .-rmnet_mux_command_complete
	.section	.rodata.str1.4
	.align	2
.LC264:
	.ascii	"acm ttyGS%d req%02x.%02x v%04x i%04x l%d\012\000"
	.align	2
.LC265:
	.ascii	"acm response on ttyGS%d, err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_setup, %function
acm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	mov	r4, r1
	strd	r6, [sp, #8]
	movw	r2, #8482
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r1]	@ unaligned
	.pad #28
	sub	sp, sp, #28
	ldr	r0, [r0, #20]
	ldrh	r1, [r1, #2]	@ unaligned
	ldrh	r8, [r4, #4]	@ unaligned
	rev16	r3, r3
	ldrh	r9, [r4, #6]	@ unaligned
	uxth	r3, r3
	ldr	r7, [r0, #24]
	uxth	r10, r1
	cmp	r3, r2
	ldr	r6, [r7, #4]
	beq	.L2699
	movw	r2, #41249
	cmp	r3, r2
	beq	.L2700
	movw	r2, #8480
	cmp	r3, r2
	beq	.L2713
.L2708:
	mvn	r4, #94
.L2698:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2699:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L2708
	movw	ip, #:lower16:.LANCHOR1
	mov	r2, #1
	ldr	r0, .L2715
	movt	ip, #:upper16:.LANCHOR1
	mov	r3, #0
	strh	r1, [r5, #168]	@ movhi
	mov	r1, r2
	mov	fp, r3
	str	r2, [ip, #2200]
	str	r10, [ip, #3408]
	bl	__wake_up
.L2702:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2874
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2714
.L2703:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	fp, [r6, #4]
	mov	r1, r6
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L2698
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC265
	mov	r3, r4
	ldrb	r2, [r5, #146]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC265
	add	r0, r0, #32
	bl	dev_err
	b	.L2698
.L2713:
	cmp	r9, #7
	bne	.L2708
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L2708
	ldr	r2, [r7]
	movw	r3, #:lower16:acm_complete_set_line_coding
	mov	fp, r9
	movt	r3, #:upper16:acm_complete_set_line_coding
	ldr	r2, [r2, #4]
	str	r5, [r2]
	str	r3, [r6, #28]
	b	.L2702
.L2700:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L2708
	cmp	r9, #7
	add	r1, r5, #160
	ldr	r0, [r6]
	movcc	fp, r9
	movcs	fp, #7
	mov	r2, fp
	bl	memcpy
	b	.L2702
.L2714:
	ldr	r1, [r7]
	str	r10, [sp, #8]
	movw	r2, #:lower16:.LC264
	ldrb	lr, [r4, #1]	@ zero_extendqisi2
	str	r8, [sp, #12]
	movt	r2, #:upper16:.LC264
	ldrb	ip, [r4]	@ zero_extendqisi2
	str	r9, [sp, #16]
	ldr	r0, .L2715+4
	ldrb	r3, [r5, #146]	@ zero_extendqisi2
	add	r1, r1, #32
	stm	sp, {ip, lr}
	bl	__dynamic_dev_dbg
	b	.L2703
.L2716:
	.align	2
.L2715:
	.word	.LANCHOR1+2204
	.word	.LANCHOR2+2856
	.fnend
	.size	acm_setup, .-acm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_event_notify, %function
rmnet_smd_event_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #48]
	beq	.L2718
	cmp	r1, #3
	beq	.L2719
	cmp	r1, #1
	beq	.L2734
.L2717:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2718:
	add	r1, r0, #44
	mov	r0, #0
	bl	_set_bit
	add	r0, r4, #52
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2734:
	ldr	r3, [r0, #20]
	ldr	r3, [r3, #168]
	cmp	r3, #0
	beq	.L2717
	cmp	r5, #0
	ldr	r0, [r0]
	bne	.L2735
.L2722:
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2717
	add	r1, r4, #8
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r4, r4, #4
	bne	.L2717
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule
.L2719:
	add	r1, r0, #44
	mov	r0, #0
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit
.L2735:
	bl	smd_write_avail
	cmp	r0, r5
	bge	.L2723
.L2733:
	ldr	r0, [r4]
	b	.L2722
.L2723:
	add	r1, r4, #28
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r3, r4, #24
	bne	.L2733
	mov	r0, r3
	bl	__tasklet_schedule
	b	.L2733
	.fnend
	.size	rmnet_smd_event_notify, .-rmnet_smd_event_notify
	.section	.rodata.str1.4
	.align	2
.LC266:
	.ascii	"%s: EVENT_(%s)\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_notify, %function
grmnet_ctrl_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2898
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r0
	strd	r8, [sp, #16]
	mov	r4, r1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2775
.L2737:
	cmp	r4, #2
	beq	.L2739
	cmp	r4, #3
	beq	.L2740
	cmp	r4, #1
	beq	.L2776
.L2741:
	add	r0, r5, #24
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L2739:
	add	r1, r5, #8
	mov	r0, #0
	bl	_set_bit
	cmp	r5, #0
	beq	.L2741
	ldr	r0, [r5, #104]
	cmp	r0, #0
	beq	.L2741
	ldr	r3, [r0, #108]
	cmp	r3, #0
	beq	.L2741
	blx	r3
	b	.L2741
.L2776:
	ldr	r0, [r5]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2742
	ldr	r2, [r5, #28]
	add	r3, r5, #28
	cmp	r2, r3
	beq	.L2777
.L2742:
	ldr	r0, [r5]
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L2741
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r5, #68
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3412]
	bl	queue_work
	b	.L2741
.L2740:
	add	r1, r5, #8
	mov	r0, #0
	bl	_clear_bit
	cmp	r5, #0
	beq	.L2745
	ldr	r0, [r5, #104]
	cmp	r0, #0
	beq	.L2745
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L2745
	blx	r3
.L2745:
	add	r9, r5, #108
	add	r7, r5, #40
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #40]
	mov	r8, r0
	cmp	r4, r7
	beq	.L2746
.L2747:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #40]
	cmp	r4, r7
	bne	.L2747
.L2746:
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L2741
.L2775:
	sub	r2, r1, #1
	cmp	r2, #2
	movwhi	r3, #:lower16:.LC183
	movthi	r3, #:upper16:.LC183
	bhi	.L2738
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #1444]
.L2738:
	movw	r1, #:lower16:.LC266
	ldr	r2, .L2778
	movt	r1, #:upper16:.LC266
	ldr	r0, .L2778+4
	bl	__dynamic_pr_debug
	b	.L2737
.L2777:
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r5, #52
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3412]
	bl	queue_work
	b	.L2742
.L2779:
	.align	2
.L2778:
	.word	.LANCHOR3+1456
	.word	.LANCHOR2+2880
	.fnend
	.size	grmnet_ctrl_smd_notify, .-grmnet_ctrl_smd_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_disconnect_w, %function
gctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #52]
	tst	r3, #1
	bne	.L2782
	bx	lr
.L2782:
	add	r1, r0, #52
	mov	r0, #0
	b	_clear_bit
	.fnend
	.size	gctrl_disconnect_w, .-gctrl_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_disconnect_w, %function
ghsic_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #76]
	tst	r3, #1
	bne	.L2785
	bx	lr
.L2785:
	add	r1, r0, #76
	mov	r0, #0
	b	_clear_bit
	.fnend
	.size	ghsic_data_disconnect_w, .-ghsic_data_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_remove, %function
ghsuart_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2922
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2798
.L2787:
	ldr	r3, [r4, #4]
	movw	r2, #:lower16:.LANCHOR1
	mov	r1, #84
	movt	r2, #:upper16:.LANCHOR1
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1860]
	add	r6, r4, #8
	add	r5, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r4, #12]
	mov	r1, r0
	mov	r0, r6
	cmp	r4, #0
	beq	.L2799
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L2790
	mov	r0, r4
	blx	r3
.L2790:
	mov	r1, r5
	mov	r0, #0
	bl	_clear_bit
	mov	r1, r5
	mov	r0, #2
	bl	_clear_bit
.L2789:
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2799:
	bl	_raw_spin_unlock_irqrestore
	b	.L2789
.L2798:
	movw	r1, #:lower16:.LC178
	ldr	r2, .L2800
	movt	r1, #:upper16:.LC178
	ldr	r0, .L2800+4
	ldr	r3, [r4]
	bl	__dynamic_pr_debug
	b	.L2787
.L2801:
	.align	2
.L2800:
	.word	.LANCHOR3+1480
	.word	.LANCHOR2+2904
	.fnend
	.size	ghsuart_ctrl_remove, .-ghsuart_ctrl_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_trigger, %function
f_midi_out_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #28]
	cmp	r1, #0
	ldr	r0, [r0, #12]
	ldr	r1, [r3, #200]
	add	r1, r1, #296
	beq	.L2803
	b	_set_bit
.L2803:
	b	_clear_bit
	.fnend
	.size	f_midi_out_trigger, .-f_midi_out_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_notify, %function
rmnet_mux_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #176]
	beq	.L2805
	cmp	r1, #3
	beq	.L2806
	cmp	r1, #1
	beq	.L2821
.L2804:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2805:
	add	r1, r0, #172
	mov	r0, #0
	bl	_set_bit
	add	r0, r4, #180
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2821:
	ldr	r3, [r0, #368]
	cmp	r3, #0
	beq	.L2804
	cmp	r5, #0
	ldr	r0, [r0, #128]
	bne	.L2822
.L2809:
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2804
	add	r1, r4, #136
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r4, r4, #132
	bne	.L2804
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule
.L2806:
	add	r1, r0, #172
	mov	r0, #0
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit
.L2822:
	bl	smd_write_avail
	cmp	r0, r5
	bge	.L2810
.L2820:
	ldr	r0, [r4, #128]
	b	.L2809
.L2810:
	add	r1, r4, #156
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r3, r4, #152
	bne	.L2820
	mov	r0, r3
	bl	__tasklet_schedule
	b	.L2820
	.fnend
	.size	rmnet_mux_smd_notify, .-rmnet_mux_smd_notify
	.section	.rodata.str1.4
	.align	2
.LC267:
	.ascii	"usb_rmnet_ctrl_smd\000"
	.align	2
.LC268:
	.ascii	"status\000"
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_init, %function
gsmd_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC267
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC267
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	mov	r4, r3
	str	r0, [r3, #3416]
	bhi	.L2825
	ldr	ip, .L2832
	mov	r2, r0
	movw	r0, #:lower16:.LC268
	movt	r0, #:upper16:.LC268
	mov	r3, #0
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3420]
	beq	.L2826
	cmn	r0, #4096
	bls	.L2825
.L2826:
	ldr	r0, [r4, #3416]
	bl	debugfs_remove
.L2825:
	mov	r0, #0
	strb	r0, [r4, #3424]
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2833:
	.align	2
.L2832:
	.word	.LANCHOR3+1500
	.fnend
	.size	gsmd_ctrl_init, .-gsmd_ctrl_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_exit, %function
gsmd_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3420]
	bl	debugfs_remove
	ldr	r0, [r4, #3416]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	gsmd_ctrl_exit, .-gsmd_ctrl_exit
	.section	.rodata.str1.4
	.align	2
.LC269:
	.ascii	"ghsic_ctrl_xport\000"
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_init, %function
gctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC269
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC269
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3428]
	bhi	.L2838
	ldr	ip, .L2845
	mov	r2, r0
	movw	r0, #:lower16:.LC268
	mov	r4, r3
	movt	r0, #:upper16:.LC268
	mov	r3, #0
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3432]
	beq	.L2839
	cmn	r0, #4096
	bls	.L2838
.L2839:
	ldr	r0, [r4, #3428]
	bl	debugfs_remove
.L2838:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2846:
	.align	2
.L2845:
	.word	.LANCHOR3+1608
	.fnend
	.size	gctrl_init, .-gctrl_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_exit, %function
gctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3432]
	bl	debugfs_remove
	ldr	r0, [r4, #3428]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	gctrl_exit, .-gctrl_exit
	.section	.rodata.str1.4
	.align	2
.LC270:
	.ascii	"ghsic_data_xport\000"
	.align	2
.LC271:
	.ascii	"timestamp\000"
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_init, %function
ghsic_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC270
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	mov	r1, #0
	.pad #12
	sub	sp, sp, #12
	movt	r0, #:upper16:.LC270
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3436]
	bhi	.L2851
	ldr	r5, .L2863
	mov	r2, r0
	movw	r0, #:lower16:.LC268
	mov	r4, r3
	movt	r0, #:upper16:.LC268
	mov	r3, #0
	mov	r1, #292
	str	r5, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3440]
	beq	.L2854
	cmn	r0, #4096
	ldr	r2, [r4, #3436]
	bhi	.L2854
	add	r5, r5, #108
	movw	r0, #:lower16:.LC271
	movt	r0, #:upper16:.LC271
	mov	r3, #0
	mov	r1, #420
	str	r5, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3444]
	beq	.L2854
	cmn	r0, #4096
	bls	.L2851
.L2854:
	ldr	r0, [r4, #3436]
	bl	debugfs_remove
.L2851:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L2864:
	.align	2
.L2863:
	.word	.LANCHOR3+1716
	.fnend
	.size	ghsic_data_init, .-ghsic_data_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_exit, %function
ghsic_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3440]
	bl	debugfs_remove
	ldr	r0, [r4, #3444]
	bl	debugfs_remove
	ldr	r0, [r4, #3436]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	ghsic_data_exit, .-ghsic_data_exit
	.section	.rodata.str1.4
	.align	2
.LC272:
	.ascii	"ghsuart_ctrl_xport\000"
	.align	2
.LC273:
	.ascii	"mode debugfs file is not available\012\000"
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_init, %function
ghsuart_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC272
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC272
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3340]
	beq	.L2868
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2868
	ldr	ip, .L2880
	movw	r0, #:lower16:.LC268
	mov	r4, r3
	movt	r0, #:upper16:.LC268
	mov	r3, #0
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2869
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2867
.L2869:
	ldr	r0, [r4, #3340]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r4, #3340]
.L2868:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2946
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r0, #18
	beq	.L2867
	movw	r1, #:lower16:.LC273
	add	r0, r0, #2928
	movt	r1, #:upper16:.LC273
	bl	__dynamic_pr_debug
	mvn	r0, #18
.L2867:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2881:
	.align	2
.L2880:
	.word	.LANCHOR3+1932
	.fnend
	.size	ghsuart_ctrl_init, .-ghsuart_ctrl_init
	.section	.rodata.str1.4
	.align	2
.LC274:
	.ascii	"ghsuart_data_xport\000"
	.align	2
.LC275:
	.ascii	"mode debugfs file is not available\000"
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_init, %function
ghsuart_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC274
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC274
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3344]
	beq	.L2883
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2883
	ldr	ip, .L2895
	movw	r0, #:lower16:.LC268
	mov	r4, r3
	movt	r0, #:upper16:.LC268
	mov	r3, #0
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2884
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2882
.L2884:
	ldr	r0, [r4, #3344]
	bl	debugfs_remove
.L2883:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2970
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r0, #18
	beq	.L2882
	movw	r1, #:lower16:.LC275
	ldr	r0, .L2895+4
	movt	r1, #:upper16:.LC275
	bl	__dynamic_pr_debug
	mvn	r0, #18
.L2882:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2896:
	.align	2
.L2895:
	.word	.LANCHOR3+2040
	.word	.LANCHOR2+2952
	.fnend
	.size	ghsuart_data_init, .-ghsuart_data_init
	.section	.rodata.str1.4
	.align	2
.LC276:
	.ascii	"usb_diag\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_init, %function
diag_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2906
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC276
	str	lr, [sp, #4]
	movt	r0, #:upper16:.LC276
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	str	r3, [r4, #3448]
	str	r3, [r4, #3452]
	bl	debugfs_create_dir
	cmp	r0, #0
	str	r0, [r4, #3348]
	beq	.L2899
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2899
	ldr	ip, .L2906+4
	movw	r0, #:lower16:.LC268
	mov	r3, #0
	movt	r0, #:upper16:.LC268
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2901
	cmn	r0, #4096
	bhi	.L2901
.L2899:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2901:
	ldr	r0, [r4, #3348]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r4, #3348]
	b	.L2899
.L2907:
	.align	2
.L2906:
	.word	.LANCHOR1+3448
	.word	.LANCHOR3+2148
	.fnend
	.size	diag_function_init, .-diag_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_free_buf, %function
rmnet_sdio_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #188
	strd	r8, [sp, #16]
	mov	r9, #0
	strd	r10, [sp, #24]
	mov	r10, r0
	mov	r0, r7
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	str	r9, [r4, #324]
	str	r9, [r4, #352]
	str	r9, [r4, #356]
	str	r9, [r4, #360]
	str	r9, [r4, #364]
	str	r9, [r4, #368]
	ldr	r5, [r10, #132]!
	str	r0, [sp, #4]
	cmp	r5, r10
	ldr	r8, [r5]
	beq	.L2909
.L2910:
	mov	r0, r5
	sub	r6, r5, #36
	bl	list_del
	ldr	r3, [r4, #140]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #140]
	str	r9, [r5, #-36]
	ldr	fp, [r4, #88]
	mov	r5, r8
	bl	kfree
	mov	r1, r6
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r10, r8
	ldr	r8, [r8]
	bne	.L2910
.L2909:
	mov	r9, r4
	ldr	r5, [r9, #160]!
	cmp	r5, r9
	ldr	r8, [r5]
	beq	.L2911
	mov	r10, #0
.L2912:
	mov	r0, r5
	sub	r6, r5, #36
	bl	list_del
	ldr	r3, [r4, #168]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #168]
	str	r10, [r5, #-36]
	ldr	fp, [r4, #92]
	mov	r5, r8
	bl	kfree
	mov	r1, r6
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r8
	ldr	r8, [r8]
	bne	.L2912
.L2911:
	mov	r9, r4
	ldr	r5, [r9, #108]!
	cmp	r5, r9
	ldr	r8, [r5]
	beq	.L2913
.L2914:
	mov	r0, r5
	sub	r10, r5, #8
	bl	list_del
	ldr	r3, [r4, #116]
	sub	r3, r3, #1
	str	r3, [r4, #116]
	ldr	r0, [r5, #-8]
	mov	r5, r8
	bl	kfree
	mov	r0, r10
	bl	kfree
	cmp	r9, r8
	ldr	r8, [r8]
	bne	.L2914
.L2913:
	mov	r9, r4
	ldr	r5, [r9, #120]!
	cmp	r5, r9
	ldr	r8, [r5]
	beq	.L2915
.L2916:
	mov	r0, r5
	sub	r10, r5, #8
	bl	list_del
	ldr	r3, [r4, #128]
	sub	r3, r3, #1
	str	r3, [r4, #128]
	ldr	r0, [r5, #-8]
	mov	r5, r8
	bl	kfree
	mov	r0, r10
	bl	kfree
	cmp	r9, r8
	ldr	r8, [r8]
	bne	.L2916
.L2915:
	ldr	r3, [r4, #144]
	add	r5, r4, #144
	cmp	r5, r3
	beq	.L2920
	mov	r8, #0
	mov	r9, #0
	b	.L2917
.L2934:
	ldr	r2, [r4, #152]
	sub	r2, r2, #1
	str	r2, [r4, #152]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #144]
	cmp	r3, r5
	beq	.L2920
.L2917:
	subs	r0, r3, #0
	bne	.L2934
.L2920:
	ldr	r3, [r4, #172]
	add	r5, r4, #172
	cmp	r3, r5
	beq	.L2918
	mov	r8, #0
	mov	r9, #0
	b	.L2919
.L2935:
	ldr	r2, [r4, #180]
	sub	r2, r2, #1
	str	r2, [r4, #180]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #172]
	cmp	r3, r5
	beq	.L2918
.L2919:
	subs	r0, r3, #0
	bne	.L2935
.L2918:
	ldrd	r4, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r1, [sp, #4]
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_sdio_free_buf, .-rmnet_sdio_free_buf
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_complete_epin, %function
rmnet_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r0]
	ldr	r2, [r1, #44]
	ldr	r6, [r1, #32]
	cmp	r2, #0
	beq	.L2937
	add	r3, r2, #108
	bics	r3, r3, #4
	beq	.L2937
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC223
	movt	r1, #:upper16:.LC223
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2937:
	add	r7, r4, #188
	add	r8, r4, #132
	mov	r0, r7
	bl	_raw_spin_lock
	mov	r2, r8
	add	r0, r5, #36
	ldr	r1, [r4, #136]
	bl	__list_add
	ldr	r3, [r4, #140]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #140]
	bl	_raw_spin_unlock
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #192]
	cmp	r3, #0
	beq	.L2936
	ldr	r3, [r4, #316]
	tst	r3, #2
	bne	.L2965
.L2936:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2965:
	ldr	r3, [r4, #84]
	mov	r0, r7
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #132]
	str	r0, [sp]
	cmp	r8, r3
	beq	.L2940
	add	r10, r4, #144
.L2945:
	ldr	r5, [r4, #144]
	cmp	r5, r10
	beq	.L2940
	cmp	r5, #0
	beq	.L2940
	ldr	r3, [r4, #152]
	mov	r1, #0
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #152]
	ldrd	r2, [r5]
	strd	r0, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #132]
	str	r5, [r6, #-4]
	ldr	r3, [r5, #172]
	mov	r0, r6
	sub	r9, r6, #36
	str	r3, [r6, #-36]
	ldr	r3, [r5, #80]
	str	r3, [r6, #-32]
	bl	list_del
	ldr	r3, [r4, #140]
	mov	r0, r7
	sub	r3, r3, #1
	str	r3, [r4, #140]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #92]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	fp, #0
	bne	.L2966
	ldr	r2, [r4, #132]
	ldr	r3, [r4, #352]
	cmp	r8, r2
	add	r3, r3, #1
	str	r3, [r4, #352]
	bne	.L2945
.L2940:
	ldr	r1, [sp]
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2966:
	ldr	r0, [r4, #192]
	cmp	r0, #0
	beq	.L2944
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC226
	mov	r2, fp
	movt	r1, #:upper16:.LC226
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r6
	ldr	r1, [r4, #136]
	bl	__list_add
	ldr	r3, [r4, #140]
	ldr	r2, [r4, #144]
	add	r3, r3, #1
	str	r3, [r4, #140]
	stm	r5, {r2, r10}
	str	r5, [r4, #144]
	str	r5, [r2, #4]
	ldr	r3, [r4, #152]
	add	r3, r3, #1
	str	r3, [r4, #152]
	b	.L2940
.L2944:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #92]
	bl	kfree
	mov	r1, r9
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L2940
	.fnend
	.size	rmnet_sdio_complete_epin, .-rmnet_sdio_complete_epin
	.section	.rodata.str1.4
	.align	2
.LC277:
	.ascii	"<6>%s: sdio data ch not open\012\000"
	.align	2
.LC278:
	.ascii	"rmnet SDIO data write failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_data_rx_work, %function
rmnet_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #-152]
	ldr	r3, [r0, #80]
	tst	r3, #2
	beq	.L2974
	sub	r8, r0, #48
	mov	r4, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	mov	r5, r0
	ldr	r6, [r3, #-64]!
	cmp	r6, r3
	beq	.L2969
	cmp	r6, #0
	beq	.L2969
	ldr	ip, [r4, #-56]
	mov	r2, #0
	mov	r3, #0
	mov	r1, r0
	mov	r0, r8
	sub	ip, ip, #1
	str	ip, [r4, #-56]
	ldr	lr, [r6]
	ldr	ip, [r6, #4]
	strd	r2, [r6]
	str	ip, [lr, #4]
	str	lr, [ip]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7]
	movw	r1, #:lower16:.LC278
	mov	r5, r0
	movt	r1, #:upper16:.LC278
	add	r0, r3, #32
	bl	dev_err
	mov	r0, r6
	bl	dev_kfree_skb_any
.L2969:
	mov	r1, r5
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L2974:
	movw	r0, #:lower16:.LC277
	ldr	r1, .L2975
	movt	r0, #:upper16:.LC277
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L2976:
	.align	2
.L2975:
	.word	.LANCHOR3+2256
	.fnend
	.size	rmnet_sdio_data_rx_work, .-rmnet_sdio_data_rx_work
	.section	.rodata.str1.4
	.align	2
.LC279:
	.ascii	"<3>%s: usb epIn failed with %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_write_data_tohost, %function
gbam_write_data_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #8
	mov	r0, r8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	str	r0, [sp, #12]
	cmp	r3, #0
	moveq	r1, r0
	beq	.L2992
	ldr	r2, [r4, #28]
	add	r1, r4, #28
	ldr	r9, [r3, #84]
	str	r1, [sp, #4]
	cmp	r2, r1
	beq	.L2980
	movw	r7, #:lower16:.LANCHOR1
	movw	fp, #:lower16:.LANCHOR0
	movt	fp, #:upper16:.LANCHOR0
	add	r3, r4, #36
	movt	r7, #:upper16:.LANCHOR1
	str	r3, [sp]
	str	fp, [sp, #8]
.L2985:
	ldr	r3, [sp]
	ldr	r5, [r4, #36]
	cmp	r3, r5
	beq	.L2980
	cmp	r5, #0
	mov	r2, #1
	beq	.L2980
	ldr	r1, [r4, #44]
	mov	r10, #0
	mov	fp, #0
	ldr	r3, [r7, #3456]
	sub	r1, r1, #1
	add	r3, r3, r2
	str	r1, [r4, #44]
	ldrd	r0, [r5]
	strd	r10, [r5]
	str	r3, [r7, #3456]
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r6, [r4, #28]
	ldr	r1, [sp, #8]
	str	r5, [r6, #-4]
	ldr	r0, [r5, #172]
	sub	r10, r6, #36
	str	r0, [r6, #-36]
	ldr	r0, [r5, #80]
	str	r0, [r6, #-32]
	ldr	r0, [r1, #592]
	cmp	r3, r0
	mov	r0, r6
	moveq	r3, #0
	moveq	r2, r3
	streq	r3, [r7, #3456]
	ldrb	r3, [r6, #-10]	@ zero_extendqisi2
	bfi	r3, r2, #0, #1
	orr	r3, r3, #2
	strb	r3, [r6, #-10]
	bl	list_del
	mov	r0, r8
	bl	_raw_spin_unlock
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r2, #32
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r8
	bl	_raw_spin_lock
	cmp	r10, #0
	bne	.L2993
	ldr	r1, [sp, #4]
	ldr	r2, [r4, #28]
	ldr	r3, [r4, #264]
	cmp	r2, r1
	add	r3, r3, #1
	str	r3, [r4, #264]
	bne	.L2985
.L2980:
	ldr	r1, [sp, #12]
.L2992:
	mov	r0, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2993:
	movw	r0, #:lower16:.LC279
	mov	r2, r10
	ldr	r1, .L2994
	movt	r0, #:upper16:.LC279
	bl	printk
	mov	r0, r6
	ldr	r1, [sp, #4]
	ldr	r2, [r4, #28]
	bl	__list_add
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L2980
.L2995:
	.align	2
.L2994:
	.word	.LANCHOR3+2280
	.fnend
	.size	gbam_write_data_tohost, .-gbam_write_data_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_write_data_tohost_w, %function
gbam_write_data_tohost_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #-20]
	b	gbam_write_data_tohost
	.fnend
	.size	gbam_write_data_tohost_w, .-gbam_write_data_tohost_w
	.section	.rodata.str1.4
	.align	2
.LC280:
	.ascii	"<3>%s: data tx ep error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_epin_complete, %function
gbam_epin_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldr	r2, [r1, #44]
	ldr	r7, [r1, #32]
	cmp	r2, #0
	bne	.L3005
.L2998:
	mov	r0, r7
	bl	dev_kfree_skb_any
	cmp	r6, #0
	beq	.L2997
	add	r5, r6, #8
	mov	r0, r5
	bl	_raw_spin_lock
	add	r0, r4, #36
	add	r2, r6, #28
	ldr	r1, [r6, #32]
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r6, #96
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r0, [r3, #3460]
	b	queue_work
.L3005:
	bgt	.L2999
	add	r3, r2, #108
	bics	r3, r3, #4
	beq	.L3006
.L2999:
	movw	r0, #:lower16:.LC280
	ldr	r1, .L3007
	movt	r0, #:upper16:.LC280
	bl	printk
	b	.L2998
.L3006:
	mov	r5, r0
	mov	r0, r7
	bl	dev_kfree_skb_any
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r3, #12]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L2997:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3008:
	.align	2
.L3007:
	.word	.LANCHOR3+2304
	.fnend
	.size	gbam_epin_complete, .-gbam_epin_complete
	.section	.rodata.str1.4
	.align	2
.LC281:
	.ascii	"%s: p:%pK#%d skb_len:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_receive, %function
ghsic_data_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	beq	.L3010
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L3010
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2994
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L3025
.L3013:
	add	r7, r4, #48
	add	r8, r4, #136
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #36]
	add	r1, r4, #32
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	mov	r5, r0
	stm	r6, {r1, r3}
	str	r6, [r3]
	ldr	r3, [r4, #40]
	ldr	r1, [r2, #596]
	str	r6, [r4, #36]
	add	r3, r3, #1
	cmp	r1, #0
	str	r3, [r4, #40]
	beq	.L3014
	ldr	r2, [r2, #600]
	cmp	r2, r3
	bls	.L3026
.L3014:
	mov	r1, r5
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r8
	ldr	r0, [r4, #84]
	bl	queue_work
	mov	r0, #0
.L3009:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3025:
	ldr	lr, [r4]
	movw	r1, #:lower16:.LC281
	mov	r3, r4
	ldr	ip, [r6, #80]
	movt	r1, #:upper16:.LC281
	add	r0, r0, #2976
	ldr	r2, .L3027
	str	lr, [sp]
	str	ip, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L3013
.L3010:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mvn	r0, #106
	b	.L3009
.L3026:
	add	r1, r4, #164
	mov	r0, #2
	bl	_set_bit
	ldr	r3, [r4, #196]
	mov	r1, r5
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #196]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r8
	ldr	r0, [r4, #84]
	bl	queue_work
	mvn	r0, #15
	b	.L3009
.L3028:
	.align	2
.L3027:
	.word	.LANCHOR3+2324
	.fnend
	.size	ghsic_data_receive, .-ghsic_data_receive
	.section	.rodata.str1.4
	.align	2
.LC282:
	.ascii	"%s: req->length:%d header_len:%u\012skb->len:%d skb"
	.ascii	"->data_len:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_start_xmit, %function
eth_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r7, r1, #1152
	mov	r0, r7
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	beq	.L3089
	ldrh	r10, [r3, #98]
	mov	r0, r7
	ldr	r8, [r3, #88]
	ldrb	r3, [r3, #124]	@ zero_extendqisi2
	str	r3, [sp, #16]
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L3031
	add	r6, r4, #1168
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #16]
	mov	fp, r0
	cmp	r3, #0
	beq	.L3034
	ldr	r9, [r4, #1200]
	cmp	r9, #0
	beq	.L3090
.L3034:
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	tst	r10, #1
	bne	.L3039
	ldr	r2, [r5, #172]
	ldrb	r3, [r2]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L3091
.L3039:
	mov	r0, r6
	add	r10, r7, #20
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #1172]
	mov	fp, r0
	cmp	r10, r9
	beq	.L3092
	sub	r3, r9, #36
	mov	r0, r9
	str	r3, [sp, #20]
	bl	list_del
	ldr	r3, [r4, #1172]
	cmp	r10, r3
	beq	.L3093
.L3042:
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1232]
	mov	fp, r0
	cmp	r3, #0
	beq	.L3044
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L3045
	mov	r1, r5
	blx	r3
	mov	r5, r0
.L3045:
	cmp	r5, #0
	beq	.L3094
.L3044:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	beq	.L3047
	movw	r2, #:lower16:.LANCHOR2
	movw	r1, #3018
	ldr	r3, [r9, #-32]
	movt	r2, #:upper16:.LANCHOR2
	ldr	ip, [r4, #1220]
	ldrh	r2, [r2, r1]
	tst	r2, #4
	bne	.L3095
.L3048:
	ldr	r0, [r9, #-36]
	mov	r2, ip
	ldr	r1, [r4, #1156]
	add	r0, r0, r3
	ldr	r1, [r1, #144]
	bl	memcpy
	ldr	r3, [r9, #-32]
	mov	r1, fp
	mov	r0, r7
	ldr	r2, [r4, #1220]
	add	r3, r3, r2
	str	r3, [r9, #-32]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r9, #-36]
	ldr	r3, [r9, #-32]
	ldr	r2, [r5, #80]
	ldr	r1, [r5, #172]
	add	r0, r0, r3
	bl	memcpy
	ldr	fp, [r9, #-32]
	mov	r0, r5
	ldr	r3, [r5, #80]
	add	fp, fp, r3
	str	fp, [r9, #-32]
	bl	dev_kfree_skb_any
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1196]
	mov	r7, r0
	ldr	r2, [r4, #1228]
	add	r3, r3, #1
	cmp	r3, r2
	str	r3, [r4, #1196]
	ldr	r3, [r4, #1192]
	bcs	.L3050
	cmp	r3, #5
	bgt	.L3096
.L3050:
	add	r3, r3, #1
	mov	r2, #0
	mov	r1, r7
	mov	r0, r6
	str	r3, [r4, #1192]
	str	r2, [r4, #1196]
	bl	_raw_spin_unlock_irqrestore
.L3051:
	ldr	r3, [r4, #1156]
	ldrb	r2, [r3, #104]	@ zero_extendqisi2
	cmp	r2, #0
	moveq	r2, #1
	beq	.L3052
	ldr	r3, [r3, #112]
	cmp	r3, fp
	beq	.L3097
.L3052:
	ldrb	r3, [r9, #-10]	@ zero_extendqisi2
	bfi	r3, r2, #1, #1
	tst	r3, #2
	uxtb	r2, r3
	strb	r3, [r9, #-10]
	beq	.L3053
	ldrb	r3, [r4, #1276]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L3053
	ldrh	r1, [r8, #20]
	sdiv	r3, fp, r1
	mls	r3, r1, r3, fp
	cmp	r3, #0
	bne	.L3053
	bfi	r2, r3, #1, #1
	add	fp, fp, #1
	strb	r2, [r9, #-10]
.L3053:
	str	fp, [r9, #-32]
	ldr	r3, [r4, #1164]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L3054
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	beq	.L3098
.L3054:
	ldrb	r3, [r9, #-10]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r9, #-10]
.L3056:
	ldr	r3, [r8, #8]
	sub	r1, r9, #36
	mov	r0, r8
	mov	r2, #32
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L3057
	movw	r3, #:lower16:jiffies
	movt	r3, #:upper16:jiffies
	ldr	r3, [r3]
	str	r3, [r4, #604]
.L3029:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3091:
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	ldrb	ip, [r2, #2]	@ zero_extendqisi2
	ldrb	r0, [r2, #3]	@ zero_extendqisi2
	and	r3, r3, r1
	ldrb	r1, [r2, #4]	@ zero_extendqisi2
	ldrb	r2, [r2, #5]	@ zero_extendqisi2
	and	r3, r3, ip
	and	r3, r3, r0
	and	r3, r3, r1
	and	r3, r3, r2
	cmp	r3, #255
	moveq	r3, #8
	movne	r3, #2
	tst	r3, r10
	bne	.L3039
.L3031:
	mov	r0, r5
	bl	dev_kfree_skb_any
	mov	r0, #0
	b	.L3029
.L3047:
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	fp, [r5, #80]
	ldr	r3, [r5, #172]
	str	r3, [r9, #-36]
	str	r5, [r9, #-4]
	b	.L3051
.L3093:
	ldr	r1, [r4, #576]
	cmp	r1, #0
	beq	.L3099
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
	b	.L3042
.L3089:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	bl	dev_kfree_skb_any
	mov	r0, #0
	b	.L3029
.L3057:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	movne	r3, #0
	strne	r3, [r9, #-32]
	beq	.L3100
.L3046:
	ldr	r2, [r4, #1160]
	mov	r0, r6
	ldr	r3, [r2, #260]
	add	r3, r3, #1
	str	r3, [r2, #260]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1172]
	mov	r5, r0
	cmp	r10, r3
	beq	.L3101
.L3058:
	mov	r2, r10
	mov	r0, r9
	ldr	r1, [r4, #1176]
	bl	__list_add
	mov	r0, r6
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L3029
.L3090:
	ldr	r0, [r4, #1160]
	add	r2, r7, #20
	ldr	r3, [r4, #1172]
	ldr	r1, [r4, #1228]
	str	r2, [sp, #28]
	ldr	r0, [r0, #356]
	cmp	r3, r2
	add	r0, r0, #80
	mul	r1, r1, r0
	str	r1, [r4, #1200]
	beq	.L3034
	str	r5, [sp, #20]
	mov	r5, r3
	str	r7, [sp, #24]
	mov	r7, r2
	b	.L3038
.L3035:
	str	r9, [r5, #-4]
	ldr	r5, [r5]
	cmp	r5, r7
	beq	.L3102
.L3038:
	ldr	r2, [r5, #-36]
	cmp	r2, #0
	bne	.L3035
	movw	r1, #32800
	ldr	r0, [r4, #1200]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5, #-36]
	bne	.L3035
	ldr	r7, [sp, #28]
	str	r0, [r4, #1200]
	ldr	r5, [r4, #1172]
	cmp	r5, r7
	beq	.L3037
	mov	r4, r0
.L3036:
	ldr	r0, [r5, #-36]
	bl	kfree
	str	r4, [r5, #-36]
	ldr	r5, [r5]
	cmp	r5, r7
	bne	.L3036
.L3037:
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
	b	.L3029
.L3098:
	movw	r1, #:lower16:.LANCHOR0
	ldr	r2, [r4, #1188]
	movt	r1, #:upper16:.LANCHOR0
	ldr	r1, [r1, #604]
	add	r2, r2, #1
	cmp	r2, r1, lsr #1
	str	r2, [r4, #1188]
	beq	.L3103
	ldrb	r3, [r9, #-10]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r9, #-10]
	b	.L3056
.L3097:
	ldrh	r3, [r8, #20]
	sdiv	r2, fp, r3
	mls	r2, r3, r2, fp
	subs	r2, r2, #0
	movne	r2, #1
	b	.L3052
.L3100:
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L3046
.L3102:
	ldr	r5, [sp, #20]
	ldr	r7, [sp, #24]
	b	.L3034
.L3092:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #16
	b	.L3029
.L3101:
	ldr	r1, [r4, #576]
	mov	r0, #0
	add	r1, r1, #80
	bl	_clear_bit
	b	.L3058
.L3096:
	mov	r1, r10
	mov	r0, r9
	ldr	r2, [r4, #1172]
	bl	__list_add
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L3029
.L3094:
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L3046
.L3103:
	ldrb	r2, [r9, #-10]	@ zero_extendqisi2
	bfi	r2, r3, #0, #1
	strb	r2, [r9, #-10]
	str	r3, [r4, #1188]
	b	.L3056
.L3095:
	ldr	lr, [r5, #84]
	movw	r1, #:lower16:.LC282
	ldr	r2, .L3104
	movt	r1, #:upper16:.LC282
	ldr	r0, .L3104+4
	str	lr, [sp, #8]
	ldr	lr, [r5, #80]
	stm	sp, {ip, lr}
	bl	__dynamic_pr_debug
	ldr	r3, [r9, #-32]
	ldr	ip, [r4, #1220]
	b	.L3048
.L3099:
	movw	r0, #:lower16:.LC101
	movw	r1, #1847
	movt	r0, #:upper16:.LC101
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC102
	movt	r0, #:upper16:.LC102
	bl	printk
	b	.L3042
.L3105:
	.align	2
.L3104:
	.word	.LANCHOR3+2344
	.word	.LANCHOR2+3000
	.fnend
	.size	eth_start_xmit, .-eth_start_xmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_disconnect_work, %function
rmnet_mux_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-20]
	cmp	r3, #3
	beq	.L3142
.L3107:
	sub	r8, r4, #16
	sub	r7, r4, #188
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #-188]
	mov	r5, r0
	cmp	r7, r6
	beq	.L3108
	mov	r9, #0
.L3109:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	str	r9, [r6, #-36]
	ldr	r6, [r4, #-292]
	mov	r0, #0
	bl	kfree
	mov	r1, r10
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #-188]
	cmp	r7, r6
	bne	.L3109
.L3108:
	ldr	r6, [r4, #-164]
	sub	r7, r4, #164
	cmp	r7, r6
	beq	.L3110
	mov	r9, #0
.L3111:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	str	r9, [r6, #-36]
	ldr	r6, [r4, #-288]
	mov	r0, #0
	bl	kfree
	mov	r1, r10
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #-164]
	cmp	r7, r6
	bne	.L3111
.L3110:
	ldr	r3, [r4, #-180]
	sub	r9, r4, #180
	cmp	r3, r9
	beq	.L3115
	mov	r6, #0
	mov	r7, #0
	b	.L3112
.L3143:
	ldr	r2, [r4, #-172]
	sub	r2, r2, #1
	str	r2, [r4, #-172]
	ldm	r3, {r1, r2}
	strd	r6, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-180]
	cmp	r3, r9
	beq	.L3115
.L3112:
	subs	r0, r3, #0
	bne	.L3143
.L3115:
	ldr	r3, [r4, #-156]
	sub	r9, r4, #156
	cmp	r3, r9
	beq	.L3113
	mov	r6, #0
	mov	r7, #0
	b	.L3114
.L3144:
	ldr	r2, [r4, #-148]
	sub	r2, r2, #1
	str	r2, [r4, #-148]
	ldm	r3, {r1, r2}
	strd	r6, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-156]
	cmp	r3, r9
	beq	.L3113
.L3114:
	subs	r0, r3, #0
	bne	.L3144
.L3113:
	ldr	r6, [r4, #-276]
	sub	r7, r4, #276
	cmp	r7, r6
	beq	.L3116
.L3117:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	ldr	r9, [r4, #-292]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #-276]
	cmp	r7, r6
	bne	.L3117
.L3116:
	ldr	r6, [r4, #-268]
	sub	r7, r4, #268
	cmp	r7, r6
	beq	.L3118
.L3119:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	ldr	r9, [r4, #-288]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #-268]
	cmp	r7, r6
	bne	.L3119
.L3118:
	ldr	r6, [r4, #-260]
	sub	r7, r4, #260
	cmp	r7, r6
	beq	.L3120
.L3121:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	ldr	r9, [r4, #-288]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #-260]
	cmp	r7, r6
	bne	.L3121
.L3120:
	ldr	r6, [r4, #-68]
	sub	r7, r4, #68
	cmp	r7, r6
	beq	.L3122
.L3123:
	mov	r0, r6
	sub	r9, r6, #8
	bl	list_del
	ldr	r0, [r6, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r6, [r4, #-68]
	ldr	r3, [r4, #-48]
	cmp	r7, r6
	sub	r3, r3, #1
	str	r3, [r4, #-48]
	bne	.L3123
.L3122:
	ldr	r6, [r4, #-44]
	sub	r7, r4, #44
	cmp	r7, r6
	beq	.L3124
.L3125:
	mov	r0, r6
	sub	r9, r6, #8
	bl	list_del
	ldr	r0, [r6, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r6, [r4, #-44]
	ldr	r3, [r4, #-36]
	cmp	r7, r6
	sub	r3, r3, #1
	str	r3, [r4, #-36]
	bne	.L3125
.L3124:
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	sub	r0, r4, #60
	mov	r2, #1
	mov	r1, #3
	str	r3, [r4, #-20]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L3142:
	sub	r0, r0, #228
	bl	tasklet_kill
	sub	r0, r4, #248
	bl	tasklet_kill
	b	.L3107
	.fnend
	.size	rmnet_mux_disconnect_work, .-rmnet_mux_disconnect_work
	.section	.rodata.str1.4
	.align	2
.LC283:
	.ascii	"rmnet_mux SDIO data write failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_data_rx_work, %function
rmnet_mux_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r6, r0, #124
	sub	r7, r0, #16
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r0
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r10, [r0, #-156]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [fp, #-16]
	mov	r5, r0
	cmp	r4, r7
	beq	.L3146
	movw	r3, #:lower16:.LC283
	movt	r3, #:upper16:.LC283
	str	r3, [sp, #4]
	b	.L3147
.L3153:
	ldr	r2, [fp, #-8]
	mov	r8, #0
	mov	r9, #0
	sub	r2, r2, #1
	str	r2, [fp, #-8]
	ldr	ip, [r4]
	ldr	r2, [r4, #4]
	strd	r8, [r4]
	str	r2, [ip, #4]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r10]
	mov	r5, r0
	ldr	r1, [sp, #4]
	add	r0, r2, #32
	bl	dev_err
	mov	r0, r4
	bl	dev_kfree_skb_any
	ldr	r4, [fp, #-16]
	cmp	r4, r7
	beq	.L3146
.L3147:
	cmp	r4, #0
	mov	r1, r5
	mov	r0, r6
	bne	.L3153
.L3146:
	mov	r1, r5
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_mux_sdio_data_rx_work, .-rmnet_mux_sdio_data_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_complete_epin, %function
rmnet_mux_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0]
	.pad #12
	sub	sp, sp, #12
	ldr	r9, [r1, #32]
	ldr	r7, [r4, #360]
	cmp	r7, #0
	beq	.L3178
	ldr	r2, [r1, #44]
	cmp	r2, #0
	beq	.L3156
	add	r3, r2, #108
	bics	r3, r3, #4
	beq	.L3156
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC224
	movt	r1, #:upper16:.LC224
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L3156:
	add	r7, r4, #364
	add	r8, r4, #192
	mov	r0, r7
	bl	_raw_spin_lock
	mov	r2, r8
	add	r0, r5, #36
	ldr	r1, [r4, #196]
	bl	__list_add
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r0, r9
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #368]
	cmp	r3, #0
	bne	.L3179
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3179:
	ldr	r3, [r4, #84]
	mov	r0, r7
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #192]
	str	r0, [sp]
	cmp	r8, r3
	beq	.L3159
	add	fp, r4, #200
.L3164:
	ldr	r5, [r4, #200]
	cmp	r5, fp
	beq	.L3159
	cmp	r5, #0
	beq	.L3159
	ldr	r3, [r4, #208]
	mov	r1, #0
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #208]
	ldrd	r2, [r5]
	strd	r0, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #192]
	str	r5, [r6, #-4]
	ldr	r3, [r5, #172]
	mov	r0, r6
	sub	r9, r6, #36
	str	r3, [r6, #-36]
	ldr	r3, [r5, #80]
	str	r3, [r6, #-32]
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r4, #92]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r10, #0
	bne	.L3180
	ldr	r2, [r4, #192]
	ldr	r3, [r4, #404]
	cmp	r8, r2
	add	r3, r3, #1
	str	r3, [r4, #404]
	bne	.L3164
.L3159:
	ldr	r1, [sp]
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3178:
	mov	r6, r0
	mov	r0, r9
	bl	dev_kfree_skb_any
	mov	r0, r7
	str	r7, [r5]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L3180:
	ldr	r0, [r4, #368]
	cmp	r0, #0
	beq	.L3163
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC226
	mov	r2, r10
	movt	r1, #:upper16:.LC226
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r6
	ldr	r1, [r4, #196]
	bl	__list_add
	ldr	r3, [r4, #200]
	stm	r5, {r3, fp}
	str	r5, [r4, #200]
	str	r5, [r3, #4]
	ldr	r3, [r4, #208]
	add	r3, r3, #1
	str	r3, [r4, #208]
	b	.L3159
.L3163:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #92]
	bl	kfree
	mov	r1, r9
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L3159
	.fnend
	.size	rmnet_mux_sdio_complete_epin, .-rmnet_mux_sdio_complete_epin
	.section	.rodata.str1.4
	.align	2
.LC284:
	.ascii	"rmnet_mux data rx enqueue err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_complete_epout, %function
rmnet_mux_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r1, #32]
	ldr	r7, [r5, #360]
	cmp	r7, #0
	beq	.L3200
	ldr	r3, [r1, #44]
	ldr	r7, [r5, #84]
	cmn	r3, #104
	beq	.L3183
	cmp	r3, #0
	beq	.L3184
	cmn	r3, #108
	beq	.L3183
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC221
	add	r6, r5, #364
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC221
	ldr	lr, [r4, #4]
	ldr	ip, [r4, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r0, r6
	bl	_raw_spin_lock
.L3186:
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r5, #308]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #608]
	cmp	r2, r3
	bcs	.L3201
	mov	r0, r6
	bl	_raw_spin_unlock
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	movw	r0, #2056
	bl	__alloc_skb
	subs	r6, r0, #0
	beq	.L3190
	ldr	r0, [r6, #160]
	mov	ip, #2048
	mov	r2, #32
	ldr	r3, [r6, #172]
	mov	r1, r4
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	stm	r4, {r3, ip}
	str	r6, [r4, #32]
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	bne	.L3202
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3184:
	mov	r0, r8
	add	r6, r5, #364
	ldr	r1, [r1, #48]
	bl	skb_put
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #228]
	add	r2, r5, #224
	add	r1, r5, #240
	strd	r2, [r8]
	str	r8, [r3]
	ldr	r3, [r5, #232]
	str	r8, [r5, #228]
	ldr	r0, [r5, #376]
	add	r3, r3, #1
	str	r3, [r5, #232]
	bl	queue_work
	b	.L3186
.L3183:
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r0, #0
	str	r0, [r4]
.L3199:
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L3200:
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r0, r7
	str	r7, [r4]
	b	.L3199
.L3201:
	ldr	r1, [r5, #220]
	add	r0, r4, #36
	add	r2, r5, #216
	bl	__list_add
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L3202:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L3188:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC284
	mov	r2, r8
	movt	r1, #:upper16:.LC284
	add	r0, r0, #32
	bl	dev_err
	ldr	r1, [r5, #220]
	add	r0, r4, #36
	add	r2, r5, #216
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__list_add
.L3190:
	mvn	r8, #11
	b	.L3188
	.fnend
	.size	rmnet_mux_sdio_complete_epout, .-rmnet_mux_sdio_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_unbind, %function
rmnet_sdio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r1, #252
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	cancel_delayed_work_sync
	ldr	r0, [r4, #200]
	bl	destroy_workqueue
	ldr	r2, [r4, #316]
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	tst	r2, #2
	str	r3, [r4, #96]
	bne	.L3213
	ldr	r3, [r4, #320]
	tst	r3, #2
	bne	.L3214
.L3205:
	ldr	r0, [r4, #348]
	bl	debugfs_remove_recursive
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L3213:
	add	r1, r4, #316
	mov	r0, #1
	bl	_clear_bit
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L3205
.L3214:
	add	r1, r4, #320
	mov	r0, #1
	bl	_clear_bit
	b	.L3205
	.fnend
	.size	rmnet_sdio_unbind, .-rmnet_sdio_unbind
	.section	.rodata.str1.4
	.align	2
.LC285:
	.ascii	"%s:\012\000"
	.align	2
.LC286:
	.ascii	"%s: SMD port not ready - rescheduling:%s err:%d\012"
	.ascii	"\000"
	.align	2
.LC287:
	.ascii	"<3>%s: unable to open smd port:%s err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_connect_w, %function
grmnet_ctrl_smd_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #3042
	movt	r5, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #16]
	ldrh	r3, [r5, r3]
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r0, #-12]
	tst	r3, #4
	bne	.L3233
.L3216:
	ldr	r3, [r4, #-104]
	tst	r3, #2
	bne	.L3217
	ldr	r3, [r4, #-104]
	tst	r3, #4
	beq	.L3234
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3217:
	sub	r2, r4, #112
	movw	r3, #:lower16:grmnet_ctrl_smd_notify
	ldr	r0, [r4, #-108]
	movt	r3, #:upper16:grmnet_ctrl_smd_notify
	mov	r1, r2
	bl	smd_open
	subs	r3, r0, #0
	beq	.L3219
	cmn	r3, #11
	bne	.L3220
	movw	r2, #3066
	ldrh	r2, [r5, r2]
	tst	r2, #4
	bne	.L3235
.L3221:
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #250
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #3412]
	bl	msecs_to_jiffies
	mov	r2, r0
	mov	r1, r4
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	queue_delayed_work
.L3219:
	sub	r6, r4, #4
	ldr	r7, [r4, #-24]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-8]
	mov	r5, r0
	cmp	r3, #0
	beq	.L3222
	orr	r2, r7, #4
	mov	r1, r7
	ldr	r0, [r4, #-112]
	mvn	r2, r2
	bl	smd_tiocmset
.L3222:
	mov	r1, r5
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock_irqrestore
.L3234:
	sub	r1, r4, #104
	mov	r0, #2
	bl	_set_bit
	ldr	r0, .L3236
	mov	r3, #84
	mla	r0, r3, r6, r0
	add	r0, r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	platform_driver_register
.L3233:
	movw	r1, #:lower16:.LC285
	ldr	r2, .L3236+4
	add	r0, r5, #3024
	movt	r1, #:upper16:.LC285
	bl	__dynamic_pr_debug
	b	.L3216
.L3235:
	movw	r1, #:lower16:.LC286
	ldr	r2, .L3236+4
	str	r3, [sp]
	movt	r1, #:upper16:.LC286
	ldr	r0, .L3236+8
	ldr	r3, [r4, #-108]
	bl	__dynamic_pr_debug
	b	.L3221
.L3220:
	ldr	r1, .L3236+4
	movw	r0, #:lower16:.LC287
	ldr	r2, [r4, #-108]
	movt	r0, #:upper16:.LC287
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L3237:
	.align	2
.L3236:
	.word	.LANCHOR1+512
	.word	.LANCHOR3+2360
	.word	.LANCHOR2+3048
	.fnend
	.size	grmnet_ctrl_smd_connect_w, .-grmnet_ctrl_smd_connect_w
	.section	.rodata.str1.4
	.align	2
.LC288:
	.ascii	"Unable to open SDIO DATA channel\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_open_sdio_work, %function
rmnet_mux_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r3, #3464]
	cmp	r2, #90
	ble	.L3239
	ldr	r3, [r0, #-172]
	movw	r1, #:lower16:.LC288
	movt	r1, #:upper16:.LC288
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r0, [r3]
	add	r0, r0, #32
	b	dev_err
.L3239:
	ldr	r5, [r4, #120]
	add	r2, r2, #1
	mov	r0, #2000
	str	r2, [r3, #3464]
	bl	msecs_to_jiffies
	mov	r2, r0
	mov	r1, r4
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_delayed_work
	.fnend
	.size	rmnet_mux_open_sdio_work, .-rmnet_mux_open_sdio_work
	.section	.rodata.str1.4
	.align	2
.LC289:
	.ascii	"<3>%s: rx queue failed %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start_rx, %function
gbam_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r9, r0, #4
	mov	r8, r0
	mov	r0, r9
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r8, #12]
	mov	r5, r0
	cmp	r3, #0
	beq	.L3245
	ldr	r10, [r3, #88]
	movw	r6, #:lower16:.LANCHOR0
	add	r2, r8, #52
	movt	r6, #:upper16:.LANCHOR0
	str	r2, [sp, #4]
.L3243:
	ldr	r0, [sp, #4]
	mvn	r3, #0
	mov	r2, #0
	ldr	r4, [r8, #52]
	mov	r1, #32
	cmp	r4, r0
	sub	r0, r4, #36
	str	r0, [sp]
	beq	.L3245
	ldr	r0, [r6, #612]
	cmp	r0, #0
	beq	.L3244
	ldr	ip, [r8, #68]
	ldr	r0, [r6, #616]
	cmp	ip, r0
	bcs	.L3245
.L3244:
	ldr	r0, [r6, #620]
	add	r0, r0, #8
	bl	__alloc_skb
	mov	fp, r0
	mov	r0, r4
	cmp	fp, #0
	beq	.L3245
	ldr	r1, [fp, #160]
	ldr	r2, [fp, #172]
	add	r1, r1, #8
	add	r2, r2, #8
	str	r1, [fp, #160]
	str	r2, [fp, #172]
	bl	list_del
	ldr	r2, [fp, #172]
	mov	r1, r5
	mov	r0, r9
	str	r2, [r4, #-36]
	ldr	r2, [r6, #620]
	str	r2, [r4, #-32]
	str	fp, [r4, #-4]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r10, #8]
	mov	r2, #32
	mov	r0, r10
	ldr	r1, [sp]
	ldr	r5, [ip, #16]
	blx	r5
	mov	r7, r0
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	cmp	r7, #0
	mov	r5, r0
	bne	.L3263
	ldr	r3, [r8, #12]
	cmp	r3, #0
	bne	.L3243
.L3245:
	mov	r1, r5
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3263:
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r0, .L3265
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L3264
.L3247:
	ldr	r3, [r8, #12]
	cmp	r3, #0
	beq	.L3248
	mov	r0, r4
	ldr	r1, [sp, #4]
	ldr	r2, [r8, #52]
	bl	__list_add
	b	.L3245
.L3248:
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r1, [sp]
	ldr	r3, [r3, #12]
	blx	r3
	b	.L3245
.L3264:
	movw	r0, #:lower16:.LC289
	ldr	r1, .L3265
	mov	r2, r7
	movt	r0, #:upper16:.LC289
	bl	printk
	b	.L3247
.L3266:
	.align	2
.L3265:
	.word	.LANCHOR3+2388
	.fnend
	.size	gbam_start_rx, .-gbam_start_rx
	.section	.rodata.str1.4
	.align	2
.LC290:
	.ascii	"<3>%s: %s response error %d, %d/%d\012\000"
	.align	2
.LC291:
	.ascii	"<3>%s: data rx enqueue err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_epout_complete, %function
gbam_epout_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r0]
	ldr	r7, [r1, #44]
	ldr	r8, [r1, #32]
	cmn	r7, #104
	beq	.L3268
	cmp	r7, #0
	beq	.L3269
	cmn	r7, #108
	beq	.L3268
	ldr	r0, .L3300
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L3296
.L3272:
	mov	r0, r8
	add	r9, r6, #4
	bl	dev_kfree_skb_any
	mov	r0, r9
	bl	_raw_spin_lock
.L3271:
	movw	r8, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR0
	ldr	r3, [r8, #612]
	cmp	r3, #0
	beq	.L3273
	ldr	r2, [r6, #68]
	ldr	r3, [r8, #616]
	cmp	r2, r3
	bcs	.L3297
.L3273:
	mov	r0, r9
	bl	_raw_spin_unlock
	ldr	r0, [r8, #620]
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	add	r0, r0, #8
	bl	__alloc_skb
	subs	r7, r0, #0
	beq	.L3277
	ldr	ip, [r7, #160]
	mov	r0, r5
	mov	r2, #32
	ldr	r3, [r7, #172]
	mov	r1, r4
	add	ip, ip, #8
	add	r3, r3, #8
	str	ip, [r7, #160]
	str	r3, [r7, #172]
	str	r3, [r4]
	ldr	r3, [r8, #620]
	str	r3, [r4, #4]
	str	r7, [r4, #32]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bne	.L3298
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L3269:
	mov	r0, r8
	add	r9, r6, #4
	ldr	r1, [r1, #48]
	bl	skb_put
	mov	r0, r9
	bl	_raw_spin_lock
	ldr	r2, [r6, #64]
	add	r1, r6, #60
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3460]
	stm	r8, {r1, r2}
	add	r1, r6, #80
	str	r8, [r2]
	ldr	r3, [r6, #68]
	str	r8, [r6, #64]
	add	r3, r3, #1
	str	r3, [r6, #68]
	bl	queue_work
	b	.L3271
.L3268:
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r1, r4
	mov	r0, r5
	str	r3, [r4]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L3298:
	mov	r0, r7
	bl	dev_kfree_skb_any
	ldr	r0, .L3300
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L3299
.L3277:
	mov	r0, r9
	bl	_raw_spin_lock
.L3295:
	ldr	r1, [r6, #56]
	add	r0, r4, #36
	add	r2, r6, #52
	bl	__list_add
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock
.L3297:
	ldr	r3, [r6, #276]
	cmp	r3, #0
	bne	.L3295
	ldr	r3, [r6, #272]
	mov	r2, #1
	str	r2, [r6, #276]
	add	r3, r3, r2
	str	r3, [r6, #272]
	b	.L3295
.L3299:
	movw	r0, #:lower16:.LC291
	ldr	r1, .L3300
	mov	r2, r5
	movt	r0, #:upper16:.LC291
	bl	printk
	b	.L3277
.L3296:
	ldr	r2, [r4, #4]
	movw	r0, #:lower16:.LC290
	mov	r3, r7
	ldr	ip, [r4, #48]
	movt	r0, #:upper16:.LC290
	ldr	r1, .L3300
	str	r2, [sp, #4]
	ldr	r2, [r5, #4]
	str	ip, [sp]
	bl	printk
	b	.L3272
.L3301:
	.align	2
.L3300:
	.word	.LANCHOR3+2404
	.fnend
	.size	gbam_epout_complete, .-gbam_epout_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_ioctl, %function
usb_rmnet_mux_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #65024
	movt	r3, 32772
	cmp	r1, r3
	mov	r1, r0
	mov	r0, r2
	bne	.L3304
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r0, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3306
	mov	r0, #4
	bx	lr
.L3306:
	ldr	r1, [r1, #124]
	mov	r2, #4
	add	r1, r1, #348
	b	__copy_to_user
.L3304:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_rmnet_mux_ctrl_ioctl, .-usb_rmnet_mux_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_ioctl, %function
acc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #19718
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, 16640
	str	r6, [sp, #8]
	cmp	r1, r3
	str	lr, [sp, #12]
	ldr	r5, [r0, #124]
	bhi	.L3322
	mov	r3, #19712
	movt	r3, 16640
	cmp	r1, r3
	bls	.L3327
	movw	r3, #45822
	mov	r6, r2
	movt	r3, 48895
	add	r3, r1, r3
	cmp	r3, #4
	ldrls	pc, [pc, r3, asl #2]
	b	.L3312
.L3314:
	.word	.L3318
	.word	.L3317
	.word	.L3316
	.word	.L3315
	.word	.L3313
.L3327:
	movw	r3, #19719
	cmp	r1, r3
	beq	.L3310
	movw	r3, #19720
	cmp	r1, r3
	ldreq	r4, [r5, #1648]
	bne	.L3322
.L3307:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3315:
	add	r5, r5, #1120
	add	r5, r5, #5
.L3319:
	cmp	r5, #0
	beq	.L3322
	mov	r0, r5
	bl	strlen
	mov	r3, sp
	add	r4, r0, #1
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3328
.L3320:
	mvn	r4, #13
	b	.L3307
.L3313:
	add	r5, r5, #1376
	add	r5, r5, #5
	b	.L3319
.L3317:
	add	r5, r5, #612
	add	r5, r5, #1
	b	.L3319
.L3316:
	add	r5, r5, #868
	add	r5, r5, #1
	b	.L3319
.L3318:
	add	r5, r5, #356
	add	r5, r5, #1
	b	.L3319
.L3328:
	mov	r1, r5
	mov	r0, r6
	mov	r2, r4
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L3307
	b	.L3320
.L3310:
	ldr	r4, [r5, #1644]
	b	.L3307
.L3322:
	mvn	r4, #21
	b	.L3307
.L3312:
	add	r5, r5, #101
	b	.L3319
	.fnend
	.size	acc_ioctl, .-acc_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_ioctl, %function
ffs_epfile_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #124]
	ldr	r0, [r5, #36]
	ldr	r3, [r0, #92]
	cmp	r3, #2
	bne	.L3349
	add	r0, r0, #24
	mov	r4, r1
	mov	r6, r2
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #40]
	cmp	r3, #0
	mvneq	r4, #18
	beq	.L3336
	movw	r2, #26371
	cmp	r4, r2
	beq	.L3332
	bls	.L3350
	movw	r2, #26497
	cmp	r4, r2
	beq	.L3337
	movw	r1, #26498
	movt	r1, 32777
	cmp	r4, r1
	bne	.L3348
	ldr	r0, [r5, #36]
	ldr	r2, [r0]
	ldr	r2, [r2, #16]
	cmp	r2, #3
	moveq	r2, #1
	beq	.L3339
	cmp	r2, #5
	movne	r2, #0
	moveq	r2, #2
.L3339:
	add	r2, r2, #2
	add	r0, r0, #24
	ldr	r4, [r3, r2, lsl #2]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3351
.L3340:
	mvn	r4, #13
	b	.L3329
.L3350:
	movw	r2, #26369
	cmp	r4, r2
	beq	.L3334
	movw	r2, #26370
	cmp	r4, r2
	bne	.L3348
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	moveq	r4, r3
	beq	.L3336
	mov	r4, #0
	blx	r3
.L3336:
	ldr	r0, [r5, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
.L3329:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3334:
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	beq	.L3342
	blx	r3
	mov	r4, r0
	b	.L3336
.L3337:
	ldrb	r4, [r3, #20]	@ zero_extendqisi2
	b	.L3336
.L3332:
	ldr	r0, [r3]
	mov	r1, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	mov	r4, r0
	b	.L3336
.L3349:
	movw	r0, #:lower16:.LC31
	movw	r1, #978
	movt	r0, #:upper16:.LC31
	mvn	r4, #18
	bl	warn_slowpath_null
	b	.L3329
.L3351:
	mov	r1, r4
	mov	r0, r6
	mov	r2, #9
	bl	__copy_to_user
	subs	r4, r0, #0
	beq	.L3329
	b	.L3340
.L3342:
	mvn	r4, #94
	b	.L3336
.L3348:
	mvn	r4, #24
	b	.L3336
	.fnend
	.size	ffs_epfile_ioctl, .-ffs_epfile_ioctl
	.section	.rodata.str1.4
	.align	2
.LC292:
	.ascii	"%s: Received command %d\000"
	.align	2
.LC293:
	.ascii	"<3>copying to user space failed\000"
	.align	2
.LC294:
	.ascii	"%s: Sent line_state: %d\000"
	.align	2
.LC295:
	.ascii	"<3>wrong parameter\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_ioctl, %function
rmnet_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #3090
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR2
	mov	r6, r2
	movt	r7, #:upper16:.LANCHOR2
	str	r8, [sp, #16]
	mov	r8, r1
	ldrh	ip, [r7, r3]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r0, #124]
	tst	ip, #4
	bne	.L3370
.L3353:
	add	r5, r4, #28
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3354
	movw	r3, #29186
	movt	r3, 32772
	cmp	r8, r3
	bne	.L3371
	ldr	r2, [r4, #12]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #4]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3358
.L3360:
	movw	r0, #:lower16:.LC293
	mvn	r6, #13
	movt	r0, #:upper16:.LC293
	bl	printk
.L3359:
	movw	r3, #3114
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L3372
.L3361:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L3352:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3358:
	mov	r2, #4
	mov	r0, r6
	add	r1, sp, r2
	bl	__copy_to_user
	subs	r6, r0, #0
	beq	.L3359
	b	.L3360
.L3370:
	movw	r1, #:lower16:.LC292
	ldr	r2, .L3373
	mov	r3, r8
	movt	r1, #:upper16:.LC292
	add	r0, r7, #3072
	bl	__dynamic_pr_debug
	b	.L3353
.L3372:
	movw	r1, #:lower16:.LC294
	ldr	r2, .L3373
	movt	r1, #:upper16:.LC294
	ldr	r0, .L3373+4
	ldr	r3, [r4, #12]
	bl	__dynamic_pr_debug
	b	.L3361
.L3354:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r6, #15
	b	.L3352
.L3371:
	movw	r0, #:lower16:.LC295
	mvn	r6, #21
	movt	r0, #:upper16:.LC295
	bl	printk
	b	.L3361
.L3374:
	.align	2
.L3373:
	.word	.LANCHOR3+2424
	.word	.LANCHOR2+3096
	.fnend
	.size	rmnet_ctrl_ioctl, .-rmnet_ctrl_ioctl
	.section	.rodata.str1.4
	.align	2
.LC296:
	.ascii	"<6>%s: Received command %d\012\000"
	.align	2
.LC297:
	.ascii	"<3>%s: copying to user space failed\000"
	.align	2
.LC298:
	.ascii	"<6>%s: Sent max packets per xfer %d\000"
	.align	2
.LC299:
	.ascii	"%s: Sent max packet size %d\000"
	.align	2
.LC300:
	.ascii	"<3>%s: Unsupported IOCTL\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_ioctl, %function
rndis_qc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, #0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r0, .L3399
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	mov	r5, r2
	str	r8, [sp, #16]
	movt	r6, #:upper16:.LANCHOR1
	mov	r7, r1
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	strb	r3, [sp, #3]
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #2496]
	mov	r4, r0
	cmp	r3, #0
	beq	.L3395
	ldrb	r0, [r3, #132]	@ zero_extendqisi2
	add	r2, r3, #148
	ldr	r1, [r3, #136]
	strb	r0, [sp, #3]
	str	r1, [sp, #4]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r8, [r2]
	add	r8, r8, #1
	strex	r1, r8, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r8, #1
	bne	.L3378
	ldr	r0, .L3399
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC296
	ldr	r1, .L3399+4
	mov	r2, r7
	movt	r0, #:upper16:.LC296
	bl	printk
	movw	r3, #26881
	movt	r3, 32769
	cmp	r7, r3
	beq	.L3379
	movw	r3, #26882
	movt	r3, 32772
	cmp	r7, r3
	bne	.L3396
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3386
.L3388:
	movw	r0, #:lower16:.LC297
	ldr	r1, .L3399+4
	mvn	r5, #13
	movt	r0, #:upper16:.LC297
	bl	printk
.L3387:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #3138
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L3397
.L3385:
	ldr	r0, .L3399
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #2496]
	mov	r4, r0
	cmp	r3, #0
	beq	.L3395
	add	r2, r3, #148
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L3377:
	ldr	r0, .L3399
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3386:
	mov	r2, #4
	mov	r0, r5
	add	r1, sp, r2
	bl	__copy_to_user
	subs	r5, r0, #0
	beq	.L3387
	b	.L3388
.L3397:
	movw	r1, #:lower16:.LC299
	ldr	r2, .L3399+4
	add	r0, r0, #3120
	movt	r1, #:upper16:.LC299
	ldr	r3, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L3385
.L3378:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r5, #15
	b	.L3377
.L3379:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #1; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3384
	mov	r2, r8
	mov	r0, r5
	add	r1, sp, #3
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L3398
.L3384:
	movw	r0, #:lower16:.LC297
	ldr	r1, .L3399+4
	mvn	r5, #13
	movt	r0, #:upper16:.LC297
	bl	printk
.L3383:
	movw	r0, #:lower16:.LC298
	ldrb	r2, [sp, #3]	@ zero_extendqisi2
	ldr	r1, .L3399+4
	movt	r0, #:upper16:.LC298
	bl	printk
	b	.L3385
.L3395:
	movw	r0, #:lower16:.LC60
	ldr	r1, .L3399+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC60
	bl	printk
	b	.L3377
.L3396:
	movw	r0, #:lower16:.LC300
	ldr	r1, .L3399+4
	mvn	r5, #21
	movt	r0, #:upper16:.LC300
	bl	printk
	b	.L3385
.L3398:
	mov	r5, r0
	b	.L3383
.L3400:
	.align	2
.L3399:
	.word	.LANCHOR1+2492
	.word	.LANCHOR3+2444
	.fnend
	.size	rndis_qc_ioctl, .-rndis_qc_ioctl
	.section	.rodata.str1.4
	.align	2
.LC301:
	.ascii	"<6>%s: Sent NTB size %d\000"
	.align	2
.LC302:
	.ascii	"<6>%s: Sent NTB datagrams count %d\000"
	.align	2
.LC303:
	.ascii	"<3>%s: wrong parameter\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_ioctl, %function
mbim_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	ip, #3162
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r1
	str	r8, [sp, #16]
	mov	r6, r2
	str	lr, [sp, #20]
	ldrh	ip, [r3, ip]
	ldr	r4, [r0, #124]
	tst	ip, #4
	bne	.L3420
.L3402:
	add	r7, r4, #96
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3403
	movw	r3, #28419
	movt	r3, 32770
	cmp	r5, r3
	bne	.L3421
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #2; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3414
	mov	r0, r6
	mov	r2, #2
	add	r1, r4, #228
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L3422
.L3414:
	movw	r0, #:lower16:.LC297
	ldr	r1, .L3425
	mvn	r5, #13
	movt	r0, #:upper16:.LC297
	bl	printk
.L3413:
	movw	r0, #:lower16:.LC302
	ldrh	r2, [r4, #228]
	ldr	r1, .L3425
	movt	r0, #:upper16:.LC302
	bl	printk
	b	.L3411
.L3421:
	movw	r3, #28418
	movt	r3, 32772
	cmp	r5, r3
	bne	.L3423
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3410
	mov	r0, r6
	mov	r2, #4
	add	r1, r4, #224
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L3424
.L3410:
	movw	r0, #:lower16:.LC297
	ldr	r1, .L3425
	mvn	r5, #13
	movt	r0, #:upper16:.LC297
	bl	printk
.L3409:
	movw	r0, #:lower16:.LC301
	ldr	r1, .L3425
	movt	r0, #:upper16:.LC301
	ldr	r2, [r4, #224]
	bl	printk
.L3411:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L3401
.L3420:
	movw	r1, #:lower16:.LC292
	ldr	r2, .L3425
	mov	r3, r5
	movt	r1, #:upper16:.LC292
	ldr	r0, .L3425+4
	bl	__dynamic_pr_debug
	b	.L3402
.L3403:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r5, #15
.L3401:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3423:
	movw	r0, #:lower16:.LC303
	ldr	r1, .L3425
	mvn	r5, #21
	movt	r0, #:upper16:.LC303
	bl	printk
	b	.L3411
.L3424:
	mov	r5, r0
	b	.L3409
.L3422:
	mov	r5, r0
	b	.L3413
.L3426:
	.align	2
.L3425:
	.word	.LANCHOR3+2460
	.word	.LANCHOR2+3144
	.fnend
	.size	mbim_ioctl, .-mbim_ioctl
	.section	.rodata.str1.4
	.align	2
.LC304:
	.ascii	"%s: USB cable not connected\012\000"
	.align	2
.LC305:
	.ascii	"<3>%s: cpkt size:%d > buf size:%d\012\000"
	.text
	.align	2
	.global	usb_rmnet_mux_ctrl_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_read, %function
usb_rmnet_mux_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r4, #368]
	cmp	r3, #0
	beq	.L3431
	mov	r3, sp
	mov	r9, r1
	bic	r8, r3, #8128
	mov	r10, r2
	add	r7, r4, #312
	bic	r8, r8, #63
	add	r6, r4, #364
	b	.L3432
.L3434:
	ldr	r3, [r4, #368]
	cmp	r3, #0
	beq	.L3431
.L3432:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #312]
	mov	r1, r0
	cmp	r5, r7
	bne	.L3433
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #312]
	cmp	r3, r7
	bne	.L3434
	ldr	r3, [r4, #368]
	cmp	r3, #0
	beq	.L3434
	ldr	r0, [r8, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	fp, r4, #320
	str	r3, [sp, #12]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L3437
.L3453:
	bl	schedule
.L3437:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #312]
	cmp	r5, r3
	bne	.L3435
	ldr	r3, [r4, #368]
	cmp	r3, #0
	beq	.L3435
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3453
	mov	r6, #65024
	add	r1, sp, #12
	mov	r0, fp
	movt	r6, 65535
	bl	finish_wait
	b	.L3427
.L3435:
	add	r1, sp, #12
	mov	r0, fp
	bl	finish_wait
	ldr	r3, [r4, #368]
	cmp	r3, #0
	bne	.L3432
.L3431:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #3186
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L3429
	mvn	r6, #18
.L3427:
	mov	r0, r6
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3433:
	ldr	r3, [r5, #-4]
	sub	r7, r5, #8
	cmp	r3, r10
	bhi	.L3454
	mov	r0, r5
	str	r1, [sp, #4]
	bl	list_del
	ldr	r3, [r4, #332]
	mov	r0, r6
	ldr	r1, [sp, #4]
	sub	r3, r3, #1
	str	r3, [r4, #332]
	bl	_raw_spin_unlock_irqrestore
	mov	r3, sp
	ldr	r6, [r5, #-4]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r6; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r6
	beq	.L3455
.L3439:
	ldr	r3, [r4, #416]
	cmp	r0, #0
	movne	r6, r0
	add	r3, r3, #1
	str	r3, [r4, #416]
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
	b	.L3427
.L3455:
	mov	r0, r9
	mov	r2, r6
	ldr	r1, [r5, #-8]
	bl	__copy_to_user
	b	.L3439
.L3429:
	movw	r1, #:lower16:.LC304
	ldr	r2, .L3456
	add	r0, r0, #3168
	movt	r1, #:upper16:.LC304
	mvn	r6, #18
	bl	__dynamic_pr_debug
	b	.L3427
.L3454:
	mov	r0, r6
	mvn	r6, #11
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC305
	ldr	r1, .L3456
	mov	r3, r10
	movt	r0, #:upper16:.LC305
	ldr	r2, [r5, #-4]
	bl	printk
	b	.L3427
.L3457:
	.align	2
.L3456:
	.word	.LANCHOR3+2472
	.fnend
	.size	usb_rmnet_mux_ctrl_read, .-usb_rmnet_mux_ctrl_read
	.section	.rodata.str1.4
	.align	2
.LC306:
	.ascii	"%s: Enter(%d)\012\000"
	.align	2
.LC307:
	.ascii	"<3>Buffer size is too big %d, should be at most %d\012"
	.ascii	"\000"
	.align	2
.LC308:
	.ascii	"<3>Previous reading is not finished yet\012\000"
	.align	2
.LC309:
	.ascii	"%s: Requests list is empty. Wait.\012\000"
	.align	2
.LC310:
	.ascii	"Waiting failed\012\000"
	.align	2
.LC311:
	.ascii	"<3>cpkt size too big:%d > buf size:%d\012\000"
	.align	2
.LC312:
	.ascii	"%s: cpkt size:%d\012\000"
	.align	2
.LC313:
	.ascii	"<3>copy_to_user failed: err %d\012\000"
	.align	2
.LC314:
	.ascii	"%s: copied %d bytes to user\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_read, %function
rmnet_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	ip, r3
	movw	r3, #3210
	strd	r6, [sp, #8]
	movt	ip, #:upper16:.LANCHOR2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [ip, r3]
	.pad #52
	sub	sp, sp, #52
	ldr	r4, [r0, #124]
	stmib	sp, {r2, ip}
	str	r1, [sp, #12]
	tst	r3, #4
	bne	.L3490
.L3459:
	ldr	r3, [sp, #4]
	cmp	r3, #2048
	bhi	.L3491
	add	r3, r4, #20
	str	r3, [sp, #16]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3462
	mov	r3, sp
	ldr	r8, .L3499
	add	r7, r4, #44
	bic	r9, r3, #8128
	add	r6, r4, #52
	bic	r9, r9, #63
.L3463:
	movw	r10, #:lower16:.LC309
	movt	r10, #:upper16:.LC309
	b	.L3468
.L3465:
	ldr	fp, [r4, #44]
	cmp	r7, fp
	beq	.L3466
.L3468:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #44]
	mov	r1, r0
	mov	r0, r6
	cmp	r7, r5
	bne	.L3464
	bl	_raw_spin_unlock_irqrestore
	ldrh	r3, [r8]
	tst	r3, #4
	beq	.L3465
	ldr	r2, .L3499+4
	mov	r1, r10
	ldr	r0, .L3499+8
	bl	__dynamic_pr_debug
	ldr	fp, [r4, #44]
	cmp	fp, r7
	bne	.L3468
.L3466:
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #40
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r5, r4, #32
	str	r3, [sp, #28]
	str	r0, [sp, #32]
	str	r2, [sp, #36]
	str	r1, [sp, #40]
	str	r1, [sp, #44]
	b	.L3471
.L3492:
	bl	schedule
.L3471:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r3, [r4, #44]
	cmp	r3, fp
	bne	.L3469
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3492
	add	r1, sp, #28
	mov	r0, r5
	bl	finish_wait
	ldr	r2, [sp, #8]
	movw	r3, #3258
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L3493
.L3479:
	ldr	r1, [sp, #16]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L3458
.L3464:
	mov	r0, r5
	str	r1, [sp, #20]
	sub	r7, r5, #8
	bl	list_del
	mov	r0, r6
	ldr	r1, [sp, #20]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #-4]
	ldr	r2, [sp, #4]
	cmp	r3, r2
	bhi	.L3494
	ldr	r1, [sp, #8]
	movw	r2, #3282
	ldrh	r2, [r1, r2]
	tst	r2, #4
	bne	.L3495
.L3473:
	ldr	r1, [sp, #16]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	ldr	r2, [r5, #-4]
	bic	r3, r3, #8128
	ldr	r0, [sp, #12]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3496
.L3474:
	cmp	r2, #0
	bne	.L3497
	ldr	r2, [sp, #8]
	movw	r3, #3306
	ldr	r4, [r5, #-4]
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L3498
.L3476:
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
.L3458:
	mov	r0, r4
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3469:
	add	r1, sp, #28
	mov	r0, r5
	bl	finish_wait
	b	.L3463
.L3496:
	ldr	r1, [r5, #-8]
	bl	__copy_to_user
	mov	r2, r0
	b	.L3474
.L3490:
	movw	r1, #:lower16:.LC306
	mov	r3, r2
	ldr	r0, .L3499+12
	ldr	r2, .L3499+4
	movt	r1, #:upper16:.LC306
	bl	__dynamic_pr_debug
	b	.L3459
.L3495:
	movw	r1, #:lower16:.LC312
	ldr	r2, .L3499+4
	movt	r1, #:upper16:.LC312
	ldr	r0, .L3499+16
	bl	__dynamic_pr_debug
	b	.L3473
.L3498:
	movw	r1, #:lower16:.LC314
	mov	r3, r4
	ldr	r2, .L3499+4
	ldr	r0, .L3499+20
	movt	r1, #:upper16:.LC314
	bl	__dynamic_pr_debug
	ldr	r4, [r5, #-4]
	b	.L3476
.L3462:
	ldr	r1, [sp, #16]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC308
	mvn	r4, #15
	movt	r0, #:upper16:.LC308
	bl	printk
	b	.L3458
.L3493:
	movw	r1, #:lower16:.LC310
	ldr	r0, .L3499+24
	movt	r1, #:upper16:.LC310
	bl	__dynamic_pr_debug
	b	.L3479
.L3497:
	movw	r0, #:lower16:.LC313
	mov	r1, r2
	movt	r0, #:upper16:.LC313
	mvn	r4, #13
	bl	printk
	b	.L3476
.L3491:
	movw	r0, #:lower16:.LC307
	mov	r1, r3
	movt	r0, #:upper16:.LC307
	mov	r2, #2048
	mvn	r4, #21
	bl	printk
	b	.L3458
.L3494:
	movw	r0, #:lower16:.LC311
	mov	r1, r3
	movt	r0, #:upper16:.LC311
	bl	printk
	ldr	r1, [sp, #16]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r5, #-8]
	mvn	r4, #11
	bl	kfree
	mov	r0, r7
	bl	kfree
	b	.L3458
.L3500:
	.align	2
.L3499:
	.word	.LANCHOR2+3234
	.word	.LANCHOR3+2496
	.word	.LANCHOR2+3216
	.word	.LANCHOR2+3192
	.word	.LANCHOR2+3264
	.word	.LANCHOR2+3288
	.word	.LANCHOR2+3240
	.fnend
	.size	rmnet_ctrl_read, .-rmnet_ctrl_read
	.section	.rodata.str1.4
	.align	2
.LC315:
	.ascii	"acc_read(%d)\012\000"
	.align	2
.LC316:
	.ascii	"acc_read disconnected\000"
	.align	2
.LC317:
	.ascii	"acc_read: waiting for online\012\000"
	.align	2
.LC318:
	.ascii	"rx %pK queue\012\000"
	.align	2
.LC319:
	.ascii	"acc_read: cancelling failed %d\000"
	.align	2
.LC320:
	.ascii	"rx %pK %d\012\000"
	.align	2
.LC321:
	.ascii	"acc_read returning %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_read, %function
acc_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3330
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR2
	mov	r6, r2
	movt	r7, #:upper16:.LANCHOR2
	strd	r8, [sp, #16]
	mov	r9, r1
	ldrh	r3, [r7, r3]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	tst	r3, #4
	bne	.L3546
.L3502:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L3547
	movw	r2, #3378
	cmp	r6, #16384
	ldrh	r2, [r7, r2]
	movcs	r6, #16384
	tst	r2, #4
	bne	.L3548
.L3505:
	ands	r3, r3, #1
	bne	.L3506
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r8, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r8, r8, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r8, #12]
	add	r5, sp, #4
	add	r10, r4, #1664
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3509
.L3549:
	bl	schedule
.L3509:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r10
	bl	prepare_to_wait
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L3507
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3549
	mov	r1, r5
	mov	r0, r10
	mov	r6, #65024
	movt	r6, 65535
	bl	finish_wait
	b	.L3513
.L3507:
	mov	r1, r5
	mov	r0, r10
	bl	finish_wait
.L3506:
	ldr	r10, [r4, #1688]
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L3510
.L3511:
	str	r6, [r10, #4]
	ldr	r0, [r4, #96]
	mov	r3, #0
	mov	r2, #208
	mov	r1, r10
	str	r3, [r4, #1696]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3518
	movw	r3, #3402
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L3550
.L3514:
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L3510
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r8, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r8, r8, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r8, #12]
	add	r5, sp, #4
	add	fp, r4, #1664
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3517
.L3551:
	bl	schedule
.L3517:
	mov	r2, #1
	mov	r1, r5
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L3515
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3551
	mov	r1, r5
	mov	r0, fp
	bl	finish_wait
	ldr	r0, [r4, #96]
	mov	r1, r10
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	beq	.L3524
	movw	r3, #3426
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L3524
	movw	r1, #:lower16:.LC319
	ldr	r0, .L3556
	mov	r6, #65024
	movt	r1, #:upper16:.LC319
	movt	r6, 65535
	bl	__dynamic_pr_debug
	b	.L3513
.L3515:
	mov	r1, r5
	mov	r0, fp
	bl	finish_wait
.L3510:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	mov	r2, #0
	str	r2, [r4, #1696]
	tst	r3, #1
	beq	.L3518
	ldr	r3, [r10, #48]
	cmp	r3, r2
	beq	.L3552
	movw	r2, #3450
	ldrh	r2, [r7, r2]
	tst	r2, #4
	bne	.L3553
.L3520:
	mov	r2, sp
	cmp	r6, r3
	bic	r2, r2, #8128
	movcs	r6, r3
	bic	r2, r2, #63
	ldr	r3, [r2, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r6; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r6
	beq	.L3554
.L3521:
	cmp	r0, #0
	mvnne	r6, #13
	b	.L3513
.L3518:
	mvn	r6, #4
.L3513:
	movw	r3, #3474
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L3555
.L3501:
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3524:
	mov	r6, #65024
	movt	r6, 65535
	b	.L3513
.L3546:
	movw	r1, #:lower16:.LC315
	add	r0, r7, #3312
	movt	r1, #:upper16:.LC315
	bl	__dynamic_pr_debug
	b	.L3502
.L3548:
	movw	r1, #:lower16:.LC317
	ldr	r0, .L3556+4
	movt	r1, #:upper16:.LC317
	bl	__dynamic_pr_debug
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	b	.L3505
.L3555:
	movw	r1, #:lower16:.LC321
	mov	r2, r6
	ldr	r0, .L3556+8
	movt	r1, #:upper16:.LC321
	bl	__dynamic_pr_debug
	b	.L3501
.L3552:
	ldr	r10, [r4, #1688]
	b	.L3511
.L3550:
	movw	r1, #:lower16:.LC318
	mov	r2, r10
	ldr	r0, .L3556+12
	movt	r1, #:upper16:.LC318
	bl	__dynamic_pr_debug
	b	.L3514
.L3554:
	mov	r0, r9
	mov	r2, r6
	ldr	r1, [r10]
	bl	__copy_to_user
	b	.L3521
.L3547:
	movw	r3, #3354
	ldrh	r3, [r7, r3]
	tst	r3, #4
	mvneq	r6, #18
	beq	.L3501
	movw	r1, #:lower16:.LC316
	ldr	r0, .L3556+16
	mvn	r6, #18
	movt	r1, #:upper16:.LC316
	bl	__dynamic_pr_debug
	b	.L3501
.L3553:
	movw	r1, #:lower16:.LC320
	ldr	r0, .L3556+20
	mov	r2, r10
	movt	r1, #:upper16:.LC320
	bl	__dynamic_pr_debug
	ldr	r3, [r10, #48]
	b	.L3520
.L3557:
	.align	2
.L3556:
	.word	.LANCHOR2+3408
	.word	.LANCHOR2+3360
	.word	.LANCHOR2+3456
	.word	.LANCHOR2+3384
	.word	.LANCHOR2+3336
	.word	.LANCHOR2+3432
	.fnend
	.size	acc_read, .-acc_read
	.section	.rodata.str1.4
	.align	2
.LC322:
	.ascii	"mtp_read(%d)\012\000"
	.align	2
.LC323:
	.ascii	"mtp_read: waiting for online state\012\000"
	.align	2
.LC324:
	.ascii	"mtp_read returning %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_read, %function
mtp_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3498
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR2
	movt	r7, #:upper16:.LANCHOR2
	strd	r8, [sp, #16]
	ldrh	r3, [r7, r3]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	str	r1, [sp, #20]
	tst	r3, #4
	ldr	r3, [r4, #84]
	strd	r2, [sp, #12]
	bne	.L3622
.L3559:
	ldr	r2, [sp, #12]
	movw	r3, #:lower16:.LANCHOR0
	ldr	r1, [r4, #96]
	movt	r3, #:upper16:.LANCHOR0
	sub	r5, r2, #1
	ldr	r2, [r3, #624]
	ldrh	r3, [r1, #20]
	add	r5, r5, r3
	rsb	r3, r3, #0
	and	r5, r5, r3
	cmp	r5, r2
	bhi	.L3584
	movw	r3, #3522
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L3623
.L3561:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3562
	mov	r2, sp
	str	r3, [sp, #28]
	add	r1, sp, #40
	bic	r8, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r8, r8, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r8, #12]
	add	r6, sp, #28
	add	r9, r4, #132
	str	r0, [sp, #32]
	str	r2, [sp, #36]
	str	r1, [sp, #40]
	str	r1, [sp, #44]
	b	.L3565
.L3624:
	bl	schedule
.L3565:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3563
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3624
	mov	r0, r9
	mov	r1, r6
	mov	r5, #65024
	add	r9, r4, #88
	movt	r5, 65535
	bl	finish_wait
	b	.L3568
.L3563:
	mov	r1, r6
	mov	r0, r9
	bl	finish_wait
.L3562:
	add	r9, r4, #88
	mov	r0, r9
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L3625
	mov	r3, #2
	mov	r0, r9
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r8, r3, #8128
	bic	r8, r8, #63
	b	.L3567
.L3628:
	cmp	r2, #3
	beq	.L3572
.L3571:
	cmp	r2, #2
	bne	.L3587
	ldr	r0, [fp, #48]
	cmp	r0, #0
	bne	.L3626
.L3567:
	ldr	fp, [r4, #168]
	mov	r3, #0
	mov	r2, #208
	str	r5, [fp, #4]
	ldr	r0, [r4, #96]
	mov	r1, fp
	str	r3, [r4, #176]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3587
	ldr	r0, .L3634
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L3627
.L3569:
	ldr	r2, [r4, #104]
	ldr	r3, [r4, #176]
	cmp	r3, #0
	bne	.L3628
	cmp	r2, #2
	beq	.L3573
	cmp	r2, #3
	beq	.L3577
.L3587:
	mvn	r5, #4
.L3568:
	mov	r0, r9
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	mvneq	r5, #124
	beq	.L3581
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #104]
.L3581:
	mov	r0, r9
	bl	_raw_spin_unlock_irq
	movw	r3, #3594
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L3629
.L3558:
	mov	r0, r5
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3627:
	ldr	r3, [sp, #16]
	movw	r2, #:lower16:.LC318
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC318
	ldr	r1, [r3]
	mov	r3, fp
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L3569
.L3573:
	ldr	r0, [r8, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #40
	movt	r2, #:upper16:autoremove_wake_function
	add	r6, sp, #28
	str	r3, [sp, #28]
	add	r10, r4, #132
	str	r0, [sp, #32]
	str	r2, [sp, #36]
	str	r1, [sp, #40]
	str	r1, [sp, #44]
	b	.L3576
.L3630:
	bl	schedule
.L3576:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r10
	bl	prepare_to_wait
	ldr	r3, [r4, #176]
	cmp	r3, #0
	bne	.L3574
	ldr	r3, [r4, #104]
	cmp	r3, #2
	bne	.L3574
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3630
	mov	r1, r6
	mov	r0, r10
	bl	finish_wait
	ldr	r2, [r4, #104]
	cmp	r2, #3
	bne	.L3631
.L3582:
	ldr	r2, [r4, #176]
	cmp	r2, #0
	bne	.L3572
.L3577:
	ldr	r0, [r4, #96]
	mov	r1, fp
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L3572:
	mov	r0, r9
	mvn	r5, #124
	bl	_raw_spin_lock_irq
	mov	r3, #3
	mov	r0, r9
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	b	.L3568
.L3574:
	mov	r1, r6
	mov	r0, r10
	bl	finish_wait
	ldr	r2, [r4, #104]
	cmp	r2, #3
	bne	.L3571
	b	.L3582
.L3631:
	ldr	r0, [r4, #96]
	mov	r1, fp
	mov	r5, #65024
	movt	r5, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L3568
.L3626:
	movw	r2, #3570
	ldrh	r2, [r7, r2]
	tst	r2, #4
	bne	.L3632
.L3579:
	mov	r3, sp
	bic	r2, r3, #8128
	ldr	r3, [sp, #12]
	bic	r2, r2, #63
	ldr	r2, [r2, #8]
	cmp	r3, r0
	movcc	r5, r3
	movcs	r5, r0
	ldr	r3, [sp, #20]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r5; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	movne	r0, r5
	beq	.L3633
.L3580:
	cmp	r0, #0
	mvnne	r5, #13
	b	.L3568
.L3622:
	ldr	r1, [r3]
	movw	r2, #:lower16:.LC322
	movt	r2, #:upper16:.LC322
	ldr	r0, .L3634+4
	ldr	r3, [sp, #12]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L3559
.L3623:
	ldr	r3, [sp, #16]
	movw	r2, #:lower16:.LC323
	movt	r2, #:upper16:.LC323
	ldr	r0, .L3634+8
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L3561
.L3629:
	ldr	r3, [sp, #16]
	movw	r2, #:lower16:.LC324
	movt	r2, #:upper16:.LC324
	ldr	r0, .L3634+12
	ldr	r1, [r3]
	mov	r3, r5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L3558
.L3633:
	mov	r0, r3
	mov	r2, r5
	ldr	r1, [fp]
	bl	__copy_to_user
	b	.L3580
.L3632:
	ldr	r3, [sp, #16]
	movw	r2, #:lower16:.LC320
	movt	r2, #:upper16:.LC320
	ldr	r1, [r3]
	mov	r3, fp
	str	r0, [sp]
	ldr	r0, .L3634+16
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r0, [fp, #48]
	b	.L3579
.L3584:
	mvn	r5, #21
	b	.L3558
.L3625:
	mov	r3, #1
	mov	r0, r9
	mvn	r5, #124
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	b	.L3558
.L3635:
	.align	2
.L3634:
	.word	.LANCHOR2+3546
	.word	.LANCHOR2+3480
	.word	.LANCHOR2+3504
	.word	.LANCHOR2+3576
	.word	.LANCHOR2+3552
	.fnend
	.size	mtp_read, .-mtp_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_read, %function
ccid_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #124]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L3654
	ldr	r3, [r5, #144]
	cmp	r2, #4
	mov	r7, r1
	movcc	r4, r2
	movcs	r4, #4
	cmp	r3, #0
	bne	.L3640
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r6, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r6, r6, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r6, #12]
	add	r8, r5, #128
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3643
.L3655:
	bl	schedule
.L3643:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r3, [r5, #144]
	cmp	r3, #0
	bne	.L3641
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3655
	mov	r0, r8
	add	r1, sp, #4
	bl	finish_wait
	mov	r0, #65024
	movt	r0, 65535
	b	.L3636
.L3641:
	add	r1, sp, #4
	mov	r0, r8
	bl	finish_wait
.L3640:
	ldr	r3, [r5, #96]
	mov	r2, #0
	str	r2, [r5, #144]
	cmp	r3, r2
	beq	.L3656
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r4
	beq	.L3657
.L3646:
	cmp	r0, #0
	moveq	r0, r4
	mvnne	r0, #13
.L3636:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3657:
	add	r1, r5, #140
	mov	r0, r7
	mov	r2, r4
	bl	__copy_to_user
	b	.L3646
.L3654:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #3618
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L3638
.L3653:
	mvn	r0, #18
	b	.L3636
.L3656:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3642
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L3653
	movw	r1, #:lower16:.LC304
	ldr	r2, .L3658
	movt	r1, #:upper16:.LC304
	ldr	r0, .L3658+4
	bl	__dynamic_pr_debug
	b	.L3653
.L3638:
	movw	r1, #:lower16:.LC304
	ldr	r2, .L3658
	add	r0, r0, #3600
	movt	r1, #:upper16:.LC304
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L3636
.L3659:
	.align	2
.L3658:
	.word	.LANCHOR3+2512
	.word	.LANCHOR2+3624
	.fnend
	.size	ccid_ctrl_read, .-ccid_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_read, %function
modem_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #28]
	tst	r3, #2048
	bne	.L3668
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, #57344
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	movt	r5, 65535
	ldr	r3, [r4, #2200]
	str	lr, [sp, #12]
	.pad #24
	sub	sp, sp, #24
	mov	r2, sp
	mov	r6, r1
	and	r2, r2, r5
	cmp	r3, #0
	bne	.L3662
	mov	r5, r2
	str	r3, [sp, #4]
	movw	r1, #:lower16:autoremove_wake_function
	str	r3, [sp, #8]
	movt	r1, #:upper16:autoremove_wake_function
	str	r3, [sp, #12]
	str	r1, [sp, #12]
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	ldr	r2, [r2, #12]
	add	r3, sp, #16
	str	r2, [sp, #8]
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	b	.L3665
.L3673:
	bl	schedule
.L3665:
	ldr	r0, .L3674
	mov	r2, #1
	add	r1, sp, #4
	bl	prepare_to_wait
	ldr	r3, [r4, #2200]
	cmp	r3, #0
	bne	.L3663
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3673
	ldr	r0, .L3674
	add	r1, sp, #4
	bl	finish_wait
	mov	r0, #65024
	movt	r0, 65535
	b	.L3660
.L3663:
	ldr	r0, .L3674
	add	r1, sp, #4
	bl	finish_wait
	mov	r3, sp
	bic	r2, r3, #8128
	bic	r2, r2, #63
.L3662:
	ldr	r3, [r2, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3666
.L3667:
	mvn	r0, #13
.L3660:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3666:
	ldr	r1, .L3674+4
	mov	r0, r6
	mov	r2, #4
	bl	__copy_to_user
	subs	r3, r0, #0
	bne	.L3667
	mov	r0, #4
	str	r3, [r4, #2200]
	b	.L3660
.L3668:
	mvn	r0, #10
	bx	lr
.L3675:
	.align	2
.L3674:
	.word	.LANCHOR1+2204
	.word	.LANCHOR1+3408
	.fnend
	.size	modem_read, .-modem_read
	.section	.rodata.str1.4
	.align	2
.LC325:
	.ascii	"adb_read(%d)\012\000"
	.align	2
.LC326:
	.ascii	"adb_read: waiting for online state\012\000"
	.align	2
.LC327:
	.ascii	"adb_read: failed to queue req %pK (%d)\012\000"
	.align	2
.LC328:
	.ascii	"adb_read returning %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_read, %function
adb_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3666
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	movw	fp, #:lower16:.LANCHOR2
	mov	r10, r2
	movt	fp, #:upper16:.LANCHOR2
	strd	r8, [sp, #16]
	ldrh	r3, [fp, r3]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r4, [r0, #124]
	str	r1, [sp, #4]
	tst	r3, #4
	bne	.L3729
.L3677:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3404]
	cmp	r3, #0
	beq	.L3701
	cmp	r10, #4096
	bhi	.L3702
	add	r9, r4, #108
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r9]
	add	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3679
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L3688
	mov	r3, sp
	bic	r6, r3, #8128
	bic	r6, r6, #63
	b	.L3680
.L3684:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L3688
.L3680:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3688
	ldr	r0, .L3741
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L3730
.L3683:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L3684
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3684
	ldr	r0, [r6, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	add	r5, sp, #12
	str	r3, [sp, #12]
	add	r7, r4, #128
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L3687
.L3731:
	bl	schedule
.L3687:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L3685
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3685
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3731
	mov	r1, r5
	mov	r0, r7
	bl	finish_wait
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r10, #65024
	movt	r10, 65535
	b	.L3676
.L3730:
	movw	r1, #:lower16:.LC326
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC326
	bl	__dynamic_pr_debug
	b	.L3683
.L3688:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3681
	mov	r3, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
	b	.L3682
.L3694:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3681
	ldr	r3, [r6, #48]
	cmp	r3, #0
	bne	.L3732
.L3682:
	ldr	r6, [r4, #152]
	mov	r1, #4096
	mov	r3, #0
	mov	r2, #32
	str	r1, [r6, #4]
	ldr	r0, [r4, #96]
	mov	r1, r6
	str	r3, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3733
	ldr	r0, .L3741+4
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L3734
.L3693:
	ldr	r3, [r4, #156]
	cmp	r3, #0
	bne	.L3694
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3694
	ldr	r0, [r7, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	add	r5, sp, #12
	str	r3, [sp, #12]
	add	r8, r4, #128
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L3697
.L3735:
	bl	schedule
.L3697:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r3, [r4, #156]
	cmp	r3, #0
	bne	.L3695
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3695
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3735
	mov	r1, r5
	mov	r0, r8
	bl	finish_wait
	ldr	r0, [r4, #96]
	mov	r1, r6
	mov	r10, #65024
	movt	r10, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L3690
.L3734:
	movw	r1, #:lower16:.LC318
	mov	r2, r6
	movt	r1, #:upper16:.LC318
	sub	r0, r0, #18
	bl	__dynamic_pr_debug
	b	.L3693
.L3685:
	mov	r1, r5
	mov	r0, r7
	bl	finish_wait
	b	.L3684
.L3681:
	mvn	r10, #4
.L3690:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3736
.L3700:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #3786
	ldrh	r3, [fp, r3]
	tst	r3, #4
	bne	.L3737
.L3676:
	mov	r0, r10
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3695:
	mov	r1, r5
	mov	r0, r8
	bl	finish_wait
	b	.L3694
.L3736:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #140
	bl	__wake_up
	b	.L3700
.L3733:
	movw	r3, #3714
	ldrh	r3, [fp, r3]
	tst	r3, #4
	bne	.L3738
.L3692:
	mov	r3, #1
	mvn	r10, #4
	str	r3, [r4, #104]
	b	.L3690
.L3732:
	movw	r2, #3762
	ldrh	r2, [fp, r2]
	tst	r2, #4
	bne	.L3739
.L3698:
	mov	r2, sp
	cmp	r3, r10
	ldr	r0, [sp, #4]
	bic	r1, r2, #8128
	movcc	r2, r3
	bic	r1, r1, #63
	movcs	r2, r10
	ldr	r3, [r1, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3740
.L3699:
	cmp	r2, #0
	mvnne	r10, #13
	b	.L3690
.L3729:
	movw	r1, #:lower16:.LC325
	add	r0, fp, #3648
	movt	r1, #:upper16:.LC325
	bl	__dynamic_pr_debug
	b	.L3677
.L3737:
	movw	r1, #:lower16:.LC328
	mov	r2, r10
	ldr	r0, .L3741+8
	movt	r1, #:upper16:.LC328
	bl	__dynamic_pr_debug
	b	.L3676
.L3740:
	ldr	r1, [r6]
	bl	__copy_to_user
	mov	r2, r0
	b	.L3699
.L3679:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r10, #15
	b	.L3676
.L3738:
	movw	r1, #:lower16:.LC327
	mov	r3, r0
	ldr	r0, .L3741+12
	mov	r2, r6
	movt	r1, #:upper16:.LC327
	bl	__dynamic_pr_debug
	b	.L3692
.L3739:
	movw	r1, #:lower16:.LC320
	ldr	r0, .L3741+16
	mov	r2, r6
	movt	r1, #:upper16:.LC320
	bl	__dynamic_pr_debug
	ldr	r3, [r6, #48]
	b	.L3698
.L3702:
	mvn	r10, #21
	b	.L3676
.L3701:
	mvn	r10, #18
	b	.L3676
.L3742:
	.align	2
.L3741:
	.word	.LANCHOR2+3690
	.word	.LANCHOR2+3738
	.word	.LANCHOR2+3768
	.word	.LANCHOR2+3696
	.word	.LANCHOR2+3744
	.fnend
	.size	adb_read, .-adb_read
	.section	.rodata.str1.4
	.align	2
.LC329:
	.ascii	"<3>ccid notify ep enqueue error %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_ioctl, %function
ccid_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #17154
	str	r6, [sp, #8]
	movt	r3, 16388
	str	lr, [sp, #12]
	ldr	r5, [r0, #124]
	cmp	r1, r3
	ldr	r4, [r5, #112]
	ldr	r0, [r4]
	beq	.L3744
	movw	r3, #17155
	movt	r3, 32772
	cmp	r1, r3
	beq	.L3745
	movw	r3, #17153
	movt	r3, 16388
	cmp	r1, r3
	beq	.L3757
.L3746:
	ldr	r0, [r5, #100]
	mov	r1, r4
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L3758
.L3753:
	mov	r4, #0
.L3743:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3757:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3759
.L3750:
	mov	r1, #4
	bl	__memzero
.L3756:
	mvn	r4, #13
	b	.L3743
.L3745:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3756
	mov	r0, r2
	add	r1, r5, #200
	mov	r2, #4
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L3753
	b	.L3756
.L3744:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3750
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3756
	mov	r3, #4
	str	r3, [r4, #4]
	ldr	r4, [r5, #112]
	b	.L3746
.L3759:
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3756
	mov	r3, #2
	str	r3, [r4, #4]
	ldr	r4, [r5, #112]
	b	.L3746
.L3758:
	movw	r0, #:lower16:.LC329
	mov	r1, r4
	movt	r0, #:upper16:.LC329
	bl	printk
	b	.L3743
	.fnend
	.size	ccid_ctrl_ioctl, .-ccid_ctrl_ioctl
	.section	.rodata.str1.4
	.align	2
.LC330:
	.ascii	"<3>%s: zero length ctrl pkt\012\000"
	.align	2
.LC331:
	.ascii	"<3>%s: max_pkt_size:%d given_pkt_size:%d\012\000"
	.align	2
.LC332:
	.ascii	"<3>%s: cannot allocate rmnet_mux ctrl pkt\012\000"
	.align	2
.LC333:
	.ascii	"<3>%s: copy_from_user failed err:%d\012\000"
	.align	2
.LC334:
	.ascii	"rmnet_mux notify ep enqueue error %d\012\000"
	.text
	.align	2
	.global	usb_rmnet_mux_ctrl_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_write, %function
usb_rmnet_mux_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	ldr	r3, [r4, #368]
	cmp	r3, #0
	beq	.L3775
	cmp	r2, #0
	mov	r5, r2
	beq	.L3776
	cmp	r2, #4096
	bhi	.L3777
	mov	r6, r1
	mov	r0, r2
	mov	r1, #208
	bl	rmnet_mux_alloc_ctrl_pkt
	subs	r7, r0, #0
	beq	.L3778
	mov	r3, sp
	ldr	r0, [r7]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3779
	mov	r1, r5
	mov	r8, r5
	bl	__memzero
.L3767:
	movw	r0, #:lower16:.LC333
	ldr	r1, .L3781
	mov	r2, r8
	movt	r0, #:upper16:.LC333
	bl	printk
	ldr	r0, [r7]
	bl	kfree
	mov	r0, r7
	bl	kfree
.L3760:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3779:
	mov	r1, r6
	mov	r2, r5
	bl	__copy_from_user
	cmp	r0, #0
	mov	r6, r0
	mov	r8, r0
	bne	.L3767
	add	r8, r4, #364
	add	r9, r4, #372
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #344]
	mov	r1, r4
	mov	r10, r0
	add	r0, r7, #8
	add	r3, r3, #1
	str	r3, [r4, #344]
	ldr	r2, [r1, #336]!
	bl	__list_add
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r7, [r4, #84]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r9]
	add	r2, r2, #1
	strex	r1, r2, [r9]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	beq	.L3780
.L3770:
	mov	r8, r5
	b	.L3760
.L3780:
	mvn	r1, #94
	strb	r1, [r3]
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r6, [r3, #2]
	strb	r6, [r3, #3]
	ldrb	r1, [r4, #356]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	r6, [r3, #6]
	strb	r6, [r3, #7]
	ldrd	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L3770
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r1, r3, [r9]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC334
	mov	r8, r5
	movt	r1, #:upper16:.LC334
	add	r0, r0, #32
	bl	dev_err
	b	.L3760
.L3775:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #3810
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r8, #18
	beq	.L3760
	movw	r1, #:lower16:.LC304
	ldr	r2, .L3781
	add	r0, r0, #3792
	movt	r1, #:upper16:.LC304
	mvn	r8, #18
	bl	__dynamic_pr_debug
	b	.L3760
.L3778:
	movw	r0, #:lower16:.LC332
	ldr	r1, .L3781
	mvn	r8, #11
	movt	r0, #:upper16:.LC332
	bl	printk
	b	.L3760
.L3777:
	movw	r0, #:lower16:.LC331
	mov	r3, r2
	ldr	r1, .L3781
	movt	r0, #:upper16:.LC331
	mov	r2, #4096
	mvn	r8, #11
	bl	printk
	b	.L3760
.L3776:
	movw	r0, #:lower16:.LC330
	ldr	r1, .L3781
	mvn	r8, #18
	movt	r0, #:upper16:.LC330
	bl	printk
	b	.L3760
.L3782:
	.align	2
.L3781:
	.word	.LANCHOR3+2528
	.fnend
	.size	usb_rmnet_mux_ctrl_write, .-usb_rmnet_mux_ctrl_write
	.section	.rodata.str1.4
	.align	2
.LC335:
	.ascii	"%s: Enter(%d)\000"
	.align	2
.LC336:
	.ascii	"zero length ctrl pkt\012\000"
	.align	2
.LC337:
	.ascii	"given pkt size too big:%d > max_pkt_size:%d\012\000"
	.align	2
.LC338:
	.ascii	"<3>Previous writing not finished yet\012\000"
	.align	2
.LC339:
	.ascii	"USB cable not connected\012\000"
	.align	2
.LC340:
	.ascii	"<3>failed to allocate ctrl pkt\012\000"
	.align	2
.LC341:
	.ascii	"<3>copy_from_user failed err:%d\012\000"
	.align	2
.LC342:
	.ascii	"<3>failed to send ctrl packet. error=%d\012\000"
	.align	2
.LC343:
	.ascii	"<3>send_cpkt_response callback is NULL\012\000"
	.align	2
.LC344:
	.ascii	"%s: Exit(%d)\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_write, %function
rmnet_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3834
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR2
	movt	r9, #:upper16:.LANCHOR2
	strd	r10, [sp, #24]
	ldrh	ip, [r9, r3]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r4, [r0, #124]
	tst	ip, #4
	bne	.L3819
.L3784:
	cmp	r5, #0
	beq	.L3820
	cmp	r5, #2048
	bhi	.L3821
	add	r6, r4, #24
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3788
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L3822
	mov	r1, #208
	mov	r0, r5
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L3823
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3824
	mov	r1, r5
	bl	__memzero
	mov	r1, r5
.L3794:
	movw	r0, #:lower16:.LC341
	movt	r0, #:upper16:.LC341
	bl	printk
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #13
	b	.L3783
.L3824:
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user
	subs	r1, r0, #0
	bne	.L3794
	add	fp, r4, #52
	mov	r0, fp
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r10, r0
	cmp	r3, #0
	beq	.L3796
	ldr	r7, [r3, #92]
	cmp	r7, #0
	beq	.L3796
	mov	r0, r3
	mov	r2, r5
	mov	r1, r8
	blx	r7
	subs	r7, r0, #0
	bne	.L3825
	mov	r1, r10
	mov	r0, fp
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #3930
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L3826
.L3798:
	mov	r7, r5
.L3783:
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3819:
	movw	r1, #:lower16:.LC335
	mov	r3, r2
	ldr	r0, .L3829
	ldr	r2, .L3829+4
	movt	r1, #:upper16:.LC335
	bl	__dynamic_pr_debug
	b	.L3784
.L3826:
	movw	r1, #:lower16:.LC344
	ldr	r2, .L3829+4
	mov	r3, r5
	movt	r1, #:upper16:.LC344
	ldr	r0, .L3829+8
	bl	__dynamic_pr_debug
	b	.L3798
.L3788:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC338
	mvn	r7, #15
	movt	r0, #:upper16:.LC338
	bl	printk
	b	.L3783
.L3820:
	movw	r3, #3858
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L3827
.L3800:
	mvn	r7, #21
	b	.L3783
.L3821:
	movw	r3, #3882
	ldrh	r3, [r9, r3]
	tst	r3, #4
	beq	.L3800
	movw	r1, #:lower16:.LC337
	ldr	r0, .L3829+12
	mov	r2, r5
	movt	r1, #:upper16:.LC337
	mov	r3, #2048
	mvn	r7, #21
	bl	__dynamic_pr_debug
	b	.L3783
.L3822:
	movw	r3, #3906
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L3828
.L3791:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #31
	b	.L3783
.L3827:
	movw	r1, #:lower16:.LC336
	ldr	r0, .L3829+16
	mvn	r7, #21
	movt	r1, #:upper16:.LC336
	bl	__dynamic_pr_debug
	b	.L3783
.L3828:
	movw	r1, #:lower16:.LC339
	ldr	r0, .L3829+20
	movt	r1, #:upper16:.LC339
	bl	__dynamic_pr_debug
	b	.L3791
.L3823:
	movw	r0, #:lower16:.LC340
	movt	r0, #:upper16:.LC340
	bl	printk
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #11
	b	.L3783
.L3796:
	movw	r0, #:lower16:.LC343
	movt	r0, #:upper16:.LC343
	bl	printk
	mov	r1, r10
	mov	r0, fp
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #21
	b	.L3783
.L3825:
	movw	r0, #:lower16:.LC342
	mov	r1, r7
	movt	r0, #:upper16:.LC342
	bl	printk
	mov	r1, r10
	mov	r0, fp
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L3783
.L3830:
	.align	2
.L3829:
	.word	.LANCHOR2+3816
	.word	.LANCHOR3+2556
	.word	.LANCHOR2+3912
	.word	.LANCHOR2+3864
	.word	.LANCHOR2+3840
	.word	.LANCHOR2+3888
	.fnend
	.size	rmnet_ctrl_write, .-rmnet_ctrl_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_prepare_buffer, %function
ffs_prepare_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L3833
	mov	r6, r0
	mov	r1, #208
	mov	r0, r4
	bl	__kmalloc
	subs	r5, r0, #0
	mvneq	r5, #11
	beq	.L3831
	mov	r2, r4
	mov	r1, r6
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3839
.L3831:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3833:
	mov	r5, r4
	b	.L3831
.L3839:
	mov	r0, r5
	mvn	r5, #13
	bl	kfree
	b	.L3831
	.fnend
	.size	ffs_prepare_buffer, .-ffs_prepare_buffer
	.section	.rodata.str1.4
	.align	2
.LC345:
	.ascii	"g_ether\000"
	.align	2
.LC346:
	.ascii	"29-May-2008\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_get_drvinfo, %function
eth_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #:lower16:.LC345
	mov	r5, r0
	movt	r1, #:upper16:.LC345
	str	r6, [sp, #8]
	add	r0, r4, #4
	mov	r2, #32
	str	lr, [sp, #12]
	bl	strlcpy
	movw	r1, #:lower16:.LC346
	add	r0, r4, #36
	movt	r1, #:upper16:.LC346
	mov	r2, #32
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy
	.fnend
	.size	eth_get_drvinfo, .-eth_get_drvinfo
	.section	.rodata.str1.4
	.align	2
.LC347:
	.ascii	"g_qc_ether\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_get_drvinfo, %function
eth_qc_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #:lower16:.LC347
	mov	r5, r0
	movt	r1, #:upper16:.LC347
	str	r6, [sp, #8]
	add	r0, r4, #4
	mov	r2, #32
	str	lr, [sp, #12]
	bl	strlcpy
	movw	r1, #:lower16:.LC346
	add	r0, r4, #36
	movt	r1, #:upper16:.LC346
	mov	r2, #32
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy
	.fnend
	.size	eth_qc_get_drvinfo, .-eth_qc_get_drvinfo
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	pm_qos_store, %function
pm_qos_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	add	r0, r0, #52
	mov	r1, r5
	mov	r2, #5
	bl	strlcpy
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	pm_qos_store, .-pm_qos_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_transports_store, %function
ecm_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L3850
	mov	r2, #50
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3851:
	.align	2
.L3850:
	.word	.LANCHOR1+3020
	.fnend
	.size	ecm_transports_store, .-ecm_transports_store
	.section	.rodata.str1.4
	.align	2
.LC348:
	.ascii	"%s: %s: unable to update PID and serial_no\012\000"
	.align	2
.LC349:
	.ascii	"%s: %s: dload:%pK pid:%x serial_num:%s\012\000"
	.section	.rodata.cst4
	.align	2
.LC350:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_update_pid_and_serial_num, %function
usb_diag_update_pid_and_serial_num:
	.fnstart
	@ args = 0, pretend = 0, frame = 144
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r3, #:lower16:.LC350
	mov	r2, #140
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LC350
	str	lr, [sp, #16]
	.pad #164
	sub	sp, sp, #164
	mov	r5, r1
	add	r4, sp, #16
	mov	r1, #0
	mov	r7, r0
	movt	r6, #:upper16:.LANCHOR1
	mov	r0, r4
	ldr	r3, [r3]
	str	r3, [sp, #156]
	mov	r3,#0
	bl	memset
	ldr	r2, [r6, #3468]
	cmp	r2, #0
	beq	.L3868
	movw	r3, #:lower16:.LANCHOR2
	movw	r1, #3978
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r1]
	tst	r3, #4
	bne	.L3869
.L3855:
	movw	r3, #10505
	cmp	r5, #0
	str	r7, [sp, #16]
	movt	r3, 28995
	str	r3, [sp, #148]
	beq	.L3870
	movw	r3, #21364
	mov	r1, r5
	movt	r3, 24980
	mov	r2, #128
	add	r0, sp, #20
	str	r3, [sp, #152]
	bl	strlcpy
.L3857:
	ldr	r3, [r6, #3468]
	add	r1, sp, #24
	add	r2, r3, #8
	cmp	r3, r1
	cmpcc	r4, r2
	movcs	r2, #1
	movcc	r2, #0
	tst	r3, #7
	movne	r2, #0
	cmp	r2, #0
	beq	.L3858
	ldrd	r0, [sp, #16]
	strd	r0, [r3]
	ldrd	r0, [sp, #24]
	strd	r0, [r3, #8]
	ldrd	r0, [sp, #32]
	strd	r0, [r3, #16]
	ldrd	r0, [sp, #40]
	strd	r0, [r3, #24]
	ldrd	r0, [sp, #48]
	strd	r0, [r3, #32]
	ldrd	r0, [sp, #56]
	strd	r0, [r3, #40]
	ldrd	r0, [sp, #64]
	strd	r0, [r3, #48]
	ldrd	r0, [sp, #72]
	strd	r0, [r3, #56]
	ldrd	r0, [sp, #80]
	strd	r0, [r3, #64]
	ldrd	r0, [sp, #88]
	strd	r0, [r3, #72]
	ldrd	r0, [sp, #96]
	strd	r0, [r3, #80]
	ldrd	r0, [sp, #104]
	strd	r0, [r3, #88]
	ldrd	r0, [sp, #112]
	strd	r0, [r3, #96]
	ldrd	r0, [sp, #120]
	strd	r0, [r3, #104]
	ldrd	r0, [sp, #128]
	strd	r0, [r3, #112]
	ldrd	r0, [sp, #136]
	strd	r0, [r3, #120]
	ldrd	r0, [sp, #144]
	strd	r0, [r3, #128]
	ldr	r2, [sp, #152]
	str	r2, [r3, #136]
.L3860:
	mov	r0, #0
.L3852:
	movw	r3, #:lower16:.LC350
	movt	r3, #:upper16:.LC350
	ldr	r2, [r3]
	ldr	r3, [sp, #156]
	eors	r2, r3, r2
	bne	.L3871
	add	sp, sp, #164
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3870:
	mov	r1, #128
	add	r0, sp, #20
	str	r5, [sp, #152]
	bl	__memzero
	b	.L3857
.L3858:
	sub	r3, r3, #4
	mov	r2, r4
	add	r0, sp, #156
.L3859:
	ldr	r1, [r2], #4
	cmp	r2, r0
	str	r1, [r3, #4]!
	bne	.L3859
	b	.L3860
.L3869:
	ldr	r3, .L3872
	movw	r1, #:lower16:.LC349
	stm	sp, {r2, r7}
	movt	r1, #:upper16:.LC349
	ldr	r0, .L3872+4
	str	r5, [sp, #8]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L3855
.L3868:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #3954
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r0, #18
	beq	.L3852
	ldr	r3, .L3872
	movw	r1, #:lower16:.LC348
	add	r0, r0, #3936
	movt	r1, #:upper16:.LC348
	mov	r2, r3
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L3852
.L3871:
	bl	__stack_chk_fail
.L3873:
	.align	2
.L3872:
	.word	.LANCHOR3+2576
	.word	.LANCHOR2+3960
	.fnend
	.size	usb_diag_update_pid_and_serial_num, .-usb_diag_update_pid_and_serial_num
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	clients_store, %function
clients_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L3876
	mov	r2, #32
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3877:
	.align	2
.L3876:
	.word	.LANCHOR1+3472
	.fnend
	.size	clients_store, .-clients_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_xport_names_store, %function
rmnet_xport_names_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L3880
	mov	r2, #50
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3881:
	.align	2
.L3880:
	.word	.LANCHOR1+3072
	.fnend
	.size	rmnet_xport_names_store, .-rmnet_xport_names_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_transports_store, %function
rmnet_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L3884
	mov	r2, #50
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3885:
	.align	2
.L3884:
	.word	.LANCHOR1+3124
	.fnend
	.size	rmnet_transports_store, .-rmnet_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_transports_store, %function
mbim_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L3888
	mov	r2, #50
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3889:
	.align	2
.L3888:
	.word	.LANCHOR1+3176
	.fnend
	.size	mbim_transports_store, .-mbim_transports_store
	.section	.rodata.str1.4
	.align	2
.LC351:
	.ascii	"<3>usb_ep_queue failed ret: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_send, %function
audio_send:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #108
	mov	r0, r8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	mov	r1, r0
	cmp	r3, #0
	beq	.L3908
	ldr	r2, [r5, #120]
	mov	r0, r8
	cmp	r2, #0
	beq	.L3909
	ldr	r3, [r3, #208]
	movw	r4, #44100
	adr	fp, .L3915
	ldrd	r10, [fp]
	str	r3, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	add	r0, sp, #16
	bl	ktime_get
	ldr	r2, [sp, #16]
	mov	ip, #0
	ldr	r3, [r5, #136]
	mov	r1, ip
	mov	lr, ip
	ldr	r0, [sp, #20]
	ldr	r9, [r5, #140]
	subs	r6, r2, r3
	sbc	r7, r0, r9
	ldr	r9, [r5, #144]
	.syntax divided
@ 350 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umull	r2, r3, r10, r6
	mov	r2, #0
@ 0 "" 2
@ 350 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r3, r2, fp, r6
	umlal	r3, r1, r10, r7
	mov	r3, #0
	adds	r2, r1, r2
	adc	r3, r3, #0
	umlal	r2, r3, fp, r7
@ 0 "" 2
	.arm
	.syntax unified
	lsr	r0, r2, #18
	lsr	r2, r3, #18
	adr	r7, .L3915+8
	ldrd	r6, [r7]
	ldr	fp, [r5, #148]
	orr	r0, r0, r3, lsl #14
	mov	r10, #440
	umull	r0, r1, r0, r4
	mla	r1, r4, r2, r1
	.syntax divided
@ 352 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umull	r2, r3, r6, r0
	cmn	r2, r6
	adcs	r3, r3, r7
	adc	r2, ip, #0
@ 0 "" 2
@ 352 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r3, r2, r7, r0
	umlal	r3, lr, r6, r1
	mov	r3, #0
	adds	r2, lr, r2
	adc	r3, r3, #0
	umlal	r2, r3, r7, r1
@ 0 "" 2
	.arm
	.syntax unified
	lsr	r2, r2, #9
	lsr	r1, r3, #9
	orr	r2, r2, r3, lsl #23
	subs	r3, r2, r9
	str	r3, [sp]
	sbc	r3, r1, fp
	mov	fp, #0
	str	r3, [sp, #4]
	ldrd	r6, [sp]
	cmp	r10, r6
	sbcs	r3, fp, r7
	blt	.L3911
	mov	r3, r7
	cmp	r6, #1
	sbcs	r3, r3, #0
	bge	.L3894
	mov	r2, #44
	mov	r3, #0
	strd	r2, [sp]
.L3894:
	add	fp, r5, #96
	ldr	r10, [sp, #12]
	b	.L3903
.L3914:
	sub	r7, r7, r1
	mov	r2, r7
	bl	memcpy
	cmp	r4, r7
	mov	r3, r7
	ble	.L3900
	ldr	r0, [r6]
	sub	r2, r4, r7
	ldr	r1, [r5, #112]
	str	r2, [sp, #12]
	add	r0, r0, r7
	bl	memcpy
	ldr	r2, [sp, #12]
	ldr	r3, [r5, #112]
	add	r2, r3, r2
	str	r2, [r5, #120]
.L3901:
	mov	r1, r9
	mov	r0, r8
	str	r4, [r6, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #104]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3912
	ldr	r1, [r10, #80]
	lsl	r4, r4, #3
	ldrd	r2, [r5, #144]
	udiv	r4, r4, r1
	ldrd	r0, [sp]
	subs	r0, r0, r4
	sbc	r1, r1, #0
	adds	r2, r2, r4
	adc	r3, r3, #0
	cmp	r0, #1
	strd	r0, [sp]
	sbcs	r1, r1, #0
	strd	r2, [r5, #144]
	blt	.L3913
.L3903:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r5, #96]
	mov	r4, r0
	cmp	fp, r6
	moveq	r6, #0
	beq	.L3895
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
.L3895:
	mov	r1, r4
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	mov	r9, r0
	cmp	r3, #0
	beq	.L3910
	ldr	r1, [r5, #120]
	cmp	r1, #0
	beq	.L3910
	cmp	r6, #0
	beq	.L3910
	ldr	r3, [sp]
	ldr	r4, [r10, #80]
	ldr	r7, [r5, #116]
	ldr	r0, [r6]
	mul	r4, r3, r4
	lsr	r4, r4, #3
	cmp	r4, #256
	movge	r4, #256
	add	r3, r1, r4
	cmp	r7, r3
	bcc	.L3914
	mov	r2, r4
	str	r4, [sp, #12]
	bl	memcpy
	ldr	r3, [sp, #12]
.L3900:
	ldr	r1, [r5, #116]
	ldr	r2, [r5, #120]
	add	r3, r2, r3
	cmp	r3, r1
	str	r3, [r5, #120]
	ldrcs	r3, [r5, #112]
	strcs	r3, [r5, #120]
	b	.L3901
.L3912:
	mov	r1, r0
	movw	r0, #:lower16:.LC351
	movt	r0, #:upper16:.LC351
	bl	printk
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r4, r0
	mov	r2, fp
	ldr	r1, [r5, #100]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r4
.L3908:
	mov	r0, r8
.L3909:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3911:
	subs	r2, r2, #44
	mov	r3, #0
	sbc	r1, r1, #0
	str	r2, [r5, #144]
	mov	r2, #44
	str	r1, [r5, #148]
	strd	r2, [sp]
	b	.L3894
.L3910:
	mov	r1, r9
	mov	r0, r8
	b	.L3909
.L3913:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3916:
	.align	3
.L3915:
	.word	-675924773
	.word	1125899906
	.word	-1924145349
	.word	-2095944041
	.fnend
	.size	audio_send, .-audio_send
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_playback_trigger, %function
audio_pcm_playback_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r3, [r0, #208]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r3, #200]
	cmp	r1, #6
	ldrls	pc, [pc, r1, asl #2]
	b	.L3922
.L3920:
	.word	.L3921
	.word	.L3919
	.word	.L3922
	.word	.L3922
	.word	.L3922
	.word	.L3921
	.word	.L3919
.L3919:
	mov	r0, sp
	mov	r6, #0
	bl	ktime_get
	ldrd	r2, [sp]
	mov	r7, #0
	mov	r0, r4
	strd	r2, [r4, #136]
	strd	r6, [r4, #144]
	bl	audio_send
	mov	r0, #0
.L3917:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3921:
	add	r6, r4, #108
	mov	r5, #0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r2, #0
	mov	r3, #0
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r4, #112]
	str	r5, [r4, #120]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	b	.L3917
.L3922:
	mvn	r0, #21
	b	.L3917
	.fnend
	.size	audio_pcm_playback_trigger, .-audio_pcm_playback_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_open, %function
audio_pcm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR3
	movw	r1, #2616
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r2, #:upper16:.LANCHOR3
	strd	r6, [sp, #8]
	add	r3, r2, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	str	r10, [sp, #24]
	ldrd	r0, [r1, r2]
	str	lr, [sp, #28]
	ldrd	r6, [r3, #8]
	ldr	r10, [r8, #8]
	ldr	r9, [r8, #208]
	ldrd	r4, [r3, #16]
	add	r2, r9, #208
	str	r10, [r9, #200]
	strd	r0, [r9, #208]
	ldrd	r0, [r3, #24]
	strd	r6, [r9, #216]
	ldrd	r6, [r3, #32]
	strd	r4, [r9, #224]
	ldrd	r4, [r3, #40]
	strd	r0, [r9, #232]
	ldrd	r0, [r3, #48]
	strd	r6, [r9, #240]
	ldrd	r6, [r3, #56]
	strd	r4, [r9, #248]
	strd	r0, [r2, #48]
	mov	r0, r9
	strd	r6, [r2, #56]
	bl	snd_pcm_limit_hw_rates
	mov	r3, #2
	mov	r0, #0
	str	r3, [r9, #240]
	str	r8, [r10, #92]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_open, .-audio_pcm_open
	.section	.rodata.str1.4
	.align	2
.LC352:
	.ascii	"%s,\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	functions_show, %function
functions_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r8, r0
	add	r0, r0, #24
	str	r0, [sp, #4]
	bl	mutex_lock
	ldr	r7, [r8, #500]!
	cmp	r8, r7
	beq	.L3938
	movw	fp, #:lower16:.LC352
	sub	r7, r7, #120
	mov	r5, r9
	movt	fp, #:upper16:.LC352
	mov	r10, #58
.L3927:
	mov	r6, r7
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L3930
.L3931:
	ldr	r3, [r4]
	mov	r0, r5
	mov	r2, fp
	mov	r1, #4096
	ldr	r3, [r3]
	bl	snprintf
	ldr	r4, [r4, #4]
	add	r5, r5, r0
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L3931
.L3930:
	ldr	r7, [r7, #120]
	cmp	r8, r7
	sub	r7, r7, #120
	beq	.L3939
	cmp	r9, r5
	strbne	r10, [r5, #-1]
	b	.L3927
.L3939:
	ldr	r0, [sp, #4]
	bl	mutex_unlock
	cmp	r9, r5
	sub	r0, r5, r9
	beq	.L3926
	mov	r3, #10
	strb	r3, [r5, #-1]
.L3926:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3938:
	ldr	r0, [sp, #4]
	bl	mutex_unlock
	mov	r0, #0
	b	.L3926
	.fnend
	.size	functions_show, .-functions_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_aliases_show, %function
ffs_aliases_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r2
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r3, #3232]
	sub	r5, r6, #488
	mov	r0, r5
	bl	mutex_lock
	movw	r1, #:lower16:.LC80
	sub	r2, r6, #320
	mov	r0, r4
	movt	r1, #:upper16:.LC80
	bl	sprintf
	mov	r4, r0
	mov	r0, r5
	bl	mutex_unlock
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_aliases_show, .-ffs_aliases_show
	.section	.rodata.str1.4
	.align	2
.LC353:
	.ascii	"%s: port:%pK port#%d\000"
	.align	2
.LC354:
	.ascii	"%s: req status shutdown portno#%d port:%pK\012\000"
	.align	2
.LC355:
	.ascii	"<4>%s: port:%pK port#%d Unexpected Rx Status:%d\012"
	.ascii	"\000"
	.align	2
.LC356:
	.ascii	"<3>%s: smd write failed err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_rx_push, %function
gsmd_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #4002
	sub	r2, r0, #28
	strd	r6, [sp, #8]
	mov	r5, r0
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR2
	movt	r9, #:upper16:.LANCHOR2
	strd	r10, [sp, #24]
	ldrh	r3, [r9, r3]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r6, [r0, #44]
	str	r2, [sp, #8]
	tst	r3, #4
	bne	.L3981
.L3943:
	sub	r10, r5, #24
	sub	r7, r5, #8
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L3945
	movw	r3, #:lower16:.LC355
	mov	r8, #0
	movt	r3, #:upper16:.LC355
	str	r3, [sp, #12]
	b	.L3944
.L3954:
	ldr	r3, [r4, #8]
	cmn	r3, #108
	beq	.L3946
	cmp	r3, #0
	bne	.L3982
.L3947:
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L3945
	ldr	fp, [r4, #12]
	cmp	fp, #0
	beq	.L3950
	ldr	r3, [r5, #-20]
	ldr	r1, [r4, #-36]
	ldr	r0, [r6]
	cmp	r3, #0
	subne	fp, fp, r3
	addne	r1, r1, r3
	mov	r2, fp
	bl	smd_write
	cmp	r0, #0
	blt	.L3983
	cmp	r0, fp
	bne	.L3984
	ldr	r2, [r5, #136]
	add	r2, r2, fp
	str	r2, [r5, #136]
.L3950:
	mov	r0, r4
	str	r8, [r5, #-20]
	bl	__list_del_entry
	mov	r1, r5
	mov	r0, r4
	ldr	r2, [r1, #-16]!
	bl	__list_add
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L3945
.L3944:
	ldr	r4, [r5, #-8]
	cmp	r7, r4
	bne	.L3954
.L3945:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	ldr	r0, [sp, #8]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx
.L3946:
	movw	r3, #4026
	ldrh	r3, [r9, r3]
	tst	r3, #4
	beq	.L3945
	ldr	r3, [sp, #8]
	movw	r1, #:lower16:.LC354
	ldr	r2, .L3985
	movt	r1, #:upper16:.LC354
	ldr	r0, .L3985+4
	str	r3, [sp]
	ldr	r3, [r5, #-28]
	bl	__dynamic_pr_debug
	b	.L3945
.L3984:
	ldr	r2, [r5, #-20]
	add	r3, r2, r0
	str	r3, [r5, #-20]
	b	.L3945
.L3981:
	ldr	ip, [r5, #-28]
	movw	r1, #:lower16:.LC353
	mov	r3, r2
	movt	r1, #:upper16:.LC353
	ldr	r2, .L3985
	add	r0, r9, #3984
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L3943
.L3983:
	mov	r3, r0
	movw	r0, #:lower16:.LC356
	ldr	r1, .L3985
	mov	r2, r3
	movt	r0, #:upper16:.LC356
	bl	printk
	b	.L3945
.L3982:
	ldr	r1, .L3985
	str	r3, [sp]
	ldr	r3, [r5, #-28]
	ldr	r2, [sp, #8]
	ldr	r0, [sp, #12]
	bl	printk
	ldr	r0, [r6]
	b	.L3947
.L3986:
	.align	2
.L3985:
	.word	.LANCHOR3+2680
	.word	.LANCHOR2+4008
	.fnend
	.size	gsmd_rx_push, .-gsmd_rx_push
	.section	.rodata.str1.4
	.align	2
.LC357:
	.ascii	"<4>ttyGS%d: unexpected RX status %d\012\000"
	.align	2
.LC358:
	.ascii	"<4>ttyGS%d: RX not scheduled?\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_rx_push, %function
gs_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r0, #60
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #12
	mov	r0, r3
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irq
	ldr	r6, [r4, #-52]
	ldr	r5, [r4, #-12]
	cmp	r7, r5
	beq	.L3988
	movw	r3, #:lower16:.LC357
	mov	r9, #0
	movt	r3, #:upper16:.LC357
	mov	r8, r9
	mov	r10, r9
	str	r3, [sp, #12]
	b	.L3995
.L3991:
	ldr	fp, [r5, #12]
	cmp	fp, #0
	beq	.L3989
	ldr	r2, [r4, #-4]
	ldr	r1, [r5, #-36]
	cmp	r2, #0
	beq	.L3992
	sub	fp, fp, r2
	add	r1, r1, r2
	mov	r3, fp
	mov	r2, #0
	mov	r0, r6
	bl	tty_insert_flip_string_fixed_flag
	ldr	r3, [r4, #72]
	cmp	r0, #0
	add	r3, r3, r0
	str	r3, [r4, #72]
	bne	.L4005
.L3993:
	cmp	r0, fp
	bne	.L4027
	str	r10, [r4, #-4]
.L3989:
	mov	r0, r5
	bl	__list_del_entry
	mov	r1, r4
	mov	r0, r5
	ldr	r2, [r1, #-28]!
	bl	__list_add
	ldr	r3, [r4, #-20]
	ldr	r5, [r4, #-12]
	sub	r3, r3, #1
	cmp	r7, r5
	str	r3, [r4, #-20]
	beq	.L4028
.L3995:
	cmp	r6, #0
	beq	.L3989
	ldr	r3, [r6, #156]
	tst	r3, #1
	bne	.L3990
	ldr	r2, [r5, #8]
	cmn	r2, #108
	moveq	r8, #1
	beq	.L3991
	cmp	r2, #0
	beq	.L3991
	ldrb	r1, [r4, #-43]	@ zero_extendqisi2
	ldr	r0, [sp, #12]
	bl	printk
	b	.L3991
.L3992:
	mov	r3, fp
	mov	r0, r6
	str	r2, [sp, #4]
	bl	tty_insert_flip_string_fixed_flag
	ldr	r3, [r4, #72]
	cmp	r0, #0
	ldr	r2, [sp, #4]
	add	r3, r3, r0
	str	r3, [r4, #72]
	beq	.L4006
.L4005:
	mov	r9, #1
	b	.L3993
.L4027:
	mov	r2, r0
.L4006:
	ldr	r3, [r4, #-4]
	add	r3, r3, r2
	str	r3, [r4, #-4]
.L3990:
	cmp	r9, #0
	bne	.L4004
	ldr	r3, [r4, #-12]
	cmp	r7, r3
	beq	.L3999
	ldr	r3, [r6, #156]
	tst	r3, #1
	beq	.L4029
.L3999:
	cmp	r8, #0
	beq	.L3988
.L4001:
	ldr	r0, [sp, #8]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L3988:
	ldr	r3, [r4, #-56]
	cmp	r3, #0
	beq	.L4001
	ldr	r0, [sp, #8]
	bl	gs_start_rx
	b	.L4001
.L4028:
	cmp	r6, #0
	moveq	r9, #0
	cmp	r9, #0
	beq	.L3999
.L4004:
	mov	r0, r6
	bl	tty_flip_buffer_push
	ldr	r3, [r4, #-12]
	cmp	r7, r3
	beq	.L3999
	ldr	r3, [r6, #156]
	tst	r3, #1
	bne	.L3999
	movw	r3, #:lower16:.LANCHOR1
	mov	r1, r4
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3320]
	bl	queue_work
	b	.L3999
.L4029:
	movw	r0, #:lower16:.LC358
	ldrb	r1, [r4, #-43]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC358
	bl	printk
	b	.L3999
	.fnend
	.size	gs_rx_push, .-gs_rx_push
	.section	.rodata.str1.4
	.align	2
.LC359:
	.ascii	"<6>%s: name:%s is not found\012\000"
	.align	2
.LC360:
	.ascii	"%s: sdio_ch_name:%s dev_name:%s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_probe, %function
gsdio_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #4050
	movt	r5, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldrh	r3, [r5, r3]
	.pad #12
	sub	sp, sp, #12
	ldr	r8, [r0]
	tst	r3, #4
	bne	.L4052
.L4031:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L4038
	ldr	r6, [r4, #24]
	movw	r3, #4074
	ldrh	r3, [r5, r3]
	ldr	r9, [r6, #120]
	tst	r3, #4
	ldr	r0, [r9]
	bne	.L4053
.L4034:
	mov	r2, #9
	mov	r1, r8
	bl	strncmp
	cmp	r0, #0
	beq	.L4035
	ldr	r3, [r4]
	cmp	r3, #1
	bls	.L4038
	ldr	r6, [r4, #128]
	movw	r3, #4074
	ldrh	r3, [r5, r3]
	ldr	r5, [r6, #120]
	tst	r3, #4
	ldr	r0, [r5]
	bne	.L4054
.L4037:
	mov	r1, r8
	mov	r2, #9
	bl	strncmp
	cmp	r0, #0
	bne	.L4038
.L4035:
	mov	r3, #1
	ldr	r4, [r4, #3324]
	movw	r0, #10000
	str	r3, [r6, #112]
	bl	msecs_to_jiffies
	mov	r2, r0
	add	r1, r6, #124
	mov	r0, r4
	bl	queue_delayed_work
	mov	r0, #0
.L4030:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4052:
	movw	r1, #:lower16:.LC178
	mov	r3, r8
	ldr	r2, .L4055
	movt	r1, #:upper16:.LC178
	add	r0, r5, #4032
	bl	__dynamic_pr_debug
	ldr	r8, [r7]
	b	.L4031
.L4053:
	movw	r1, #:lower16:.LC360
	mov	r3, r0
	ldr	r2, .L4055
	ldr	r0, .L4055+4
	movt	r1, #:upper16:.LC360
	str	r8, [sp]
	bl	__dynamic_pr_debug
	ldr	r8, [r7]
	ldr	r0, [r9]
	b	.L4034
.L4054:
	movw	r1, #:lower16:.LC360
	mov	r3, r0
	ldr	r2, .L4055
	ldr	r0, .L4055+4
	movt	r1, #:upper16:.LC360
	str	r8, [sp]
	bl	__dynamic_pr_debug
	ldr	r0, [r5]
	ldr	r8, [r7]
	b	.L4037
.L4038:
	movw	r0, #:lower16:.LC359
	ldr	r1, .L4055
	movt	r0, #:upper16:.LC359
	ldr	r2, [r7]
	bl	printk
	mvn	r0, #18
	b	.L4030
.L4056:
	.align	2
.L4055:
	.word	.LANCHOR3+2696
	.word	.LANCHOR2+4056
	.fnend
	.size	gsdio_ch_probe, .-gsdio_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ch_remove, %function
gsmd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4076
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #2]
	tst	r2, #4
	bne	.L4075
.L4058:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r6, [r4, #212]
	cmp	r6, #0
	beq	.L4061
	ldr	r3, [r4, #236]
	mov	r2, #20
	ldr	r7, [r5]
	ldr	r5, [r3, #72]
	mov	r1, r7
	ldr	r0, [r5, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4060
	cmp	r6, #1
	bls	.L4061
	ldr	r3, [r4, #340]
	mov	r1, r7
	mov	r2, #20
	ldr	r5, [r3, #72]
	ldr	r0, [r5, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4060
.L4061:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4060:
	add	r4, r5, #8
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
	mov	r1, r4
	bl	_clear_bit
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L4061
	bl	smd_close
	mov	r3, #0
	str	r3, [r5]
	b	.L4061
.L4075:
	movw	r1, #:lower16:.LC178
	ldr	r2, .L4076+4
	sub	r0, r3, #16
	movt	r1, #:upper16:.LC178
	ldr	r3, [r5]
	bl	__dynamic_pr_debug
	b	.L4058
.L4077:
	.align	2
.L4076:
	.word	.LANCHOR2+4096
	.word	.LANCHOR3+2712
	.fnend
	.size	gsmd_ch_remove, .-gsmd_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ch_probe, %function
gsmd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4097
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L4096
.L4079:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r7, [r4, #212]
	cmp	r7, #0
	beq	.L4080
	ldr	r5, [r4, #236]
	mov	r2, #20
	ldr	r8, [r6]
	ldr	r6, [r5, #72]
	mov	r1, r8
	ldr	r0, [r6, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4081
	cmp	r7, #1
	bls	.L4080
	ldr	r5, [r4, #340]
	mov	r1, r8
	mov	r2, #20
	ldr	r6, [r5, #72]
	ldr	r0, [r6, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4081
.L4080:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4081:
	add	r1, r6, #8
	mov	r0, #1
	add	r7, r5, #4
	bl	_set_bit
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #68]
	mov	r6, r0
	cmp	r3, #0
	beq	.L4082
	ldr	r4, [r4, #3328]
	mov	r0, #0
	bl	msecs_to_jiffies
	mov	r2, r0
	add	r1, r5, #76
	mov	r0, r4
	bl	queue_delayed_work
.L4082:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L4080
.L4096:
	movw	r1, #:lower16:.LC178
	ldr	r2, .L4097+4
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC178
	ldr	r3, [r6]
	bl	__dynamic_pr_debug
	b	.L4079
.L4098:
	.align	2
.L4097:
	.word	.LANCHOR4-4048
	.word	.LANCHOR3+2728
	.fnend
	.size	gsmd_ch_probe, .-gsmd_ch_probe
	.section	.rodata.str1.4
	.align	2
.LC361:
	.ascii	"bam_dmux_ch_8\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_ch_probe, %function
gbam_data_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4112
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L4110
.L4100:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #424]
	cmp	r3, #0
	ble	.L4101
	movw	r0, #:lower16:.LC361
	ldr	r1, [r5]
	movt	r0, #:upper16:.LC361
	bl	strcmp
	cmp	r0, #0
	beq	.L4111
.L4101:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4111:
	ldr	r5, [r4, #428]
	mov	r0, #2
	add	r1, r5, #20
	add	r7, r5, #4
	bl	_set_bit
	mov	r0, r7
	add	r8, r5, #8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L4102
	add	r1, r5, #284
	ldr	r0, [r4, #3460]
	bl	queue_work
.L4102:
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L4101
.L4110:
	movw	r1, #:lower16:.LC178
	ldr	r2, .L4112+4
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC178
	ldr	r3, [r5]
	bl	__dynamic_pr_debug
	b	.L4100
.L4113:
	.align	2
.L4112:
	.word	.LANCHOR4-4032
	.word	.LANCHOR3+2744
	.fnend
	.size	gbam_data_ch_probe, .-gbam_data_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_ch_remove, %function
grmnet_ctrl_smd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4165
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L4164
.L4115:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r4, [r5, #512]
	cmp	r4, #0
	beq	.L4116
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4117
.L4116:
	ldr	r4, [r5, #596]
	cmp	r4, #0
	beq	.L4118
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4117
.L4118:
	ldr	r4, [r5, #680]
	cmp	r4, #0
	beq	.L4119
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4117
.L4119:
	ldr	r4, [r5, #764]
	cmp	r4, #0
	beq	.L4120
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4117
.L4120:
	ldr	r4, [r5, #848]
	cmp	r4, #0
	beq	.L4121
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4117
.L4121:
	ldr	r4, [r5, #932]
	cmp	r4, #0
	beq	.L4123
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4117
.L4123:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4117:
	add	r5, r4, #8
	mov	r0, #1
	mov	r1, r5
	bl	_clear_bit
	mov	r0, #0
	mov	r1, r5
	bl	_clear_bit
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L4123
	bl	smd_close
	mov	r3, #0
	str	r3, [r4]
	b	.L4123
.L4164:
	movw	r1, #:lower16:.LC178
	ldr	r2, .L4165+4
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC178
	ldr	r3, [r6]
	bl	__dynamic_pr_debug
	b	.L4115
.L4166:
	.align	2
.L4165:
	.word	.LANCHOR4-4000
	.word	.LANCHOR3+2764
	.fnend
	.size	grmnet_ctrl_smd_ch_remove, .-grmnet_ctrl_smd_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_ch_probe, %function
grmnet_ctrl_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4218
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L4217
.L4168:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r4, [r5, #512]
	cmp	r4, #0
	beq	.L4169
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4170
.L4169:
	ldr	r4, [r5, #596]
	cmp	r4, #0
	beq	.L4171
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4170
.L4171:
	ldr	r4, [r5, #680]
	cmp	r4, #0
	beq	.L4172
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4170
.L4172:
	ldr	r4, [r5, #764]
	cmp	r4, #0
	beq	.L4173
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4170
.L4173:
	ldr	r4, [r5, #848]
	cmp	r4, #0
	beq	.L4174
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4170
.L4174:
	ldr	r4, [r5, #932]
	cmp	r4, #0
	beq	.L4175
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4170
.L4175:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4170:
	add	r6, r4, #8
	mov	r0, #2
	mov	r1, r6
	add	r7, r4, #108
	bl	_clear_bit
	mov	r1, r6
	mov	r0, #1
	bl	_set_bit
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #104]
	mov	r6, r0
	cmp	r3, #0
	beq	.L4176
	add	r1, r4, #112
	mov	r2, #0
	ldr	r0, [r5, #3412]
	bl	queue_delayed_work
.L4176:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L4175
.L4217:
	movw	r1, #:lower16:.LC178
	ldr	r2, .L4218+4
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC178
	ldr	r3, [r6]
	bl	__dynamic_pr_debug
	b	.L4168
.L4219:
	.align	2
.L4218:
	.word	.LANCHOR4-3984
	.word	.LANCHOR3+2792
	.fnend
	.size	grmnet_ctrl_smd_ch_probe, .-grmnet_ctrl_smd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_remove, %function
ghsic_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L4262
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldrh	r3, [ip, #-14]
	tst	r3, #4
	bne	.L4260
.L4221:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #1016]
	cmp	r7, #0
	beq	.L4222
	ldr	r4, [r5, #1020]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L4223
	cmp	r7, #1
	bls	.L4222
	ldr	r4, [r5, #1124]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L4223
	cmp	r7, #2
	beq	.L4222
	ldr	r4, [r5, #1228]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L4223
	cmp	r7, #3
	beq	.L4222
	ldr	r4, [r5, #1332]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L4223
.L4222:
	movw	r0, #:lower16:.LC180
	ldr	r1, .L4262+4
	mvn	r2, #21
	movt	r0, #:upper16:.LC180
	bl	printk
	mvn	r0, #21
	b	.L4220
.L4223:
	add	r6, r4, #4
	add	r7, r4, #84
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #8]
	mov	r1, r0
	cmp	r5, #0
	beq	.L4261
	ldr	r3, [r4, #48]
	cmp	r3, #0
	bne	.L4228
	mov	r0, r6
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #120]
	cmp	r3, #0
	beq	.L4230
.L4229:
	mov	r0, r5
	blx	r3
.L4230:
	mov	r1, r7
	mov	r0, #0
	bl	_clear_bit
.L4227:
	mov	r0, #1
	mov	r1, r7
	bl	_clear_bit
	mov	r0, #0
.L4220:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4228:
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #104]
	cmp	r3, #0
	bne	.L4229
	b	.L4230
.L4260:
	movw	r1, #:lower16:.LC178
	mov	r4, r0
	ldr	r2, .L4262+4
	mov	r3, r6
	sub	r0, ip, #32
	movt	r1, #:upper16:.LC178
	bl	__dynamic_pr_debug
	ldr	r6, [r4]
	b	.L4221
.L4261:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L4227
.L4263:
	.align	2
.L4262:
	.word	.LANCHOR4-3952
	.word	.LANCHOR3+2820
	.fnend
	.size	ghsic_ctrl_remove, .-ghsic_ctrl_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_notify_modem, %function
gsmd_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	ip, [r3, #212]
	cmp	r1, ip
	bcs	.L4292
	cmp	r0, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L4293
	mov	ip, #104
	ands	r0, r2, #1
	movne	r0, #2
	mla	r1, ip, r1, r3
	ldr	r4, [r1, #236]
	moveq	r1, #4
	movne	r1, #6
	tst	r2, #2
	moveq	r1, r0
	ldr	r3, [r4, #156]
	cmp	r3, r1
	beq	.L4264
	ldr	r3, [r4, #72]
	str	r1, [r4, #156]
	ldr	r2, [r3, #8]
	tst	r2, #1
	beq	.L4264
	cmp	r0, #0
	ldr	r0, [r3]
	bne	.L4294
.L4272:
	mvn	r2, r1
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	smd_tiocmset
.L4264:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4294:
	bl	smd_tiocmget
	ands	r3, r0, #128
	movne	r1, #9
	moveq	r1, #1
	movne	r3, #8
	tst	r0, #64
	moveq	r1, r3
	tst	r0, #256
	orrne	r1, r1, #2
	str	r1, [r4, #160]
	ldr	r3, [r5, #136]
	cmp	r3, #0
	beq	.L4291
	ldr	r0, [r4, #68]
	blx	r3
.L4291:
	ldr	r3, [r4, #72]
	ldr	r1, [r4, #156]
	ldr	r0, [r3]
	b	.L4272
.L4292:
	movw	r0, #:lower16:.LC174
	mov	r2, r1
	ldr	r1, .L4295
	movt	r0, #:upper16:.LC174
	b	printk
.L4293:
	movw	r0, #:lower16:.LC175
	ldr	r1, .L4295
	movt	r0, #:upper16:.LC175
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L4296:
	.align	2
.L4295:
	.word	.LANCHOR3+2840
	.fnend
	.size	gsmd_notify_modem, .-gsmd_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_connect_work, %function
gsmd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L4317
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	sub	r3, r0, #76
	str	lr, [sp, #8]
	mov	r4, r0
	.pad #20
	sub	sp, sp, #20
	ldr	r5, [r0, #-4]
	ldrh	r1, [r2, #-6]
	tst	r1, #4
	bne	.L4314
.L4298:
	ldr	r2, [r5, #8]
	tst	r2, #2
	bne	.L4315
.L4297:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L4315:
	movw	ip, #:lower16:gsmd_notify
	mov	r2, r5
	ldr	r0, [r5, #4]
	movt	ip, #:upper16:gsmd_notify
	mov	r1, #0
	str	ip, [sp]
	bl	smd_named_open_on_edge
	subs	r2, r0, #0
	beq	.L4297
	cmn	r2, #11
	bne	.L4302
	ldr	r0, .L4317+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L4316
.L4303:
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #250
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #3328]
	bl	msecs_to_jiffies
	mov	r2, r0
	mov	r1, r4
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_delayed_work
.L4314:
	ldr	ip, [r4, #-76]
	movw	r1, #:lower16:.LC232
	sub	r0, r2, #24
	movt	r1, #:upper16:.LC232
	ldr	r2, .L4317+8
	str	ip, [sp]
	str	r3, [sp, #12]
	bl	__dynamic_pr_debug
	ldr	r3, [sp, #12]
	b	.L4298
.L4316:
	movw	r1, #:lower16:.LC286
	sub	r0, r0, #32
	ldr	r3, [r5, #4]
	movt	r1, #:upper16:.LC286
	str	r2, [sp]
	ldr	r2, .L4317+8
	bl	__dynamic_pr_debug
	b	.L4303
.L4302:
	mov	r3, r2
	ldr	r1, .L4317+8
	movw	r0, #:lower16:.LC287
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC287
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L4318:
	.align	2
.L4317:
	.word	.LANCHOR4-3936
	.word	.LANCHOR4-3904
	.word	.LANCHOR3+2860
	.fnend
	.size	gsmd_connect_work, .-gsmd_connect_work
	.section	.rodata.str1.4
	.align	2
.LC362:
	.ascii	"%s: port:%pK d:%pK tom:%lu pbam:%u pno:%d\012\000"
	.align	2
.LC363:
	.ascii	"%s: write error:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_tobam, %function
gbam_data_write_tobam:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r0, #60
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r10, [r0, #-4]
	.pad #28
	sub	sp, sp, #28
	str	r3, [sp, #20]
	add	r7, r10, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r10, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L4320
	movw	r8, #:lower16:.LANCHOR0
	ldr	fp, [r4, #-12]
	movt	r8, #:upper16:.LANCHOR0
	ldr	r3, [r4, #160]
	ldr	r1, [r8, #628]
	cmp	r1, r3
	subhi	r9, r4, #20
	bls	.L4322
.L4329:
	ldr	r5, [r4, #-20]
	sub	r3, fp, #1
	ldr	ip, .L4350
	cmp	r9, r5
	beq	.L4322
	cmp	r5, #0
	beq	.L4322
	str	r3, [r4, #-12]
	ldrd	r2, [r5]
	mov	r1, #0
	mov	r0, #0
	strd	r0, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldrh	r1, [ip]
	ldr	r2, [r4, #160]
	ldr	r3, [r4, #180]
	tst	r1, #4
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #160]
	str	r3, [r4, #180]
	bne	.L4347
.L4323:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r5
	ldr	r0, [r4, #-56]
	bl	msm_bam_dmux_write
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	fp, #0
	mov	r6, r0
	bne	.L4348
	ldr	r3, [r4, #160]
	ldr	r2, [r4, #200]
	cmp	r3, r2
	ldr	r2, [r8, #628]
	bls	.L4326
	cmp	r3, r2
	str	r3, [r4, #200]
	ldr	fp, [r4, #-12]
	bcc	.L4329
.L4322:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #632]
	cmp	r3, fp
	bls	.L4319
	ldr	r3, [r4, #196]
	cmp	r3, #0
	beq	.L4331
	ldr	r3, [r4, #188]
	mov	r2, #0
	str	r2, [r4, #196]
	add	r3, r3, #1
	str	r3, [r4, #188]
.L4331:
	mov	r0, r10
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx
.L4326:
	cmp	r3, r2
	ldr	fp, [r4, #-12]
	bcc	.L4329
	b	.L4322
.L4319:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4347:
	ldr	ip, [r10]
	movw	r1, #:lower16:.LC362
	str	r2, [sp, #8]
	ldr	r0, [sp, #20]
	movt	r1, #:upper16:.LC362
	ldr	r2, .L4350+4
	stm	sp, {r0, r3}
	mov	r3, r10
	ldr	r0, .L4350+8
	str	ip, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L4323
.L4320:
	mov	r1, r0
	mov	r0, r7
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L4348:
	ldr	r0, .L4350+12
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L4349
.L4325:
	ldr	r1, [r4, #160]
	mov	r0, r5
	ldr	r2, [r4, #168]
	ldr	r3, [r4, #180]
	sub	r1, r1, #1
	add	r2, r2, #1
	sub	r3, r3, #1
	str	r1, [r4, #160]
	str	r2, [r4, #168]
	str	r3, [r4, #180]
	bl	dev_kfree_skb_any
	ldr	fp, [r4, #-12]
	b	.L4322
.L4349:
	movw	r1, #:lower16:.LC363
	ldr	r2, .L4350+4
	mov	r3, fp
	movt	r1, #:upper16:.LC363
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L4325
.L4351:
	.align	2
.L4350:
	.word	.LANCHOR4-3894
	.word	.LANCHOR3+2880
	.word	.LANCHOR4-3912
	.word	.LANCHOR4-3856
	.fnend
	.size	gbam_data_write_tobam, .-gbam_data_write_tobam
	.section	.rodata.str1.4
	.align	2
.LC364:
	.ascii	"%s: resume work started\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_resume_work, %function
gbam2bam_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4361
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L4359
.L4353:
	mov	r2, #0
	ldrb	r0, [r4, #-203]	@ zero_extendqisi2
	mov	r1, r2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-200]
	cmp	r3, #7
	beq	.L4360
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4360:
	sub	r0, r4, #196
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_bam_resume
.L4359:
	movw	r1, #:lower16:.LC364
	ldr	r2, .L4361+4
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC364
	bl	__dynamic_pr_debug
	b	.L4353
.L4362:
	.align	2
.L4361:
	.word	.LANCHOR4-3840
	.word	.LANCHOR3+2904
	.fnend
	.size	gbam2bam_resume_work, .-gbam2bam_resume_work
	.section	.rodata.str1.4
	.align	2
.LC365:
	.ascii	"%s: %s: resume work started\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_resume_work, %function
bam2bam_data_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L4372
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r3, [r2, #-14]
	tst	r3, #4
	bne	.L4370
.L4364:
	mov	r2, #0
	ldrb	r0, [r4, #-163]	@ zero_extendqisi2
	mov	r1, r2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-156]
	cmp	r3, #7
	beq	.L4371
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4371:
	sub	r0, r4, #152
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_bam_resume
.L4370:
	ldr	r3, .L4372+4
	movw	r1, #:lower16:.LC365
	sub	r0, r2, #32
	movt	r1, #:upper16:.LC365
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4364
.L4373:
	.align	2
.L4372:
	.word	.LANCHOR4-3808
	.word	.LANCHOR3+2928
	.fnend
	.size	bam2bam_data_resume_work, .-bam2bam_data_resume_work
	.section	.rodata.str1.4
	.align	2
.LC366:
	.ascii	"%s: suspend work started\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_suspend_work, %function
gbam2bam_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4383
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	sub	r5, r0, #316
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L4381
.L4375:
	movw	r1, #:lower16:gbam_wake_cb
	ldrb	r0, [r4, #-187]	@ zero_extendqisi2
	mov	r2, r5
	movt	r1, #:upper16:gbam_wake_cb
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-184]
	cmp	r3, #7
	beq	.L4382
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4382:
	movw	r1, #:lower16:gbam_stop
	movw	r0, #:lower16:gbam_start
	mov	r2, r5
	movt	r1, #:upper16:gbam_stop
	movt	r0, #:upper16:gbam_start
	bl	usb_bam_register_start_stop_cbs
	sub	r0, r4, #180
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_bam_suspend
.L4381:
	movw	r1, #:lower16:.LC366
	ldr	r2, .L4383+4
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC366
	bl	__dynamic_pr_debug
	b	.L4375
.L4384:
	.align	2
.L4383:
	.word	.LANCHOR4-3792
	.word	.LANCHOR3+2956
	.fnend
	.size	gbam2bam_suspend_work, .-gbam2bam_suspend_work
	.section	.rodata.str1.4
	.align	2
.LC367:
	.ascii	"%s: %s: suspend work started\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_suspend_work, %function
bam2bam_data_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L4394
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	sub	r5, r0, #200
	str	lr, [sp, #12]
	ldrh	r3, [r2, #-14]
	tst	r3, #4
	bne	.L4392
.L4386:
	movw	r1, #:lower16:bam_data_wake_cb
	ldrb	r0, [r4, #-147]	@ zero_extendqisi2
	mov	r2, r5
	movt	r1, #:upper16:bam_data_wake_cb
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-140]
	cmp	r3, #7
	beq	.L4393
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4393:
	movw	r1, #:lower16:bam_data_stop
	movw	r0, #:lower16:bam_data_start
	mov	r2, r5
	movt	r1, #:upper16:bam_data_stop
	movt	r0, #:upper16:bam_data_start
	bl	usb_bam_register_start_stop_cbs
	sub	r0, r4, #136
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_bam_suspend
.L4392:
	ldr	r3, .L4394+4
	movw	r1, #:lower16:.LC367
	sub	r0, r2, #32
	movt	r1, #:upper16:.LC367
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4386
.L4395:
	.align	2
.L4394:
	.word	.LANCHOR4-3760
	.word	.LANCHOR3+2980
	.fnend
	.size	bam2bam_data_suspend_work, .-bam2bam_data_suspend_work
	.section	.rodata.str1.4
	.align	2
.LC368:
	.ascii	"<3>%s: usb_bam_connect (src) failed: err:%d\012\000"
	.align	2
.LC369:
	.ascii	"<3>%s: usb_bam_connect (dst) failed: err:%d\012\000"
	.align	2
.LC370:
	.ascii	"<3>%s:teth_bridge_init() failed\012\000"
	.align	2
.LC371:
	.ascii	"%s: usb cable is disconnected, exiting\012\000"
	.align	2
.LC372:
	.ascii	"<3>%s: out of memory\012\000"
	.align	2
.LC373:
	.ascii	"<3>%s: usb_bam_client_ready failed: err:%d\012\000"
	.align	2
.LC374:
	.ascii	"%s: done\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_connect_work, %function
gbam2bam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	sub	r5, r0, #284
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-152]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #6
	beq	.L4419
	cmp	r3, #7
	beq	.L4420
.L4399:
	sub	r7, r4, #280
	sub	r8, r4, #276
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L4421
	ldr	r0, [r3, #88]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-172]
	beq	.L4422
	str	r5, [r0, #32]
	ldr	r2, [r4, #-172]
	movw	r3, #:lower16:gbam_endless_rx_complete
	movt	r3, #:upper16:gbam_endless_rx_complete
	mov	fp, #0
	movw	r10, #65439
	mov	r9, #32
	movt	r10, 65534
	movt	r9, 1
	str	r3, [r2, #28]
	ldr	r3, [r4, #-172]
	mov	r1, #32
	str	fp, [r3, #4]
	ldr	r2, [r4, #-172]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-172]
	ldr	r2, [r4, #-164]
	and	r2, r2, r10
	orr	r2, r2, r9
	str	r2, [r3, #52]
	ldr	r3, [r4, #-272]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	mov	r3, r0
	mov	r0, r8
	str	r3, [r4, #-168]
	bl	_raw_spin_unlock
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-168]
	cmp	r3, fp
	beq	.L4418
	str	r5, [r3, #32]
	ldr	r2, [r4, #-168]
	movw	r3, #:lower16:gbam_endless_tx_complete
	movt	r3, #:upper16:gbam_endless_tx_complete
	mov	r0, r5
	str	r3, [r2, #28]
	ldr	r3, [r4, #-168]
	str	fp, [r3, #4]
	ldr	r2, [r4, #-168]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-168]
	ldr	r3, [r4, #-160]
	and	r3, r3, r10
	orr	r3, r3, r9
	str	r3, [r2, #52]
	bl	gbam_start_endless_rx
	mov	r0, r5
	bl	gbam_start_endless_tx
	ldr	r3, [r4, #-152]
	cmp	r3, #6
	beq	.L4423
.L4404:
	ldr	r0, .L4427
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L4424
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4423:
	ldr	r3, [r4, #-284]
	cmp	r3, #0
	bne	.L4404
	movw	r0, #:lower16:gbam_peer_reset_cb
	mov	r1, r5
	movt	r0, #:upper16:gbam_peer_reset_cb
	bl	usb_bam_register_peer_reset_cb
	mov	r0, #1
	bl	usb_bam_client_ready
	subs	r2, r0, #0
	beq	.L4404
	ldr	r1, .L4427+4
	movw	r0, #:lower16:.LC373
	movt	r0, #:upper16:.LC373
.L4416:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L4419:
	bl	usb_bam_reset_complete
	ldrb	r0, [r4, #-156]	@ zero_extendqisi2
	sub	r1, r4, #164
	bl	usb_bam_connect
	subs	r2, r0, #0
	bne	.L4425
	ldrb	r0, [r4, #-155]	@ zero_extendqisi2
	sub	r1, r4, #160
	bl	usb_bam_connect
	subs	r2, r0, #0
	beq	.L4399
	movw	r0, #:lower16:.LC369
	ldr	r1, .L4427+4
	movt	r0, #:upper16:.LC369
	b	.L4416
.L4421:
	ldr	r0, .L4427+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L4426
.L4401:
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r1, r6
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L4424:
	ldr	r2, .L4427+4
	movw	r1, #:lower16:.LC374
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC374
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_pr_debug
.L4426:
	movw	r1, #:lower16:.LC371
	ldr	r2, .L4427+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC371
	bl	__dynamic_pr_debug
	b	.L4401
.L4422:
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L4418:
	ldr	r1, .L4427+4
	movw	r0, #:lower16:.LC372
	movt	r0, #:upper16:.LC372
.L4417:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L4425:
	movw	r0, #:lower16:.LC368
	ldr	r1, .L4427+4
	movt	r0, #:upper16:.LC368
	b	.L4416
.L4420:
	movw	r0, #:lower16:.LC370
	ldr	r1, .L4427+4
	movt	r0, #:upper16:.LC370
	b	.L4417
.L4428:
	.align	2
.L4427:
	.word	.LANCHOR4-3712
	.word	.LANCHOR3+3008
	.word	.LANCHOR4-3744
	.fnend
	.size	gbam2bam_connect_work, .-gbam2bam_connect_work
	.section	.rodata.str1.4
	.align	2
.LC375:
	.ascii	"%s: %s: Connect workqueue started\000"
	.align	2
.LC376:
	.ascii	"<3>%s: %s:teth_bridge_init() failed\012\000"
	.align	2
.LC377:
	.ascii	"<3>%s: %s: usb_bam_connect_ipa failed: err:%d\012\000"
	.align	2
.LC378:
	.ascii	"<3>%s: %s:teth_bridge_connect() failed\012\000"
	.align	2
.LC379:
	.ascii	"<3>%s: port_usb is NULL\000"
	.align	2
.LC380:
	.ascii	"<3>%s: port_usb->out (bulk out ep) is NULL\000"
	.align	2
.LC381:
	.ascii	"%s: %s: enqueue\012\000"
	.align	2
.LC382:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed: err:%d\012\000"
	.align	2
.LC383:
	.ascii	"%s: %s: Connect workqueue done\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_connect_work, %function
bam2bam_data_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L4504
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r5, r0, #168
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r2, #-6]
	tst	r3, #4
	bne	.L4490
.L4430:
	ldr	r3, [r4, #-108]
	cmp	r3, #7
	bne	.L4431
	ldr	r3, [r4, #-112]
	cmp	r3, #1
	beq	.L4491
	cmp	r3, #0
	mov	r2, #5
	mov	r3, #0
	str	r3, [r4, #-92]
	str	r2, [r4, #-80]
	beq	.L4492
.L4433:
	sub	r6, r4, #104
	mov	r0, r6
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	bne	.L4486
	ldr	r3, [r4, #-112]
	mov	r2, #17
	mov	r1, #1
	str	r1, [r4, #-92]
	str	r2, [r4, #-80]
	cmp	r3, #0
	beq	.L4493
.L4435:
	mov	r0, r6
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	bne	.L4486
	ldr	r3, [r4, #-112]
	cmp	r3, #1
	beq	.L4494
.L4437:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L4495
	ldr	r0, [r3, #12]
	cmp	r0, #0
	beq	.L4496
	ldr	r3, [r0, #8]
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-132]
	beq	.L4429
	str	r5, [r0, #32]
	ldr	r2, [r4, #-132]
	movw	r3, #:lower16:bam_data_endless_rx_complete
	movt	r3, #:upper16:bam_data_endless_rx_complete
	mov	r8, #0
	movw	r7, #65439
	mov	r6, #32
	movt	r7, 65534
	movt	r6, 1
	str	r3, [r2, #28]
	ldr	r3, [r4, #-132]
	mov	r1, #208
	str	r8, [r3, #4]
	ldr	r2, [r4, #-132]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-132]
	ldr	r3, [r4, #-124]
	and	r3, r3, r7
	orr	r3, r3, r6
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, r8
	str	r0, [r4, #-128]
	beq	.L4429
	str	r5, [r0, #32]
	ldr	r2, [r4, #-128]
	movw	r3, #:lower16:bam_data_endless_tx_complete
	movt	r3, #:upper16:bam_data_endless_tx_complete
	str	r3, [r2, #28]
	ldr	r3, [r4, #-128]
	str	r8, [r3, #4]
	ldr	r2, [r4, #-128]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-128]
	ldr	r3, [r4, #-120]
	and	r3, r3, r7
	orr	r3, r3, r6
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	cmp	r3, r8
	beq	.L4445
	ldr	r6, .L4504+4
	ldrh	r2, [r6, #-14]
	tst	r2, #4
	bne	.L4497
.L4446:
	ldr	r0, [r3, #12]
	mov	r2, #32
	ldr	r1, [r4, #-132]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L4498
.L4447:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L4445
	ldr	r2, .L4504+8
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L4499
.L4449:
	ldr	r0, [r3, #8]
	mov	r2, #32
	ldr	r1, [r4, #-128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L4500
.L4445:
	ldr	r3, [r4, #-108]
	cmp	r3, #7
	bne	.L4501
.L4450:
	ldr	r0, .L4504+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L4502
.L4429:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4501:
	movw	r0, #:lower16:bam_data_peer_reset_cb
	mov	r1, r5
	movt	r0, #:upper16:bam_data_peer_reset_cb
	bl	usb_bam_register_peer_reset_cb
	mov	r0, #1
	bl	usb_bam_client_ready
	subs	r3, r0, #0
	beq	.L4450
	ldr	r2, .L4504+16
	movw	r0, #:lower16:.LC382
	movt	r0, #:upper16:.LC382
.L4487:
	mov	r1, r2
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L4493:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3508]
	str	r2, [r4, #-12]
	ldr	r3, [r3, #3524]
	str	r3, [r4, #-16]
	b	.L4435
.L4492:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3504]
	str	r2, [r4, #-12]
	ldr	r3, [r3, #3524]
	str	r3, [r4, #-16]
	b	.L4433
.L4431:
	bl	usb_bam_reset_complete
	ldrb	r0, [r4, #-116]	@ zero_extendqisi2
	sub	r1, r4, #124
	bl	usb_bam_connect
	subs	r2, r0, #0
	bne	.L4503
	ldrb	r0, [r4, #-115]	@ zero_extendqisi2
	sub	r1, r4, #120
	bl	usb_bam_connect
	subs	r2, r0, #0
	beq	.L4437
	ldr	r1, .L4504+16
	movw	r0, #:lower16:.LC369
	movt	r0, #:upper16:.LC369
.L4488:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L4490:
	ldr	r3, .L4504+16
	movw	r1, #:lower16:.LC375
	sub	r0, r2, #24
	movt	r1, #:upper16:.LC375
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4430
.L4502:
	ldr	r3, .L4504+16
	movw	r1, #:lower16:.LC383
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC383
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	mov	r2, r3
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__dynamic_pr_debug
.L4499:
	ldr	r3, .L4504+20
	movw	r1, #:lower16:.LC381
	sub	r0, r6, #8
	movt	r1, #:upper16:.LC381
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #-164]
	b	.L4449
.L4497:
	ldr	r3, .L4504+24
	movw	r1, #:lower16:.LC381
	sub	r0, r6, #32
	movt	r1, #:upper16:.LC381
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #-164]
	b	.L4446
.L4491:
	ldr	r2, .L4504+16
	movw	r0, #:lower16:.LC376
	movt	r0, #:upper16:.LC376
.L4485:
	mov	r1, r2
	b	.L4488
.L4496:
	ldr	r1, .L4504+16
	movw	r0, #:lower16:.LC380
	movt	r0, #:upper16:.LC380
.L4489:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L4486:
	movw	r0, #:lower16:.LC377
	ldr	r2, .L4504+16
	movt	r0, #:upper16:.LC377
	b	.L4487
.L4503:
	movw	r0, #:lower16:.LC368
	ldr	r1, .L4504+16
	movt	r0, #:upper16:.LC368
	b	.L4488
.L4500:
	movw	r0, #:lower16:.LC112
	ldr	r1, .L4504+20
	movt	r0, #:upper16:.LC112
	bl	printk
	b	.L4445
.L4495:
	movw	r0, #:lower16:.LC379
	ldr	r1, .L4504+16
	movt	r0, #:upper16:.LC379
	b	.L4489
.L4494:
	movw	r0, #:lower16:.LC378
	ldr	r2, .L4504+16
	movt	r0, #:upper16:.LC378
	b	.L4485
.L4498:
	movw	r0, #:lower16:.LC112
	ldr	r1, .L4504+24
	movt	r0, #:upper16:.LC112
	bl	printk
	b	.L4447
.L4505:
	.align	2
.L4504:
	.word	.LANCHOR4-3696
	.word	.LANCHOR4-3664
	.word	.LANCHOR4-3648
	.word	.LANCHOR4-3616
	.word	.LANCHOR3+3032
	.word	.LANCHOR3+3088
	.word	.LANCHOR3+3060
	.fnend
	.size	bam2bam_data_connect_work, .-bam2bam_data_connect_work
	.section	.rodata.str1.4
	.align	2
.LC384:
	.ascii	"%s: reset by peer\012\000"
	.align	2
.LC385:
	.ascii	"<3>%s: usb_ep_enable failed eptype:IN ep:%pK\000"
	.align	2
.LC386:
	.ascii	"<3>%s: usb_ep_enable failed eptype:OUT ep:%pK\000"
	.align	2
.LC387:
	.ascii	"<3>%s: BAM reset failed %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_peer_reset_cb, %function
gbam_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4538
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L4533
.L4507:
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L4508
	ldr	r2, [r3, #84]
	cmp	r2, #0
	beq	.L4508
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L4508
	ldr	r0, [r3, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r0, #0
	ldr	r3, [r3, #84]
	str	r0, [r3]
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #88]
	str	r0, [r3]
	bl	usb_bam_a2_reset
	subs	r2, r0, #0
	bne	.L4509
.L4514:
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, [r4, #12]
	bne	.L4534
	ldr	r3, [r3, #84]
	str	r4, [r3]
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, [r4, #12]
	bne	.L4535
	ldr	r3, [r3, #88]
	mov	r0, r4
	str	r4, [r3]
	bl	gbam_start_endless_rx
	mov	r0, r4
	bl	gbam_start_endless_tx
	ldr	r3, [r4, #132]
	cmp	r3, #6
	bne	.L4516
.L4537:
	ldr	r5, [r4]
	cmp	r5, #0
	bne	.L4516
	mov	r1, r5
	mov	r0, r5
	bl	usb_bam_register_peer_reset_cb
	b	.L4506
.L4508:
	mov	r0, #0
	bl	usb_bam_a2_reset
	subs	r2, r0, #0
	bne	.L4536
.L4513:
	ldr	r3, [r4, #132]
	cmp	r3, #6
	beq	.L4537
.L4516:
	mov	r5, #0
.L4506:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4533:
	movw	r1, #:lower16:.LC384
	ldr	r2, .L4538+4
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC384
	bl	__dynamic_pr_debug
	b	.L4507
.L4535:
	movw	r0, #:lower16:.LC386
	ldr	r1, .L4538+4
	movt	r0, #:upper16:.LC386
	ldr	r2, [r3, #88]
	bl	printk
	ldr	r3, [r4, #12]
	mov	r2, #0
	ldr	r3, [r3, #84]
	str	r2, [r3]
	b	.L4506
.L4509:
	movw	r0, #:lower16:.LC387
	ldr	r1, .L4538+4
	movt	r0, #:upper16:.LC387
	bl	printk
	b	.L4514
.L4534:
	movw	r0, #:lower16:.LC385
	ldr	r1, .L4538+4
	movt	r0, #:upper16:.LC385
	ldr	r2, [r3, #84]
	bl	printk
	b	.L4506
.L4536:
	movw	r0, #:lower16:.LC387
	ldr	r1, .L4538+4
	movt	r0, #:upper16:.LC387
	bl	printk
	b	.L4513
.L4539:
	.align	2
.L4538:
	.word	.LANCHOR4-3600
	.word	.LANCHOR3+3116
	.fnend
	.size	gbam_peer_reset_cb, .-gbam_peer_reset_cb
	.section	.rodata.str1.4
	.align	2
.LC388:
	.ascii	"%s: %s: reset by peer\012\000"
	.align	2
.LC389:
	.ascii	"<3>%s: %s: BAM reset failed %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_peer_reset_cb, %function
bam_data_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L4550
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L4548
.L4541:
	mov	r0, #0
	bl	usb_bam_a2_reset
	subs	r4, r0, #0
	bne	.L4549
	mov	r1, r4
	bl	usb_bam_register_peer_reset_cb
.L4540:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4548:
	ldr	r3, .L4550+4
	movw	r1, #:lower16:.LC388
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC388
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4541
.L4549:
	ldr	r2, .L4550+4
	movw	r0, #:lower16:.LC389
	mov	r3, r4
	movt	r0, #:upper16:.LC389
	mov	r1, r2
	bl	printk
	b	.L4540
.L4551:
	.align	2
.L4550:
	.word	.LANCHOR4-3568
	.word	.LANCHOR3+3136
	.fnend
	.size	bam_data_peer_reset_cb, .-bam_data_peer_reset_cb
	.section	.rodata.str1.4
	.align	2
.LC390:
	.ascii	"<3>Failed to allocate rmnet control device\012\000"
	.align	2
.LC391:
	.ascii	"&port->read_wq\000"
	.align	2
.LC392:
	.ascii	"<3>rmnet control driver failed to register\000"
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_init, %function
gqti_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L4555
	mov	r2, #56
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L4553
	movw	r0, #:lower16:.LC390
	mvn	r6, #11
	movt	r0, #:upper16:.LC390
	bl	printk
	b	.L4552
.L4555:
	mov	r4, #16
.L4553:
	mov	r5, #0
	add	r3, r4, #44
	ldr	r2, .L4560
	movw	r1, #:lower16:.LC391
	movw	r7, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LC391
	add	r0, r4, #32
	str	r5, [r4, #8]
	movt	r7, #:upper16:.LANCHOR1
	str	r5, [r4, #12]
	str	r5, [r4, #16]
	str	r5, [r4, #20]
	str	r5, [r4, #24]
	str	r5, [r4, #28]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r5, [r4, #52]
	bl	__init_waitqueue_head
	ldr	r0, .L4560+4
	str	r4, [r7, #3228]
	bl	misc_register
	subs	r6, r0, #0
	beq	.L4552
	movw	r0, #:lower16:.LC392
	movt	r0, #:upper16:.LC392
	bl	printk
	mov	r0, r4
	bl	kfree
	str	r5, [r7, #3228]
.L4552:
	mov	r0, r6
	pop	{r4, r5, r6, r7, r8, pc}
.L4561:
	.align	2
.L4560:
	.word	.LANCHOR1+3532
	.word	.LANCHOR0+636
	.fnend
	.size	gqti_ctrl_init, .-gqti_ctrl_init
	.section	.rodata.str1.4
	.align	2
.LC393:
	.ascii	"&dev->read_wq\000"
	.align	2
.LC394:
	.ascii	"&dev->write_wq\000"
	.align	2
.LC395:
	.ascii	"<3>USB accessory gadget driver failed to initialize"
	.ascii	"\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_init, %function
accessory_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #44]
	cmp	r0, #0
	beq	.L4565
	movw	r2, #1788
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4571
.L4563:
	mov	r5, #0
	movw	r1, #:lower16:.LC393
	ldr	r2, .L4573
	movt	r1, #:upper16:.LC393
	add	r0, r4, #1664
	str	r5, [r4, #88]
	mov	r6, #2560
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC394
	add	r0, r4, #1664
	ldr	r2, .L4573
	movt	r1, #:upper16:.LC394
	add	r0, r0, #12
	bl	__init_waitqueue_head
	add	r0, r4, #1648
	add	r2, r4, #1760
	str	r5, [r4, #1652]
	add	r0, r0, #8
	mov	ip, r2
	add	r3, r4, #1776
	add	r1, r4, #1696
	str	r0, [r4, #1656]
	add	ip, ip, #12
	add	r3, r3, #4
	str	r0, [r4, #1660]
	movw	r0, #:lower16:acc_start_work
	add	r2, r2, #4
	movt	r0, #:upper16:acc_start_work
	add	r1, r1, #8
	str	r6, [r4, #1700]
	str	r1, [r4, #1704]
	str	r0, [r4, #1712]
	add	r0, r4, #1712
	add	r0, r0, #4
	str	r1, [r4, #1708]
	mov	r1, r5
	str	r2, [r4, #1764]
	str	r2, [r4, #1768]
	mov	r2, r5
	movw	r5, #:lower16:.LANCHOR1
	str	ip, [r4, #1772]
	movt	r5, #:upper16:.LANCHOR1
	str	ip, [r4, #1776]
	str	r3, [r4, #1780]
	str	r3, [r4, #1784]
	bl	init_timer_key
	movw	r0, #:lower16:delayed_work_timer_fn
	add	r1, r4, #1696
	str	r6, [r4, #1748]
	add	r3, r4, #1744
	movw	r2, #:lower16:acc_hid_work
	str	r4, [r5, #2488]
	add	r3, r3, #8
	movt	r0, #:upper16:delayed_work_timer_fn
	add	r1, r1, #4
	movt	r2, #:upper16:acc_hid_work
	str	r0, [r4, #1732]
	ldr	r0, .L4573+4
	str	r1, [r4, #1736]
	str	r3, [r4, #1752]
	str	r3, [r4, #1756]
	str	r2, [r4, #1760]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4572
.L4562:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4565:
	mov	r4, #16
	b	.L4563
.L4571:
	mvn	r5, #11
	b	.L4562
.L4572:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC395
	movt	r0, #:upper16:.LC395
	bl	printk
	b	.L4562
.L4574:
	.align	2
.L4573:
	.word	.LANCHOR1+3532
	.word	.LANCHOR0+672
	.fnend
	.size	accessory_function_init, .-accessory_function_init
	.section	.rodata.str1.4
	.align	2
.LC396:
	.ascii	"<6>%s: initialize rndis QC instance\012\000"
	.align	2
.LC397:
	.ascii	"<3>%s: rndis QC driver failed to register\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_init, %function
rndis_qc_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L4577
	mov	r2, #272
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r4, #11
	bne	.L4577
.L4575:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4577:
	movw	r0, #:lower16:.LC396
	ldr	r1, .L4584
	movt	r0, #:upper16:.LC396
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	ldr	r0, .L4584+4
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #2492]
	bl	misc_register
	subs	r4, r0, #0
	beq	.L4575
	movw	r0, #:lower16:.LC397
	ldr	r1, .L4584
	movt	r0, #:upper16:.LC397
	bl	printk
	b	.L4575
.L4585:
	.align	2
.L4584:
	.word	.LANCHOR3+3160
	.word	.LANCHOR0+708
	.fnend
	.size	rndis_qc_function_init, .-rndis_qc_function_init
	.section	.rodata.str1.4
	.align	2
.LC398:
	.ascii	"&dev->intr_wq\000"
	.align	2
.LC399:
	.ascii	"f_mtp\000"
	.align	2
.LC400:
	.ascii	"<3>mtp gadget driver failed to initialize\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_init, %function
mtp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #32]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L4590
	mov	r2, #256
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4597
.L4587:
	mov	r5, #0
	movw	r1, #:lower16:.LC393
	ldr	r2, .L4599
	movt	r1, #:upper16:.LC393
	add	r0, r4, #132
	str	r5, [r4, #88]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC394
	ldr	r2, .L4599
	add	r0, r4, #144
	movt	r1, #:upper16:.LC394
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC398
	ldr	r2, .L4599
	add	r0, r4, #156
	movt	r1, #:upper16:.LC398
	bl	__init_waitqueue_head
	add	r2, r4, #116
	add	r1, r4, #124
	str	r5, [r4, #108]
	movw	r0, #:lower16:.LC399
	mov	r3, r5
	str	r5, [r4, #112]
	movt	r0, #:upper16:.LC399
	str	r2, [r4, #116]
	str	r2, [r4, #120]
	mov	r2, #1
	str	r1, [r4, #124]
	str	r1, [r4, #128]
	mov	r1, #10
	str	r5, [sp]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #180]
	beq	.L4592
	movw	r2, #:lower16:send_file_work
	movw	r3, #:lower16:receive_file_work
	ldr	r0, .L4599+4
	movt	r2, #:upper16:send_file_work
	mov	r1, #2560
	str	r4, [r6, #2500]
	add	ip, r4, #188
	movt	r3, #:upper16:receive_file_work
	str	r1, [r4, #184]
	str	r2, [r4, #196]
	add	r2, r4, #204
	str	ip, [r4, #188]
	str	ip, [r4, #192]
	str	r1, [r4, #200]
	str	r2, [r4, #204]
	str	r2, [r4, #208]
	str	r3, [r4, #212]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4598
.L4586:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4590:
	mov	r4, #16
	b	.L4587
.L4597:
	mvn	r5, #11
	b	.L4586
.L4598:
	ldr	r0, [r4, #180]
	bl	destroy_workqueue
.L4589:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #2500]
	bl	kfree
	movw	r0, #:lower16:.LC400
	movt	r0, #:upper16:.LC400
	bl	printk
	b	.L4586
.L4592:
	mvn	r5, #11
	b	.L4589
.L4600:
	.align	2
.L4599:
	.word	.LANCHOR1+3532
	.word	.LANCHOR0+744
	.fnend
	.size	mtp_function_init, .-mtp_function_init
	.section	.rodata.str1.4
	.align	2
.LC401:
	.ascii	"<3>adb gadget driver failed to initialize\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_init, %function
adb_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r4, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r4, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #4]
	beq	.L4603
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5, #4]
	beq	.L4606
.L4603:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L4607
	mov	r2, #164
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4606
.L4605:
	mov	r5, #0
	movw	r1, #:lower16:.LC393
	ldr	r2, .L4616
	movt	r1, #:upper16:.LC393
	add	r0, r4, #128
	str	r5, [r4, #88]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC394
	ldr	r2, .L4616
	add	r0, r4, #140
	movt	r1, #:upper16:.LC394
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	add	r3, r4, #120
	mov	r2, #1
	ldr	r0, .L4616+4
	str	r5, [r4, #108]
	str	r5, [r4, #112]
	str	r5, [r4, #116]
	str	r3, [r4, #120]
	str	r3, [r4, #124]
	strb	r2, [r4, #161]
	str	r4, [r6, #3404]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4615
.L4601:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4607:
	mov	r4, #16
	b	.L4605
.L4606:
	mvn	r5, #11
	b	.L4601
.L4615:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC401
	movt	r0, #:upper16:.LC401
	bl	printk
	b	.L4601
.L4617:
	.align	2
.L4616:
	.word	.LANCHOR1+3532
	.word	.LANCHOR0+780
	.fnend
	.size	adb_function_init, .-adb_function_init
	.section	.rodata.str1.4
	.align	2
.LC402:
	.ascii	"k_rmnet_mux_work\000"
	.align	2
.LC403:
	.ascii	"&smd_dev->smd_data.wait\000"
	.align	2
.LC404:
	.ascii	"&ctrl_dev->tx_wait_q\000"
	.align	2
.LC405:
	.ascii	"usb_rmnet_mux\000"
	.align	2
.LC406:
	.ascii	"<3>%s: failed to register misc device\012\000"
	.align	2
.LC407:
	.ascii	"%s: rmnet_mux_ctrl_device_init failed, err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_function_init, %function
rmnet_smd_sdio_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L4626
	mov	r2, #424
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4633
.L4619:
	mov	r5, #0
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC402
	mov	r3, r5
	movt	r0, #:upper16:.LC402
	str	r5, [sp]
	mov	r2, #1
	mov	r1, #10
	str	r4, [r6, #2480]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #376]
	beq	.L4628
	movw	r3, #:lower16:rmnet_mux_disconnect_work
	mov	r8, #2560
	str	r5, [r4, #176]
	movt	r3, #:upper16:rmnet_mux_disconnect_work
	add	r0, r4, #384
	str	r5, [r4, #364]
	movw	r1, #:lower16:rmnet_mux_smd_data_rx_tlet
	mov	r2, r4
	str	r5, [r4, #368]
	movt	r1, #:upper16:rmnet_mux_smd_data_rx_tlet
	str	r5, [r4, #372]
	add	r7, r4, #104
	str	r8, [r4, #380]
	str	r0, [r4, #384]
	str	r0, [r4, #388]
	add	r0, r4, #152
	str	r3, [r4, #392]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_mux_smd_data_tx_tlet
	mov	r2, r4
	movt	r1, #:upper16:rmnet_mux_smd_data_tx_tlet
	add	r0, r4, #132
	bl	tasklet_init
	movw	r1, #:lower16:.LC403
	ldr	r2, .L4635
	add	r0, r4, #180
	movt	r1, #:upper16:.LC403
	bl	__init_waitqueue_head
	mov	r3, r7
	movw	r2, #:lower16:rmnet_mux_sdio_data_rx_work
	movw	ip, #:lower16:rmnet_mux_open_sdio_work
	add	lr, r4, #112
	movt	ip, #:upper16:rmnet_mux_open_sdio_work
	add	r0, r4, #120
	str	r3, [r4, #104]
	add	r1, r4, #244
	movt	r2, #:upper16:rmnet_mux_sdio_data_rx_work
	str	r3, [r4, #108]
	add	r3, r4, #260
	str	lr, [r4, #112]
	add	r7, r4, #192
	str	lr, [r4, #116]
	str	r0, [r4, #120]
	str	r0, [r4, #124]
	add	r0, r4, #272
	str	r8, [r4, #240]
	str	r1, [r4, #244]
	str	r1, [r4, #248]
	mov	r1, r5
	str	r2, [r4, #252]
	mov	r2, r5
	str	r8, [r4, #256]
	add	r8, r4, #256
	str	r3, [r4, #260]
	str	r3, [r4, #264]
	str	ip, [r4, #268]
	bl	init_timer_key
	add	r3, r4, #200
	add	r1, r4, #224
	ldr	r2, .L4635
	movw	r0, #:lower16:delayed_work_timer_fn
	add	lr, r4, #216
	str	r7, [r4, #192]
	add	ip, r4, #312
	movt	r0, #:upper16:delayed_work_timer_fn
	str	r7, [r4, #196]
	str	r3, [r4, #200]
	str	r3, [r4, #204]
	add	r3, r4, #336
	str	r1, [r4, #224]
	str	r1, [r4, #228]
	movw	r1, #:lower16:.LC404
	movt	r1, #:upper16:.LC404
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	str	lr, [r4, #216]
	str	lr, [r4, #220]
	str	r5, [r4, #232]
	str	r5, [r4, #236]
	str	r0, [r4, #288]
	add	r0, r4, #320
	str	r8, [r4, #292]
	str	ip, [r4, #312]
	str	ip, [r4, #316]
	str	r3, [r4, #336]
	str	r3, [r4, #340]
	bl	__init_waitqueue_head
	ldr	r0, .L4635+4
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4622
	movw	r0, #:lower16:.LC405
	mov	r1, r5
	movt	r0, #:upper16:.LC405
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #3532]
	beq	.L4618
	cmn	r0, #4096
	bhi	.L4618
	ldr	ip, .L4635+8
	movw	r0, #:lower16:.LC268
	mov	r3, r4
	movt	r0, #:upper16:.LC268
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L4634
.L4618:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4626:
	mov	r4, #16
	b	.L4619
.L4628:
	mvn	r5, #11
.L4621:
	mov	r0, r4
	bl	kfree
	b	.L4618
.L4634:
	ldr	r0, [r6, #3532]
	bl	debugfs_remove
	str	r5, [r6, #3532]
	b	.L4618
.L4633:
	mvn	r5, #11
	b	.L4618
.L4622:
	movw	r0, #:lower16:.LC406
	ldr	r1, .L4635+12
	movt	r0, #:upper16:.LC406
	bl	printk
	ldr	r0, .L4635+16
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L4624
	movw	r1, #:lower16:.LC407
	ldr	r2, .L4635+20
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC407
	mov	r3, r5
	bl	__dynamic_pr_debug
.L4624:
	ldr	r0, [r4, #376]
	bl	destroy_workqueue
	b	.L4621
.L4636:
	.align	2
.L4635:
	.word	.LANCHOR1+3532
	.word	.LANCHOR0+816
	.word	.LANCHOR3+3224
	.word	.LANCHOR3+3176
	.word	.LANCHOR4-3552
	.word	.LANCHOR3+3204
	.fnend
	.size	rmnet_smd_sdio_function_init, .-rmnet_smd_sdio_function_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_cleanup, %function
gqti_ctrl_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L4639
	bl	misc_deregister
	ldr	r0, [r4, #3228]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #3228]
	pop	{r4, pc}
.L4640:
	.align	2
.L4639:
	.word	.LANCHOR0+636
	.fnend
	.size	gqti_ctrl_cleanup, .-gqti_ctrl_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_cleanup, %function
accessory_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	ldr	r0, .L4643
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	bl	misc_deregister
	ldr	r0, [r4, #2488]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #2488]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4644:
	.align	2
.L4643:
	.word	.LANCHOR0+672
	.fnend
	.size	accessory_function_cleanup, .-accessory_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_cleanup, %function
ncm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L4647
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	misc_deregister
	ldr	r0, [r4, #3536]
	bl	kfree
	ldr	r0, [r5, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r5, #4]
	str	r3, [r4, #3536]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4648:
	.align	2
.L4647:
	.word	.LANCHOR0+852
	.fnend
	.size	ncm_function_cleanup, .-ncm_function_cleanup
	.section	.rodata.str1.4
	.align	2
.LC408:
	.ascii	"<6>%s: rndis QC cleanup\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_cleanup, %function
rndis_qc_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC408
	ldr	r1, .L4651
	movt	r0, #:upper16:.LC408
	bl	printk
	ldr	r0, .L4651+4
	bl	misc_deregister
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	ldr	r0, [r4, #4]
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #2496]
	pop	{r4, lr}
	b	kfree
.L4652:
	.align	2
.L4651:
	.word	.LANCHOR3+3332
	.word	.LANCHOR0+708
	.fnend
	.size	rndis_qc_function_cleanup, .-rndis_qc_function_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_cleanup, %function
mtp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r5, [r4, #2500]
	str	lr, [sp, #12]
	cmp	r5, #0
	beq	.L4653
	ldr	r0, .L4656
	bl	misc_deregister
	ldr	r0, [r5, #180]
	bl	destroy_workqueue
	mov	r3, #0
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	str	r3, [r4, #2500]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree
.L4653:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4657:
	.align	2
.L4656:
	.word	.LANCHOR0+744
	.fnend
	.size	mtp_function_cleanup, .-mtp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_cleanup, %function
ccid_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	str	lr, [sp, #4]
	add	r0, r4, #888
	bl	misc_deregister
	add	r0, r4, #924
	bl	misc_deregister
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r0, [r3, #3400]
	b	kfree
	.fnend
	.size	ccid_function_cleanup, .-ccid_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_cleanup, %function
adb_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L4662
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	misc_deregister
	ldr	r0, [r4, #3404]
	bl	kfree
	mov	r3, #0
	ldr	r0, [r5, #4]
	ldr	r6, [sp, #8]
	str	r3, [r4, #3404]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L4663:
	.align	2
.L4662:
	.word	.LANCHOR0+780
	.fnend
	.size	adb_function_cleanup, .-adb_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_function_cleanup, %function
rmnet_smd_sdio_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r4, [r3, #2480]
	ldr	r0, [r3, #3532]
	bl	debugfs_remove_recursive
	ldr	r0, .L4666
	bl	misc_deregister
	ldr	r0, [r4, #128]
	bl	smd_close
	ldr	r0, [r4, #376]
	bl	destroy_workqueue
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L4667:
	.align	2
.L4666:
	.word	.LANCHOR0+816
	.fnend
	.size	rmnet_smd_sdio_function_cleanup, .-rmnet_smd_sdio_function_cleanup
	.section	.rodata.str1.4
	.align	2
.LC409:
	.ascii	"<6>%s: Enter\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_cleanup, %function
mbim_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movw	r0, #:lower16:.LC409
	ldr	r6, .L4673
	mov	r5, #0
	movw	r4, #:lower16:.LANCHOR1
	ldr	r1, .L4673+4
	movt	r0, #:upper16:.LC409
	mov	r7, r5
	movt	r4, #:upper16:.LANCHOR1
	bl	printk
.L4669:
	ldr	r3, [r4, #3548]
	add	r6, r6, #8
	cmp	r3, r5
	bls	.L4672
	ldr	r0, [r6, #-8]
	add	r5, r5, #1
	bl	kfree
	str	r7, [r6, #-8]
	b	.L4669
.L4672:
	ldr	r0, .L4673+8
	str	r7, [r4, #3548]
	bl	misc_deregister
	str	r7, [r4, #2504]
	pop	{r4, r5, r6, r7, r8, pc}
.L4674:
	.align	2
.L4673:
	.word	.LANCHOR1+3540
	.word	.LANCHOR3+3352
	.word	.LANCHOR0+960
	.fnend
	.size	mbim_function_cleanup, .-mbim_function_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_io_complete, %function
ffs_epfile_io_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L4675
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L4675
	ldr	r2, [r1, #32]
	cmp	r2, #0
	beq	.L4675
	ldr	r2, [r1, #44]
	cmp	r2, #0
	ldreq	r2, [r1, #48]
	str	r2, [r3, #24]
	ldr	r0, [r1, #32]
	b	complete
.L4675:
	bx	lr
	.fnend
	.size	ffs_epfile_io_complete, .-ffs_epfile_io_complete
	.section	.rodata.str1.4
	.align	2
.LC410:
	.ascii	"gmidi_transmit: midi_alloc_ep_request failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_transmit, %function
f_midi_transmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #88]
	.pad #20
	sub	sp, sp, #20
	cmp	r3, #0
	str	r3, [sp, #4]
	beq	.L4687
	cmp	r1, #0
	mov	r10, r0
	mov	r5, r1
	beq	.L4733
.L4689:
	movw	r3, #:lower16:f_midi_complete
	mov	r1, #0
	movt	r3, #:upper16:f_midi_complete
	mov	r2, r1
	add	r7, r10, #100
	add	fp, r10, #164
	str	r1, [r5, #4]
	str	r3, [r5, #28]
	b	.L4720
.L4690:
	cmp	fp, r7
	beq	.L4734
.L4720:
	ldr	r4, [r7, #132]
	ldr	r6, [r7, #4]!
	cmp	r4, #0
	beq	.L4690
	ldr	r3, [r4, #4]
	cmp	r6, #0
	cmpne	r3, #0
	beq	.L4690
	ldr	r1, [r10, #336]
	add	r3, r2, #3
	cmp	r1, r3
	bls	.L4690
	mov	r8, #1
	b	.L4719
.L4736:
	ldm	r5, {r0, r2}
	orr	r3, r3, #15
	mov	ip, #0
	strb	r3, [r0, r2]
	add	r3, r0, r2
	add	r2, r2, #4
	strb	r1, [r3, #1]
	strb	ip, [r3, #2]
	strb	ip, [r3, #3]
	str	r2, [r5, #4]
.L4693:
	ldr	r3, [r10, #336]
	add	r1, r2, #3
	cmp	r1, r3
	bcs	.L4690
.L4719:
	mov	r2, #1
	add	r1, sp, #15
	mov	r0, r6
	bl	snd_rawmidi_transmit
	cmp	r0, #1
	bne	.L4735
	ldrb	r3, [r4, #8]	@ zero_extendqisi2
	ldrb	r1, [sp, #15]	@ zero_extendqisi2
	lsl	r3, r3, #4
	cmp	r1, #247
	uxtb	r3, r3
	bhi	.L4736
	cmp	r1, #239
	bhi	.L4737
	tst	r1, #128
	bne	.L4738
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	sub	r2, r2, #1
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L4732
.L4709:
	.word	.L4714
	.word	.L4713
	.word	.L4712
	.word	.L4711
	.word	.L4710
	.word	.L4708
.L4708:
	ldr	r0, [r5]
	orr	r3, r3, #4
	ldr	r9, [r5]
	ldr	r2, [r5, #4]
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	add	r0, r0, r2
	strb	r3, [r9, r2]
	add	r2, r2, #4
	mov	r3, #4
	strb	lr, [r0, #1]
	strb	ip, [r0, #2]
	strb	r1, [r0, #3]
	str	r2, [r5, #4]
	strb	r3, [r4, #9]
.L4732:
	ldr	r2, [r5, #4]
	b	.L4693
.L4710:
	mov	r3, #6
	strb	r3, [r4, #9]
	strb	r1, [r4, #11]
	ldr	r2, [r5, #4]
	b	.L4693
.L4711:
	mov	r3, #5
	strb	r3, [r4, #9]
	strb	r1, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4693
.L4712:
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	ldrb	lr, [r4, #11]	@ zero_extendqisi2
	cmp	ip, #239
	movls	r2, #2
	movhi	r2, #0
	orrls	r3, r3, ip, lsr #4
	orrhi	r3, r3, #3
	strb	r2, [r4, #9]
	ldr	r0, [r5]
	ldr	r9, [r5]
	ldr	r2, [r5, #4]
	add	r0, r0, r2
	strb	r3, [r9, r2]
	add	r2, r2, #4
	strb	ip, [r0, #1]
	strb	lr, [r0, #2]
	strb	r1, [r0, #3]
	str	r2, [r5, #4]
	b	.L4693
.L4713:
	mov	r3, #3
	strb	r3, [r4, #9]
	strb	r1, [r4, #11]
	ldr	r2, [r5, #4]
	b	.L4693
.L4714:
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	mov	lr, #0
	cmp	ip, #239
	movhi	r2, #0
	orrls	r3, r3, ip, lsr #4
	orrhi	r3, r3, #2
	strbhi	r2, [r4, #9]
	ldm	r5, {r0, r2}
	strb	r3, [r0, r2]
	add	r3, r0, r2
	add	r2, r2, #4
	strb	ip, [r3, #1]
	strb	r1, [r3, #2]
	strb	lr, [r3, #3]
	str	r2, [r5, #4]
	b	.L4693
.L4737:
	sub	r2, r1, #241
	cmp	r2, #6
	ldrls	pc, [pc, r2, asl #2]
	b	.L4695
.L4697:
	.word	.L4700
	.word	.L4701
	.word	.L4700
	.word	.L4704
	.word	.L4704
	.word	.L4698
	.word	.L4696
.L4703:
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	orr	r3, r3, #7
	mvn	r0, #8
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	ldr	r2, [r5]
	ldr	r1, [r5, #4]
.L4731:
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	lr, [r3, #1]
	strb	ip, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
.L4704:
	mov	r3, #0
	strb	r3, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L4693
.L4701:
	mov	r2, #2
	mvn	r3, #13
	strb	r2, [r4, #9]
	strb	r3, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4693
.L4700:
	strb	r8, [r4, #9]
	strb	r1, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4693
.L4696:
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L4702
	cmp	r2, #6
	beq	.L4703
	cmp	r2, #4
	bne	.L4704
	ldr	r2, [r5]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r1, [r5, #4]
	mvn	ip, #8
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	mov	r3, #0
	str	r1, [r5, #4]
	strb	r3, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L4693
.L4698:
	ldr	r2, [r5]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r1, [r5, #4]
	mvn	ip, #9
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
	strb	r0, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L4693
.L4738:
	add	r3, r1, #64
	strb	r1, [r4, #10]
	uxtb	r3, r3
	cmp	r3, #31
	movhi	r3, #2
	strbls	r0, [r4, #9]
	strbhi	r3, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L4693
.L4735:
	mov	r3, #0
	cmp	fp, r7
	str	r3, [r4, #4]
	ldr	r2, [r5, #4]
	bne	.L4720
.L4734:
	cmp	r2, #0
	beq	.L4721
	ldr	r0, [sp, #4]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
.L4687:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4721:
	ldr	r0, [r5]
	bl	kfree
	ldr	r0, [sp, #4]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	b	.L4687
.L4702:
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	orr	r3, r3, #6
	mvn	ip, #8
	mov	r0, #0
	ldr	r2, [r5]
	ldr	r1, [r5, #4]
	b	.L4731
.L4733:
	mov	r0, r3
	ldr	r1, [r10, #336]
	bl	midi_alloc_ep_req
	subs	r5, r0, #0
	bne	.L4689
	ldr	r0, [r10, #84]
	movw	r1, #:lower16:.LC410
	movt	r1, #:upper16:.LC410
	add	r0, r0, #32
	bl	dev_err
	b	.L4687
.L4695:
	mov	r2, #5
	mvn	r3, #15
	strb	r2, [r4, #9]
	strb	r3, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4693
	.fnend
	.size	f_midi_transmit, .-f_midi_transmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_tasklet, %function
f_midi_in_tasklet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r1, #0
	b	f_midi_transmit
	.fnend
	.size	f_midi_in_tasklet, .-f_midi_in_tasklet
	.section	.rodata.str1.4
	.align	2
.LC411:
	.ascii	"snd_card_create() failed\012\000"
	.align	2
.LC412:
	.ascii	"snd_device_new() failed: error %d\012\000"
	.align	2
.LC415:
	.ascii	"MIDI\000"
	.align	2
.LC416:
	.ascii	"snd_rawmidi_new() failed: error %d\012\000"
	.align	2
.LC417:
	.ascii	"snd_card_register() failed\012\000"
	.align	2
.LC413:
	.ascii	"MIDI Gadget\000"
	.align	2
.LC414:
	.ascii	"f_midi\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_register_card, %function
f_midi_register_card:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #16
	sub	sp, sp, #16
	add	r2, sp, #8
	str	r2, [sp]
	mov	r2, r3
	ldr	r0, [r0, #328]
	ldr	r1, [r5, #332]
	bl	snd_card_create
	subs	r4, r0, #0
	blt	.L4751
	ldr	r0, [sp, #8]
	mov	r2, r5
	mov	r1, #8192
	ldr	r3, .L4755
	str	r0, [r5, #96]
	bl	snd_device_new
	subs	r4, r0, #0
	blt	.L4752
	movw	r3, #:lower16:.LC413
	movw	r2, #:lower16:.LC414
	ldr	r0, [sp, #8]
	movt	r2, #:upper16:.LC414
	movt	r3, #:upper16:.LC413
	ldrb	r4, [r2, #6]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC415
	ldrh	r6, [r2, #4]
	movt	r1, #:upper16:.LC415
	ldr	ip, [r3]
	ldr	lr, [r2]
	ldrd	r2, [r3, #4]
	str	ip, [r0, #20]	@ unaligned
	strh	r6, [r0, #40]	@ unaligned
	str	r2, [r0, #24]	@ unaligned
	str	r3, [r0, #28]	@ unaligned
	str	lr, [r0, #36]	@ unaligned
	strb	r4, [r0, #42]
	str	ip, [r0, #68]	@ unaligned
	str	r2, [r0, #72]	@ unaligned
	str	r3, [r0, #76]	@ unaligned
	bl	snd_component_add
	ldr	r0, [sp, #8]
	add	r3, sp, #12
	mov	r2, #0
	ldr	ip, [r5, #320]
	str	r3, [sp, #4]
	ldr	r3, [r5, #324]
	add	r1, r0, #68
	str	ip, [sp]
	bl	snd_rawmidi_new
	subs	r4, r0, #0
	blt	.L4753
	ldr	r1, [sp, #8]
	ldr	r4, [sp, #12]
	add	r1, r1, #36
	add	r0, r4, #84
	str	r4, [r5, #100]
	bl	strcpy
	mov	r3, #7
	mov	r0, r4
	ldr	r2, .L4755+4
	mov	r1, #0
	str	r3, [r4, #16]
	str	r5, [r4, #200]
	bl	snd_rawmidi_set_ops
	ldr	r2, .L4755+8
	mov	r1, #1
	ldr	r0, [sp, #12]
	bl	snd_rawmidi_set_ops
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r4, r0, #0
	movge	r4, #0
	blt	.L4754
.L4740:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4751:
	ldr	r0, [r5, #84]
	movw	r1, #:lower16:.LC411
	movt	r1, #:upper16:.LC411
	add	r0, r0, #32
	bl	dev_err
.L4742:
	ldr	r0, [r5, #96]
	cmp	r0, #0
	beq	.L4740
	bl	snd_card_free
	mov	r3, #0
	str	r3, [r5, #96]
	b	.L4740
.L4753:
	ldr	r0, [r5, #84]
	movw	r1, #:lower16:.LC416
	mov	r2, r4
	movt	r1, #:upper16:.LC416
	add	r0, r0, #32
	bl	dev_err
	b	.L4742
.L4752:
	ldr	r0, [r5, #84]
	movw	r1, #:lower16:.LC412
	mov	r2, r4
	movt	r1, #:upper16:.LC412
	add	r0, r0, #32
	bl	dev_err
	b	.L4742
.L4754:
	ldr	r0, [r5, #84]
	movw	r1, #:lower16:.LC417
	movt	r1, #:upper16:.LC417
	add	r0, r0, #32
	bl	dev_err
	b	.L4742
.L4756:
	.align	2
.L4755:
	.word	.LANCHOR0+996
	.word	.LANCHOR0+1008
	.word	.LANCHOR0+1024
	.fnend
	.size	f_midi_register_card, .-f_midi_register_card
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_trigger, %function
f_midi_in_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #12]
	ldr	r2, [r0, #28]
	add	r3, r3, #58
	ldr	r2, [r2, #200]
	ldr	r3, [r2, r3, lsl #2]
	cmp	r3, #0
	bxeq	lr
	cmp	r1, #0
	str	r1, [r3, #4]
	bxeq	lr
	add	r1, r2, #304
	mov	r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r4, r2, #300
	str	lr, [sp, #4]
	bl	_test_and_set_bit
	cmp	r0, #0
	beq	.L4768
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4768:
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	__tasklet_hi_schedule
	.fnend
	.size	f_midi_in_trigger, .-f_midi_in_trigger
	.section	.rodata.str1.4
	.align	2
.LC418:
	.ascii	"<3>usb:%s tx queue err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	tx_complete, %function
tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L4804
	ldr	r2, [r4, #4]
	cmp	r2, #0
	beq	.L4804
	ldr	r3, [r1, #44]
	mov	r5, r1
	ldr	r7, [r4, #8]
	cmn	r3, #104
	beq	.L4790
	cmp	r3, #0
	beq	.L4773
	cmn	r3, #108
	beq	.L4790
	ldr	r3, [r7, #252]
	add	r3, r3, #1
	str	r3, [r7, #252]
	ldr	r2, [r4, #8]
.L4772:
	ldr	r3, [r2, #236]
	add	r6, r4, #16
	add	r8, r4, #20
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r2, #236]
	bl	_raw_spin_lock
	mov	r2, r8
	add	r0, r5, #36
	ldr	r1, [r4, #24]
	bl	__list_add
	ldr	r3, [r4, #4]
	ldr	r9, [r5, #32]
	ldrb	r10, [r3, #124]	@ zero_extendqisi2
	cmp	r10, #0
	bne	.L4805
.L4788:
	mov	r3, #0
	str	r3, [r5]
.L4783:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r9
	bl	dev_kfree_skb_any
.L4782:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #160]
	tst	r2, #4
	beq	.L4806
.L4769:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4805:
	cmp	r9, #0
	beq	.L4807
	ldr	r0, [r4, #48]
	cmp	r0, #0
	beq	.L4788
	movw	r1, #32800
	bl	__kmalloc
	mov	r3, #0
	str	r0, [r5]
	str	r3, [r5, #32]
	b	.L4783
.L4773:
	ldrb	r2, [r1, #26]	@ zero_extendqisi2
	ldr	r3, [r1, #4]
	ldr	r1, [r7, #244]
	tst	r2, #2
	subeq	r3, r3, #1
	add	r3, r3, r1
	str	r3, [r7, #244]
	ldr	r2, [r4, #8]
	b	.L4772
.L4804:
	ldr	r3, [r3, #8]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r3, [r3, #12]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L4790:
	mov	r2, r7
	b	.L4772
.L4806:
	ldr	r4, [r3, #576]
	mov	r0, #0
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L4769
	ldr	r0, [r4, #4]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__netif_schedule
.L4807:
	ldr	r3, [r4, #40]
	sub	r3, r3, #1
	str	r3, [r4, #40]
	str	r9, [r5, #4]
	ldr	r5, [r4, #20]
	cmp	r8, r5
	beq	.L4803
	ldr	r3, [r4, #4]
	mov	r0, r5
	ldr	r9, [r3, #88]
	bl	list_del
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r3, [r5, #-32]
	cmp	r3, #0
	beq	.L4778
	ldr	r2, [r4, #4]
	ldrb	r1, [r2, #104]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L4779
	ldr	r2, [r2, #112]
	cmp	r3, r2
	movne	r10, r1
	bne	.L4779
	ldrh	r2, [r9, #20]
	sdiv	r10, r3, r2
	mls	r10, r2, r10, r3
	subs	r10, r10, #0
	movne	r10, #1
.L4779:
	ldrb	r2, [r5, #-10]	@ zero_extendqisi2
	bfi	r2, r10, #1, #1
	tst	r2, #2
	uxtb	r1, r2
	strb	r2, [r5, #-10]
	beq	.L4780
	ldrb	r2, [r4, #124]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L4780
	ldrh	r0, [r9, #20]
	sdiv	r2, r3, r0
	mls	r2, r0, r2, r3
	cmp	r2, #0
	bne	.L4780
	bfi	r1, r2, #1, #1
	add	r3, r3, #1
	strb	r1, [r5, #-10]
.L4780:
	str	r3, [r5, #-32]
	ldr	r3, [r9, #8]
	mov	r2, #32
	mov	r0, r9
	sub	r1, r5, #36
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L4808
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #40]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #40]
	bl	_raw_spin_unlock
	movw	r3, #:lower16:jiffies
	movt	r3, #:upper16:jiffies
	ldr	r3, [r3]
	str	r3, [r7, #604]
	b	.L4782
.L4778:
	mov	r0, r6
.L4802:
	bl	_raw_spin_lock
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #24]
	bl	__list_add
.L4803:
	mov	r0, r6
	bl	_raw_spin_unlock
	b	.L4782
.L4808:
	movw	r0, #:lower16:.LC418
	ldr	r1, .L4809
	movt	r0, #:upper16:.LC418
	bl	printk
	mov	r3, #0
	mov	r0, r6
	str	r3, [r5, #-32]
	b	.L4802
.L4810:
	.align	2
.L4809:
	.word	.LANCHOR3+3368
	.fnend
	.size	tx_complete, .-tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_open, %function
eth_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #1160]
	ldr	r3, [r0, #160]
	tst	r3, #4
	beq	.L4826
.L4813:
	add	r5, r4, #1152
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L4815
	ldr	r3, [r0, #112]
	cmp	r3, #0
	beq	.L4815
	blx	r3
.L4815:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4826:
	bl	netif_carrier_off
	ldr	r0, [r4, #1160]
	bl	netif_carrier_on
	ldr	r3, [r4, #1160]
	mov	r0, #0
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L4813
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L4813
	.fnend
	.size	eth_qc_open, .-eth_qc_open
	.section	.rodata.str1.4
	.align	2
.LC419:
	.ascii	"<3>invalid rndis pkt: skblen:%u hdr_len:%u\000"
	.align	2
.LC420:
	.ascii	"<3>invalid rndis message: %d/%d/%d/%d, len:%d\012\000"
	.align	2
.LC421:
	.ascii	"<3>%s:skb clone failed\012\000"
	.text
	.align	2
	.global	rndis_rm_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_rm_hdr, %function
rndis_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	mov	r8, r2
	movt	r9, #:upper16:.LANCHOR1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	ip, [r1, #80]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r9, #3552]
	cmp	ip, r3
	strhi	ip, [r9, #3552]
	bhi	.L4829
	cmp	ip, #0
	beq	.L4841
.L4829:
	mov	r7, #0
	b	.L4839
.L4847:
	cmp	r2, r6
	beq	.L4836
	bl	skb_clone
	mov	r5, r0
	sub	r1, r10, #44
	cmp	r5, #0
	mov	r0, r4
	beq	.L4844
	bl	skb_pull
	mov	r1, r6
	mov	r0, r5
	bl	skb_trim
	mov	r1, r5
	mov	r0, r8
	bl	skb_queue_tail
	ldr	ip, [r4, #80]
	cmp	ip, #0
	beq	.L4830
.L4839:
	cmp	ip, #43
	mov	r0, r4
	add	r7, r7, #1
	bls	.L4845
	ldr	r1, [r4, #172]
	ldr	r10, [r1, #4]	@ unaligned
	ldr	r3, [r1, #8]	@ unaligned
	ldr	r6, [r1, #12]	@ unaligned
	ldr	lr, [r1]	@ unaligned
	cmp	r10, ip
	add	r1, r3, #8
	add	r2, r3, r6
	bhi	.L4833
	add	r2, r2, #8
	cmp	r2, r10
	bhi	.L4833
	cmp	lr, #1
	bne	.L4846
	bl	skb_pull
	ldr	r3, [r4, #80]
	mov	r1, #32
	mov	r0, r4
	cmp	r3, r6
	sub	r2, r3, #1
	bne	.L4847
.L4836:
	mov	r1, r6
	mov	r0, r4
	bl	skb_trim
.L4830:
	ldr	r3, [r9, #3556]
	mov	r0, r8
	mov	r1, r4
	cmp	r3, r7
	strlt	r7, [r9, #3556]
	bl	skb_queue_tail
	mov	r0, #0
.L4827:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4841:
	mov	r7, ip
	b	.L4830
.L4844:
	movw	r0, #:lower16:.LC421
	ldr	r1, .L4848
	movt	r0, #:upper16:.LC421
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #11
	b	.L4827
.L4846:
	movw	r0, #:lower16:.LC420
	mov	r2, r10
	stm	sp, {r6, ip}
	mov	r1, lr
	movt	r0, #:upper16:.LC420
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L4827
.L4833:
	movw	r0, #:lower16:.LC420
	mov	r2, r10
	stm	sp, {r6, ip}
	mov	r1, lr
	movt	r0, #:upper16:.LC420
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #74
	b	.L4827
.L4845:
	movw	r0, #:lower16:.LC419
	mov	r1, ip
	mov	r2, #44
	movt	r0, #:upper16:.LC419
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L4827
.L4849:
	.align	2
.L4848:
	.word	.LANCHOR3+3380
	.fnend
	.size	rndis_rm_hdr, .-rndis_rm_hdr
	.align	2
	.global	rndis_qc_rm_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_rm_hdr, %function
rndis_qc_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r1, #172]
	ldr	r3, [r6]	@ unaligned
	cmp	r3, #1
	bne	.L4855
	ldr	r1, [r6, #8]	@ unaligned
	mov	r0, r4
	mov	r5, r2
	add	r1, r1, #8
	bl	skb_pull
	cmp	r0, #0
	beq	.L4856
	ldr	r1, [r6, #12]	@ unaligned
	mov	r0, r4
	bl	skb_trim
	mov	r0, r5
	mov	r1, r4
	bl	skb_queue_tail
	mov	r0, #0
.L4850:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4855:
	mov	r0, r1
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L4850
.L4856:
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #74
	b	.L4850
	.fnend
	.size	rndis_qc_rm_hdr, .-rndis_qc_rm_hdr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_open, %function
rndis_proc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-20]
	mov	r2, r1
	movw	r1, #:lower16:rndis_proc_show
	mov	r0, r2
	movt	r1, #:upper16:rndis_proc_show
	ldr	r2, [r3, #44]
	b	single_open
	.fnend
	.size	rndis_proc_open, .-rndis_proc_open
	.section	.rodata.str1.4
	.align	2
.LC422:
	.ascii	"y\000"
	.align	2
.LC423:
	.ascii	"n\000"
	.align	2
.LC424:
	.ascii	"?\000"
	.align	2
.LC425:
	.ascii	"connected\000"
	.align	2
.LC426:
	.ascii	"disconnected\000"
	.align	2
.LC427:
	.ascii	"Config Nr. %d\012used      : %s\012state     : %s\012"
	.ascii	"medium    : 0x%08X\012speed     : %d\012cable     :"
	.ascii	" %s\012vendor ID : 0x%08X\012vendor    : %s\012ul-m"
	.ascii	"ax-xfer-size:%d max-xfer-size-rcvd: %d\012ul-max-pk"
	.ascii	"ts-per-xfer:%d max-pkts-per-xfer-rcvd:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_show, %function
rndis_proc_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r1, #:lower16:.LC423
	movw	r3, #:lower16:.LC422
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC423
	movt	r3, #:upper16:.LC422
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	ip, [r0, #76]
	.pad #44
	sub	sp, sp, #44
	ldrb	r4, [ip, #1]	@ zero_extendqisi2
	ldr	lr, [ip, #4]
	ldrb	r2, [ip]	@ zero_extendqisi2
	cmp	r4, #0
	moveq	r3, r1
	cmp	lr, #2
	movwhi	r7, #:lower16:.LC424
	movthi	r7, #:upper16:.LC424
	bhi	.L4860
	movw	r1, #:lower16:.LANCHOR3
	movt	r1, #:upper16:.LANCHOR3
	add	r1, r1, lr, lsl #2
	ldr	r7, [r1, #3396]
.L4860:
	ldr	r8, [ip, #8]
	ldr	r1, [ip, #16]
	cmp	r1, #0
	bne	.L4864
	ldr	r1, [ip, #12]
	mov	r6, #100
	movw	r5, #:lower16:.LC425
	movt	r5, #:upper16:.LC425
	mul	r6, r6, r1
.L4861:
	movw	lr, #:lower16:.LANCHOR1
	ldrb	r4, [ip, #36]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC427
	movt	lr, #:upper16:.LANCHOR1
	movt	r1, #:upper16:.LC427
	ldr	r9, [lr, #3552]
	ldr	lr, [lr, #3556]
	str	r9, [sp, #28]
	str	r4, [sp, #32]
	str	lr, [sp, #36]
	ldr	lr, [ip, #28]
	ldr	lr, [lr, #356]
	add	lr, lr, #80
	mul	lr, r4, lr
	str	lr, [sp, #24]
	ldr	lr, [ip, #40]
	str	lr, [sp, #20]
	ldr	ip, [ip, #32]
	stm	sp, {r7, r8}
	str	r6, [sp, #8]
	str	r5, [sp, #12]
	str	ip, [sp, #16]
	bl	seq_printf
	mov	r0, #0
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4864:
	movw	r5, #:lower16:.LC426
	mov	r6, #0
	movt	r5, #:upper16:.LC426
	b	.L4861
	.fnend
	.size	rndis_proc_show, .-rndis_proc_show
	.section	.rodata.str1.4
	.align	2
.LC428:
	.ascii	"<3>acc_complete_set_hid_report_desc, err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_set_hid_report_desc, %function
acc_complete_set_hid_report_desc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	ldr	r3, [r1, #44]
	ldr	r5, [r1, #48]
	ldr	r6, [r4, #12]
	cmp	r3, #0
	bne	.L4870
	ldr	r0, [r4, #20]
	mov	r2, r5
	ldr	r3, [r4, #28]
	ldr	r1, [r1]
	add	r0, r0, r3
	bl	memcpy
	ldr	r3, [r4, #24]
	ldr	r2, [r4, #28]
	add	r5, r5, r2
	cmp	r5, r3
	str	r5, [r4, #28]
	beq	.L4871
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4871:
	add	r0, r6, #1744
	ldrd	r4, [sp]
	add	r0, r0, #4
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	schedule_work
.L4870:
	movw	r0, #:lower16:.LC428
	mov	r1, r3
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC428
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
	.fnend
	.size	acc_complete_set_hid_report_desc, .-acc_complete_set_hid_report_desc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_register_hid, %function
acc_register_hid:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	subs	r6, r2, #0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L4884
	add	r8, r0, #88
	mov	r9, r0
	mov	r0, r8
	mov	r4, r1
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r9, #1764]
	add	r2, r9, #1760
	mov	r7, r0
	add	r2, r2, #4
	cmp	r2, r3
	mov	r5, r3
	bne	.L4876
	b	.L4874
.L4895:
	ldr	r3, [r3]
	cmp	r2, r3
	mov	r5, r3
	beq	.L4874
.L4876:
	ldr	ip, [r3, #16]
	cmp	r4, ip
	bne	.L4895
	cmp	r3, #0
	beq	.L4874
.L4877:
	mov	r0, r5
	bl	__list_del_entry
	add	r1, r9, #1776
	mov	r0, r5
	ldr	r2, [r9, #1780]
	add	r1, r1, #4
	bl	__list_add
.L4878:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L4885
	mov	r2, #32
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L4882
.L4881:
	movw	r1, #32800
	mov	r0, r6
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5, #20]
	beq	.L4896
	add	r1, r9, #1760
	mov	r0, r5
	str	r9, [r5, #12]
	add	r1, r1, #12
	str	r4, [r5, #16]
	str	r6, [r5, #24]
	ldr	r2, [r9, #1772]
	bl	__list_add
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	add	r0, r9, #1744
	add	r0, r0, #4
	bl	schedule_work
	mov	r0, #0
.L4872:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4885:
	mov	r5, #16
	b	.L4881
.L4874:
	ldr	r3, [r9, #1772]
	add	r1, r9, #1760
	add	r1, r1, #12
	cmp	r1, r3
	mov	r5, r3
	bne	.L4880
	b	.L4878
.L4897:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r5, r3
	beq	.L4878
.L4880:
	ldr	r2, [r3, #16]
	cmp	r4, r2
	bne	.L4897
	cmp	r3, #0
	beq	.L4878
	b	.L4877
.L4896:
	mov	r0, r5
	bl	kfree
.L4882:
	mov	r0, r8
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
	b	.L4872
.L4884:
	mvn	r0, #21
	b	.L4872
	.fnend
	.size	acc_register_hid, .-acc_register_hid
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_resume, %function
android_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r4, [r2, #3232]!
	cmp	r4, r2
	sub	r4, r4, #512
	bne	.L4900
	b	.L4899
.L4907:
	ldr	r4, [r4, #512]
	cmp	r4, r2
	sub	r4, r4, #512
	beq	.L4899
.L4900:
	ldr	r3, [r4, #8]
	cmp	r0, r3
	bne	.L4907
.L4899:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #50]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	bne	.L4908
.L4901:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_resume
.L4908:
	mov	r3, #0
	add	r0, r4, #176
	strb	r3, [r4, #50]
	bl	schedule_work
	b	.L4901
	.fnend
	.size	android_resume, .-android_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_suspend, %function
android_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r4, [r2, #3232]!
	cmp	r4, r2
	sub	r4, r4, #512
	bne	.L4911
	b	.L4910
.L4915:
	ldr	r4, [r4, #512]
	cmp	r4, r2
	sub	r4, r4, #512
	beq	.L4910
.L4911:
	ldr	r3, [r4, #8]
	cmp	r0, r3
	bne	.L4915
.L4910:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #50]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	beq	.L4916
.L4912:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_suspend
.L4916:
	mov	r3, #1
	add	r0, r4, #176
	strb	r3, [r4, #50]
	bl	schedule_work
	b	.L4912
	.fnend
	.size	android_suspend, .-android_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	get_ether_addr, %function
get_ether_addr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	subne	r5, r1, #1
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	addne	r8, r1, #5
	str	lr, [sp, #20]
	bne	.L4923
	b	.L4924
.L4930:
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r3, r0
	ldrb	r0, [r4, #2]	@ zero_extendqisi2
.L4929:
	mov	r4, r3
	bl	hex_to_bin
	orr	r0, r0, r4, lsl #4
	strb	r0, [r5, #1]!
	cmp	r8, r5
	beq	.L4922
	mov	r4, r6
.L4923:
	ldrb	r0, [r4]	@ zero_extendqisi2
	add	r6, r4, #3
	cmp	r0, #58
	cmpne	r0, #46
	beq	.L4930
	bl	hex_to_bin
	mov	r3, r0
	add	r6, r4, #2
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	b	.L4929
.L4922:
	ldrb	r3, [r7]	@ zero_extendqisi2
	ands	r0, r3, #1
	beq	.L4931
.L4924:
	mov	r0, r7
	mov	r1, #6
	bl	get_random_bytes
	ldrb	r3, [r7]	@ zero_extendqisi2
	mov	r0, #1
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r7]
.L4917:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4931:
	ldrb	r2, [r7, #1]	@ zero_extendqisi2
	ldrb	lr, [r7, #2]	@ zero_extendqisi2
	ldrb	ip, [r7, #3]	@ zero_extendqisi2
	ldrb	r1, [r7, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r7, #5]	@ zero_extendqisi2
	orr	r3, r3, lr
	orr	r3, r3, ip
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L4924
	b	.L4917
	.fnend
	.size	get_ether_addr, .-get_ether_addr
	.set	get_qc_ether_addr,get_ether_addr
	.section	.rodata.str1.4
	.align	2
.LC429:
	.ascii	"%s: Enter\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_close_snd_dev, %function
gaudio_close_snd_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4951
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L4950
.L4933:
	ldr	r0, [r4, #92]
	cmp	r0, #0
	beq	.L4934
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1008]
	bl	filp_close
.L4934:
	ldr	r0, [r4, #120]
	cmp	r0, #0
	beq	.L4935
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1008]
	bl	filp_close
.L4935:
	ldr	r0, [r4, #148]
	cmp	r0, #0
	beq	.L4936
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1008]
	bl	filp_close
.L4936:
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L4950:
	movw	r1, #:lower16:.LC429
	ldr	r2, .L4951+4
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC429
	bl	__dynamic_pr_debug
	b	.L4933
.L4952:
	.align	2
.L4951:
	.word	.LANCHOR4-3520
	.word	.LANCHOR3+3408
	.fnend
	.size	gaudio_close_snd_dev, .-gaudio_close_snd_dev
	.section	.rodata.str1.4
	.align	2
.LC430:
	.ascii	"unable to open backing file: %s\012\000"
	.align	2
.LC431:
	.ascii	"invalid file type: %s\012\000"
	.align	2
.LC432:
	.ascii	"file not readable: %s\012\000"
	.align	2
.LC433:
	.ascii	"unable to find file size: %s\012\000"
	.align	2
.LC434:
	.ascii	"file too big: %s\012\000"
	.align	2
.LC435:
	.ascii	"using only first %d blocks\012\000"
	.align	2
.LC436:
	.ascii	"file too small: %s\012\000"
	.align	2
.LC437:
	.ascii	"open backing file: %s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_open, %function
fsg_lun_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r2, [r0, #24]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ands	r2, r2, #1
	beq	.L4954
.L4956:
	mov	r2, #0
	mov	r1, #131072
	mov	r0, r6
	mov	r7, #1
	bl	filp_open
	mov	r4, r0
	cmn	r4, #4096
	bhi	.L4999
.L4957:
	ldr	r3, [r4, #12]
	ldr	r2, [r4, #32]
	tst	r2, #2
	moveq	r7, #1
	cmp	r3, #0
	beq	.L4960
	ldr	r2, [r3, #32]
	cmp	r2, #0
	beq	.L4960
	ldrh	r3, [r2]
	and	r3, r3, #61440
	sub	r3, r3, #24576
	tst	r3, #53248
	bne	.L4960
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L4963
	ldr	r1, [r3, #8]
	cmp	r1, #0
	beq	.L5000
.L4964:
	ldr	r1, [r3, #12]
	cmp	r1, #0
	beq	.L5001
.L4965:
	ldr	r3, [r2, #32]
	ldr	r3, [r3]
.L4998:
	ldr	r1, [r3, #104]
	tst	r1, #1
	bne	.L4967
	.syntax divided
@ 165 "/home/jprim/hlte/lolz/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r8, [r3, #96]
	.syntax divided
@ 221 "/home/jprim/hlte/lolz/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r3, #104]
	cmp	r1, r0
	bne	.L4998
	cmp	r8, #0
	sbcs	r3, r9, #0
	blt	.L5002
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	tst	r3, #8
	bne	.L5003
	ldr	r3, [r2, #312]
	cmp	r3, #0
	beq	.L4973
	ldr	r3, [r3, #88]
	ldr	r3, [r3, #492]
	cmp	r3, #0
	moveq	r3, #512
	beq	.L4974
	add	r3, r3, #776
	ldrh	r3, [r3]
	cmp	r3, #0
	moveq	r3, #512
.L4974:
	mov	r1, #8
	str	r3, [r5, #44]
.L4975:
	lsr	r3, r3, #1
	add	r1, r1, #1
	cmp	r3, #256
	bhi	.L4975
	str	r1, [r5, #40]
.L4976:
	rsb	r0, r1, #32
	lsr	r2, r8, r1
	subs	ip, r1, #32
	orr	r2, r2, r9, lsl r0
	mov	r0, #1
	asr	r3, r9, r1
	orrpl	r2, r2, r9, asr ip
	mov	r1, #0
	b	.L4972
.L4960:
	movw	r1, #:lower16:.LC431
	mov	r2, r6
	add	r0, r5, #48
	movt	r1, #:upper16:.LC431
	mvn	r8, #21
	bl	_dev_info
.L4962:
	mov	r3, sp
	mov	r0, r4
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1008]
	bl	filp_close
.L4953:
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4954:
	mov	r1, #2
	mov	r0, r6
	movt	r1, 2
	bl	filp_open
	cmn	r0, #30
	cmnne	r0, #13
	mov	r4, r0
	moveq	r7, #1
	movne	r7, #0
	beq	.L4956
	cmn	r4, #4096
	bls	.L4957
.L4999:
	movw	r1, #:lower16:.LC430
	mov	r2, r6
	add	r0, r5, #48
	movt	r1, #:upper16:.LC430
	mov	r8, r4
	bl	_dev_info
	b	.L4953
.L5003:
	lsr	r2, r8, #11
	movw	r10, #65502
	mov	r1, #2048
	orr	r2, r2, r9, lsl #21
	asr	r3, r9, #11
	movt	r10, 255
	mov	r0, #11
	mov	fp, #0
	cmp	r10, r2
	strd	r0, [r5, #40]
	sbcs	r1, fp, r3
	blt	.L4971
	mov	r0, #300
	mov	r1, #0
.L4972:
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L5004
.L4977:
	add	r1, r4, #24
	.syntax divided
@ 45 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrb	r1, [r5, #24]	@ zero_extendqisi2
	str	r4, [r5]
	ldr	r0, .L5005
	strd	r8, [r5, #8]
	strd	r2, [r5, #16]
	bfi	r1, r7, #1, #1
	strb	r1, [r5, #24]
	ldrh	r8, [r0, #-6]
	tst	r8, #4
	ubfx	r8, r8, #2, #1
	beq	.L4962
	movw	r2, #:lower16:.LC437
	mov	r3, r6
	add	r1, r5, #48
	movt	r2, #:upper16:.LC437
	sub	r0, r0, #24
	mov	r8, #0
	bl	__dynamic_dev_dbg
	b	.L4962
.L5000:
	ldr	r1, [r3, #16]
	cmp	r1, #0
	bne	.L4964
.L4963:
	movw	r1, #:lower16:.LC432
	mov	r2, r6
	add	r0, r5, #48
	movt	r1, #:upper16:.LC432
	mvn	r8, #21
	bl	_dev_info
	b	.L4962
.L5001:
	ldr	r3, [r3, #20]
	cmp	r3, #0
	moveq	r7, #1
	b	.L4965
.L5004:
	movw	r1, #:lower16:.LC436
	mov	r2, r6
	add	r0, r5, #48
	movt	r1, #:upper16:.LC436
	mvn	r8, #524
	bl	_dev_info
	b	.L4962
.L5002:
	movw	r1, #:lower16:.LC433
	mov	r2, r6
	add	r0, r5, #48
	movt	r1, #:upper16:.LC433
	bl	_dev_info
	b	.L4962
.L4971:
	add	r3, r5, #48
	movw	r1, #:lower16:.LC434
	mov	r0, r3
	movt	r1, #:upper16:.LC434
	mov	r2, r6
	str	r3, [sp, #4]
	bl	_dev_info
	ldr	r3, [sp, #4]
	movw	r2, #65502
	movw	r1, #:lower16:.LC435
	movt	r2, 255
	movt	r1, #:upper16:.LC435
	mov	r0, r3
	bl	_dev_info
	mov	r2, r10
	mov	r3, fp
	b	.L4977
.L4973:
	mov	r2, #9
	mov	r3, #512
	mov	r1, #9
	strd	r2, [r5, #40]
	b	.L4976
.L4967:
	.syntax divided
@ 147 "/home/jprim/hlte/lolz/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	b	.L4998
.L5006:
	.align	2
.L5005:
	.word	.LANCHOR4-3504
	.fnend
	.size	fsg_lun_open, .-fsg_lun_open
	.section	.rodata.str1.4
	.align	2
.LC438:
	.ascii	"<3>%s(#) call conn_gadget_cleanup\012\000"
	.align	2
.LC439:
	.ascii	"<6>conn_gadget_cleanup\012\000"
	.align	2
.LC440:
	.ascii	"<3>%s() _conn_gadget_dev is not allocated\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_cleanup, %function
conn_gadget_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC438
	ldr	r1, .L5014
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC438
	bl	printk
	movw	r0, #:lower16:.LC439
	movt	r0, #:upper16:.LC439
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #2484]
	cmp	r2, #0
	bne	.L5008
	movw	r0, #:lower16:.LC440
	pop	{r4, lr}
	movt	r0, #:upper16:.LC440
	ldr	r1, .L5014+4
	b	printk
.L5008:
	mov	r4, r3
	ldr	r0, .L5014+8
	bl	misc_deregister
	ldr	r3, [r4, #2484]
	ldr	r0, [r3, #188]
	cmp	r0, #0
	beq	.L5009
	bl	vfree
.L5009:
	ldr	r0, [r4, #2484]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #2484]
	pop	{r4, pc}
.L5015:
	.align	2
.L5014:
	.word	.LANCHOR3+3432
	.word	.LANCHOR3+3464
	.word	.LANCHOR0+1040
	.fnend
	.size	conn_gadget_function_cleanup, .-conn_gadget_function_cleanup
	.section	.rodata.str1.4
	.align	2
.LC441:
	.ascii	"<3>%s(#) call conn_gadget_setup\012\000"
	.align	2
.LC442:
	.ascii	"<6>conn_gadget_setup\012\000"
	.align	2
.LC443:
	.ascii	"<3>alloc conn_gadget_dev F\012\000"
	.align	2
.LC444:
	.ascii	"&dev->ioctl_wq\000"
	.align	2
.LC445:
	.ascii	"<3>%s: error rd_queue vmalloc\012\000"
	.align	2
.LC446:
	.ascii	"<3>%s: misc_register f %d\012\000"
	.align	2
.LC447:
	.ascii	"<3>%s() conn_gadget gadget driver failed to initial"
	.ascii	"ize\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_init, %function
conn_gadget_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC441
	ldr	r1, .L5030
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LC441
	bl	printk
	movw	r0, #:lower16:.LC442
	movt	r0, #:upper16:.LC442
	bl	printk
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5022
	mov	r2, #220
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L5017
	movw	r0, #:lower16:.LC443
	mvn	r5, #11
	movt	r0, #:upper16:.LC443
	bl	printk
	b	.L5016
.L5022:
	mov	r4, #16
.L5017:
	mov	r5, #0
	movw	r1, #:lower16:.LC393
	ldr	r2, .L5030+4
	movt	r1, #:upper16:.LC393
	add	r0, r4, #144
	str	r5, [r4, #88]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC394
	ldr	r2, .L5030+4
	add	r0, r4, #156
	movt	r1, #:upper16:.LC394
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC444
	ldr	r2, .L5030+4
	add	r0, r4, #200
	movt	r1, #:upper16:.LC444
	bl	__init_waitqueue_head
	add	r1, r4, #120
	add	r2, r4, #128
	str	r5, [r4, #108]
	add	r3, r4, #136
	mov	ip, #4096
	str	r5, [r4, #112]
	mov	r0, #262144
	str	r5, [r4, #116]
	str	r1, [r4, #120]
	str	r1, [r4, #124]
	str	r2, [r4, #128]
	strd	r2, [r4, #132]
	str	r3, [r4, #140]
	str	ip, [r4, #192]
	str	r0, [r4, #196]
	str	r5, [r4, #216]
	bl	vmalloc
	cmp	r0, r5
	mov	r1, r0
	str	r0, [r4, #188]
	bne	.L5019
	movw	r0, #:lower16:.LC445
	ldr	r1, .L5030+8
	mvn	r5, #11
	movt	r0, #:upper16:.LC445
	bl	printk
	b	.L5020
.L5019:
	mov	r3, #1
	add	r0, r4, #168
	ldr	r2, [r4, #196]
	bl	__kfifo_init
	ldr	r0, .L5030+12
	str	r4, [r6, #2484]
	bl	misc_register
	subs	r5, r0, #0
	beq	.L5016
	movw	r0, #:lower16:.LC446
	ldr	r1, .L5030+8
	mov	r2, r5
	movt	r0, #:upper16:.LC446
	bl	printk
.L5020:
	ldr	r0, [r4, #188]
	cmp	r0, #0
	beq	.L5021
	bl	vfree
.L5021:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #2484]
	bl	kfree
	movw	r0, #:lower16:.LC447
	ldr	r1, .L5030+8
	movt	r0, #:upper16:.LC447
	bl	printk
.L5016:
	mov	r0, r5
	pop	{r4, r5, r6, pc}
.L5031:
	.align	2
.L5030:
	.word	.LANCHOR3+3484
	.word	.LANCHOR1+3560
	.word	.LANCHOR3+3512
	.word	.LANCHOR0+1040
	.fnend
	.size	conn_gadget_function_init, .-conn_gadget_function_init
	.section	.rodata.str1.4
	.align	2
.LC448:
	.ascii	"<3>%s() _conn_gadget_dev is NULL\012\000"
	.align	2
.LC449:
	.ascii	"<3>%s() _conn_gaddget_dev onlined\012\000"
	.align	2
.LC450:
	.ascii	"%d\000"
	.align	2
.LC451:
	.ascii	"<3>%s() rd_queue_buf vmalloc f\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_usb_buffer_size_store, %function
conn_gadget_usb_buffer_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	mov	r7, r3
	movt	r6, #:upper16:.LANCHOR1
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r6, #2484]
	cmp	r1, #0
	beq	.L5042
	ldr	r3, [r1, #100]
	cmp	r3, #0
	bne	.L5043
	movw	r1, #:lower16:.LC450
	mov	r0, r2
	movt	r1, #:upper16:.LC450
	add	r2, sp, #4
	bl	sscanf
	ldr	r4, [sp, #4]
	lsl	r4, r4, #16
	mov	r0, r4
	bl	vmalloc
	subs	r5, r0, #0
	beq	.L5044
	ldr	ip, [r6, #2484]
	ldr	r0, [ip, #188]
	cmp	r0, #0
	beq	.L5037
	bl	vfree
	ldr	ip, [r6, #2484]
.L5037:
	ldr	lr, [sp, #4]
	mov	r6, #0
	mov	r0, ip
	mov	r1, r5
	mov	r2, r4
	mov	r3, #1
	str	r6, [ip, #172]
	str	r5, [ip, #188]
	lsl	lr, lr, #10
	str	lr, [ip, #192]
	str	r4, [ip, #196]
	str	r6, [r0, #168]!
	bl	__kfifo_init
.L5032:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5042:
	movw	r0, #:lower16:.LC448
	ldr	r1, .L5045
	movt	r0, #:upper16:.LC448
	bl	printk
	b	.L5032
.L5044:
	movw	r0, #:lower16:.LC451
	ldr	r1, .L5045
	movt	r0, #:upper16:.LC451
	bl	printk
	b	.L5032
.L5043:
	movw	r0, #:lower16:.LC449
	ldr	r1, .L5045
	movt	r0, #:upper16:.LC449
	bl	printk
	b	.L5032
.L5046:
	.align	2
.L5045:
	.word	.LANCHOR3+3532
	.fnend
	.size	conn_gadget_usb_buffer_size_store, .-conn_gadget_usb_buffer_size_store
	.section	.rodata.str1.4
	.align	2
.LC452:
	.ascii	"enabling\000"
	.align	2
.LC453:
	.ascii	"disabling\000"
	.align	2
.LC454:
	.ascii	"%s: android_usb: %s remote wakeup\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	remote_wakeup_store, %function
remote_wakeup_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	mov	r3, #0
	movw	r1, #:lower16:.LC450
	mov	r5, r0
	movt	r1, #:upper16:.LC450
	mov	r0, r6
	add	r2, sp, #4
	str	r3, [sp, #4]
	bl	sscanf
	ldr	r0, .L5065
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L5064
.L5048:
	mov	r0, r5
	ldr	r2, [r0, #500]!
	cmp	r0, r2
	sub	r2, r2, #120
	beq	.L5062
	ldr	r3, [sp, #4]
	cmp	r3, #0
	bne	.L5051
.L5052:
	ldrb	r1, [r2, #22]	@ zero_extendqisi2
	ldr	r3, [r2, #120]
	bic	r1, r1, #32
	cmp	r0, r3
	strb	r1, [r2, #22]
	sub	r2, r3, #120
	bne	.L5052
.L5062:
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5051:
	ldrb	r1, [r2, #22]	@ zero_extendqisi2
	ldr	r3, [r2, #120]
	orr	r1, r1, #32
	cmp	r0, r3
	strb	r1, [r2, #22]
	sub	r2, r3, #120
	bne	.L5051
	b	.L5062
.L5064:
	ldr	lr, [sp, #4]
	movw	ip, #:lower16:.LC453
	movw	r3, #:lower16:.LC452
	movt	ip, #:upper16:.LC453
	movw	r1, #:lower16:.LC454
	ldr	r2, .L5065+4
	movt	r3, #:upper16:.LC452
	movt	r1, #:upper16:.LC454
	sub	r0, r0, #32
	cmp	lr, #0
	moveq	r3, ip
	bl	__dynamic_pr_debug
	b	.L5048
.L5066:
	.align	2
.L5065:
	.word	.LANCHOR4-3472
	.word	.LANCHOR3+3568
	.fnend
	.size	remote_wakeup_store, .-remote_wakeup_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceProtocol_store, %function
bDeviceProtocol_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC75
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC75
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5069
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #142]
.L5067:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5069:
	mvn	r0, #0
	b	.L5067
	.fnend
	.size	bDeviceProtocol_store, .-bDeviceProtocol_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceSubClass_store, %function
bDeviceSubClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC75
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC75
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5073
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #141]
.L5071:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5073:
	mvn	r0, #0
	b	.L5071
	.fnend
	.size	bDeviceSubClass_store, .-bDeviceSubClass_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceClass_store, %function
bDeviceClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC75
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC75
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5077
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #140]
.L5075:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5077:
	mvn	r0, #0
	b	.L5075
	.fnend
	.size	bDeviceClass_store, .-bDeviceClass_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdDevice_store, %function
bcdDevice_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC83
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC83
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5081
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #148]	@ movhi
.L5079:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5081:
	mvn	r0, #0
	b	.L5079
	.fnend
	.size	bcdDevice_store, .-bcdDevice_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idProduct_store, %function
idProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC83
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC83
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5085
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #146]	@ movhi
.L5083:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5085:
	mvn	r0, #0
	b	.L5083
	.fnend
	.size	idProduct_store, .-idProduct_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idVendor_store, %function
idVendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC83
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC83
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5089
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #144]	@ movhi
.L5087:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5089:
	mvn	r0, #0
	b	.L5087
	.fnend
	.size	idVendor_store, .-idVendor_store
	.section	.rodata.str1.4
	.align	2
.LC455:
	.ascii	"<7>%s: product %s\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_product_store, %function
mass_storage_product_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #16
	bls	.L5092
.L5094:
	mvn	r0, #21
.L5091:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5092:
	ldr	r6, [r0, #4]
	movw	r1, #:lower16:.LC82
	mov	r0, r5
	movt	r1, #:upper16:.LC82
	ldr	r2, [r6, #96]
	add	r2, r2, #218
	bl	sscanf
	cmp	r0, #1
	bne	.L5094
	ldr	r2, [r6, #96]
	movw	r0, #:lower16:.LC455
	ldr	r1, .L5096
	movt	r0, #:upper16:.LC455
	add	r2, r2, #218
	bl	printk
	mov	r0, r4
	b	.L5091
.L5097:
	.align	2
.L5096:
	.word	.LANCHOR3+3588
	.fnend
	.size	mass_storage_product_store, .-mass_storage_product_store
	.section	.rodata.str1.4
	.align	2
.LC456:
	.ascii	"<7>%s: vendor %s\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_vendor_store, %function
mass_storage_vendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #8
	bls	.L5099
.L5101:
	mvn	r0, #21
.L5098:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5099:
	ldr	r6, [r0, #4]
	movw	r1, #:lower16:.LC82
	mov	r0, r5
	movt	r1, #:upper16:.LC82
	ldr	r2, [r6, #96]
	add	r2, r2, #209
	bl	sscanf
	cmp	r0, #1
	bne	.L5101
	ldr	r2, [r6, #96]
	movw	r0, #:lower16:.LC456
	ldr	r1, .L5103
	movt	r0, #:upper16:.LC456
	add	r2, r2, #209
	bl	printk
	mov	r0, r4
	b	.L5098
.L5104:
	.align	2
.L5103:
	.word	.LANCHOR3+3616
	.fnend
	.size	mass_storage_vendor_store, .-mass_storage_vendor_store
	.section	.rodata.str1.4
	.align	2
.LC457:
	.ascii	"%28s\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_inquiry_store, %function
mass_storage_inquiry_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #28
	ldr	r3, [r0, #4]
	bhi	.L5108
	ldr	r2, [r3, #96]
	movw	r1, #:lower16:.LC457
	mov	r0, r5
	movt	r1, #:upper16:.LC457
	add	r2, r2, #180
	bl	sscanf
	cmp	r0, #1
	bne	.L5108
	mov	r0, r4
.L5105:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5108:
	mvn	r0, #21
	b	.L5105
	.fnend
	.size	mass_storage_inquiry_store, .-mass_storage_inquiry_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ethaddr_store, %function
ecm_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata
	ldr	r2, [r0, #4]
	mov	r0, r5
	movw	r1, #:lower16:.LC85
	movt	r1, #:upper16:.LC85
	add	r3, r2, #3
	add	ip, r2, #5
	add	r5, r2, #4
	add	lr, r2, #2
	str	lr, [sp]
	stmib	sp, {r3, r5, ip}
	add	r3, r2, #1
	bl	sscanf
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_ethaddr_store, .-ecm_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_max_pkt_per_xfer_store, %function
rndis_max_pkt_per_xfer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC450
	mov	r3, r0
	movt	r1, #:upper16:.LC450
	mov	r0, r5
	ldr	r5, [r3, #4]
	add	r2, sp, #4
	bl	sscanf
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	strbeq	r3, [r5, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_max_pkt_per_xfer_store, .-rndis_max_pkt_per_xfer_store
	.section	.rodata.str1.4
	.align	2
.LC458:
	.ascii	"%04x\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_vendorID_store, %function
rndis_vendorID_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC458
	mov	r3, r0
	movt	r1, #:upper16:.LC458
	mov	r0, r5
	ldr	r5, [r3, #4]
	add	r2, sp, #4
	bl	sscanf
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	streq	r3, [r5, #8]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_vendorID_store, .-rndis_vendorID_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_wceis_store, %function
rndis_wceis_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC450
	mov	r3, r0
	movt	r1, #:upper16:.LC450
	mov	r0, r5
	ldr	r5, [r3, #4]
	add	r2, sp, #4
	bl	sscanf
	cmp	r0, #1
	bne	.L5124
	ldr	r3, [sp, #4]
	mov	r0, r4
	subs	r3, r3, #0
	movne	r3, #1
	strb	r3, [r5, #269]
.L5122:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L5124:
	mvn	r0, #21
	b	.L5122
	.fnend
	.size	rndis_wceis_store, .-rndis_wceis_store
	.section	.rodata.str1.4
	.align	2
.LC459:
	.ascii	"%255s\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_manufacturer_store, %function
rndis_manufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #255
	ldr	r2, [r0, #4]
	bhi	.L5128
	movw	r1, #:lower16:.LC459
	add	r2, r2, #13
	mov	r0, r5
	movt	r1, #:upper16:.LC459
	bl	sscanf
	cmp	r0, #1
	moveq	r0, r4
	mvnne	r0, #0
.L5126:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5128:
	mvn	r0, #21
	b	.L5126
	.fnend
	.size	rndis_manufacturer_store, .-rndis_manufacturer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_instances_store, %function
acm_instances_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC450
	mov	r3, r0
	movt	r1, #:upper16:.LC450
	mov	r0, r5
	ldr	r5, [r3, #4]
	add	r2, sp, #4
	bl	sscanf
	ldr	r2, [sp, #4]
	mov	r0, r4
	cmp	r2, #4
	movge	r2, #4
	str	r2, [r5]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	acm_instances_store, .-acm_instances_store
	.section	.rodata.str1.4
	.align	2
.LC460:
	.ascii	"Wrong NTH SIGN, skblen %d\012\000"
	.align	2
.LC461:
	.ascii	"HEAD:\000"
	.align	2
.LC462:
	.ascii	"<6>\000"
	.align	2
.LC463:
	.ascii	"Wrong NTB headersize\012\000"
	.align	2
.LC464:
	.ascii	"OUT size exceeded\012\000"
	.align	2
.LC465:
	.ascii	"Bad index: %x\012\000"
	.align	2
.LC466:
	.ascii	"Wrong NDP SIGN\012\000"
	.align	2
.LC467:
	.ascii	"Bad NDP length: %x\012\000"
	.align	2
.LC468:
	.ascii	"Bad dgram length: %x\012\000"
	.align	2
.LC469:
	.ascii	"Bad CRC\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_unwrap_ntb, %function
ncm_unwrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r1, #172]
	.pad #44
	sub	sp, sp, #44
	ldr	r6, [r0, #176]
	ldrb	r0, [r0, #180]	@ zero_extendqisi2
	ldr	r2, [r3]	@ unaligned
	ldr	r1, [r6]
	cmp	r0, #0
	movne	r0, #18
	moveq	r0, #14
	str	r0, [sp, #20]
	movne	r0, #4
	moveq	r0, #0
	cmp	r1, r2
	str	r0, [sp, #16]
	bne	.L5185
	ldrb	r0, [r3, #5]	@ zero_extendqisi2
	ldrb	r2, [r3, #4]	@ zero_extendqisi2
	ldr	r1, [r6, #8]
	orr	r2, r2, r0, lsl #8
	cmp	r2, r1
	bne	.L5186
	ldr	r0, [r6, #24]
	add	lr, r3, #8
	cmp	r0, #1
	bne	.L5187
	ldrb	r2, [r3, #9]	@ zero_extendqisi2
	ldrb	ip, [r3, #8]	@ zero_extendqisi2
	orr	ip, ip, r2, lsl #8
.L5141:
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	add	r8, lr, r0, lsl #1
	ldr	r2, [r2, #36]
	cmp	r2, ip
	bcc	.L5188
	ldr	r2, [r6, #28]
	cmp	r2, #1
	beq	.L5143
	cmp	r2, #2
	ldreq	r2, [r8]	@ unaligned
	bne	.L5180
.L5146:
	cmp	r1, r2
	movls	r1, #0
	movhi	r1, #1
	ands	r0, r2, #3
	movne	r0, r1
	cmp	r0, #0
	bne	.L5189
	ldr	r1, [r3, r2]	@ unaligned
	add	r3, r3, r2
	ldr	r2, [r6, #4]
	cmp	r2, r1
	bne	.L5190
	ldrb	r0, [r3, #5]	@ zero_extendqisi2
	ldrb	r2, [r3, #4]	@ zero_extendqisi2
	ldr	lr, [r6, #12]
	ldr	r1, [r6, #20]
	orr	r2, r2, r0, lsl #8
	add	r0, lr, r1, lsl #3
	cmp	r0, r2
	bhi	.L5149
	ldr	ip, [r6, #16]
	udiv	r0, r2, ip
	mls	r0, ip, r0, r2
	cmp	r0, #0
	bne	.L5149
	sub	r2, r2, lr
	ldr	ip, [r6, #32]
	cmp	r1, #1
	ldr	r0, [r6, #40]
	mov	r8, r2
	add	r3, r3, #6
	ldr	r2, [r6, #36]
	add	r0, ip, r0
	add	r0, r0, r2
	add	lr, r3, r0, lsl #1
	bne	.L5191
	ldrb	r3, [r3, r0, lsl #1]	@ zero_extendqisi2
	add	r10, lr, #2
	ldrb	ip, [lr, #1]	@ zero_extendqisi2
	mov	r2, #2
	ldrb	r0, [lr, #3]	@ zero_extendqisi2
	ldrb	fp, [lr, #2]	@ zero_extendqisi2
	orr	r3, r3, ip, lsl #8
	orr	fp, fp, r0, lsl #8
.L5154:
	add	r10, r10, r2
	str	r6, [sp, #24]
	mov	r9, r8
	str	r5, [sp, #28]
	b	.L5164
.L5158:
	mov	r2, r10
	ldrb	ip, [r10, #1]	@ zero_extendqisi2
	mov	r1, #2
	ldrb	r8, [r2], #2	@ zero_extendqisi2
	ldrb	r0, [r10, #3]	@ zero_extendqisi2
	ldrb	r6, [r10, #2]	@ zero_extendqisi2
	orr	r8, r8, ip, lsl #8
	orr	r6, r6, r0, lsl #8
.L5161:
	clz	r5, r6
	lsr	r5, r5, #5
	cmp	r8, #0
	moveq	r5, #1
	cmp	r5, #0
	add	r10, r2, r1
	str	r5, [sp, #32]
	bne	.L5162
	mov	r1, #32
	mov	r0, r4
	str	r3, [sp, #36]
	bl	skb_clone
	subs	r5, r0, #0
	ldr	r3, [sp, #36]
	beq	.L5192
	mov	r1, r3
	bl	skb_pull
	cmp	r0, #0
	beq	.L5167
	ldr	r3, [sp, #16]
	mov	r0, r5
	sub	r1, fp, r3
	bl	skb_trim
	mov	r1, r5
	mov	r0, r7
	bl	skb_queue_tail
	ldr	r3, [sp, #24]
	ldr	r1, [r3, #20]
	lsl	r3, r1, #2
	sub	r9, r9, r3
	cmp	r3, r9
	bcs	.L5184
	mov	fp, r6
	mov	r3, r8
.L5164:
	ldr	r2, [sp, #20]
	cmp	fp, r2
	bcc	.L5193
	ldr	r2, [sp, #28]
	ldrb	r2, [r2, #180]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L5194
.L5156:
	cmp	r1, #1
	beq	.L5158
	cmp	r1, #2
	bne	.L5180
	mov	r2, r10
	ldr	r6, [r10, #4]	@ unaligned
	mov	r1, #4
	ldr	r8, [r2], #4	@ unaligned
	b	.L5161
.L5186:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC463
	mvn	r5, #21
	movt	r1, #:upper16:.LC463
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
.L5136:
	mov	r0, r7
	bl	skb_queue_purge
	mov	r0, r4
	bl	dev_kfree_skb_any
.L5133:
	mov	r0, r5
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5187:
	cmp	r0, #2
	ldreq	ip, [r3, #8]	@ unaligned
	beq	.L5141
.L5180:
	.syntax divided
@ 463 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz/drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 463, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L5185:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC460
	mvn	r5, #21
	movt	r1, #:upper16:.LC460
	ldr	r2, [r4, #80]
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r4, #172]
	mov	ip, #0
	mov	r3, #32
	mov	r2, #1
	movw	r1, #:lower16:.LC461
	movt	r1, #:upper16:.LC461
	str	r2, [sp]
	stmib	sp, {r0, r3, ip}
	movw	r0, #:lower16:.LC462
	movt	r0, #:upper16:.LC462
	bl	print_hex_dump
	b	.L5136
.L5143:
	ldrb	ip, [r8, #1]	@ zero_extendqisi2
	ldrb	r2, [lr, r0, lsl #1]	@ zero_extendqisi2
	orr	r2, r2, ip, lsl #8
	b	.L5146
.L5149:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC467
	movt	r1, #:upper16:.LC467
.L5183:
	ldr	r3, [r3, #24]
	mvn	r5, #21
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L5136
.L5162:
	mov	r1, r3
	mov	r0, r4
	bl	skb_pull
	cmp	r0, #0
	bne	.L5195
.L5167:
	mvn	r5, #74
	b	.L5136
.L5194:
	ldr	r0, [sp, #16]
	add	ip, r3, fp
	str	r3, [sp, #32]
	ldr	r1, [r4, #172]
	sub	ip, ip, r0
	sub	r2, fp, r0
	ldr	r5, [r1, ip]	@ unaligned
	mvn	r0, #0
	add	r1, r1, r3
	bl	crc32_le
	mvn	r0, r0
	cmp	r0, r5
	bne	.L5157
	ldr	r3, [sp, #24]
	ldr	r1, [r3, #20]
	ldr	r3, [sp, #32]
	b	.L5156
.L5191:
	cmp	r1, #2
	bne	.L5180
	mov	r10, lr
	ldr	fp, [lr, #4]	@ unaligned
	mov	r2, #4
	ldr	r3, [r10], #4	@ unaligned
	b	.L5154
.L5190:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC466
	mvn	r5, #21
	movt	r1, #:upper16:.LC466
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L5136
.L5188:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC464
	mvn	r5, #21
	movt	r1, #:upper16:.LC464
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L5136
.L5195:
	ldr	r3, [sp, #16]
	mov	r0, r4
	sub	r1, fp, r3
	bl	skb_trim
	mov	r1, r4
	mov	r0, r7
	bl	skb_queue_tail
.L5184:
	mov	r5, #0
	b	.L5133
.L5189:
	movw	r1, #:lower16:.LC465
	ldr	r3, [r5, #20]
	movt	r1, #:upper16:.LC465
	b	.L5183
.L5193:
	ldr	r5, [sp, #28]
	movw	r1, #:lower16:.LC468
	mov	r2, fp
	movt	r1, #:upper16:.LC468
	ldr	r3, [r5, #20]
	b	.L5183
.L5192:
	mvn	r5, #21
	b	.L5136
.L5157:
	ldr	r5, [sp, #28]
	movw	r1, #:lower16:.LC469
	movt	r1, #:upper16:.LC469
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L5136
	.fnend
	.size	ncm_unwrap_ntb, .-ncm_unwrap_ntb
	.section	.rodata.str1.4
	.align	2
.LC470:
	.ascii	"<3>usb: force short packet %d  \012\000"
	.align	2
.LC471:
	.ascii	"<3>Dropped skb \012\000"
	.align	2
.LC472:
	.ascii	"<3>usb:%s final Expanding the buffer %d \012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_wrap_ntb, %function
ncm_wrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	ip, #:lower16:.LANCHOR0
	strd	r6, [sp, #8]
	movt	ip, #:upper16:.LANCHOR0
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #176]
	.pad #20
	sub	sp, sp, #20
	ldrh	lr, [ip, #32]
	ldrh	r0, [ip, #30]
	ldrh	r1, [ip, #28]
	ldr	r9, [r5, #8]
	ldr	r3, [r5, #12]
	sub	r2, lr, #1
	rsb	lr, lr, #0
	ldr	ip, [r5, #20]
	sub	r4, r1, #1
	rsb	r1, r1, #0
	add	r2, r2, r9
	and	r2, r2, lr
	add	r3, r3, ip, lsl #3
	ldrb	ip, [r8, #180]	@ zero_extendqisi2
	sub	r9, r2, r9
	add	r3, r3, r2
	ldr	r2, [r7, #80]
	add	r4, r4, r3
	and	r4, r4, r1
	ldr	r1, [r8, #112]
	cmp	ip, #0
	add	r4, r4, r0
	movne	r0, #4
	sub	r3, r4, r3
	moveq	r0, #0
	add	r2, r4, r2
	str	r3, [sp, #4]
	add	r3, r2, r0
	cmp	r3, r1
	str	r0, [sp, #8]
	bhi	.L5237
	bcc	.L5238
.L5222:
	mov	fp, #0
	mov	r10, fp
.L5200:
	mov	r3, #32
	mov	r2, r10
	mov	r1, r4
	mov	r0, r7
	bl	skb_copy_expand
	mov	r6, r0
	mov	r0, r7
	bl	dev_kfree_skb_any
	cmp	r6, #0
	beq	.L5239
	mov	r1, r4
	mov	r0, r6
	bl	skb_push
	cmp	r4, #0
	mov	r7, r0
	bne	.L5240
.L5202:
	ldr	r3, [r5]
	add	ip, r7, #8
	lsr	r2, r3, #16
	ubfx	r1, r3, #8, #8
	strb	r3, [r7]
	lsr	r3, r2, #8
	strb	r1, [r7, #1]
	strb	r2, [r7, #2]
	strb	r3, [r7, #3]
	ldr	r3, [r5, #8]
	ubfx	r2, r3, #8, #8
	strb	r3, [r7, #4]
	strb	r2, [r7, #5]
	ldr	r1, [r5, #24]
	ldr	r3, [r6, #80]
	cmp	r1, #1
	add	fp, fp, r3
	beq	.L5203
	cmp	r1, #2
	bne	.L5235
	lsr	r3, fp, #16
	ubfx	r2, fp, #8, #8
	strb	fp, [r7, #8]
	lsr	r0, r3, #8
	strb	r2, [r7, #9]
	strb	r3, [r7, #10]
	strb	r0, [r7, #11]
.L5206:
	ldr	r2, [r5, #8]
	add	r0, ip, r1, lsl #1
	ldr	r3, [r5, #28]
	add	r2, r9, r2
	cmp	r3, #1
	beq	.L5207
	cmp	r3, #2
	bne	.L5235
	lsr	lr, r2, #16
	ubfx	r7, r2, #8, #8
	lsr	fp, lr, #8
	strb	lr, [r0, #2]
	strb	fp, [r0, #3]
	strb	r2, [ip, r1, lsl #1]
	strb	r7, [r0, #1]
.L5210:
	ldr	r1, [r5, #4]
	add	r3, r9, r3, lsl #1
	uxth	fp, r4
	add	r2, r0, r3
	add	r9, r2, #6
	lsr	r7, r1, #16
	ubfx	ip, r1, #8, #8
	lsr	lr, r7, #8
	strb	r7, [r2, #2]
	strb	lr, [r2, #3]
	strb	r1, [r0, r3]
	ldr	r1, [sp, #4]
	strb	ip, [r2, #1]
	ldr	r3, [r5, #8]
	sub	r3, fp, r3
	sub	r3, r3, r1
	uxth	r3, r3
	lsr	r1, r3, #8
	strb	r3, [r2, #4]
	strb	r1, [r2, #5]
	ldrb	r1, [r8, #180]	@ zero_extendqisi2
	ldr	r7, [r5, #32]
	ldr	r3, [r5, #36]
	ldr	r2, [r5, #40]
	cmp	r1, #0
	add	r7, r7, r2
	add	r7, r7, r3
	add	r8, r9, r7, lsl #1
	bne	.L5241
.L5211:
	ldr	r2, [r5, #20]
	cmp	r2, #1
	beq	.L5212
	cmp	r2, #2
	bne	.L5235
	lsr	r1, r4, #16
	lsr	r3, fp, #8
	lsr	r0, r1, #8
	strb	r1, [r8, #2]
	strb	r0, [r8, #3]
	strb	r4, [r9, r7, lsl #1]
	strb	r3, [r8, #1]
.L5215:
	ldr	r1, [r5, #20]
	add	r0, r8, r2, lsl #1
	ldr	r3, [r6, #80]
	cmp	r1, #1
	sub	r4, r3, r4
	beq	.L5216
	cmp	r1, #2
	bne	.L5235
	lsr	r3, r4, #16
	ubfx	r1, r4, #8, #8
	lsr	ip, r3, #8
	strb	r3, [r0, #2]
	strb	ip, [r0, #3]
	strb	r4, [r8, r2, lsl #1]
	strb	r1, [r0, #1]
.L5219:
	cmp	r10, #0
	bne	.L5242
.L5196:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5238:
	ldr	r2, [r8, #88]
	ldr	r2, [r2, #28]
	ldrh	r1, [r2, #4]	@ unaligned
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L5222
	movw	r0, #:lower16:.LC470
	mov	fp, #1
	movt	r0, #:upper16:.LC470
	mov	r10, fp
	bl	printk
	b	.L5200
.L5203:
	ubfx	r3, fp, #8, #8
	strb	fp, [r7, #8]
	strb	r3, [r7, #9]
	b	.L5206
.L5207:
	ubfx	lr, r2, #8, #8
	strb	r2, [ip, r1, lsl #1]
	strb	lr, [r0, #1]
	b	.L5210
.L5212:
	lsr	r3, fp, #8
	strb	r4, [r9, r7, lsl #1]
	strb	r3, [r8, #1]
	b	.L5215
.L5216:
	ubfx	r3, r4, #8, #8
	strb	r4, [r8, r2, lsl #1]
	strb	r3, [r0, #1]
	b	.L5219
.L5240:
	mov	r1, r4
	bl	__memzero
	b	.L5202
.L5241:
	ldr	r2, [r6, #80]
	mvn	r0, #0
	ldr	r1, [r6, #172]
	sub	r2, r2, r4
	add	r1, r1, r4
	bl	crc32_le
	mvn	r3, r0
	ldr	r2, [r6, #80]
	mov	r0, r6
	ldr	r1, [sp, #8]
	str	r3, [sp, #4]
	ldr	r3, [r6, #172]
	ldr	ip, [sp, #4]
	str	r2, [sp, #8]
	add	r2, r3, r2
	lsr	lr, ip, #16
	ubfx	ip, ip, #8, #8
	str	ip, [sp, #12]
	lsr	ip, lr, #8
	strb	lr, [r2, #2]
	ldr	lr, [sp, #8]
	strb	ip, [r2, #3]
	mov	ip, r3
	ldr	r3, [sp, #4]
	strb	r3, [ip, lr]
	ldr	ip, [sp, #12]
	strb	ip, [r2, #1]
	bl	skb_put
	b	.L5211
.L5237:
	mov	r0, r7
	mov	r6, #0
	bl	dev_kfree_skb_any
	b	.L5196
.L5235:
	.syntax divided
@ 445 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz/drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 445, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L5242:
	mov	r1, #1
	mov	r0, r6
	bl	skb_put
	mov	r1, #1
	bl	__memzero
	movw	r0, #:lower16:.LC472
	ldr	r1, .L5243
	movt	r0, #:upper16:.LC472
	ldr	r2, [r6, #80]
	bl	printk
	b	.L5196
.L5239:
	movw	r0, #:lower16:.LC471
	movt	r0, #:upper16:.LC471
	bl	printk
	b	.L5196
.L5244:
	.align	2
.L5243:
	.word	.LANCHOR3+3644
	.fnend
	.size	ncm_wrap_ntb, .-ncm_wrap_ntb
	.section	.rodata.str1.4
	.align	2
.LC473:
	.ascii	"<6>%s: %s: speaker_status: %d, speaker_check_count "
	.ascii	"%d\012\000"
	.section	.text.unlikely
	.align	2
	.global	usb_gadget_connect_work
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_connect_work, %function
usb_gadget_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:speaker_status
	ldr	r2, .L5249
	.pad #8
	sub	sp, sp, #8
	movt	r5, #:upper16:speaker_status
	mov	r4, r0
	ldr	r6, [r0, #-440]
	ldr	ip, [r0, #48]
	movw	r0, #:lower16:.LC473
	movt	r0, #:upper16:.LC473
	ldr	r3, [r5]
	mov	r1, r2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r5]
	cmp	r3, #0
	ble	.L5246
	ldr	r3, [r4, #48]
	add	r3, r3, #1
	cmp	r3, #59
	str	r3, [r4, #48]
	bgt	.L5246
	mov	r0, #50
	bl	msecs_to_jiffies
	mov	r1, r0
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	pop	{r4, r5, r6, lr}
	b	schedule_delayed_work
.L5246:
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L5245
	mov	r1, #1
	add	sp, sp, #8
	@ sp needed
	pop	{r4, r5, r6, lr}
	bx	r3
.L5245:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, r5, r6, pc}
.L5250:
	.align	2
.L5249:
	.word	.LANCHOR3+3660
	.fnend
	.size	usb_gadget_connect_work, .-usb_gadget_connect_work
	.section	.rodata.str1.4
	.align	2
.LC474:
	.ascii	"ACCESSORY=START\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_start_work, %function
acc_start_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	.save {lr}
	str	lr, [sp, #-4]!
	movw	r3, #:lower16:.LC474
	movt	r2, #:upper16:.LANCHOR0
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r2, #696]
	movt	r3, #:upper16:.LC474
	mov	ip, #0
	mov	r1, #2
	mov	r2, sp
	stm	sp, {r3, ip}
	add	r0, r0, #8
	bl	kobject_uevent_env
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	acc_start_work, .-acc_start_work
	.section	.rodata.str1.4
	.align	2
.LC475:
	.ascii	"NCM_DEVICE=START\000"
	.align	2
.LC476:
	.ascii	"NCM_DEVICE=RELEASE\000"
	.align	2
.LC477:
	.ascii	"<7>usb: %s ncm_connect=%d\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_work, %function
ncm_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LC475
	push	{r4, lr}
	.save {r4, lr}
	mov	ip, #0
	.pad #16
	sub	sp, sp, #16
	ldr	r1, .L5257
	movt	r2, #:upper16:.LC475
	movw	r3, #:lower16:.LC476
	movw	r4, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LC476
	movt	r4, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC477
	stm	sp, {r2, ip}
	movt	r0, #:upper16:.LC477
	ldrb	r2, [r4, #3560]	@ zero_extendqisi2
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	bl	printk
	ldrb	r3, [r4, #3560]	@ zero_extendqisi2
	mov	r1, #2
	cmp	r3, #0
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	addeq	r2, sp, #8
	ldr	r0, [r3, #876]
	movne	r2, sp
	add	r0, r0, #8
	bl	kobject_uevent_env
	add	sp, sp, #16
	@ sp needed
	pop	{r4, pc}
.L5258:
	.align	2
.L5257:
	.word	.LANCHOR3+3684
	.fnend
	.size	ncm_work, .-ncm_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_cleanup_functions, %function
android_cleanup_functions:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movw	r6, #:lower16:.LANCHOR1
	sub	r5, r0, #4
	movt	r6, #:upper16:.LANCHOR1
.L5260:
	ldr	r4, [r5, #4]!
	cmp	r4, #0
	popeq	{r4, r5, r6, r7, r8, pc}
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L5260
	ldr	r1, [r3, #288]
	ldr	r0, [r6, #3564]
	bl	device_destroy
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L5262
	mov	r0, r4
	blx	r3
.L5262:
	ldr	r7, [r4, #16]
	cmp	r7, #0
	beq	.L5260
.L5263:
	ldr	r1, [r7], #4
	cmp	r1, #0
	beq	.L5260
	ldr	r0, [r4, #8]
	bl	device_remove_file
	b	.L5263
	.fnend
	.size	android_cleanup_functions, .-android_cleanup_functions
	.section	.rodata.str1.4
	.align	2
.LC478:
	.ascii	"<7>usb: %s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_usb_unbind, %function
android_usb_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r2, r5
	str	lr, [sp, #12]
	ldr	r4, [r2, #3232]!
	cmp	r4, r2
	sub	r4, r4, #512
	beq	.L5274
	mov	r1, r0
	b	.L5275
.L5278:
	ldr	r4, [r4, #512]
	cmp	r4, r2
	sub	r4, r4, #512
	beq	.L5274
.L5275:
	ldr	r3, [r4, #8]
	cmp	r1, r3
	bne	.L5278
.L5274:
	movw	r0, #:lower16:.LC478
	ldr	r1, .L5279
	mov	r6, #0
	movt	r0, #:upper16:.LC478
	bl	printk
	mov	r3, #48
	add	r0, r4, #176
	strb	r3, [r5, #2220]
	strb	r6, [r5, #2508]
	strb	r6, [r5, #2764]
	bl	cancel_work_sync
	ldr	r0, [r4, #4]
	bl	android_cleanup_functions
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5280:
	.align	2
.L5279:
	.word	.LANCHOR3+3696
	.fnend
	.size	android_usb_unbind, .-android_usb_unbind
	.section	.rodata.str1.4
	.align	2
.LC479:
	.ascii	"<3>usb: %s superspeed available \012\000"
	.align	2
.LC480:
	.ascii	"<3>usb: %s ss_host_available(%d), windowsos(%d)\012"
	.ascii	"\000"
	.align	2
.LC481:
	.ascii	"<3>usb: %s gadget not available \012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	macos_show, %function
macos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L5282
	ldr	r0, [r3]
	bl	sec_get_ss_host_available
	mov	r4, r0
	bl	get_host_os_type
	cmp	r4, #1
	cmpeq	r0, #1
	mov	r5, r0
	bne	.L5285
	movw	r0, #:lower16:.LC479
	ldr	r1, .L5287
	mov	r7, #0
	movt	r0, #:upper16:.LC479
	bl	printk
.L5283:
	movw	r0, #:lower16:.LC480
	ldr	r1, .L5287
	mov	r3, r5
	mov	r2, r4
	movt	r0, #:upper16:.LC480
	bl	printk
	b	.L5284
.L5282:
	movw	r0, #:lower16:.LC481
	ldr	r1, .L5287
	mvn	r7, #0
	movt	r0, #:upper16:.LC481
	bl	printk
.L5284:
	movw	r1, #:lower16:.LC75
	mov	r2, r7
	ldrd	r4, [sp]
	mov	r0, r6
	movt	r1, #:upper16:.LC75
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	sprintf
.L5285:
	mov	r7, #1
	b	.L5283
.L5288:
	.align	2
.L5287:
	.word	.LANCHOR3+3716
	.fnend
	.size	macos_show, .-macos_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ss_host_available_show, %function
ss_host_available_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L5290
	ldr	r0, [r3]
	bl	sec_get_ss_host_available
	mov	r4, r0
	bl	get_host_os_type
	cmp	r4, #1
	cmpeq	r0, #1
	mov	r5, r0
	moveq	r3, #1
	movne	r3, #0
	bne	.L5293
	movw	r0, #:lower16:.LC479
	ldr	r1, .L5295
	mov	r7, #1
	movt	r0, #:upper16:.LC479
	bl	printk
.L5291:
	movw	r0, #:lower16:.LC480
	ldr	r1, .L5295
	mov	r3, r5
	mov	r2, r4
	movt	r0, #:upper16:.LC480
	bl	printk
	b	.L5292
.L5290:
	movw	r0, #:lower16:.LC481
	ldr	r1, .L5295
	mvn	r7, #0
	movt	r0, #:upper16:.LC481
	bl	printk
.L5292:
	movw	r1, #:lower16:.LC75
	mov	r2, r7
	ldrd	r4, [sp]
	mov	r0, r6
	movt	r1, #:upper16:.LC75
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	sprintf
.L5293:
	mov	r7, r3
	b	.L5291
.L5296:
	.align	2
.L5295:
	.word	.LANCHOR3+3728
	.fnend
	.size	ss_host_available_show, .-ss_host_available_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iSerial_store, %function
iSerial_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L5299
	mov	r1, r2
	ldr	r0, .L5304
	mov	r2, #256
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L5304
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5299:
	mvn	r0, #21
	bx	lr
.L5305:
	.align	2
.L5304:
	.word	.LANCHOR1+2220
	.fnend
	.size	iSerial_store, .-iSerial_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iProduct_store, %function
iProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L5308
	mov	r1, r2
	ldr	r0, .L5313
	mov	r2, #256
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L5313
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5308:
	mvn	r0, #21
	bx	lr
.L5314:
	.align	2
.L5313:
	.word	.LANCHOR1+2508
	.fnend
	.size	iProduct_store, .-iProduct_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iManufacturer_store, %function
iManufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L5317
	mov	r1, r2
	ldr	r0, .L5322
	mov	r2, #256
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L5322
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5317:
	mvn	r0, #21
	bx	lr
.L5323:
	.align	2
.L5322:
	.word	.LANCHOR1+2764
	.fnend
	.size	iManufacturer_store, .-iManufacturer_store
	.section	.rodata.cst4
	.align	2
.LC482:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_aliases_store, %function
ffs_aliases_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 264
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR1
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r1, #:lower16:.LC482
	movt	r0, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC482
	str	lr, [sp, #16]
	ldr	r5, [r0, #3232]
	.pad #268
	sub	sp, sp, #268
	mov	r4, r3
	ldr	r1, [r1]
	str	r1, [sp, #260]
	mov	r1,#0
	mov	r6, r2
	sub	r7, r5, #488
	mov	r0, r7
	bl	mutex_lock
	ldrb	r3, [r5, #-496]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L5329
	mov	r1, r6
	mov	r2, #256
	add	r0, sp, #4
	bl	strlcpy
	add	r0, sp, #4
	bl	strim
	mov	r1, r0
	mov	r2, #256
	sub	r0, r5, #320
	bl	strlcpy
	mov	r0, r7
	bl	mutex_unlock
	mov	r0, r4
.L5324:
	movw	r3, #:lower16:.LC482
	movt	r3, #:upper16:.LC482
	ldr	r2, [r3]
	ldr	r3, [sp, #260]
	eors	r2, r3, r2
	bne	.L5330
	add	sp, sp, #268
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5329:
	mov	r0, r7
	bl	mutex_unlock
	mvn	r0, #15
	b	.L5324
.L5330:
	bl	__stack_chk_fail
	.fnend
	.size	ffs_aliases_store, .-ffs_aliases_store
	.section	.rodata.str1.4
	.align	2
.LC483:
	.ascii	":\000"
	.align	2
.LC484:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android con"
	.ascii	"f\012\000"
	.align	2
.LC485:
	.ascii	",\000"
	.align	2
.LC486:
	.ascii	"ffs\000"
	.align	2
.LC487:
	.ascii	"<3>%s: android_usb: Cannot enable ffs (%d)\000"
	.align	2
.LC488:
	.ascii	"<3>%s: android_usb: Cannot enable '%s' (%d)\000"
	.section	.rodata.cst4
	.align	2
.LC489:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	functions_store, %function
functions_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 552
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC489
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC489
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #556
	sub	sp, sp, #556
	ldr	r1, [r1]
	str	r1, [sp, #548]
	mov	r1,#0
	str	r3, [sp, #20]
	bl	dev_get_drvdata
	add	r3, r0, #24
	mov	r9, r0
	add	fp, r0, #500
	mov	r0, r3
	str	r3, [sp, #16]
	bl	mutex_lock
	ldrb	r6, [r9, #16]	@ zero_extendqisi2
	cmp	r6, #0
	bne	.L5382
	ldr	r5, [r9, #500]
	cmp	fp, r5
	sub	r5, r5, #120
	beq	.L5335
.L5334:
	mov	r8, r5
	ldr	r4, [r8, #112]!
	cmp	r8, r4
	beq	.L5337
.L5336:
	mov	r0, r4
	ldr	r3, [r4, #-4]!
	str	r6, [r3, #20]
	bl	list_del
	mov	r0, r4
	bl	kfree
	ldr	r4, [r5, #112]
	cmp	r4, r8
	bne	.L5336
.L5337:
	ldr	r3, [r5, #120]
	str	r8, [r5, #112]
	str	r8, [r5, #116]
	cmp	fp, r3
	sub	r5, r3, #120
	bne	.L5334
.L5335:
	mov	r1, r7
	mov	r2, #256
	add	r0, sp, #36
	bl	strlcpy
	add	r0, sp, #36
	bl	strim
	cmp	r0, #0
	str	r0, [sp, #28]
	beq	.L5358
	movw	r3, #:lower16:.LC483
	movw	r4, #:lower16:.LC485
	str	fp, [sp, #4]
	movt	r3, #:upper16:.LC483
	movt	r4, #:upper16:.LC485
	mov	r7, #0
	str	r3, [sp, #8]
	str	fp, [sp, #12]
.L5351:
	add	r0, sp, #28
	ldr	r1, [sp, #8]
	bl	strsep
	cmp	r0, #0
	str	r0, [sp, #24]
	beq	.L5339
	ldr	r3, [sp, #4]
	ldr	r2, [sp, #12]
	ldr	r3, [r3]
	cmp	r3, r2
	beq	.L5340
	sub	r10, r3, #120
	str	r3, [sp, #4]
.L5341:
	movw	fp, #:lower16:.LC488
	add	r8, r9, #192
	movt	fp, #:upper16:.LC488
	add	r6, sp, #292
.L5350:
	mov	r1, r4
	add	r0, sp, #24
	bl	strsep
	mov	r5, r0
	mov	r2, #256
	mov	r1, r8
	mov	r0, r6
	bl	strlcpy
	str	r6, [sp, #32]
.L5346:
	mov	r1, r4
	add	r0, sp, #32
	bl	strsep
	subs	r1, r0, #0
	beq	.L5344
	mov	r0, r5
	bl	strcmp
	cmp	r0, #0
	beq	.L5345
.L5344:
	ldr	r3, [sp, #32]
	cmp	r3, #0
	bne	.L5346
	mov	r2, r5
	mov	r1, r10
	mov	r0, r9
	bl	android_enable_function
	cmp	r0, #0
	bne	.L5383
.L5349:
	ldr	r3, [sp, #24]
	cmp	r3, #0
	bne	.L5350
.L5339:
	ldr	r3, [sp, #28]
	cmp	r3, #0
	bne	.L5351
	ldr	fp, [sp, #12]
.L5338:
	ldr	r3, [sp, #4]
	ldr	r0, [r3]
	cmp	r0, fp
	movne	r5, r3
	beq	.L5353
.L5352:
	sub	r4, r0, #120
	bl	list_del
	ldr	r3, [r9, #508]
	mov	r0, r4
	sub	r3, r3, #1
	str	r3, [r9, #508]
	bl	kfree
	ldr	r0, [r5]
	cmp	r0, fp
	bne	.L5352
.L5353:
	ldr	r0, [sp, #16]
	bl	mutex_unlock
	ldr	r0, [sp, #20]
.L5331:
	movw	r3, #:lower16:.LC489
	movt	r3, #:upper16:.LC489
	ldr	r2, [r3]
	ldr	r3, [sp, #548]
	eors	r2, r3, r2
	bne	.L5384
	add	sp, sp, #556
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5345:
	cmp	r7, #0
	beq	.L5385
.L5355:
	mov	r7, #1
	b	.L5349
.L5385:
	movw	r2, #:lower16:.LC486
	mov	r1, r10
	movt	r2, #:upper16:.LC486
	mov	r0, r9
	bl	android_enable_function
	subs	r2, r0, #0
	beq	.L5355
	movw	r0, #:lower16:.LC487
	ldr	r1, .L5387
	movt	r0, #:upper16:.LC487
	bl	printk
	b	.L5349
.L5340:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L5359
	mov	r2, #128
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L5386
.L5342:
	ldr	ip, [r9]
	movw	r1, #:lower16:android_unbind_config
	add	r3, r10, #112
	ldr	r2, [r9, #508]
	movt	r1, #:upper16:android_unbind_config
	mov	r0, #12480
	add	r2, r2, #1
	str	r2, [r9, #508]
	ldr	r2, [sp, #12]
	str	ip, [r10]
	str	r1, [r10, #12]
	ldr	r1, [r9, #508]
	strb	r1, [r10, #20]
	strh	r0, [r10, #22]	@ movhi
	add	r0, r10, #120
	str	r3, [r10, #112]
	str	r3, [r10, #116]
	ldr	r1, [r9, #504]
	bl	__list_add
	ldr	r2, [sp, #4]
	ldr	r3, [sp, #24]
	ldr	r2, [r2]
	str	r2, [sp, #4]
.L5343:
	cmp	r3, #0
	bne	.L5341
	b	.L5339
.L5359:
	mov	r10, #16
	b	.L5342
.L5358:
	str	fp, [sp, #4]
	b	.L5338
.L5382:
	ldr	r0, [sp, #16]
	bl	mutex_unlock
	mvn	r0, #15
	b	.L5331
.L5384:
	bl	__stack_chk_fail
.L5386:
	ldr	r2, .L5387+4
	movw	r0, #:lower16:.LC484
	mvn	r10, #11
	movt	r0, #:upper16:.LC484
	mov	r1, r2
	bl	printk
	ldr	r2, [sp, #4]
	ldr	r3, [sp, #24]
	ldr	r2, [r2]
	str	r2, [sp, #4]
	b	.L5343
.L5383:
	mov	r3, r0
	ldr	r1, .L5387
	mov	r2, r5
	mov	r0, fp
	bl	printk
	b	.L5349
.L5388:
	.align	2
.L5387:
	.word	.LANCHOR3+3776
	.word	.LANCHOR3+3752
	.fnend
	.size	functions_store, .-functions_store
	.section	.rodata.str1.4
	.align	2
.LC490:
	.ascii	"%s called\012\000"
	.align	2
.LC491:
	.ascii	"<6>%s (%s)\012\000"
	.align	2
.LC492:
	.ascii	"SWITCH_NAME=USB_MESSAGE\000"
	.align	2
.LC493:
	.ascii	"SWITCH_STATE=%s\000"
	.align	2
.LC494:
	.ascii	"usb_msg\000"
	.align	2
.LC495:
	.ascii	"Send cd eject message to daemon\012\000"
	.section	.rodata.cst4
	.align	2
.LC496:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_message, %function
send_message:
	.fnstart
	@ args = 0, pretend = 0, frame = 264
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5405
	movw	r2, #:lower16:.LC496
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r2, #:upper16:.LC496
	strd	r6, [sp, #8]
	mov	r4, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #264
	sub	sp, sp, #264
	ldr	r9, [r0]
	ldr	r2, [r2]
	str	r2, [sp, #260]
	mov	r2,#0
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	beq	.L5390
	movw	r2, #:lower16:.LC490
	sub	r0, r3, #24
	ldr	r3, .L5405+4
	movt	r2, #:upper16:.LC490
	add	r1, r9, #32
	bl	__dynamic_dev_dbg
.L5390:
	movw	r0, #:lower16:.LC491
	ldr	r1, .L5405+4
	mov	r2, r4
	movt	r0, #:upper16:.LC491
	bl	printk
	cmp	r9, #0
	beq	.L5403
	movw	r0, #:lower16:.LC492
	mov	r3, r4
	movt	r0, #:upper16:.LC492
	add	r1, sp, #20
	ldrd	r6, [r0]
	add	r10, sp, #140
	movw	r2, #:lower16:.LC493
	ldrd	r4, [r0, #8]
	movt	r2, #:upper16:.LC493
	strd	r4, [sp]
	ldrd	r4, [r0, #16]
	mov	r0, r10
	strd	r6, [sp, #20]
	ldrd	r6, [sp]
	str	r1, [sp, #8]
	mov	r1, #120
	strd	r6, [sp, #28]
	strd	r4, [sp, #36]
	bl	snprintf
	ldr	r0, [r9, #356]
	mov	r3, #0
	str	r10, [sp, #12]
	str	r3, [sp, #16]
	cmp	r0, r3
	bne	.L5395
	movw	r1, #:lower16:.LC494
	ldr	r2, .L5405+8
	movt	r1, #:upper16:.LC494
	bl	__class_create
	cmn	r0, #4096
	str	r0, [r9, #356]
	bls	.L5395
	mvn	r0, #0
.L5389:
	movw	r3, #:lower16:.LC496
	movt	r3, #:upper16:.LC496
	ldr	r2, [r3]
	ldr	r3, [sp, #260]
	eors	r2, r3, r2
	bne	.L5404
	add	sp, sp, #264
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5395:
	ldr	r0, .L5405+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L5394
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC495
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC495
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L5394:
	add	r0, r9, #40
	add	r2, sp, #8
	mov	r1, #2
	bl	kobject_uevent_env
.L5403:
	mov	r0, #0
	b	.L5389
.L5404:
	bl	__stack_chk_fail
.L5406:
	.align	2
.L5405:
	.word	.LANCHOR4-3456
	.word	.LANCHOR3+3792
	.word	.LANCHOR1+3568
	.word	.LANCHOR4-3424
	.fnend
	.size	send_message, .-send_message
	.section	.rodata.str1.4
	.align	2
.LC497:
	.ascii	"<7>usb: %s disconnect\012\000"
	.align	2
.LC498:
	.ascii	"f_%s\000"
	.align	2
.LC499:
	.ascii	"<3>%s: %s: Failed to create dev %s\000"
	.align	2
.LC500:
	.ascii	"<3>%s: %s: Failed to init %s\000"
	.align	2
.LC501:
	.ascii	"<3>%s: %s: Failed to create function %s attributes\000"
	.align	2
.LC502:
	.ascii	"Android\000"
	.align	2
.LC503:
	.ascii	"0123456789ABCDEF\000"
	.align	2
.LC504:
	.ascii	"net2280\000"
	.align	2
.LC505:
	.ascii	"dummy_udc\000"
	.align	2
.LC506:
	.ascii	"pxa25x_udc\000"
	.align	2
.LC507:
	.ascii	"goku_udc\000"
	.align	2
.LC508:
	.ascii	"omap_udc\000"
	.align	2
.LC509:
	.ascii	"pxa27x_udc\000"
	.align	2
.LC510:
	.ascii	"s3c2410_udc\000"
	.align	2
.LC511:
	.ascii	"at91_udc\000"
	.align	2
.LC512:
	.ascii	"imx_udc\000"
	.align	2
.LC513:
	.ascii	"musb-hdrc\000"
	.align	2
.LC514:
	.ascii	"atmel_usba_udc\000"
	.align	2
.LC515:
	.ascii	"fsl-usb2-udc\000"
	.align	2
.LC516:
	.ascii	"amd5536udc\000"
	.align	2
.LC517:
	.ascii	"m66592_udc\000"
	.align	2
.LC518:
	.ascii	"fsl_qe_udc\000"
	.align	2
.LC519:
	.ascii	"ci13xxx_pci\000"
	.align	2
.LC520:
	.ascii	"langwell_udc\000"
	.align	2
.LC521:
	.ascii	"r8a66597_udc\000"
	.align	2
.LC522:
	.ascii	"s3c-hsotg\000"
	.align	2
.LC523:
	.ascii	"pch_udc\000"
	.align	2
.LC524:
	.ascii	"ci13xxx_msm\000"
	.align	2
.LC525:
	.ascii	"renesas_usbhs_udc\000"
	.align	2
.LC526:
	.ascii	"s3c-hsudc\000"
	.align	2
.LC527:
	.ascii	"net2272\000"
	.align	2
.LC528:
	.ascii	"dwc3-gadget\000"
	.align	2
.LC529:
	.ascii	"msm72k_udc\000"
	.align	2
.LC530:
	.ascii	"ci13xxx_msm_hsic\000"
	.align	2
.LC531:
	.ascii	"<4>%s: %s: controller '%s' not recognized\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_bind, %function
android_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	mov	r6, r0
	ldr	r1, .L5488
	ldr	r4, [r7, #3236]
	movw	r0, #:lower16:.LC497
	.pad #20
	sub	sp, sp, #20
	ldr	fp, [r6]
	movt	r0, #:upper16:.LC497
	str	r6, [r4, #-504]
	bl	printk
	ldr	r3, [fp]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L5408
	mov	r1, #0
	mov	r0, fp
	blx	r3
.L5408:
	ldr	r10, [r7, #3396]
	cmp	r10, #1
	beq	.L5409
.L5429:
	ldrb	r3, [r6, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L5484
	b	.L5411
.L5409:
	ldr	r8, [r7, #3232]
	ldr	r3, .L5488+4
	sub	r8, r8, #512
.L5412:
	add	r2, r8, #512
	cmp	r2, r3
	beq	.L5416
	ldr	r2, [r8, #8]
	cmp	r6, r2
	bne	.L5413
.L5416:
	ldr	r3, [r4, #-508]
	movw	r2, #:lower16:.LC498
	movt	r2, #:upper16:.LC498
	str	r2, [sp, #12]
	sub	r3, r3, #4
	str	r3, [sp, #8]
	b	.L5414
.L5413:
	ldr	r8, [r8, #512]
	sub	r8, r8, #512
	b	.L5412
.L5485:
	cmp	r5, #0
	bne	.L5481
	ldr	r0, [r4, #8]
	mov	r9, r3
	bl	device_create_file
	mov	r5, r0
.L5422:
	mov	r3, r9
	ldr	r1, [r3], #4
	cmp	r1, #0
	bne	.L5485
	cmp	r5, #0
	bne	.L5481
.L5423:
	add	r10, r10, #1
.L5414:
	ldr	r3, [sp, #8]
	ldr	r4, [r3, #4]!
	cmp	r4, #0
	str	r3, [sp, #8]
	beq	.L5429
	mov	r0, #208
	ldr	r2, [r4]
	ldr	r1, [sp, #12]
	bl	kasprintf
	mov	r3, #0
	str	r0, [r4, #12]
	cmp	r0, r3
	str	r3, [r4, #20]
	beq	.L5434
	mov	r3, r4
	mov	r2, r10
	str	r0, [sp]
	ldr	r1, [r8, #12]
	ldr	r0, [r7, #3564]
	bl	device_create
	cmn	r0, #4096
	str	r0, [r4, #8]
	bls	.L5418
	ldr	r2, .L5488+8
	movw	r0, #:lower16:.LC499
	movt	r0, #:upper16:.LC499
	ldr	r3, [r4, #12]
	mov	r1, r2
	bl	printk
	ldr	r5, [r4, #8]
	b	.L5419
.L5418:
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L5420
	mov	r1, r6
	mov	r0, r4
	blx	r3
	subs	r5, r0, #0
	beq	.L5420
	ldr	r2, .L5488+8
	movw	r0, #:lower16:.LC500
	movt	r0, #:upper16:.LC500
	ldr	r3, [r4]
	mov	r1, r2
	bl	printk
	b	.L5421
.L5420:
	ldr	r9, [r4, #16]
	cmp	r9, #0
	beq	.L5423
	mov	r5, #0
	b	.L5422
.L5481:
	mov	r2, r3
	mov	r3, r9
	mov	r9, r2
	ldr	r2, .L5488+8
	movw	r0, #:lower16:.LC501
	sub	r10, r3, #4
	movt	r0, #:upper16:.LC501
	ldr	r3, [r4]
	mov	r1, r2
	bl	printk
	ldr	r1, [r9, #-8]
.L5427:
	ldr	r3, [r4, #16]
	cmp	r10, r3
	beq	.L5486
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r10], #-4
	b	.L5427
.L5486:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L5421
	mov	r0, r4
	blx	r3
.L5421:
	ldr	r3, [r4, #8]
	ldr	r0, [r7, #3564]
	ldr	r1, [r3, #288]
	bl	device_destroy
.L5419:
	mov	r3, #0
	ldr	r0, [r4, #12]
	str	r3, [r4, #8]
	bl	kfree
	b	.L5417
.L5434:
	mvn	r5, #11
.L5417:
	ldr	r0, [r8, #4]
	bl	android_cleanup_functions
	cmp	r5, #0
	bne	.L5407
	b	.L5429
.L5484:
	add	r2, r3, #1
	movw	r1, #:lower16:.LANCHOR0
	uxtb	r2, r2
	movt	r1, #:upper16:.LANCHOR0
	mov	r5, r1
	cmp	r2, #254
	strb	r2, [r6, #48]
	strb	r2, [r1, #150]
	strb	r2, [r1, #1076]
	bne	.L5487
.L5411:
	mvn	r5, #18
	b	.L5407
.L5487:
	add	r3, r3, #2
	movw	r1, #:lower16:.LC502
	ldr	r0, .L5488+12
	uxtb	r3, r3
	movt	r1, #:upper16:.LC502
	mov	r2, #255
	strb	r3, [r6, #48]
	strb	r3, [r5, #151]
	strb	r3, [r5, #1084]
	bl	strlcpy
	movw	r1, #:lower16:.LC502
	mov	r2, #255
	ldr	r0, .L5488+16
	movt	r1, #:upper16:.LC502
	bl	strlcpy
	movw	r1, #:lower16:.LC503
	ldr	r0, .L5488+20
	mov	r2, #255
	movt	r1, #:upper16:.LC503
	bl	strlcpy
	ldrb	r3, [r6, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L5411
	add	r3, r3, #1
	movw	r0, #:lower16:.LC504
	uxtb	r3, r3
	movt	r0, #:upper16:.LC504
	strb	r3, [r6, #48]
	ldr	r4, [fp, #28]
	strb	r3, [r5, #152]
	strb	r3, [r5, #1092]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L5436
	movw	r0, #:lower16:.LC505
	mov	r1, r4
	movt	r0, #:upper16:.LC505
	bl	strcmp
	cmp	r0, #0
	beq	.L5437
	movw	r0, #:lower16:.LC506
	mov	r1, r4
	movt	r0, #:upper16:.LC506
	bl	strcmp
	cmp	r0, #0
	beq	.L5438
	movw	r0, #:lower16:.LC507
	mov	r1, r4
	movt	r0, #:upper16:.LC507
	bl	strcmp
	cmp	r0, #0
	beq	.L5439
	movw	r0, #:lower16:.LC508
	mov	r1, r4
	movt	r0, #:upper16:.LC508
	bl	strcmp
	cmp	r0, #0
	beq	.L5440
	movw	r0, #:lower16:.LC509
	mov	r1, r4
	movt	r0, #:upper16:.LC509
	bl	strcmp
	cmp	r0, #0
	beq	.L5441
	movw	r0, #:lower16:.LC510
	mov	r1, r4
	movt	r0, #:upper16:.LC510
	bl	strcmp
	cmp	r0, #0
	beq	.L5442
	movw	r0, #:lower16:.LC511
	mov	r1, r4
	movt	r0, #:upper16:.LC511
	bl	strcmp
	cmp	r0, #0
	beq	.L5443
	movw	r0, #:lower16:.LC512
	mov	r1, r4
	movt	r0, #:upper16:.LC512
	bl	strcmp
	cmp	r0, #0
	beq	.L5444
	movw	r0, #:lower16:.LC513
	mov	r1, r4
	movt	r0, #:upper16:.LC513
	bl	strcmp
	cmp	r0, #0
	beq	.L5445
	movw	r0, #:lower16:.LC514
	mov	r1, r4
	movt	r0, #:upper16:.LC514
	bl	strcmp
	cmp	r0, #0
	beq	.L5446
	movw	r0, #:lower16:.LC515
	mov	r1, r4
	movt	r0, #:upper16:.LC515
	bl	strcmp
	cmp	r0, #0
	beq	.L5447
	movw	r0, #:lower16:.LC516
	mov	r1, r4
	movt	r0, #:upper16:.LC516
	bl	strcmp
	cmp	r0, #0
	beq	.L5448
	movw	r0, #:lower16:.LC517
	mov	r1, r4
	movt	r0, #:upper16:.LC517
	bl	strcmp
	cmp	r0, #0
	beq	.L5449
	movw	r0, #:lower16:.LC518
	mov	r1, r4
	movt	r0, #:upper16:.LC518
	bl	strcmp
	cmp	r0, #0
	beq	.L5450
	movw	r0, #:lower16:.LC519
	mov	r1, r4
	movt	r0, #:upper16:.LC519
	bl	strcmp
	cmp	r0, #0
	beq	.L5451
	movw	r0, #:lower16:.LC520
	mov	r1, r4
	movt	r0, #:upper16:.LC520
	bl	strcmp
	cmp	r0, #0
	beq	.L5452
	movw	r0, #:lower16:.LC521
	mov	r1, r4
	movt	r0, #:upper16:.LC521
	bl	strcmp
	cmp	r0, #0
	beq	.L5453
	movw	r0, #:lower16:.LC522
	mov	r1, r4
	movt	r0, #:upper16:.LC522
	bl	strcmp
	cmp	r0, #0
	beq	.L5454
	movw	r0, #:lower16:.LC523
	mov	r1, r4
	movt	r0, #:upper16:.LC523
	bl	strcmp
	cmp	r0, #0
	beq	.L5455
	movw	r0, #:lower16:.LC524
	mov	r1, r4
	movt	r0, #:upper16:.LC524
	bl	strcmp
	cmp	r0, #0
	beq	.L5456
	movw	r0, #:lower16:.LC525
	mov	r1, r4
	movt	r0, #:upper16:.LC525
	bl	strcmp
	cmp	r0, #0
	beq	.L5457
	movw	r0, #:lower16:.LC526
	mov	r1, r4
	movt	r0, #:upper16:.LC526
	bl	strcmp
	cmp	r0, #0
	beq	.L5458
	movw	r0, #:lower16:.LC527
	mov	r1, r4
	movt	r0, #:upper16:.LC527
	bl	strcmp
	cmp	r0, #0
	beq	.L5459
	movw	r0, #:lower16:.LC528
	mov	r1, r4
	movt	r0, #:upper16:.LC528
	bl	strcmp
	cmp	r0, #0
	beq	.L5460
	movw	r0, #:lower16:.LC529
	mov	r1, r4
	movt	r0, #:upper16:.LC529
	bl	strcmp
	cmp	r0, #0
	beq	.L5461
	movw	r0, #:lower16:.LC530
	mov	r1, r4
	movt	r0, #:upper16:.LC530
	bl	strcmp
	cmp	r0, #0
	beq	.L5462
	ldr	r2, .L5488+24
	movw	r0, #:lower16:.LC531
	mov	r3, r4
	movt	r0, #:upper16:.LC531
	sub	r1, r2, #40
	bl	printk
	movw	r3, #39321
	movt	r3, 65535
	strh	r3, [r5, #148]	@ movhi
	b	.L5433
.L5436:
	mov	r3, #1
	b	.L5432
.L5437:
	mov	r3, #2
	b	.L5432
.L5438:
	mov	r3, #3
	b	.L5432
.L5439:
	mov	r3, #6
	b	.L5432
.L5440:
	mov	r3, #8
	b	.L5432
.L5441:
	mov	r3, #17
	b	.L5432
.L5442:
	mov	r3, #18
	b	.L5432
.L5443:
	mov	r3, #19
	b	.L5432
.L5444:
	mov	r3, #20
	b	.L5432
.L5445:
	mov	r3, #22
	b	.L5432
.L5446:
	mov	r3, #24
	b	.L5432
.L5447:
	mov	r3, #25
	b	.L5432
.L5448:
	mov	r3, #32
	b	.L5432
.L5449:
	mov	r3, #33
	b	.L5432
.L5450:
	mov	r3, #34
	b	.L5432
.L5451:
	mov	r3, #35
	b	.L5432
.L5452:
	mov	r3, #36
	b	.L5432
.L5453:
	mov	r3, #37
	b	.L5432
.L5454:
	mov	r3, #38
	b	.L5432
.L5455:
	mov	r3, #39
	b	.L5432
.L5456:
	mov	r3, #40
	b	.L5432
.L5457:
	mov	r3, #41
	b	.L5432
.L5458:
	mov	r3, #48
	b	.L5432
.L5459:
	mov	r3, #49
	b	.L5432
.L5460:
	mov	r3, #50
	b	.L5432
.L5461:
	mov	r3, #51
	b	.L5432
.L5462:
	mov	r3, #52
.L5432:
	add	r3, r3, #512
	strh	r3, [r5, #148]	@ movhi
.L5433:
	mov	r3, #4
	mov	r5, #0
	str	r3, [r7, #3568]
.L5407:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L5489:
	.align	2
.L5488:
	.word	.LANCHOR3+3808
	.word	.LANCHOR1+3232
	.word	.LANCHOR3+3824
	.word	.LANCHOR1+2764
	.word	.LANCHOR1+2508
	.word	.LANCHOR1+2220
	.word	.LANCHOR3+3848
	.fnend
	.size	android_bind, .-android_bind
	.section	.rodata.str1.4
	.align	2
.LC532:
	.ascii	"USB_STATE=DISCONNECTED\000"
	.align	2
.LC533:
	.ascii	"USB_STATE=CONNECTED\000"
	.align	2
.LC534:
	.ascii	"USB_STATE=CONFIGURED\000"
	.align	2
.LC535:
	.ascii	"USB_STATE=SUSPENDED\000"
	.align	2
.LC536:
	.ascii	"USB_STATE=RESUMED\000"
	.align	2
.LC537:
	.ascii	"USB_CONNECTION=CONNECTED\000"
	.align	2
.LC538:
	.ascii	"low\000"
	.align	2
.LC539:
	.ascii	"<6>%s: %s: did not send uevent (%d %d %pK)\012\000"
	.align	2
.LC540:
	.ascii	"<6>%s: %s: sent uevent %s\012\000"
	.align	2
.LC541:
	.ascii	"<6>%s: %s: sent missed DISCONNECT event\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_work, %function
android_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC532
	movw	r2, #:lower16:.LC533
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC532
	movt	r2, #:upper16:.LC533
	strd	r8, [sp, #16]
	movw	r3, #:lower16:.LC535
	mov	r4, r0
	str	lr, [sp, #24]
	ldr	r5, [r0, #-168]
	.pad #60
	sub	sp, sp, #60
	movt	r3, #:upper16:.LC535
	movw	r0, #:lower16:.LC534
	movt	r0, #:upper16:.LC534
	str	r1, [sp, #8]
	movw	r1, #:lower16:.LC536
	str	r2, [sp, #16]
	movw	r2, #:lower16:.LC537
	movt	r1, #:upper16:.LC536
	movt	r2, #:upper16:.LC537
	add	r6, r5, #60
	str	r0, [sp, #24]
	str	r3, [sp, #32]
	mov	r3, #0
	mov	r0, r6
	str	r3, [sp, #12]
	str	r3, [sp, #20]
	str	r3, [sp, #28]
	str	r3, [sp, #36]
	str	r1, [sp, #40]
	str	r3, [sp, #44]
	strd	r2, [sp, #48]
	bl	_raw_spin_lock_irqsave
	ldrb	r2, [r4, #-126]	@ zero_extendqisi2
	mov	r1, r0
	ldrb	r3, [r4, #-125]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L5491
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L5560
	ldrb	r3, [r4, #-124]	@ zero_extendqisi2
	cmp	r3, #108
	beq	.L5561
.L5493:
	eor	r9, r2, #1
.L5495:
	cmp	r2, #0
	beq	.L5562
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #3
	movt	r5, #:upper16:.LANCHOR1
	add	r8, sp, #32
	str	r3, [r5, #3572]
.L5518:
	ldrb	r3, [r4, #-128]	@ zero_extendqisi2
	mov	r0, r6
	strb	r3, [r4, #-127]
	strb	r2, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	cmn	r9, #1
	beq	.L5517
	ldr	r3, [r4, #-132]
	cmp	r3, #0
	addne	r7, sp, #16
	beq	.L5517
.L5504:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r2, [r6, #1108]
	cmp	r2, r9
	beq	.L5503
.L5528:
	ldr	r1, [r3, #4]
	cmp	r1, #0
	beq	.L5503
	cmp	r9, #0
	sub	r0, r4, #116
	addne	r1, r1, #1
	mvneq	r1, #0
	bl	pm_qos_update_request
	str	r9, [r6, #1108]
.L5503:
	cmp	r8, r7
	bne	.L5517
.L5505:
	ldr	r3, [r5, #3576]
	cmp	r3, #0
	bne	.L5563
.L5559:
	ldr	r3, [r5, #3572]
	sub	r3, r3, #3
	cmp	r3, #1
	movls	r8, r7
	bls	.L5515
	ldr	r0, [r4, #-164]
	mov	r2, r7
	mov	r1, #2
	mov	r8, r7
	add	r0, r0, #8
	bl	kobject_uevent_env
	ldr	r0, [r4, #-164]
	add	r2, sp, #48
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
.L5513:
	ldr	r3, [r5, #3572]
	str	r3, [r5, #3576]
.L5515:
	ldr	r2, .L5566
	movw	r0, #:lower16:.LC540
	movt	r0, #:upper16:.LC540
	ldr	r3, [r8]
	mov	r1, r2
	bl	printk
.L5490:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L5517:
	ldr	r3, [r5, #3572]
	sub	r3, r3, #3
	cmp	r3, #1
	bls	.L5515
	ldr	r0, [r4, #-164]
	mov	r2, r8
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	b	.L5513
.L5491:
	ldr	r0, [r5, #12]
	ldrb	ip, [r4, #-128]	@ zero_extendqisi2
	cmp	r0, #0
	beq	.L5492
	movw	r5, #:lower16:.LANCHOR1
	mov	r7, #2
	strb	ip, [r4, #-127]
	movt	r5, #:upper16:.LANCHOR1
	mov	r0, r6
	strb	r3, [r4, #-125]
	str	r7, [r5, #3572]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r5, #3576]
	cmp	r6, r7
	beq	.L5564
	ldr	r3, [r5, #3572]
	sub	r3, r3, #3
	cmp	r3, #1
	bls	.L5557
	ldr	r0, [r4, #-164]
	add	r2, sp, #24
	mov	r1, r7
	mov	r8, r2
	add	r0, r0, #8
	bl	kobject_uevent_env
	b	.L5513
.L5562:
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #4
	movt	r5, #:upper16:.LANCHOR1
	add	r8, sp, #40
	str	r3, [r5, #3572]
	b	.L5518
.L5560:
	ldrb	ip, [r4, #-128]	@ zero_extendqisi2
.L5492:
	ldrb	r3, [r4, #-127]	@ zero_extendqisi2
	cmp	r3, ip
	beq	.L5500
	cmp	ip, #0
	bne	.L5501
	movw	r5, #:lower16:.LANCHOR1
	add	r8, sp, #8
	movt	r5, #:upper16:.LANCHOR1
	add	r7, sp, #16
	str	ip, [r5, #3572]
.L5522:
	mov	r0, r6
	strb	ip, [r4, #-127]
	strb	r2, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-132]
	cmp	r3, #0
	movne	r9, #0
	bne	.L5504
	b	.L5503
.L5561:
	ldrb	r3, [r4, #-123]	@ zero_extendqisi2
	cmp	r3, #111
	bne	.L5493
	ldrb	r3, [r4, #-122]	@ zero_extendqisi2
	cmp	r3, #119
	mvneq	r9, #0
	bne	.L5493
	b	.L5495
.L5501:
	ldrb	r3, [r4, #-124]	@ zero_extendqisi2
	movw	r5, #:lower16:.LANCHOR1
	mov	r0, #1
	movt	r5, #:upper16:.LANCHOR1
	str	r0, [r5, #3572]
	cmp	r3, #108
	beq	.L5565
.L5519:
	mov	r9, #1
	mov	r0, r6
	strb	r9, [r4, #-127]
	strb	r2, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-132]
	cmp	r3, #0
	beq	.L5556
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r2, [r6, #1108]
	cmp	r2, #1
	addne	r7, sp, #16
	movne	r8, r7
	bne	.L5528
.L5556:
	add	r7, sp, #16
	b	.L5505
.L5565:
	ldrb	r3, [r4, #-123]	@ zero_extendqisi2
	cmp	r3, #111
	bne	.L5519
	ldrb	r3, [r4, #-122]	@ zero_extendqisi2
	cmp	r3, #119
	addeq	r7, sp, #16
	moveq	r8, r7
	bne	.L5519
	b	.L5522
.L5563:
	ldr	r2, .L5566
	movw	r0, #:lower16:.LC541
	movt	r0, #:upper16:.LC541
	mov	r1, r2
	bl	printk
	ldr	r0, [r4, #-164]
	add	r2, sp, #8
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	b	.L5559
.L5564:
	ldr	r2, .L5566
	movw	r0, #:lower16:.LC541
	movt	r0, #:upper16:.LC541
	mov	r1, r2
	bl	printk
	ldr	r0, [r4, #-164]
	add	r2, sp, #8
	mov	r1, r6
	add	r0, r0, #8
	bl	kobject_uevent_env
	ldr	r3, [r5, #3572]
	sub	r3, r3, #3
	cmp	r3, #1
	bls	.L5557
	ldr	r0, [r4, #-164]
	add	r2, sp, #24
	mov	r1, r6
	mov	r8, r2
	add	r0, r0, #8
	bl	kobject_uevent_env
	b	.L5513
.L5500:
	mov	r0, r6
	strb	ip, [r4, #-127]
	strb	r2, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	ldrb	r1, [r4, #-127]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC539
	ldr	r2, .L5566
	movt	r0, #:upper16:.LC539
	ldr	ip, [r5, #12]
	ldrb	r3, [r4, #-128]	@ zero_extendqisi2
	stm	sp, {r1, ip}
	mov	r1, r2
	bl	printk
	b	.L5490
.L5557:
	add	r8, sp, #24
	b	.L5515
.L5567:
	.align	2
.L5566:
	.word	.LANCHOR3+3864
	.fnend
	.size	android_work, .-android_work
	.section	.rodata.str1.4
	.align	2
.LC542:
	.ascii	"<3>acc_complete_send_hid_event, err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_send_hid_event, %function
acc_complete_send_hid_event:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, r1
	ldr	r1, [r1, #44]
	ldr	r0, [r2, #32]
	ldr	r3, [r2, #48]
	cmp	r1, #0
	bne	.L5572
	mov	ip, #1
	.save {lr}
	str	lr, [sp, #-4]!
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r2]
	ldr	r0, [r0, #8]
	str	ip, [sp]
	bl	hid_report_raw_event
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L5572:
	movw	r0, #:lower16:.LC542
	movt	r0, #:upper16:.LC542
	b	printk
	.fnend
	.size	acc_complete_send_hid_event, .-acc_complete_send_hid_event
	.section	.rodata.str1.4
	.align	2
.LC543:
	.ascii	"<3>can't add hid device: %d\012\000"
	.align	2
.LC544:
	.ascii	"<3>can't add HID device %pK\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_work, %function
acc_hid_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r3, #2488]
	.pad #28
	sub	sp, sp, #28
	add	r8, sp, #8
	str	r8, [sp, #8]
	add	r6, r7, #88
	str	r8, [sp, #12]
	add	r9, r7, #1760
	mov	r0, r6
	add	r9, r9, #12
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r7, #1772]
	mov	r10, r0
	cmp	r5, r9
	ldr	r4, [r5]
	bne	.L5577
	b	.L5574
.L5575:
	cmp	r9, r4
	ldr	r3, [r4]
	beq	.L5574
.L5576:
	mov	r5, r4
	mov	r4, r3
.L5577:
	ldr	r3, [r5, #24]
	ldr	r2, [r5, #28]
	cmp	r2, r3
	bne	.L5575
	mov	r0, r5
	bl	__list_del_entry
	mov	r0, r5
	mov	r1, r8
	ldr	r2, [sp, #8]
	bl	__list_add
	cmp	r9, r4
	ldr	r3, [r4]
	bne	.L5576
.L5574:
	ldr	r2, [r7, #1780]
	add	r3, r7, #1776
	add	r3, r3, #4
	cmp	r3, r2
	addeq	r9, sp, #16
	streq	r9, [sp, #16]
	streq	r9, [sp, #20]
	beq	.L5579
	ldr	r1, [r7, #1784]
	add	r9, sp, #16
	str	r2, [sp, #16]
	str	r1, [sp, #20]
	str	r9, [r2, #4]
	ldr	r2, [sp, #20]
	str	r9, [r2]
	str	r3, [r7, #1780]
	str	r3, [r7, #1784]
.L5579:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r5, [sp, #8]
	cmp	r5, r8
	ldr	r4, [r5]
	beq	.L5580
	add	r10, r7, #1760
	movw	r3, #:lower16:.LC544
	movt	r3, #:upper16:.LC544
	add	r10, r10, #4
	str	r3, [sp, #4]
.L5586:
	bl	hid_allocate_device
	cmn	r0, #4096
	movw	r2, #:lower16:.LANCHOR0
	ldr	ip, .L5596
	movt	r2, #:upper16:.LANCHOR0
	mvn	r1, #0
	mov	lr, #3
	mov	fp, r0
	bhi	.L5593
	ldr	r2, [r2, #696]
	strh	lr, [r0, #32]	@ movhi
	str	r1, [r0, #36]
	str	r1, [r0, #40]
	str	r2, [r0, #3200]
	str	ip, [r0, #3548]
	str	r5, [r0, #3848]
	bl	hid_add_device
	subs	r1, r0, #0
	streq	fp, [r5, #8]
	bne	.L5594
.L5583:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	mov	r0, r5
	bl	__list_del_entry
	mov	r0, r5
	mov	r1, r10
	ldr	r2, [r7, #1764]
	bl	__list_add
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L5585:
	cmp	r4, r8
	mov	r5, r4
	ldr	r4, [r4]
	bne	.L5586
.L5580:
	ldr	r4, [sp, #16]
	cmp	r4, r9
	ldr	r5, [r4]
	bne	.L5590
	b	.L5573
.L5595:
	mov	r4, r5
	mov	r5, r3
.L5590:
	mov	r0, r4
	bl	list_del
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L5588
	bl	hid_destroy_device
.L5588:
	ldr	r0, [r4, #20]
	bl	kfree
	mov	r0, r4
	bl	kfree
	cmp	r5, r9
	ldr	r3, [r5]
	bne	.L5595
.L5573:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5593:
	cmp	r0, #0
	bne	.L5582
	b	.L5583
.L5594:
	movw	r0, #:lower16:.LC543
	movt	r0, #:upper16:.LC543
	bl	printk
	mov	r0, fp
	bl	hid_destroy_device
.L5582:
	mov	r1, r5
	ldr	r0, [sp, #4]
	bl	printk
	ldr	r0, [r5, #20]
	bl	kfree
	mov	r0, r5
	bl	kfree
	b	.L5585
.L5597:
	.align	2
.L5596:
	.word	.LANCHOR0+1112
	.fnend
	.size	acc_hid_work, .-acc_hid_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_parse, %function
acc_hid_parse:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #3848]
	ldr	r1, [r3, #20]
	ldr	r2, [r3, #24]
	bl	hid_parse_report
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	acc_hid_parse, .-acc_hid_parse
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_file, %function
fsg_show_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r2
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	mov	r6, r0
	bl	down_read
	ldr	r0, [r5, #-48]
	cmp	r0, #0
	moveq	r5, r0
	strbeq	r0, [r4]
	beq	.L5603
	add	r0, r0, #8
	movw	r2, #4095
	mov	r1, r4
	bl	d_path
	cmn	r0, #4096
	mov	r5, r0
	bhi	.L5603
	bl	strlen
	mov	r7, r0
	mov	r1, r5
	mov	r2, r7
	mov	r0, r4
	bl	memmove
	add	r5, r7, #1
	mov	r2, #10
	mov	r3, #0
	strb	r2, [r4, r7]
	strb	r3, [r4, r5]
.L5603:
	mov	r0, r6
	bl	up_read
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_file, .-fsg_show_file
	.section	.rodata.str1.4
	.align	2
.LC545:
	.ascii	"read-only status change prevented\012\000"
	.align	2
.LC546:
	.ascii	"read-only status set to %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_ro, %function
fsg_store_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	add	r2, sp, #4
	mov	r0, r4
	mov	r1, #2
	bl	kstrtouint
	subs	r4, r0, #0
	beq	.L5615
.L5605:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5615:
	mov	r0, r5
	bl	down_read
	ldr	r3, [r6, #-48]
	cmp	r3, #0
	beq	.L5607
	ldr	r0, .L5618
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	mvneq	r4, #15
	bne	.L5616
.L5608:
	mov	r0, r5
	bl	up_read
	b	.L5605
.L5607:
	ldr	r3, [sp, #4]
	ldrb	r2, [r6, #-24]	@ zero_extendqisi2
	ldr	r0, .L5618+4
	and	r1, r3, #1
	bfi	r2, r1, #1, #1
	mov	r3, r1
	bfi	r2, r1, #0, #1
	strb	r2, [r6, #-24]
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L5617
.L5609:
	mov	r4, r7
	b	.L5608
.L5616:
	movw	r2, #:lower16:.LC545
	mov	r1, r6
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC545
	mvn	r4, #15
	bl	__dynamic_dev_dbg
	b	.L5608
.L5617:
	movw	r2, #:lower16:.LC546
	mov	r1, r6
	movt	r2, #:upper16:.LC546
	sub	r0, r0, #32
	bl	__dynamic_dev_dbg
	b	.L5609
.L5619:
	.align	2
.L5618:
	.word	.LANCHOR4-3408
	.word	.LANCHOR4-3376
	.fnend
	.size	fsg_store_ro, .-fsg_store_ro
	.section	.rodata.str1.4
	.align	2
.LC547:
	.ascii	"cdrom status change prevented\012\000"
	.align	2
.LC548:
	.ascii	"cdrom status set to %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_cdrom, %function
fsg_store_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	add	r2, sp, #4
	mov	r0, r4
	mov	r1, #2
	bl	kstrtouint
	subs	r4, r0, #0
	beq	.L5630
.L5620:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5630:
	mov	r0, r5
	bl	down_read
	ldr	r3, [r6, #-48]
	cmp	r3, #0
	beq	.L5622
	ldr	r0, .L5633
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	mvneq	r4, #15
	bne	.L5631
.L5623:
	mov	r0, r5
	bl	up_read
	b	.L5620
.L5622:
	ldrb	r2, [r6, #-24]	@ zero_extendqisi2
	ldr	r3, [sp, #4]
	ldr	r0, .L5633+4
	bfi	r2, r3, #3, #1
	strb	r2, [r6, #-24]
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L5632
.L5624:
	mov	r4, r7
	b	.L5623
.L5631:
	movw	r2, #:lower16:.LC547
	mov	r1, r6
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC547
	mvn	r4, #15
	bl	__dynamic_dev_dbg
	b	.L5623
.L5632:
	movw	r2, #:lower16:.LC548
	and	r3, r3, #1
	mov	r1, r6
	movt	r2, #:upper16:.LC548
	sub	r0, r0, #32
	bl	__dynamic_dev_dbg
	b	.L5624
.L5634:
	.align	2
.L5633:
	.word	.LANCHOR4-3360
	.word	.LANCHOR4-3328
	.fnend
	.size	fsg_store_cdrom, .-fsg_store_cdrom
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_nofua, %function
fsg_store_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r1, #2
	mov	r4, r0
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r2
	add	r2, sp, #4
	mov	r5, r3
	bl	kstrtouint
	cmp	r0, #0
	bne	.L5635
	ldr	r2, [sp, #4]
	cmp	r2, #0
	beq	.L5639
.L5637:
	ldrb	r3, [r4, #-24]	@ zero_extendqisi2
	mov	r0, r5
	bfi	r3, r2, #7, #1
	strb	r3, [r4, #-24]
.L5635:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L5639:
	ldrb	r3, [r4, #-24]	@ zero_extendqisi2
	tst	r3, #128
	beq	.L5637
	ldr	r0, [r4, #-48]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L5637
	mov	r1, #1
	bl	vfs_fsync
	ldr	r2, [sp, #4]
	b	.L5637
	.fnend
	.size	fsg_store_nofua, .-fsg_store_nofua
	.section	.rodata.str1.4
	.align	2
.LC549:
	.ascii	"%s --> %d, %u/%u\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bulk_out_complete, %function
bulk_out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	.pad #20
	sub	sp, sp, #20
	ldr	r6, [r0]
	ldr	r3, [r1, #44]
	ldr	r7, [r1, #32]
	cmp	r3, #0
	bne	.L5641
	ldr	ip, [r7, #12]
	ldr	r0, [r1, #48]
	cmp	r0, ip
	beq	.L5643
	ldr	r2, .L5659
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L5647
.L5643:
	.syntax divided
@ 689 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	r4, r6, #44
	mov	r0, r4
	bl	_raw_spin_lock
	mov	r2, #0
	mov	r3, #1
	str	r3, [r7, #4]
	str	r2, [r7, #28]
	.syntax divided
@ 607 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r6, #168]
	str	r3, [r6, #148]
	cmp	r0, r2
	beq	.L5646
	bl	wake_up_process
.L5646:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L5641:
	ldr	r2, .L5659
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L5658
.L5644:
	cmn	r3, #104
	bne	.L5643
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5643
	mov	r0, r5
	blx	r3
	b	.L5643
.L5658:
	ldr	ip, [r7, #12]
	ldr	r0, [r1, #48]
.L5647:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC549
	str	r3, [sp]
	movt	r2, #:upper16:.LC549
	ldr	r3, .L5659+4
	stmib	sp, {r0, ip}
	ldr	r0, .L5659+8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #44]
	b	.L5644
.L5660:
	.align	2
.L5659:
	.word	.LANCHOR4-3312
	.word	.LANCHOR3+3880
	.word	.LANCHOR4-3336
	.fnend
	.size	bulk_out_complete, .-bulk_out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bulk_in_complete, %function
bulk_in_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	.pad #20
	sub	sp, sp, #20
	ldr	r6, [r0]
	ldr	r3, [r1, #44]
	ldr	r7, [r1, #32]
	cmp	r3, #0
	bne	.L5662
	ldr	ip, [r1, #4]
	ldr	r0, [r1, #48]
	cmp	r0, ip
	beq	.L5664
	ldr	r2, .L5680
	ldrh	r2, [r2, #-14]
	tst	r2, #4
	bne	.L5668
.L5664:
	.syntax divided
@ 668 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	r4, r6, #44
	mov	r0, r4
	bl	_raw_spin_lock
	mov	r3, #0
	str	r3, [r7, #4]
	str	r3, [r7, #20]
	.syntax divided
@ 607 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r6, #168]
	mov	r3, #1
	str	r3, [r6, #148]
	cmp	r0, #0
	beq	.L5667
	bl	wake_up_process
.L5667:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L5662:
	ldr	r2, .L5680
	ldrh	r2, [r2, #-14]
	tst	r2, #4
	bne	.L5679
.L5665:
	cmn	r3, #104
	bne	.L5664
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5664
	mov	r0, r5
	blx	r3
	b	.L5664
.L5679:
	ldr	ip, [r1, #4]
	ldr	r0, [r1, #48]
.L5668:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC549
	str	r3, [sp]
	movt	r2, #:upper16:.LC549
	ldr	r3, .L5680+4
	stmib	sp, {r0, ip}
	ldr	r0, .L5680+8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #44]
	b	.L5665
.L5681:
	.align	2
.L5680:
	.word	.LANCHOR4-3280
	.word	.LANCHOR3+3900
	.word	.LANCHOR4-3312
	.fnend
	.size	bulk_in_complete, .-bulk_in_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sleep_thread, %function
sleep_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, sp
	add	r5, r0, #44
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	mov	r8, #57344
	movw	r9, #:lower16:system_freezing_cnt
	movt	r8, 65535
	movt	r9, #:upper16:system_freezing_cnt
	str	r10, [sp, #24]
	and	r6, r3, r8
	str	lr, [sp, #28]
	b	.L5687
.L5683:
	mov	r3, #1
	str	r3, [r0]
	.syntax divided
@ 819 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r6, #12]
	mov	r0, r5
	ldr	r3, [r2, #4]
	ldr	r3, [r3]
	ands	r4, r3, #1
	bne	.L5688
	bl	_raw_spin_lock_irq
	ldr	r3, [r7, #148]
	mov	r0, r5
	cmp	r3, #0
	bne	.L5694
	bl	_raw_spin_unlock_irq
	bl	schedule
.L5687:
	ldr	r3, [r9]
	ldr	r0, [r6, #12]
	cmp	r3, #0
	beq	.L5683
	bl	freezing_slow_path
	cmp	r0, #0
	bne	.L5684
	ldr	r0, [r6, #12]
	b	.L5683
.L5684:
	mov	r0, #0
	bl	__refrigerator
	ldr	r0, [r6, #12]
	b	.L5683
.L5688:
	mvn	r4, #3
.L5685:
	mov	r6, #0
	mov	r0, r5
	str	r6, [r2]
	bl	_raw_spin_lock_irq
	mov	r0, r5
	str	r6, [r7, #148]
	bl	_raw_spin_unlock_irq
	.syntax divided
@ 836 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5694:
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	and	r8, r8, r3
	ldr	r2, [r8, #12]
	b	.L5685
	.fnend
	.size	sleep_thread, .-sleep_thread
	.section	.rodata.str1.4
	.align	2
.LC550:
	.ascii	"sending phase-error status\012\000"
	.align	2
.LC551:
	.ascii	"sending command-failure status\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_status, %function
send_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #44
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #104]
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L5696
	b	.L5700
.L5722:
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L5700
.L5696:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	sleep_thread
	mov	r3, r0
	mov	r0, r4
	cmp	r3, #0
	beq	.L5722
.L5695:
	ldrd	r4, [sp]
	mov	r0, r3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5700:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	beq	.L5723
	ldrb	r4, [r5, #144]	@ zero_extendqisi2
	ands	r4, r4, #4
	beq	.L5724
.L5701:
	ldr	r0, .L5726
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	moveq	r4, #2
	bne	.L5725
.L5704:
	ldr	r3, [r6]
	movw	r1, #21333
	movw	r2, #:lower16:.LANCHOR1
	movt	r1, 21314
	movt	r2, #:upper16:.LANCHOR1
	ldr	r0, [r2, #3580]
	str	r1, [r3]
	ldr	r1, [r5, #132]
	cmp	r0, #0
	str	r1, [r3, #4]
	ldr	r1, [r5, #136]
	str	r1, [r3, #8]
	movne	r1, #0
	streq	r0, [r3, #8]
	mov	r0, r5
	strb	r4, [r3, #12]
	ldr	r3, [r6, #16]
	strne	r1, [r2, #3580]
	mov	r2, #13
	mov	r1, r6
	str	r2, [r3, #4]
	ldr	r3, [r6, #16]
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	ldrne	r2, [r6, #8]
	movne	r3, #0
	mvneq	r3, #4
	strne	r2, [r5, #60]
	b	.L5695
.L5724:
	ldr	r3, [r7, #28]
	cmp	r3, #0
	beq	.L5704
.L5705:
	ldr	r0, .L5726+4
	ldrh	r4, [r0, #-14]
	tst	r4, #4
	ubfx	r4, r4, #2, #1
	moveq	r4, #1
	beq	.L5704
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC551
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC551
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5704
.L5723:
	ldrb	r4, [r5, #144]	@ zero_extendqisi2
	tst	r4, #16
	and	r4, r4, #4
	beq	.L5703
	cmp	r4, #0
	bne	.L5701
	b	.L5704
.L5703:
	cmp	r4, #0
	beq	.L5705
	b	.L5701
.L5725:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC550
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC550
	mov	r4, #2
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5704
.L5727:
	.align	2
.L5726:
	.word	.LANCHOR4-3264
	.word	.LANCHOR4-3232
	.fnend
	.size	send_status, .-send_status
	.section	.rodata.str1.4
	.align	2
.LC552:
	.ascii	"error in file read: %d\012\000"
	.align	2
.LC553:
	.ascii	"partial file read: %d/%u\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_read, %function
do_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r2, [r0, #76]	@ zero_extendqisi2
	.pad #44
	sub	sp, sp, #44
	ldrb	r1, [r0, #77]	@ zero_extendqisi2
	ldrb	r3, [r0, #78]	@ zero_extendqisi2
	ldrb	r0, [r0, #79]	@ zero_extendqisi2
	cmp	r2, #8
	ldr	r7, [r5, #104]
	beq	.L5773
	tst	r1, #231
	ldr	ip, [r5, #78]	@ unaligned
	movne	r2, #9216
	mvnne	r3, #21
	movtne	r2, 5
	rev	ip, ip
	strne	r2, [r7, #28]
	bne	.L5728
.L5730:
	ldrd	r2, [r7, #16]
	mov	r1, #0
	cmp	ip, r2
	sbcs	r3, r1, r3
	movge	r2, #8448
	mvnge	r3, #21
	movtge	r2, 5
	strge	r2, [r7, #28]
	bge	.L5728
	ldr	r3, [r7, #40]
	mov	r1, #0
	mov	r0, #0
	ldr	r10, [r5, #128]
	strd	r0, [sp, #8]
	sub	r2, r3, #32
	cmp	r10, #0
	lsl	r2, ip, r2
	str	r2, [sp, #12]
	rsb	r2, r3, #32
	lsl	r3, ip, r3
	ldr	r1, [sp, #12]
	str	r3, [sp, #8]
	orr	r2, r1, ip, lsr r2
	str	r2, [sp, #12]
	beq	.L5733
	mov	r3, sp
	add	r4, r5, #44
	bic	fp, r3, #8128
	bic	fp, fp, #63
.L5746:
	mov	r0, r4
	ldr	r9, [r7, #8]
	ldr	r8, [r7, #12]
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L5734
	b	.L5738
.L5774:
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L5738
.L5734:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	sleep_thread
	mov	r3, r0
	mov	r0, r4
	cmp	r3, #0
	beq	.L5774
.L5728:
	mov	r0, r3
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5738:
	ldrd	r2, [sp, #8]
	subs	r1, r9, r2
	sbc	r3, r8, r3
	cmp	r10, #16384
	str	r1, [sp, #24]
	str	r3, [sp, #28]
	movcc	r3, r10
	movcs	r3, #16384
	str	r3, [sp, #16]
	mov	r3, #0
	str	r3, [sp, #20]
	ldrd	r0, [sp, #16]
	ldrd	r2, [sp, #24]
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L5775
.L5735:
	mov	r0, r4
	ldr	r8, [sp, #16]
	bl	_raw_spin_unlock_irq
	ldr	r3, [sp, #16]
	cmp	r3, #0
	beq	.L5776
	ldrd	r0, [sp, #8]
	mov	r2, r3
	add	r3, sp, #32
	strd	r0, [sp, #32]
	ldr	r1, [r6]
	ldr	r0, [r7]
	bl	vfs_read
	ldr	r2, [fp, #12]
	mov	r9, r0
	ldr	r3, [r2, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L5748
	cmp	r0, #0
	blt	.L5777
	cmp	r0, r8
	bcs	.L5742
	ldr	r0, .L5780
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L5778
.L5743:
	ldr	r3, [r7, #44]
	mov	r0, r4
	ldr	r2, [r5, #136]
	rsb	r3, r3, #0
	and	r9, r9, r3
	sub	r1, r2, r9
	ldrd	r2, [sp, #8]
	sub	r10, r10, r9
	str	r1, [r5, #136]
	adds	r2, r2, r9
	adc	r3, r3, r9, asr #31
	strd	r2, [sp, #8]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	r9, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	cmp	r9, r8
	bcc	.L5747
.L5744:
	cmp	r10, #0
	beq	.L5733
	ldr	r3, [r6, #16]
	mov	r1, r6
	mov	r0, r5
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L5733
	ldr	r3, [r6, #8]
	str	r3, [r5, #60]
	b	.L5746
.L5775:
	strd	r2, [sp, #16]
	b	.L5735
.L5777:
	mov	r3, r0
	ldr	r0, .L5780+4
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L5779
.L5741:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r1, #0
	mov	r3, #1
	mov	r0, r4
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
.L5747:
	ldrd	r4, [sp, #8]
	mov	r2, #4352
	ldr	r3, [r7, #40]
	movt	r2, 3
	str	r2, [r7, #28]
	subs	r1, r3, #32
	lsr	r2, r4, r3
	rsb	r3, r3, #32
	orr	r2, r2, r5, lsl r3
	movpl	r3, r5
	orrpl	r2, r2, r3, asr r1
	ldrb	r1, [r7, #24]	@ zero_extendqisi2
	mvn	r3, #4
	str	r2, [r7, #32]
	orr	r2, r1, #64
	strb	r2, [r7, #24]
	b	.L5728
.L5773:
	lsl	ip, r3, #8
	orr	ip, ip, r1, lsl #16
	orr	ip, ip, r0
	b	.L5730
.L5742:
	ldrd	r2, [sp, #8]
	mov	r0, r4
	sub	r10, r10, r9
	ldr	r1, [r5, #136]
	adds	r2, r2, r9
	adc	r3, r3, r9, asr #31
	strd	r2, [sp, #8]
	sub	r3, r1, r9
	str	r3, [r5, #136]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	r9, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	b	.L5744
.L5733:
	mvn	r3, #4
	b	.L5728
.L5748:
	mvn	r3, #3
	b	.L5728
.L5778:
	ldr	r3, [sp, #16]
	movw	r2, #:lower16:.LC553
	add	r1, r7, #48
	movt	r2, #:upper16:.LC553
	sub	r0, r0, #18
	str	r3, [sp]
	mov	r3, r9
	bl	__dynamic_dev_dbg
	b	.L5743
.L5779:
	movw	r2, #:lower16:.LC552
	add	r1, r7, #48
	movt	r2, #:upper16:.LC552
	sub	r0, r0, #24
	bl	__dynamic_dev_dbg
	b	.L5741
.L5776:
	ldrd	r8, [sp, #8]
	mov	r2, #8448
	mov	r0, r4
	ldr	r3, [r7, #40]
	movt	r2, 5
	str	r2, [r7, #28]
	subs	r1, r3, #32
	lsr	r2, r8, r3
	rsb	r3, r3, #32
	orr	r2, r2, r9, lsl r3
	movpl	r3, r9
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	str	r2, [r7, #32]
	orr	r3, r3, #64
	strb	r3, [r7, #24]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r1, #0
	mov	r0, r4
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	mvn	r3, #4
	b	.L5728
.L5781:
	.align	2
.L5780:
	.word	.LANCHOR4-3198
	.word	.LANCHOR4-3216
	.fnend
	.size	do_read, .-do_read
	.section	.rodata.str1.4
	.align	2
.LC554:
	.ascii	"receive_file_work(%lld)\012\000"
	.align	2
.LC555:
	.ascii	"%s- count(%lld) not multiple of mtu(%d)\012\000"
	.align	2
.LC556:
	.ascii	"vfs_write %d\012\000"
	.align	2
.LC557:
	.ascii	"got short packet\012\000"
	.align	2
.LC558:
	.ascii	"receive_file_work returning %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	receive_file_work, %function
receive_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-116]
	.pad #68
	sub	sp, sp, #68
	str	r3, [sp, #20]
	.syntax divided
@ 858 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r1, [r0, #16]
	ldrd	r8, [r0, #32]
	ldrd	r2, [r0, #24]
	str	r1, [sp, #16]
	cmp	r8, #0
	sbcs	r1, r9, #0
	strd	r2, [sp, #32]
	mvnlt	r3, #21
	strlt	r3, [r0, #52]
	blt	.L5782
	ldr	r0, .L5847
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L5837
.L5785:
	ldr	r3, [r5, #-104]
	mov	r7, #0
	ldrh	ip, [r3, #20]
	uxth	r6, ip
	subs	r2, r6, #1
	sbc	r3, r7, #0
	and	r0, r2, r8
	and	r1, r3, r9
	orrs	r3, r0, r1
	bne	.L5838
	orrs	r3, r8, r9
	beq	.L5788
.L5787:
	ldr	fp, .L5847+4
	mov	r3, sp
	cmp	r8, #1
	bic	r3, r3, #8128
	mov	r7, #0
	bic	r3, r3, #63
	mov	r6, r7
	str	r3, [sp, #28]
	sub	r3, fp, #56
	str	r3, [sp, #24]
	sbcs	r3, r9, #0
	blt	.L5789
.L5844:
	movw	r10, #:lower16:.LANCHOR0
	movt	r10, #:upper16:.LANCHOR0
.L5808:
	add	r1, r7, #42
	ldr	r0, [r10, #624]
	mov	ip, #0
	add	r1, r5, r1, lsl #2
	mov	r2, #208
	eor	r7, r7, #1
	ldr	r4, [r1, #-200]
	str	r0, [r4, #4]
	ldr	r0, [r5, #-104]
	mov	r1, r4
	str	ip, [r5, #-24]
	ldr	ip, [r0, #8]
	ldr	r3, [ip, #16]
	blx	r3
	cmp	r0, #0
	blt	.L5836
	cmp	r6, #0
	beq	.L5839
.L5810:
	ldr	r3, .L5847+8
	ldr	r0, [r6, #48]
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L5840
.L5794:
	mov	r2, r0
	add	r3, sp, #32
	ldr	r1, [r6]
	ldr	r0, [sp, #16]
	bl	vfs_write
	ldrh	r2, [fp, #-14]
	mov	r10, r0
	tst	r2, #4
	bne	.L5841
.L5795:
	ldr	r2, [r6, #48]
	cmp	r2, r10
	bne	.L5836
	cmp	r4, #0
	beq	.L5798
.L5812:
	ldr	r3, [r5, #-96]
	ldr	r2, [r5, #-24]
	cmp	r2, #0
	bne	.L5799
	cmp	r3, #2
	beq	.L5842
.L5799:
	cmp	r3, #0
	cmpne	r3, #3
	moveq	ip, #1
	movne	ip, #0
	beq	.L5843
	ldr	r2, [r4, #4]
	mov	r1, #0
	ldr	r3, [r4, #48]
	cmp	r8, r2
	sbcs	r1, r9, r1
	bge	.L5804
	cmp	r8, r3
	mov	r0, r3
	sbcs	r3, r9, ip
	movlt	r0, r8
	mov	r3, r0
	str	r0, [r4, #48]
.L5806:
	subs	r8, r8, r3
	sbc	r9, r9, #0
	cmp	r2, r3
	bhi	.L5807
	cmp	r8, #1
	mov	r6, r4
	sbcs	r3, r9, #0
	bge	.L5844
.L5789:
	cmp	r6, #0
	beq	.L5788
	mov	r4, #0
	b	.L5810
.L5836:
	ldr	r3, [r5, #-96]
	cmp	r3, #0
	movne	r3, #4
	mvneq	r6, #4
	mvnne	r6, #4
	strne	r3, [r5, #-96]
.L5792:
	ldr	r0, .L5847+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L5845
.L5811:
	str	r6, [r5, #52]
	.syntax divided
@ 946 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L5782:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5838:
	ldr	r0, .L5847+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L5787
	ldr	r3, [sp, #20]
	movw	r2, #:lower16:.LC555
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC555
	ldr	r1, [r3]
	strd	r8, [sp]
	ldr	r3, .L5847+20
	str	ip, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5787
.L5807:
	ldr	r0, .L5847+24
	mov	r8, #0
	mov	r9, #0
	ldrh	r3, [r0]
	tst	r3, #4
	ubfx	r3, r3, #2, #1
	moveq	r6, r4
	moveq	r4, r3
	beq	.L5810
	ldr	r3, [sp, #20]
	movw	r2, #:lower16:.LC557
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC557
	mov	r6, r4
	mov	r4, #0
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5810
.L5804:
	mov	r1, #0
	mvn	r0, #0
	cmp	r9, r1
	cmpeq	r8, r0
	bne	.L5806
	cmp	r2, r3
	bhi	.L5807
	movw	r10, #:lower16:.LANCHOR0
	mov	r6, r4
	movt	r10, #:upper16:.LANCHOR0
	b	.L5808
.L5839:
	cmp	r4, #0
	bne	.L5812
	mov	r6, #0
	b	.L5808
.L5798:
	cmp	r8, #1
	sbcs	r3, r9, #0
	blt	.L5788
	movw	r10, #:lower16:.LANCHOR0
	mov	r6, #0
	movt	r10, #:upper16:.LANCHOR0
	b	.L5808
.L5840:
	ldr	r3, [sp, #20]
	movw	r2, #:lower16:.LC320
	movt	r2, #:upper16:.LC320
	ldr	r1, [r3]
	mov	r3, r6
	str	r0, [sp]
	ldr	r0, [sp, #24]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r0, [r6, #48]
	b	.L5794
.L5841:
	ldr	r3, [sp, #20]
	movw	r2, #:lower16:.LC556
	movt	r2, #:upper16:.LC556
	ldr	r0, .L5847+28
	ldr	r1, [r3]
	mov	r3, r10
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5795
.L5842:
	ldr	r10, [sp, #28]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #56
	movt	r3, #:upper16:autoremove_wake_function
	sub	r6, r5, #68
	str	r3, [sp, #52]
	ldr	r0, [r10, #12]
	str	r2, [sp, #44]
	str	r0, [sp, #48]
	str	r1, [sp, #56]
	str	r1, [sp, #60]
	b	.L5801
.L5846:
	bl	schedule
.L5801:
	mov	r2, #1
	add	r1, sp, #44
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r5, #-24]
	cmp	r3, #0
	bne	.L5800
	ldr	r3, [r5, #-96]
	cmp	r3, #2
	bne	.L5800
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L5846
.L5800:
	add	r1, sp, #44
	mov	r0, r6
	bl	finish_wait
	ldr	r3, [r5, #-96]
	b	.L5799
.L5788:
	mov	r6, #0
	b	.L5792
.L5843:
	ldr	r2, [r5, #-24]
	cmp	r3, #0
	mvneq	r6, #4
	mvnne	r6, #124
	cmp	r2, #0
	bne	.L5792
	ldr	r0, [r5, #-104]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L5792
.L5845:
	ldr	r3, [sp, #20]
	movw	r2, #:lower16:.LC558
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC558
	ldr	r1, [r3]
	mov	r3, r6
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5811
.L5837:
	ldr	r3, [sp, #20]
	movw	r2, #:lower16:.LC554
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC554
	ldr	r1, [r3]
	strd	r8, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5785
.L5848:
	.align	2
.L5847:
	.word	.LANCHOR4-3168
	.word	.LANCHOR4-3088
	.word	.LANCHOR4-3126
	.word	.LANCHOR4-3040
	.word	.LANCHOR4-3136
	.word	.LANCHOR3+3920
	.word	.LANCHOR4-3078
	.word	.LANCHOR4-3120
	.fnend
	.size	receive_file_work, .-receive_file_work
	.section	.rodata.str1.4
	.align	2
.LC559:
	.ascii	"<6>unloading\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_cleanup, %function
ffs_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC559
	movt	r0, #:upper16:.LC559
	bl	printk
	ldr	r0, .L5851
	bl	unregister_filesystem
	ldr	r0, [r4, #4]
	pop	{r4, lr}
	b	kfree
.L5852:
	.align	2
.L5851:
	.word	.LANCHOR0+1140
	.fnend
	.size	ffs_function_cleanup, .-ffs_function_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_ep0_queue_wait, %function
__ffs_ep0_queue_wait:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #116
	strd	r6, [sp, #8]
	mov	r6, r2
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #-2]
	ldr	r5, [r0, #-88]
	cmp	r3, r2
	ldrb	r2, [r5, #26]	@ zero_extendqisi2
	movls	r3, #0
	movhi	r3, #1
	bfi	r2, r3, #1, #1
	strb	r2, [r5, #26]
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	str	r7, [r5]
	str	r6, [r5, #4]
	beq	.L5858
.L5854:
	ldr	r3, [r4]
	mov	r0, #0
	mov	r2, #32
	mov	r1, r5
	str	r0, [r4, #32]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L5853
	add	r0, r4, #32
	bl	wait_for_completion_interruptible
	subs	r3, r0, #0
	bne	.L5859
	ldr	r0, [r4, #48]
	str	r3, [r4, #96]
.L5853:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5858:
	movw	r3, #47806
	movt	r3, 57005
	str	r3, [r5]
	b	.L5854
.L5859:
	ldr	r3, [r4]
	mov	r1, r5
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	mvn	r0, #3
	b	.L5853
	.fnend
	.size	__ffs_ep0_queue_wait, .-__ffs_ep0_queue_wait
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_complete, %function
ffs_ep0_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1, #32]
	add	r0, r0, #32
	b	complete_all
	.fnend
	.size	ffs_ep0_complete, .-ffs_ep0_complete
	.section	.rodata.str1.4
	.align	2
.LC560:
	.ascii	"<6>file system registered\012\000"
	.align	2
.LC561:
	.ascii	"<3>failed registering file system (%d)\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_init, %function
ffs_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L5863
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L5866
.L5863:
	ldr	r0, .L5868
	bl	register_filesystem
	subs	r4, r0, #0
	bne	.L5865
	movw	r0, #:lower16:.LC560
	movt	r0, #:upper16:.LC560
	bl	printk
	b	.L5861
.L5866:
	mvn	r4, #11
.L5861:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5865:
	movw	r0, #:lower16:.LC561
	mov	r1, r4
	movt	r0, #:upper16:.LC561
	bl	printk
	b	.L5861
.L5869:
	.align	2
.L5868:
	.word	.LANCHOR0+1140
	.fnend
	.size	ffs_function_init, .-ffs_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_hw_free, %function
audio_pcm_hw_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r0
	str	lr, [sp, #8]
	ldr	r2, [r0, #180]
	.pad #12
	sub	sp, sp, #12
	cmp	r2, #0
	beq	.L5871
	ldr	r0, [r0]
	ldr	r3, [r4, #184]
	ldr	r1, [r4, #188]
	ldr	r0, [r0]
	ldr	r0, [r0, #496]
	cmp	r0, #0
	beq	.L5872
	ldr	ip, [r0, #276]
	cmp	ip, #0
	beq	.L5872
.L5873:
	mov	lr, #0
	str	lr, [sp]
	ldr	r5, [ip, #4]
	blx	r5
.L5871:
	mov	r0, #0
	str	r0, [r4, #180]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L5872:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L5873
	.syntax divided
@ 206 "/home/jprim/hlte/lolz/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 206, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
	.fnend
	.size	audio_pcm_hw_free, .-audio_pcm_hw_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_data_do_entity, %function
__ffs_data_do_entity:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #2
	beq	.L5883
	cmp	r0, #3
	beq	.L5884
	cmp	r0, #1
	beq	.L5886
	mov	r0, #0
	bx	lr
.L5883:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #176]
	cmp	r1, r2
	strhcc	r2, [r3, #176]	@ movhi
	bx	lr
.L5886:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #178]
	cmp	r1, r2
	addls	r2, r2, #1
	strhls	r2, [r3, #178]	@ movhi
	bx	lr
.L5884:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #180]
	and	r2, r2, #15
	cmp	r2, r1
	strhgt	r2, [r3, #180]	@ movhi
	bx	lr
	.fnend
	.size	__ffs_data_do_entity, .-__ffs_data_do_entity
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_probe, %function
acc_hid_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	hid_open_report
	subs	r4, r0, #0
	bne	.L5887
	ldr	r3, [r5, #3548]
	mov	r0, r5
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L5893
.L5887:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5893:
	mov	r1, #45
	mov	r0, r5
	bl	hid_connect
	subs	r4, r0, #0
	beq	.L5887
	ldr	r3, [r5, #3548]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
	b	.L5887
	.fnend
	.size	acc_hid_probe, .-acc_hid_probe
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_free_ctrl_pkt.part.0, %function
mbim_free_ctrl_pkt.part.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	ldr	r0, [r0]
	bl	kfree
	mov	r0, r4
	pop	{r4, lr}
	b	kfree
	.fnend
	.size	mbim_free_ctrl_pkt.part.0, .-mbim_free_ctrl_pkt.part.0
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_clear_queues, %function
mbim_clear_queues:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	add	r7, r0, #204
	mov	r6, r0
	mov	r4, r0
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r0, [r6, #208]!
	ldr	r5, [r0]
.L5897:
	cmp	r0, r6
	sub	r8, r0, #8
	beq	.L5910
	bl	list_del
	cmp	r8, #0
	mov	r0, r8
	beq	.L5898
	bl	mbim_free_ctrl_pkt.part.0
.L5898:
	mov	r0, r5
	ldr	r5, [r5]
	b	.L5897
.L5910:
	ldr	r0, [r4, #216]!
	ldr	r5, [r0]
.L5900:
	cmp	r0, r4
	sub	r6, r0, #8
	beq	.L5911
	bl	list_del
	cmp	r6, #0
	mov	r0, r6
	beq	.L5901
	bl	mbim_free_ctrl_pkt.part.0
.L5901:
	mov	r0, r5
	ldr	r5, [r5]
	b	.L5900
.L5911:
	mov	r0, r7
	pop	{r4, r5, r6, r7, r8, lr}
	b	_raw_spin_unlock
	.fnend
	.size	mbim_clear_queues, .-mbim_clear_queues
	.section	.rodata.str1.4
	.align	2
.LC562:
	.ascii	"<3>%s: Received NULL mbim pointer\012\000"
	.align	2
.LC563:
	.ascii	"<3>%s: given pkt size too big:%d > max_pkt_size:%d\012"
	.ascii	"\000"
	.align	2
.LC564:
	.ascii	"<3>%s: Previous writing not finished yet\012\000"
	.align	2
.LC565:
	.ascii	"<3>%s: failed to allocate ctrl pkt\012\000"
	.align	2
.LC566:
	.ascii	"%s: dev:%pK port_num#%d\012\000"
	.align	2
.LC567:
	.ascii	"<3>%s: dev:%pK is not connected\012\000"
	.align	2
.LC568:
	.ascii	"<3>%s: dev:%pK state=%d, recover!!\012\000"
	.align	2
.LC569:
	.ascii	"%s: dev:%pK portno#%d\012\000"
	.align	2
.LC570:
	.ascii	"<3>%s: dev:%pK is not online\012\000"
	.align	2
.LC571:
	.ascii	"<3>%s: dev:%pK req is NULL\012\000"
	.align	2
.LC572:
	.ascii	"<3>%s: dev:%pK req->buf is NULL\012\000"
	.align	2
.LC573:
	.ascii	"%s: delay ep_queue: notifications queue is busy[%d]"
	.ascii	"\000"
	.align	2
.LC574:
	.ascii	"<3>%s: ep enqueue error %d\012\000"
	.align	2
.LC575:
	.ascii	"%s: Successful Exit\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_write, %function
mbim_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5978
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-6]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r0, #124]
	tst	r2, #4
	bne	.L5961
.L5913:
	cmp	r4, #0
	beq	.L5962
	cmp	r5, #0
	beq	.L5963
	cmp	r5, #4096
	bhi	.L5964
	add	r6, r4, #104
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L5918
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L5965
	mov	r1, #208
	mov	r0, r5
	bl	mbim_alloc_ctrl_pkt
	subs	r8, r0, #0
	beq	.L5966
	mov	r3, sp
	ldr	r0, [r8]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L5967
	mov	r1, r5
	bl	__memzero
	mov	r2, r5
.L5923:
	movw	r0, #:lower16:.LC333
	ldr	r1, .L5978+4
	movt	r0, #:upper16:.LC333
	bl	printk
	mov	r0, r8
	bl	mbim_free_ctrl_pkt.part.0
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	b	.L5912
.L5967:
	mov	r2, r5
	mov	r1, r7
	bl	__copy_from_user
	subs	r2, r0, #0
	bne	.L5923
	ldr	r10, .L5978+8
	ldrh	r3, [r10, #-14]
	tst	r3, #4
	bne	.L5968
.L5925:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L5969
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	cmp	r3, #3
	bne	.L5970
	add	r7, r4, #204
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	add	r2, r4, #216
	ldr	r1, [r4, #220]
	add	r0, r8, #8
	bl	__list_add
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, .L5978+12
	ldr	fp, [r4, #160]
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L5971
.L5929:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #88]
	mov	r9, r0
	cmp	r3, #0
	beq	.L5972
	cmp	fp, #0
	beq	.L5973
	ldr	r3, [fp]
	cmp	r3, #0
	beq	.L5974
	add	r8, r4, #168
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r8]
	add	r2, r2, #1
	strex	r3, r2, [r8]
	teq	r3, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	beq	.L5933
	ldr	r0, .L5978+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L5975
.L5934:
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L5927:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, .L5978+20
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L5976
.L5936:
	mov	r0, r5
.L5912:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5933:
	ldr	r3, [fp]
	mov	ip, #0
	mvn	lr, #94
	mov	r0, #8
	mov	r1, r9
	str	r0, [fp, #4]
	mov	r0, r7
	strb	lr, [r3]
	strb	r2, [r3, #1]
	strb	ip, [r3, #2]
	strb	ip, [r3, #3]
	ldrb	r2, [r4, #196]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #156]
	mov	r2, #32
	mov	r1, fp
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L5977
.L5935:
	ldr	r0, .L5978+24
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L5927
	movw	r1, #:lower16:.LC575
	ldr	r2, .L5978+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC575
	bl	__dynamic_pr_debug
	b	.L5927
.L5961:
	movw	r1, #:lower16:.LC335
	ldr	r2, .L5978+4
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC335
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L5913
.L5976:
	movw	r1, #:lower16:.LC344
	ldr	r2, .L5978+4
	mov	r3, r5
	movt	r1, #:upper16:.LC344
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L5936
.L5968:
	ldrb	ip, [r4, #136]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC566
	mov	r3, r4
	ldr	r2, .L5978+32
	movt	r1, #:upper16:.LC566
	sub	r0, r10, #32
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L5925
.L5971:
	ldrb	ip, [r4, #136]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC569
	sub	r0, r10, #8
	ldr	r2, .L5978+28
	movt	r1, #:upper16:.LC569
	mov	r3, r4
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L5929
.L5975:
	movw	r1, #:lower16:.LC573
	ldr	r2, .L5978+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC573
	ldr	r3, [r4, #168]
	bl	__dynamic_pr_debug
	b	.L5934
.L5918:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC564
	ldr	r1, .L5978+4
	movt	r0, #:upper16:.LC564
	bl	printk
	mvn	r0, #15
	b	.L5912
.L5977:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r1, r3, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC574
	ldr	r1, .L5978+28
	movt	r0, #:upper16:.LC574
	bl	printk
	b	.L5935
.L5963:
	movw	r0, #:lower16:.LC330
	ldr	r1, .L5978+4
	movt	r0, #:upper16:.LC330
	bl	printk
	mvn	r0, #18
	b	.L5912
.L5964:
	movw	r0, #:lower16:.LC563
	ldr	r1, .L5978+4
	mov	r2, r5
	movt	r0, #:upper16:.LC563
	mov	r3, #4096
	bl	printk
	mvn	r0, #11
	b	.L5912
.L5966:
	movw	r0, #:lower16:.LC565
	ldr	r1, .L5978+4
	movt	r0, #:upper16:.LC565
	bl	printk
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #11
	b	.L5912
.L5969:
	movw	r0, #:lower16:.LC567
	ldr	r1, .L5978+32
	mov	r2, r4
	movt	r0, #:upper16:.LC567
	bl	printk
	mov	r0, r8
	bl	mbim_free_ctrl_pkt.part.0
	b	.L5927
.L5970:
	movw	r0, #:lower16:.LC568
	ldr	r1, .L5978+32
	mov	r2, r4
	movt	r0, #:upper16:.LC568
	bl	printk
	mov	r0, r8
	bl	mbim_free_ctrl_pkt.part.0
	b	.L5927
.L5973:
	movw	r0, #:lower16:.LC571
	ldr	r1, .L5978+28
	mov	r2, r4
	movt	r0, #:upper16:.LC571
	bl	printk
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L5927
.L5972:
	movw	r0, #:lower16:.LC570
	ldr	r1, .L5978+28
	mov	r2, r4
	movt	r0, #:upper16:.LC570
	bl	printk
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L5927
.L5974:
	movw	r0, #:lower16:.LC572
	ldr	r1, .L5978+28
	mov	r2, r4
	movt	r0, #:upper16:.LC572
	bl	printk
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L5927
.L5962:
	movw	r0, #:lower16:.LC562
	ldr	r1, .L5978+4
	movt	r0, #:upper16:.LC562
	bl	printk
	mvn	r0, #18
	b	.L5912
.L5965:
	movw	r0, #:lower16:.LC72
	ldr	r1, .L5978+4
	movt	r0, #:upper16:.LC72
	bl	printk
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #31
	b	.L5912
.L5979:
	.align	2
.L5978:
	.word	.LANCHOR4-3024
	.word	.LANCHOR3+3940
	.word	.LANCHOR4-2992
	.word	.LANCHOR4-2976
	.word	.LANCHOR4-2944
	.word	.LANCHOR4-2896
	.word	.LANCHOR4-2928
	.word	.LANCHOR3+3980
	.word	.LANCHOR3+3952
	.fnend
	.size	mbim_write, .-mbim_write
	.section	.rodata.str1.4
	.align	2
.LC576:
	.ascii	"%s: audio_playback_buf_size %d - copy_buf->actual %"
	.ascii	"d, req->actual %d\000"
	.align	2
.LC577:
	.ascii	"<3>%s: Failed to queue %s req: err - %d\012\000"
	.align	2
.LC578:
	.ascii	"%s: copy_buf == 0\000"
	.align	2
.LC579:
	.ascii	"%s: Copy %d bytes\000"
	.align	2
.LC580:
	.ascii	"<3>%s: Failed completion: status %d\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_complete, %function
f_audio_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r3, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #20
	sub	sp, sp, #20
	ldr	r6, [r1, #32]
	ldr	r7, [r1, #44]
	str	r3, [sp, #12]
	cmp	r7, r3
	bne	.L5981
	ldr	r3, [r6, #172]
	mov	r4, r1
	mov	r5, r0
	cmp	r3, r0
	beq	.L6020
	ldr	r3, [r6, #176]
	cmp	r3, r0
	beq	.L6021
	ldr	r5, [r6, #272]
	cmp	r5, #0
	beq	.L5980
	add	r0, sp, #12
	ldm	r1, {r1, r2}
	bl	memcpy
	ldrh	r2, [sp, #12]
	mov	r0, r5
	ldrb	r1, [r6, #268]	@ zero_extendqisi2
	ldr	r3, [r5, #36]
	blx	r3
	str	r7, [r6, #272]
.L5980:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L6020:
	ldr	r7, [r6, #184]
	cmp	r7, #0
	beq	.L5980
	movw	r8, #:lower16:.LANCHOR0
	ldr	ip, [r7, #4]
	movt	r8, #:upper16:.LANCHOR0
	ldr	r2, [r1, #48]
	ldr	r3, [r8, #1176]
	sub	r1, r3, ip
	cmp	r1, r2
	bcs	.L5985
	ldr	r0, .L6027
	ldrh	r1, [r0, #-6]
	tst	r1, #4
	bne	.L6022
.L5986:
	add	r0, r7, #8
	add	r2, r6, #204
	ldr	r1, [r6, #208]
	bl	__list_add
	add	r0, r6, #188
	bl	schedule_work
	ldr	r0, [r8, #1176]
	bl	f_audio_buffer_alloc
	cmn	r0, #4096
	mov	r7, r0
	bhi	.L5987
	ldr	ip, [r0, #4]
	ldr	r2, [r4, #48]
.L5985:
	ldr	r0, [r7]
	ldr	r1, [r4]
	add	r0, r0, ip
	bl	memcpy
	ldr	r3, [r7, #4]
	mov	r1, r4
	mov	r2, #32
	ldr	ip, [r4, #48]
	mov	r0, r5
	add	r3, r3, ip
	str	r3, [r7, #4]
	str	r7, [r6, #184]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	ldrne	r1, .L6027+4
	movwne	r0, #:lower16:.LC577
	beq	.L5980
.L6019:
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC577
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L6021:
	ldr	r7, [r6, #216]
	cmp	r7, #0
	beq	.L6023
.L5990:
	ldr	r0, .L6027+8
	ldr	r2, [r4, #48]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6024
.L5994:
	ldm	r7, {r1, r3}
	ldr	r0, [r4]
	add	r1, r1, r3
	bl	memcpy
	movw	r2, #:lower16:.LANCHOR0
	ldr	r3, [r7, #4]
	ldr	r1, [r4, #48]
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #1180]
	add	r3, r3, r1
	sub	r2, r2, r3
	str	r3, [r7, #4]
	ldr	r3, [r4, #48]
	cmp	r2, r3
	bcs	.L5993
	cmp	r7, #0
	beq	.L5995
	ldr	r0, [r7]
	bl	kfree
	mov	r3, #0
	mov	r0, r7
	str	r3, [r7]
	bl	kfree
.L5995:
	mov	r3, #0
	add	r0, r6, #220
	str	r3, [r6, #216]
	bl	schedule_work
.L5993:
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r2, #32
	mov	r0, r5
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L5980
	ldr	r1, .L6027+12
	movw	r0, #:lower16:.LC577
	b	.L6019
.L6023:
	ldr	r0, .L6027+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6025
.L5991:
	add	r9, r6, #212
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r3, r6
	mov	r8, r0
	ldr	r0, [r3, #236]!
	cmp	r0, r3
	beq	.L6026
	sub	r7, r0, #8
	bl	list_del
	mov	r1, r8
	mov	r0, r9
	str	r7, [r6, #216]
	bl	_raw_spin_unlock_irqrestore
	b	.L5990
.L6024:
	movw	r1, #:lower16:.LC579
	mov	r3, r2
	ldr	r2, .L6027+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC579
	bl	__dynamic_pr_debug
	ldr	r2, [r4, #48]
	b	.L5994
.L6022:
	movw	r1, #:lower16:.LC576
	sub	r0, r0, #24
	str	ip, [sp]
	movt	r1, #:upper16:.LC576
	str	r2, [sp, #4]
	ldr	r2, .L6027+4
	bl	__dynamic_pr_debug
	b	.L5986
.L6026:
	mov	r0, r9
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	add	r0, r6, #220
	bl	schedule_work
	b	.L5993
.L6025:
	movw	r1, #:lower16:.LC578
	ldr	r2, .L6027+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC578
	bl	__dynamic_pr_debug
	b	.L5991
.L5987:
	ldr	r1, .L6027+4
	movw	r0, #:lower16:.LC37
	movt	r0, #:upper16:.LC37
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L5981:
	ldr	r1, .L6027+20
	movw	r0, #:lower16:.LC580
	mov	r2, r7
	movt	r0, #:upper16:.LC580
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L6028:
	.align	2
.L6027:
	.word	.LANCHOR4-2880
	.word	.LANCHOR3+4012
	.word	.LANCHOR4-2832
	.word	.LANCHOR3+4044
	.word	.LANCHOR4-2848
	.word	.LANCHOR3+4072
	.fnend
	.size	f_audio_complete, .-f_audio_complete
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_request_free.part.0, %function
conn_gadget_request_free.part.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r1
	mov	r5, r0
	ldr	r0, [r0]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	pop	{r4, r5, r6, lr}
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	conn_gadget_request_free.part.0, .-conn_gadget_request_free.part.0
	.set	acc_request_free.part.0,conn_gadget_request_free.part.0
	.set	ccid_request_free.part.0,conn_gadget_request_free.part.0
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ep_matches.part.0, %function
ep_matches.part.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	ip, [r2, #3]	@ zero_extendqisi2
	ands	r4, ip, #3
	beq	.L6034
	ldr	r9, [r1, #4]
	mov	r7, r3
	mov	r6, r1
	ldrb	r3, [r9]	@ zero_extendqisi2
	cmp	r3, #101
	beq	.L6088
.L6034:
	mov	r0, #0
.L6031:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6088:
	ldrb	r3, [r9, #2]	@ zero_extendqisi2
	mov	r5, r2
	mov	r8, r0
	cmp	r3, #45
	beq	.L6035
	mov	r1, #45
	mov	r0, r9
	bl	strrchr
	subs	r10, r0, #0
	beq	.L6036
	cmp	r4, #2
	beq	.L6037
	cmp	r4, #3
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	bne	.L6038
	cmp	r3, #115
	beq	.L6034
	movw	r0, #:lower16:.LC506
	ldr	r1, [r8, #28]
	movt	r0, #:upper16:.LC506
	bl	strcmp
	cmp	r0, #0
	bne	.L6039
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #105
	beq	.L6034
.L6039:
	ldrb	r3, [r10, #-1]	@ zero_extendqisi2
	movw	r2, #:lower16:_ctype
	movt	r2, #:upper16:_ctype
	ldrb	r2, [r2, r3]	@ zero_extendqisi2
	tst	r2, #4
	beq	.L6053
	ldrh	r3, [r5, #4]	@ unaligned
	cmp	r3, #0
	beq	.L6058
	ubfx	r2, r3, #0, #11
	mov	r9, #0
	b	.L6055
.L6036:
	mov	r0, r9
	bl	strlen
	add	r10, r9, r0
.L6040:
	ldrb	r3, [r10, #-1]	@ zero_extendqisi2
	movw	r2, #:lower16:_ctype
	movt	r2, #:upper16:_ctype
	ldrb	r2, [r2, r3]	@ zero_extendqisi2
	tst	r2, #4
	beq	.L6053
.L6035:
	sub	r9, r4, #2
	cmp	r7, #0
	clz	r9, r9
	moveq	r3, #0
	lsr	r9, r9, #5
	movne	r3, r9
	cmp	r3, #0
	bne	.L6089
.L6043:
	ldrh	r3, [r5, #4]	@ unaligned
	cmp	r3, #0
	bne	.L6045
.L6051:
	ldrh	r3, [r6, #20]
	strh	r3, [r5, #4]	@ unaligned
.L6045:
	cmp	r4, #1
	ubfx	r2, r3, #0, #11
	beq	.L6046
	cmp	r4, #3
	bne	.L6047
.L6055:
	ldr	r1, [r8, #20]
	cmp	r1, #2
	movls	r1, #1
	movhi	r1, #0
	cmp	r2, #64
	movls	r1, #0
	cmp	r1, #0
	bne	.L6034
.L6046:
	ldrh	r1, [r6, #20]
	cmp	r1, r2
	bcc	.L6034
	ldr	r2, [r8, #20]
	cmp	r2, #2
	bls	.L6090
.L6047:
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	movw	r3, #:lower16:_ctype
	movt	r3, #:upper16:_ctype
	and	r2, r2, #128
	strb	r2, [r5, #2]
	ldr	r0, [r6, #4]
	ldrb	r1, [r0, #2]	@ zero_extendqisi2
	ldrb	r3, [r3, r1]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L6091
	movw	r1, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LANCHOR1
	ldr	r3, [r1, #3584]
	add	r3, r3, #1
	cmp	r3, #15
	str	r3, [r1, #3584]
	bhi	.L6034
	orr	r2, r2, r3
	uxtb	r2, r2
	strb	r2, [r5, #2]
.L6049:
	cmp	r7, #0
	moveq	r3, r9
	movne	r3, #0
	cmp	r3, #0
	beq	.L6050
	ldrh	r3, [r6, #20]
	cmp	r3, #64
	movge	r3, #64
	strh	r3, [r5, #4]	@ unaligned
.L6050:
	mov	r0, #1
	strb	r2, [r6, #25]
	b	.L6031
.L6053:
	ldrsb	r2, [r5, #2]
	cmp	r2, #0
	blt	.L6092
	cmp	r3, #116
	bne	.L6034
	b	.L6035
.L6089:
	ldr	r2, [r8, #20]
	cmp	r2, #4
	bhi	.L6093
.L6044:
	ldrh	r2, [r5, #4]	@ unaligned
	cmp	r2, #0
	movne	r9, r3
	bne	.L6047
.L6058:
	mov	r9, r3
	b	.L6051
.L6038:
	cmp	r3, #115
	bne	.L6034
	ldrb	r3, [r10, #-1]	@ zero_extendqisi2
	movw	r2, #:lower16:_ctype
	movt	r2, #:upper16:_ctype
	ldrb	r2, [r2, r3]	@ zero_extendqisi2
	tst	r2, #4
	beq	.L6053
	sub	r9, r4, #2
	clz	r9, r9
	lsr	r9, r9, #5
	b	.L6043
.L6037:
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #98
	bne	.L6034
	b	.L6040
.L6090:
	tst	r3, #7168
	bne	.L6034
	b	.L6047
.L6092:
	cmp	r3, #110
	bne	.L6034
	b	.L6035
.L6093:
	ldrb	r2, [r7, #3]	@ zero_extendqisi2
	ldrh	r1, [r6, #22]
	and	r2, r2, #31
	cmp	r1, r2
	bcs	.L6044
	b	.L6034
.L6091:
	mov	r2, #10
	add	r0, r0, #2
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	orr	r2, r2, r0
	uxtb	r2, r2
	strb	r2, [r5, #2]
	b	.L6049
	.fnend
	.size	ep_matches.part.0, .-ep_matches.part.0
	.section	.rodata.str1.4
	.align	2
.LC581:
	.ascii	"unbind function '%s'/%pK\012\000"
	.align	2
.LC582:
	.ascii	"unbind config '%s'/%pK\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	unbind_config, %function
unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r7, r1, #36
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LC581
	mov	r8, r0
	movt	r9, #:upper16:.LC581
	str	r10, [sp, #24]
	ldr	r10, .L6116
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	b	.L6096
.L6098:
	bl	list_del
	ldr	r3, [r4, #-36]
	cmp	r3, #0
	bne	.L6113
.L6096:
	ldr	r4, [r5, #36]
	cmp	r7, r4
	mov	r0, r4
	sub	r6, r4, #72
	bne	.L6098
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L6099
	ldr	r0, .L6116+4
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L6114
.L6100:
	mov	r0, r5
	blx	r3
.L6099:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6113:
	ldr	r2, .L6116+8
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L6115
.L6097:
	mov	r1, r6
	mov	r0, r5
	blx	r3
	b	.L6096
.L6115:
	ldr	r1, [r8]
	mov	r2, r9
	mov	r0, r10
	ldr	r3, [r4, #-72]
	str	r6, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #-36]
	b	.L6097
.L6114:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC582
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC582
	str	r5, [sp]
	ldr	r3, [r5]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r5, #12]
	b	.L6100
.L6117:
	.align	2
.L6116:
	.word	.LANCHOR4-2832
	.word	.LANCHOR4-2784
	.word	.LANCHOR4-2814
	.fnend
	.size	unbind_config, .-unbind_config
	.section	.rodata.str1.4
	.align	2
.LC583:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/composite."
	.ascii	"c\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_unbind, %function
composite_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	add	r8, r0, #32
	mov	r0, r8
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r3, [r0, #12]
	mov	r4, r0
	cmp	r3, #0
	bne	.L6135
.L6119:
	ldr	r0, [r4, #36]
	add	r6, r4, #36
	cmp	r6, r0
	beq	.L6120
.L6121:
	sub	r5, r0, #28
	bl	list_del
	mov	r1, r5
	mov	r0, r4
	bl	unbind_config
	ldr	r0, [r4, #36]
	cmp	r6, r0
	bne	.L6121
.L6120:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #2476]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L6122
	mov	r0, r4
	blx	r3
.L6122:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L6123
	ldr	r0, [r3]
	bl	kfree
	ldr	r0, [r7, #4]
	ldr	r1, [r4, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L6123:
	ldr	r1, .L6136
	mov	r0, r8
	bl	device_remove_file
	mov	r0, r4
	bl	kfree
	mov	r0, r8
	mov	r1, #0
	bl	dev_set_drvdata
	mov	r3, #0
	str	r3, [r5, #2476]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6135:
	movw	r0, #:lower16:.LC583
	movw	r1, #1556
	movt	r0, #:upper16:.LC583
	bl	warn_slowpath_null
	b	.L6119
.L6137:
	.align	2
.L6136:
	.word	.LANCHOR0+1184
	.fnend
	.size	composite_unbind, .-composite_unbind
	.section	.rodata.str1.4
	.align	2
.LC584:
	.ascii	"<7>usb: %s idVendor=0x%x, idProduct=0x%x\012\000"
	.align	2
.LC585:
	.ascii	"<7>usb: %s bcdDevice=0x%x\012\000"
	.align	2
.LC586:
	.ascii	"%s %s with %s\000"
	.align	2
.LC587:
	.ascii	"<7>usb: %s composite_manufacturer=%s\012\000"
	.align	2
.LC588:
	.ascii	"userspace failed to provide iSerialNumber\012\000"
	.align	2
.LC589:
	.ascii	"%s ready\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_bind, %function
composite_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	movw	r8, #:lower16:kmalloc_caches
	movt	r8, #:upper16:kmalloc_caches
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r0, [r8, #28]
	cmp	r0, #0
	beq	.L6155
	mov	r2, #68
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L6184
.L6139:
	mov	r3, #0
	add	r7, r5, #32
	str	r5, [r4]
	mov	r1, r4
	mov	r0, r7
	str	r3, [r4, #60]
	bl	dev_set_drvdata
	add	r3, r4, #36
	mov	r1, #208
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	ldr	r0, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r6, r0
	str	r0, [r4, #4]
	beq	.L6141
	ldr	r0, [r8, #48]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L6142
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L6142:
	str	r0, [r6]
	ldr	r2, [r4, #4]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L6141
	movw	r3, #:lower16:composite_setup_complete
	movw	r6, #:lower16:.LANCHOR1
	movt	r3, #:upper16:composite_setup_complete
	movt	r6, #:upper16:.LANCHOR1
	ldr	r0, [r6, #2476]
	str	r3, [r2, #28]
	ldr	r2, [r5, #4]
	mov	r3, #4096
	str	r4, [r2]
	ldr	r1, [r4]
	str	r3, [r4, #8]
	str	r0, [r4, #44]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L6143
	mov	r0, #0
.L6144:
	ldr	r2, [r3, #12]
	str	r0, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L6144
.L6143:
	mov	r2, #0
	mov	r0, r4
	ldr	r3, [r6, #3588]
	str	r2, [r6, #3584]
	blx	r3
	subs	r8, r0, #0
	bge	.L6185
.L6145:
	mov	r0, r5
	bl	composite_unbind
.L6138:
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6155:
	mov	r4, #16
	b	.L6139
.L6141:
	mvn	r8, #11
	b	.L6145
.L6184:
	mvn	r8, #11
	b	.L6138
.L6185:
	ldr	r3, [r6, #2476]
	movw	r2, #3592
	ldrh	r2, [r6, r2]
	ldr	r3, [r3, #12]
	cmp	r2, #0
	ldr	lr, [r3]	@ unaligned
	ldr	ip, [r3, #4]	@ unaligned
	ldr	r0, [r3, #8]	@ unaligned
	ldr	r1, [r3, #12]	@ unaligned
	str	lr, [r4, #17]	@ unaligned
	str	ip, [r4, #21]	@ unaligned
	str	r0, [r4, #25]	@ unaligned
	movw	r0, #:lower16:.LC584
	str	r1, [r4, #29]	@ unaligned
	ldrh	r3, [r3, #16]	@ unaligned
	movw	r1, #3596
	ldrh	r1, [r6, r1]
	strhne	r2, [r4, #25]	@ unaligned
	movt	r0, #:upper16:.LC584
	strh	r3, [r4, #33]	@ unaligned
	movw	r3, #3594
	ldrh	r3, [r6, r3]
	cmp	r3, #0
	strhne	r3, [r4, #27]	@ unaligned
	cmp	r1, #0
	strhne	r1, [r4, #29]	@ unaligned
	ldr	r1, .L6188
	bl	printk
	movw	r3, #3596
	movw	r0, #:lower16:.LC585
	ldr	r1, .L6188
	ldrh	r2, [r6, r3]
	movt	r0, #:upper16:.LC585
	bl	printk
	ldr	r3, [r6, #3600]
	cmp	r3, #0
	beq	.L6186
.L6149:
	add	r1, r4, #31
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #49]
.L6150:
	movw	r0, #:lower16:.LC587
	ldr	r2, .L6188+4
	ldr	r1, .L6188
	movt	r0, #:upper16:.LC587
	bl	printk
	ldr	r3, [r6, #3656]
	cmp	r3, #0
	beq	.L6187
.L6151:
	add	r1, r4, #32
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #50]
.L6152:
	ldr	r3, [r6, #3660]
	cmp	r3, #0
	beq	.L6153
	add	r1, r4, #33
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #51]
.L6153:
	ldr	r3, [r6, #2476]
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L6154
	ldrb	r3, [r4, #33]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L6154
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC588
	movt	r1, #:upper16:.LC588
	add	r0, r0, #32
	bl	dev_warn
.L6154:
	ldr	r1, .L6188+8
	mov	r0, r7
	bl	device_create_file
	subs	r8, r0, #0
	bne	.L6145
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC589
	ldr	r3, [r6, #2476]
	movt	r1, #:upper16:.LC589
	add	r0, r0, #32
	ldr	r2, [r3]
	bl	_dev_info
	b	.L6138
.L6186:
	ldrb	r3, [r4, #31]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L6150
	ldr	r3, [r6, #2476]
	ldr	r3, [r3, #8]
	cmp	r3, #0
	bne	.L6149
	ldrb	r3, [r6, #3604]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L6149
	ldr	r3, .L6188+12
	movw	r2, #:lower16:.LC586
	mov	r1, #50
	ldr	ip, [r5, #28]
	movt	r2, #:upper16:.LC586
	ldr	r0, .L6188+4
	stm	sp, {r3, ip}
	sub	r3, r3, #130
	bl	snprintf
	b	.L6149
.L6187:
	ldrb	r3, [r4, #32]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L6152
	ldr	r3, [r6, #2476]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L6151
	b	.L6152
.L6189:
	.align	2
.L6188:
	.word	.LANCHOR3+4092
	.word	.LANCHOR1+3604
	.word	.LANCHOR0+1184
	.word	init_uts_ns+134
	.fnend
	.size	composite_bind, .-composite_bind
	.section	.rodata.str1.4
	.align	2
.LC590:
	.ascii	"<3>Physical address or size of buf is NULL\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_mmap, %function
audio_pcm_mmap:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #208]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r2, #544]
	cmp	r3, #0
	beq	.L6191
	ldr	lr, [r2, #548]
	cmp	lr, #0
	beq	.L6191
	ldr	r0, [r0]
	ldr	r2, [r2, #540]
	ldr	r0, [r0]
	ldr	r0, [r0, #496]
	cmp	r0, #0
	beq	.L6192
	ldr	ip, [r0, #276]
	cmp	ip, #0
	beq	.L6192
.L6193:
	mov	r4, #0
	str	lr, [sp]
	str	r4, [sp, #4]
	ldr	r4, [ip, #8]
	blx	r4
.L6190:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6192:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L6193
	.syntax divided
@ 236 "/home/jprim/hlte/lolz/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 236, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L6191:
	movw	r0, #:lower16:.LC590
	movt	r0, #:upper16:.LC590
	bl	printk
	mvn	r0, #21
	b	.L6190
	.fnend
	.size	audio_pcm_mmap, .-audio_pcm_mmap
	.align	2
	.global	gsdio_ctrl_wq
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_wq, %function
gsdio_ctrl_wq:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #80
	beq	.L6208
	bx	lr
.L6208:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L6209
	movt	r0, #:upper16:.LC105
	b	printk
.L6210:
	.align	2
.L6209:
	.word	.LANCHOR5-4076
	.fnend
	.size	gsdio_ctrl_wq, .-gsdio_ctrl_wq
	.section	.rodata.str1.4
	.align	2
.LC591:
	.ascii	"<3>%s: Invalid grmnet:%pK\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_connect, %function
frmnet_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	subs	r2, r0, #0
	beq	.L6213
	mov	r3, #1
	str	r3, [r2, #124]
	bx	lr
.L6213:
	movw	r0, #:lower16:.LC591
	ldr	r1, .L6214
	movt	r0, #:upper16:.LC591
	b	printk
.L6215:
	.align	2
.L6214:
	.word	.LANCHOR5-4060
	.fnend
	.size	frmnet_connect, .-frmnet_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_in_max_packet_size_show, %function
conn_gadget_in_max_packet_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	cmp	r3, #0
	beq	.L6217
	ldr	r3, [r3, #92]
	cmp	r3, #0
	beq	.L6217
	movw	r1, #:lower16:.LC75
	mov	r0, r2
	ldrh	r2, [r3, #20]
	movt	r1, #:upper16:.LC75
	b	sprintf
.L6217:
	movw	r0, #:lower16:.LC448
	ldr	r1, .L6226
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC448
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L6227:
	.align	2
.L6226:
	.word	.LANCHOR5-4044
	.fnend
	.size	conn_gadget_in_max_packet_size_show, .-conn_gadget_in_max_packet_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_out_max_packet_size_show, %function
conn_gadget_out_max_packet_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	cmp	r3, #0
	beq	.L6229
	ldr	r3, [r3, #96]
	cmp	r3, #0
	beq	.L6229
	movw	r1, #:lower16:.LC75
	mov	r0, r2
	ldrh	r2, [r3, #20]
	movt	r1, #:upper16:.LC75
	b	sprintf
.L6229:
	movw	r0, #:lower16:.LC448
	ldr	r1, .L6238
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC448
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L6239:
	.align	2
.L6238:
	.word	.LANCHOR5-4008
	.fnend
	.size	conn_gadget_out_max_packet_size_show, .-conn_gadget_out_max_packet_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_usb_buffer_size_show, %function
conn_gadget_usb_buffer_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	cmp	r3, #0
	beq	.L6244
	ldr	r3, [r3, #192]
	mov	r0, r2
	movw	r1, #:lower16:.LC75
	movt	r1, #:upper16:.LC75
	add	r2, r3, #1020
	cmp	r3, #0
	add	r2, r2, #3
	movlt	r3, r2
	asr	r2, r3, #10
	b	sprintf
.L6244:
	movw	r0, #:lower16:.LC448
	ldr	r1, .L6247
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC448
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L6248:
	.align	2
.L6247:
	.word	.LANCHOR5-3968
	.fnend
	.size	conn_gadget_usb_buffer_size_show, .-conn_gadget_usb_buffer_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdUSB_show, %function
bcdUSB_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L6250
	movw	r1, #:lower16:.LC83
	mov	r0, r4
	ldrh	r2, [r3, #19]	@ unaligned
	movt	r1, #:upper16:.LC83
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
.L6250:
	movw	r3, #:lower16:.LANCHOR0
	movw	r1, #:lower16:.LC83
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	ldrh	r2, [r3, #138]
	movt	r1, #:upper16:.LC83
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	bcdUSB_show, .-bcdUSB_show
	.section	.rodata.str1.4
	.align	2
.LC592:
	.ascii	"major %x minor %x vendor %x\012\000"
	.align	2
.LC593:
	.ascii	"<7>usb: %s terminal_mode %s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	terminal_version_show, %function
terminal_version_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #3666
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r2
	str	lr, [sp, #8]
	add	r5, r3, #3664
	mov	r4, r2
	ldrh	r3, [r3, r1]
	ldrh	r2, [r5]
	.pad #12
	sub	sp, sp, #12
	movw	r1, #:lower16:.LC592
	movt	r1, #:upper16:.LC592
	str	r3, [sp]
	lsr	r3, r2, #8
	uxtb	r2, r2
	bl	sprintf
	ldrh	r3, [r5]
	mov	r5, r0
	cmp	r3, #0
	bne	.L6259
.L6253:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L6259:
	movw	r0, #:lower16:.LC593
	ldr	r1, .L6260
	mov	r2, r4
	movt	r0, #:upper16:.LC593
	bl	printk
	b	.L6253
.L6261:
	.align	2
.L6260:
	.word	.LANCHOR5-3932
	.fnend
	.size	terminal_version_show, .-terminal_version_show
	.section	.rodata.str1.4
	.align	2
.LC594:
	.ascii	"%s: cbits_to_modem:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_set_modem_cbits_w, %function
rmnet_sdio_set_modem_cbits_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #-12]
	mov	r3, r0
	tst	r2, #2
	beq	.L6262
	ldr	r0, .L6271
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L6270
.L6262:
	bx	lr
.L6270:
	movw	r1, #:lower16:.LC594
	ldr	r2, .L6271+4
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC594
	ldr	r3, [r3, #-4]
	b	__dynamic_pr_debug
.L6272:
	.align	2
.L6271:
	.word	.LANCHOR4-2752
	.word	.LANCHOR5-3908
	.fnend
	.size	rmnet_sdio_set_modem_cbits_w, .-rmnet_sdio_set_modem_cbits_w
	.section	.rodata.str1.4
	.align	2
.LC595:
	.ascii	"audio_disable\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_disable, %function
audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6284
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L6283
.L6274:
	ldrb	r3, [r4, #152]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L6273
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	strb	r3, [r4, #152]
.L6273:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6283:
	movw	r1, #:lower16:.LC595
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC595
	bl	__dynamic_pr_debug
	b	.L6274
.L6285:
	.align	2
.L6284:
	.word	.LANCHOR4-2736
	.fnend
	.size	audio_disable, .-audio_disable
	.section	.rodata.str1.4
	.align	2
.LC596:
	.ascii	"<3>%s on a NULL device\012\000"
	.align	2
.LC597:
	.ascii	"%s sets POLLIN for rmnet_ctrl_qti_port\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_poll, %function
rmnet_ctrl_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	cmp	r4, #0
	beq	.L6300
	cmp	r1, #0
	mov	r2, r1
	beq	.L6289
	ldr	r5, [r2]
	adds	r1, r4, #32
	movne	r3, #1
	moveq	r3, #0
	cmp	r5, #0
	moveq	r3, #0
	cmp	r3, #0
	bne	.L6301
.L6289:
	add	r6, r4, #52
	add	r4, r4, #44
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r5, r0
	cmp	r3, r4
	moveq	r4, #0
	beq	.L6290
	ldr	r0, .L6303
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	moveq	r4, #65
	bne	.L6302
.L6290:
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L6286:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6301:
	blx	r5
	b	.L6289
.L6302:
	movw	r1, #:lower16:.LC597
	ldr	r2, .L6303+4
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC597
	mov	r4, #65
	bl	__dynamic_pr_debug
	b	.L6290
.L6300:
	movw	r0, #:lower16:.LC596
	ldr	r1, .L6303+4
	mov	r4, #8
	movt	r0, #:upper16:.LC596
	bl	printk
	b	.L6286
.L6304:
	.align	2
.L6303:
	.word	.LANCHOR4-2704
	.word	.LANCHOR5-3876
	.fnend
	.size	rmnet_ctrl_poll, .-rmnet_ctrl_poll
	.section	.rodata.str1.4
	.align	2
.LC598:
	.ascii	"%s: ctrl_tomodem:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_send_cbits_tomodem, %function
ghsic_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	ip, #:lower16:.LANCHOR1
	movt	ip, #:upper16:.LANCHOR1
	ldr	r3, [ip, #1016]
	cmp	r0, #0
	cmpne	r1, r3
	bcs	.L6317
	mov	r3, #104
	mla	r1, r3, r1, ip
	ldr	r3, [r1, #1020]
	cmp	r3, #0
	beq	.L6318
	ldr	r1, [r3, #88]
	cmp	r1, r2
	beq	.L6305
	ldr	r1, [r3, #84]
	str	r2, [r3, #88]
	tst	r1, #1
	beq	.L6305
	ldr	r0, .L6320
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6319
.L6305:
	bx	lr
.L6319:
	movw	r1, #:lower16:.LC598
	mov	r3, r2
	ldr	r2, .L6320+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC598
	b	__dynamic_pr_debug
.L6317:
	movw	r0, #:lower16:.LC118
	mov	r2, r1
	ldr	r1, .L6320+4
	movt	r0, #:upper16:.LC118
	b	printk
.L6318:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L6320+4
	movt	r0, #:upper16:.LC105
	b	printk
.L6321:
	.align	2
.L6320:
	.word	.LANCHOR4-2688
	.word	.LANCHOR5-3860
	.fnend
	.size	ghsic_send_cbits_tomodem, .-ghsic_send_cbits_tomodem
	.section	.rodata.str1.4
	.align	2
.LC599:
	.ascii	"%s: port:%pK\012\000"
	.align	2
.LC600:
	.ascii	"<3>%s: ctrl bridge open failed :%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_connect_w, %function
ghsic_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #16
	bxeq	lr
	ldr	r2, [r0, #68]
	tst	r2, #2
	bxeq	lr
	ldr	r0, .L6337
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, .L6337+4
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	beq	.L6324
	movw	r1, #:lower16:.LC599
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC599
	sub	r2, r4, #8
	bl	__dynamic_pr_debug
.L6324:
	movw	r0, #:lower16:.LC600
	sub	r1, r4, #8
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC600
	mvn	r2, #18
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L6338:
	.align	2
.L6337:
	.word	.LANCHOR4-2656
	.word	.LANCHOR5-3824
	.fnend
	.size	ghsic_ctrl_connect_w, .-ghsic_ctrl_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_cbits_tomodem, %function
ghsuart_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	ip, #:lower16:.LANCHOR1
	movt	ip, #:upper16:.LANCHOR1
	ldr	r3, [ip, #1856]
	cmp	r0, #0
	cmpne	r1, r3
	bcs	.L6351
	mov	r3, #84
	mla	r1, r3, r1, ip
	ldr	r3, [r1, #1860]
	cmp	r3, #0
	beq	.L6352
	ldr	r1, [r3, #92]
	cmp	r1, r2
	beq	.L6339
	ldr	r1, [r3, #88]
	str	r2, [r3, #92]
	tst	r1, #4
	beq	.L6339
	ldr	r0, .L6354
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6353
.L6339:
	bx	lr
.L6353:
	movw	r1, #:lower16:.LC598
	mov	r3, r2
	ldr	r2, .L6354+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC598
	b	__dynamic_pr_debug
.L6351:
	movw	r0, #:lower16:.LC118
	mov	r2, r1
	ldr	r1, .L6354+4
	movt	r0, #:upper16:.LC118
	b	printk
.L6352:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L6354+4
	movt	r0, #:upper16:.LC105
	b	printk
.L6355:
	.align	2
.L6354:
	.word	.LANCHOR4-2640
	.word	.LANCHOR5-3808
	.fnend
	.size	ghsuart_send_cbits_tomodem, .-ghsuart_send_cbits_tomodem
	.section	.rodata.str1.4
	.align	2
.LC601:
	.ascii	"%s: %s: woken up by peer\012\000"
	.align	2
.LC602:
	.ascii	"<3>%s: FAILED: d_port == NULL\000"
	.align	2
.LC603:
	.ascii	"<3>%s: FAILED: d_port->cdev == NULL\000"
	.align	2
.LC604:
	.ascii	"<3>%s: FAILED: d_port->cdev->gadget == NULL\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_wake_cb, %function
bam_data_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L6371
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #4]
	ldrh	r3, [r2, #-14]
	tst	r3, #4
	bne	.L6367
.L6357:
	cmp	r4, #0
	beq	.L6368
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L6369
	ldr	r0, [r3]
	cmp	r0, #0
	beq	.L6370
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L6362
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L6367:
	ldr	r3, .L6371+4
	movw	r1, #:lower16:.LC601
	sub	r0, r2, #32
	movt	r1, #:upper16:.LC601
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L6357
.L6362:
	mvn	r0, #94
.L6356:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6369:
	movw	r0, #:lower16:.LC603
	ldr	r1, .L6371+4
	movt	r0, #:upper16:.LC603
	bl	printk
	mvn	r0, #18
	b	.L6356
.L6368:
	movw	r0, #:lower16:.LC602
	ldr	r1, .L6371+4
	movt	r0, #:upper16:.LC602
	bl	printk
	mvn	r0, #18
	b	.L6356
.L6370:
	movw	r0, #:lower16:.LC604
	ldr	r1, .L6371+4
	movt	r0, #:upper16:.LC604
	bl	printk
	mvn	r0, #18
	b	.L6356
.L6372:
	.align	2
.L6371:
	.word	.LANCHOR4-2608
	.word	.LANCHOR5-3780
	.fnend
	.size	bam_data_wake_cb, .-bam_data_wake_cb
	.section	.rodata.str1.4
	.align	2
.LC605:
	.ascii	"%s: ctrl device is already opened\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_open, %function
ccid_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #3400]
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L6380
	ldr	r6, [r4, #116]
	cmp	r6, #0
	bne	.L6381
	mov	r3, #1
	add	r7, r4, #92
	mov	r5, r1
	mov	r0, r7
	str	r3, [r4, #116]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r4, [r5, #124]
	bl	_raw_spin_unlock_irqrestore
.L6373:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6381:
	ldr	r0, .L6382
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r6, #15
	beq	.L6373
	movw	r1, #:lower16:.LC605
	ldr	r2, .L6382+4
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC605
	mvn	r6, #15
	bl	__dynamic_pr_debug
	b	.L6373
.L6380:
	ldr	r0, .L6382+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	mvneq	r6, #18
	beq	.L6373
	movw	r1, #:lower16:.LC304
	ldr	r2, .L6382+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC304
	mvn	r6, #18
	bl	__dynamic_pr_debug
	b	.L6373
.L6383:
	.align	2
.L6382:
	.word	.LANCHOR4-2560
	.word	.LANCHOR5-3760
	.word	.LANCHOR4-2592
	.fnend
	.size	ccid_ctrl_open, .-ccid_ctrl_open
	.section	.rodata.str1.4
	.align	2
.LC606:
	.ascii	"ccid_bulk_open\012\000"
	.align	2
.LC607:
	.ascii	"%s: bulk device is already opened\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_open, %function
ccid_bulk_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L6398
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #3400]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6395
.L6385:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L6396
	ldr	r5, [r4, #152]
	cmp	r5, #0
	bne	.L6397
	mov	r3, #1
	add	r6, r4, #92
	str	r5, [r4, #148]
	mov	r0, r6
	str	r3, [r4, #152]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r6
	str	r4, [r7, #124]
	bl	_raw_spin_unlock_irqrestore
.L6384:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6395:
	movw	r1, #:lower16:.LC606
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC606
	bl	__dynamic_pr_debug
	b	.L6385
.L6397:
	ldr	r0, .L6398+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	mvneq	r5, #15
	beq	.L6384
	movw	r1, #:lower16:.LC607
	ldr	r2, .L6398+8
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC607
	mvn	r5, #15
	bl	__dynamic_pr_debug
	b	.L6384
.L6396:
	ldr	r0, .L6398+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r5, #18
	beq	.L6384
	movw	r1, #:lower16:.LC304
	ldr	r2, .L6398+8
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC304
	mvn	r5, #18
	bl	__dynamic_pr_debug
	b	.L6384
.L6399:
	.align	2
.L6398:
	.word	.LANCHOR4-2544
	.word	.LANCHOR4-2496
	.word	.LANCHOR5-3744
	.word	.LANCHOR4-2512
	.fnend
	.size	ccid_bulk_open, .-ccid_bulk_open
	.section	.rodata.str1.4
	.align	2
.LC608:
	.ascii	"qdss_eps_disable\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_eps_disable, %function
qdss_eps_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6419
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L6418
.L6401:
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L6402
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L6402:
	tst	r3, #4
	beq	.L6403
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L6403:
	tst	r3, #1
	beq	.L6400
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #192]
.L6400:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6418:
	movw	r1, #:lower16:.LC608
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC608
	bl	__dynamic_pr_debug
	b	.L6401
.L6420:
	.align	2
.L6419:
	.word	.LANCHOR4-2464
	.fnend
	.size	qdss_eps_disable, .-qdss_eps_disable
	.section	.rodata.str1.4
	.align	2
.LC609:
	.ascii	"qdss_disable\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_disable, %function
qdss_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6430
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L6428
.L6422:
	add	r5, r4, #188
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	mov	r1, r0
	cmp	r3, #0
	beq	.L6429
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	bl	qdss_eps_disable
	add	r1, r4, #172
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	ldr	r0, [r4, #196]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_work
.L6429:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L6428:
	movw	r1, #:lower16:.LC609
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC609
	bl	__dynamic_pr_debug
	b	.L6422
.L6431:
	.align	2
.L6430:
	.word	.LANCHOR4-2448
	.fnend
	.size	qdss_disable, .-qdss_disable
	.section	.rodata.str1.4
	.align	2
.LC610:
	.ascii	"%s: nothing to do\012\000"
	.align	2
.LC611:
	.ascii	"<3>%s: rmnet notify ep enqueue error %d\012\000"
	.align	2
.LC612:
	.ascii	"%s: port#%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_disconnect, %function
frmnet_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L6454
	ldr	r3, [r4, #120]
	mov	r2, #0
	str	r2, [r4, #124]
	cmp	r3, r2
	beq	.L6455
	ldr	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6437
	blx	r3
.L6437:
	ldr	r3, [r4, #140]
	mov	r1, #0
	mvn	r0, #94
	mov	r2, #32
	ldr	r3, [r3]
	strb	r0, [r3]
	strb	r1, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrh	r0, [r4, #112]
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L6456
.L6438:
	ldr	r0, .L6459
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6457
.L6440:
	add	r9, r4, #132
	add	r7, r4, #144
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #144]
	mov	r8, r0
	cmp	r5, r7
	beq	.L6441
.L6442:
	mov	r0, r5
	sub	r6, r5, #8
	bl	list_del
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r5, [r4, #144]
	cmp	r7, r5
	bne	.L6442
.L6441:
	mov	r3, #0
	mov	r1, r8
	mov	r0, r9
	str	r3, [r4, #152]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L6456:
	ldr	r3, [r4, #120]
	cmp	r3, #0
	bne	.L6458
.L6432:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6455:
	ldr	r0, .L6459+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L6432
	movw	r1, #:lower16:.LC610
	ldr	r2, .L6459+8
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC610
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__dynamic_pr_debug
.L6457:
	movw	r1, #:lower16:.LC612
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	sub	r0, r0, #24
	ldr	r2, .L6459+12
	movt	r1, #:upper16:.LC612
	bl	__dynamic_pr_debug
	b	.L6440
.L6454:
	movw	r0, #:lower16:.LC591
	mov	r2, r4
	ldr	r1, .L6459+8
	movt	r0, #:upper16:.LC591
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L6458:
	movw	r0, #:lower16:.LC611
	ldr	r1, .L6459+8
	movt	r0, #:upper16:.LC611
	bl	printk
	b	.L6438
.L6460:
	.align	2
.L6459:
	.word	.LANCHOR4-2400
	.word	.LANCHOR4-2416
	.word	.LANCHOR5-3728
	.word	.LANCHOR5-3708
	.fnend
	.size	frmnet_disconnect, .-frmnet_disconnect
	.section	.rodata.str1.4
	.align	2
.LC613:
	.ascii	"<3>%s: rmnet dev is null\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_cmd_complete, %function
frmnet_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	cmp	r5, #0
	beq	.L6469
	ldr	r0, .L6471
	mov	r4, r1
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6470
.L6463:
	ldr	lr, [r5, #96]
	cmp	lr, #0
	beq	.L6461
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r4]
	ldr	r2, [r4, #48]
	add	r0, r0, r0, lsl #1
	add	r3, r3, r0, lsl #3
	ldrb	r0, [r3, #3252]	@ zero_extendqisi2
	mov	r3, lr
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	bx	r3
.L6461:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L6470:
	ldrb	ip, [r5, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC152
	mov	r3, r5
	ldr	r2, .L6471+4
	movt	r1, #:upper16:.LC152
	sub	r0, r0, #32
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L6463
.L6469:
	ldr	r1, .L6471+4
	movw	r0, #:lower16:.LC613
	movt	r0, #:upper16:.LC613
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L6472:
	.align	2
.L6471:
	.word	.LANCHOR4-2368
	.word	.LANCHOR5-3684
	.fnend
	.size	frmnet_cmd_complete, .-frmnet_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_suspend, %function
rmnet_sdio_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #192]
	mov	r3, r0
	cmp	r2, #0
	bne	.L6475
	bx	lr
.L6475:
	ldr	r2, [r3, #328]
	add	r1, r0, #332
	ldr	r0, [r0, #200]
	bic	r2, r2, #2
	str	r2, [r3, #328]
	b	queue_work
	.fnend
	.size	rmnet_sdio_suspend, .-rmnet_sdio_suspend
	.align	2
	.global	gsdio_read_complete
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_read_complete, %function
gsdio_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L6485
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r0]
	ldrh	r3, [ip, #-6]
	tst	r3, #4
	bne	.L6483
.L6477:
	cmp	r4, #0
	beq	.L6484
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	add	r2, r4, #20
	ldr	r1, [r4, #24]
	add	r0, r6, #36
	bl	__list_add
	ldr	r3, [r4, #48]
	movw	r2, #:lower16:.LANCHOR1
	add	r1, r4, #28
	movt	r2, #:upper16:.LANCHOR1
	ldr	r0, [r2, #3324]
	add	r3, r3, #1
	str	r3, [r4, #48]
	bl	queue_work
	mov	r1, r5
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock_irqrestore
.L6483:
	movw	r1, #:lower16:.LC171
	mov	r3, r0
	ldr	r2, .L6485+4
	sub	r0, ip, #24
	movt	r1, #:upper16:.LC171
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L6477
.L6484:
	ldr	r1, .L6485+4
	movw	r0, #:lower16:.LC105
	movt	r0, #:upper16:.LC105
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L6486:
	.align	2
.L6485:
	.word	.LANCHOR4-2352
	.word	.LANCHOR5-3664
	.fnend
	.size	gsdio_read_complete, .-gsdio_read_complete
	.section	.rodata.str1.4
	.align	2
.LC614:
	.ascii	"%s: port num =%d unthrottled\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_unthrottle_tx, %function
ghsic_data_unthrottle_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L6487
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L6498
.L6487:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6498:
	add	r5, r4, #80
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #208]
	mov	r1, r0
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #208]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #120
	ldr	r0, [r4, #84]
	bl	queue_work
	ldr	r0, .L6499
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L6487
	movw	r1, #:lower16:.LC614
	ldr	r2, .L6499+4
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC614
	ldr	r3, [r4]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__dynamic_pr_debug
.L6500:
	.align	2
.L6499:
	.word	.LANCHOR4-2320
	.word	.LANCHOR5-3644
	.fnend
	.size	ghsic_data_unthrottle_tx, .-ghsic_data_unthrottle_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_disable, %function
rmnet_mux_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #368]
	cmp	r3, #0
	bxeq	lr
	mov	r3, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	str	r3, [r0, #368]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6503
	blx	r2
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
.L6503:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r5, [r4, #96]
	ldr	r6, [r4, #100]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6504
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L6504:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6505
	blx	r2
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
.L6505:
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	add	r1, r4, #380
	ldr	r0, [r4, #376]
	str	r3, [r4, #348]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
	.fnend
	.size	rmnet_mux_disable, .-rmnet_mux_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_disconnect_w, %function
grmnet_ctrl_smd_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-160]
	cmp	r0, #0
	beq	.L6519
	bl	smd_close
	mov	r3, #0
	str	r3, [r4, #-160]
.L6519:
	ldr	r3, [r4, #-152]
	tst	r3, #2
	bne	.L6520
	ldr	r3, [r4, #-152]
	tst	r3, #4
	beq	.L6518
.L6520:
	sub	r1, r4, #152
	mov	r0, #2
	bl	_clear_bit
	ldr	r3, .L6526
	mov	r2, #84
	ldr	r0, [r4, #-60]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	mla	r0, r2, r0, r3
	add	r0, r0, #4
	b	platform_driver_unregister
.L6518:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6527:
	.align	2
.L6526:
	.word	.LANCHOR1+512
	.fnend
	.size	grmnet_ctrl_smd_disconnect_w, .-grmnet_ctrl_smd_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_disconnect_w, %function
ghsuart_ctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #36]
	mov	r3, r0
	tst	r2, #1
	bne	.L6530
	bx	lr
.L6530:
	mov	r2, #0
	add	r1, r0, #36
	mov	r0, #2
	str	r2, [r3, #-36]
	b	_clear_bit
	.fnend
	.size	ghsuart_ctrl_disconnect_w, .-ghsuart_ctrl_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_disconnect_w, %function
ghsuart_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #60]
	mov	r3, r0
	tst	r2, #1
	bne	.L6533
	bx	lr
.L6533:
	mov	r2, #0
	add	r1, r0, #60
	mov	r0, #2
	str	r2, [r3, #-100]
	b	_clear_bit
	.fnend
	.size	ghsuart_data_disconnect_w, .-ghsuart_data_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_disable, %function
rmnet_sdio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #192]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r4
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	bl	rmnet_sdio_free_buf
	add	r1, r4, #204
	ldr	r0, [r4, #200]
	bl	queue_work
	str	r5, [r4, #328]
	add	r1, r4, #332
	ldr	r0, [r4, #200]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
	.fnend
	.size	rmnet_sdio_disable, .-rmnet_sdio_disable
	.section	.rodata.str1.4
	.align	2
.LC615:
	.ascii	"%s: port:%pK tom:%lu pno:%d\012\000"
	.align	2
.LC616:
	.ascii	"<3>%s: rx queue failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_write_tomdm, %function
ghsuart_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r8, r0, #144
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	beq	.L6539
	ldr	r3, [r0, #-140]
	mov	r4, r0
	cmp	r3, #0
	bne	.L6583
.L6539:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6583:
	sub	r7, r0, #40
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #40]
	mov	r6, r0
	tst	r3, #2
	bne	.L6549
	mov	r3, r4
	ldr	r5, [r3, #-56]!
	cmp	r5, r3
	beq	.L6543
	cmp	r5, #0
	beq	.L6543
	ldr	r3, [r4, #-48]
	mov	r10, #0
	mov	fp, #0
	ldr	r0, .L6591
	sub	r3, r3, #1
	str	r3, [r4, #-48]
	ldrd	r2, [r5]
	strd	r10, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6584
.L6545:
	ldr	r1, .L6591+4
	ldr	r0, .L6591+8
	bl	___ratelimit
	cmp	r0, #0
	bne	.L6585
.L6542:
	ldr	r3, [r4, #68]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #68]
	bl	dev_kfree_skb_any
.L6543:
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, .L6591+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6586
.L6546:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #-132]
	mov	r6, r0
	cmp	r8, #0
	beq	.L6549
	ldr	r3, [r4, #40]
	tst	r3, #2
	bne	.L6549
	sub	r3, r4, #64
	movw	r9, #:lower16:.LANCHOR0
	movt	r9, #:upper16:.LANCHOR0
	str	r3, [sp, #12]
	b	.L6548
.L6588:
	ldr	r5, [r4, #-64]
	ldr	r0, [sp, #12]
	sub	r10, r5, #36
	cmp	r5, r0
	beq	.L6549
	ldr	r0, [r9, #1224]
	bl	__alloc_skb
	mov	fp, r0
	mov	r0, r5
	cmp	fp, #0
	beq	.L6549
	bl	list_del
	ldr	r2, [fp, #172]
	mov	r1, r6
	mov	r0, r7
	str	r2, [r5, #-36]
	ldr	r2, [r9, #1224]
	str	r2, [r5, #-32]
	str	fp, [r5, #-4]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r8, #8]
	mov	r2, #208
	mov	r1, r10
	mov	r0, r8
	ldr	r6, [ip, #16]
	blx	r6
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	r6, #0
	mov	r6, r0
	bne	.L6587
.L6548:
	ldr	r0, [r4, #-140]
	mov	r2, #0
	mvn	r3, #0
	mov	r1, #32
	cmp	r0, r2
	bne	.L6588
.L6549:
	mov	r1, r6
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L6587:
	ldr	r9, .L6591+16
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r0, .L6591+20
	mov	r1, r9
	bl	___ratelimit
	cmp	r0, #0
	bne	.L6589
.L6550:
	ldr	r3, [r4, #-140]
	cmp	r3, #0
	bne	.L6590
	ldr	r3, [r8, #8]
	mov	r1, r10
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6549
.L6586:
	movw	r1, #:lower16:.LC599
	ldr	r2, .L6591+16
	mov	r3, r8
	movt	r1, #:upper16:.LC599
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L6546
.L6584:
	ldr	lr, [r4, #-144]
	movw	r1, #:lower16:.LC615
	mov	r3, r8
	ldr	ip, [r4, #60]
	movt	r1, #:upper16:.LC615
	sub	r0, r0, #24
	ldr	r2, .L6591+4
	stm	sp, {ip, lr}
	bl	__dynamic_pr_debug
	b	.L6545
.L6590:
	mov	r0, r5
	ldr	r2, [r4, #-64]
	ldr	r1, [sp, #12]
	bl	__list_add
	b	.L6549
.L6585:
	movw	r0, #:lower16:.LC121
	ldr	r1, .L6591+4
	mvn	r2, #18
	movt	r0, #:upper16:.LC121
	bl	printk
	b	.L6542
.L6589:
	movw	r0, #:lower16:.LC616
	mov	r1, r9
	movt	r0, #:upper16:.LC616
	bl	printk
	b	.L6550
.L6592:
	.align	2
.L6591:
	.word	.LANCHOR4-2304
	.word	.LANCHOR5-3616
	.word	.LANCHOR0+1200
	.word	.LANCHOR4-2272
	.word	.LANCHOR5-3588
	.word	.LANCHOR0+1228
	.fnend
	.size	ghsuart_data_write_tomdm, .-ghsuart_data_write_tomdm
	.section	.rodata.str1.4
	.align	2
.LC617:
	.ascii	"<3>%s: usb epIn failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_write_tohost, %function
ghsuart_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #160
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-156]
	.pad #12
	sub	sp, sp, #12
	cmp	r3, #0
	bne	.L6618
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6618:
	sub	r8, r0, #88
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #-152]
	mov	r7, r0
	cmp	r9, #0
	beq	.L6597
	ldr	r3, [r4, #-112]
	sub	r2, r4, #112
	str	r2, [sp, #4]
	cmp	r2, r3
	beq	.L6597
	sub	r3, r4, #104
	movw	fp, #:lower16:.LANCHOR0
	movt	fp, #:upper16:.LANCHOR0
	str	r3, [sp]
	mov	r3, fp
	mov	fp, r0
	mov	r7, r3
.L6601:
	ldr	r5, [r4, #-104]
	ldr	r3, [sp]
	cmp	r5, r3
	beq	.L6613
	cmp	r5, #0
	beq	.L6613
	ldr	r3, [r4, #-96]
	mov	r0, #0
	mov	r1, #0
	sub	r3, r3, #1
	str	r3, [r4, #-96]
	ldrd	r2, [r5]
	strd	r0, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #-112]
	str	r5, [r6, #-4]
	ldr	r3, [r5, #172]
	sub	r10, r6, #36
	str	r3, [r6, #-36]
	ldr	r3, [r5, #80]
	str	r3, [r6, #-32]
	ldr	r3, [r4, #32]
	ldr	r0, [r7, #1252]
	add	r3, r3, #1
	cmp	r3, r0
	str	r3, [r4, #32]
	ldrb	r3, [r6, #-10]	@ zero_extendqisi2
	orrne	r3, r3, #1
	strbne	r3, [r6, #-10]
	bne	.L6599
	bfc	r3, #0, #1
	strb	r3, [r6, #-10]
	mov	r3, #0
	str	r3, [r4, #32]
.L6599:
	mov	r0, r6
	bl	list_del
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r2, #208
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	cmp	fp, #0
	mov	fp, r0
	bne	.L6619
	ldr	r2, [r4, #-112]
	ldr	r1, [sp, #4]
	ldr	r3, [r4, #48]
	cmp	r1, r2
	add	r3, r3, #1
	str	r3, [r4, #48]
	bne	.L6601
.L6613:
	mov	r7, fp
.L6597:
	mov	r1, r7
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L6619:
	mov	r7, r0
	movw	r0, #:lower16:.LC617
	ldr	r1, .L6620
	movt	r0, #:upper16:.LC617
	bl	printk
	mov	r0, r6
	ldr	r2, [r4, #-112]
	ldr	r1, [sp, #4]
	bl	__list_add
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L6597
.L6621:
	.align	2
.L6620:
	.word	.LANCHOR5-3564
	.fnend
	.size	ghsuart_data_write_tohost, .-ghsuart_data_write_tohost
	.section	.rodata.str1.4
	.align	2
.LC618:
	.ascii	"<6>%s: setting notify count to zero\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_close_sdio_work, %function
rmnet_close_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6676
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-6]
	.pad #4
	sub	sp, sp, #4
	tst	r2, #4
	bne	.L6671
.L6623:
	ldr	r3, [r4, #-108]
	cmp	r3, #0
	beq	.L6622
	ldr	r0, [r4, #-204]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6626
	blx	r3
.L6626:
	sub	r7, r4, #112
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-200]
	mov	r2, #0
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r7
	ldr	r3, [r3]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	ip, [r4, #-196]	@ zero_extendqisi2
	strh	ip, [r3, #4]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #-204]
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L6672
.L6627:
	ldr	r0, [r4, #-212]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6629
	blx	r3
.L6629:
	ldr	r0, [r4, #-208]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6630
	blx	r3
.L6630:
	sub	r0, r4, #64
	bl	cancel_work_sync
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-108]
	mov	r9, r0
	cmp	r3, #0
	bne	.L6673
.L6642:
	mov	r1, r9
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L6672:
	ldr	r3, [r4, #-108]
	cmp	r3, #0
	bne	.L6674
.L6622:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6671:
	movw	r1, #:lower16:.LC285
	ldr	r2, .L6676+4
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC285
	bl	__dynamic_pr_debug
	b	.L6623
.L6673:
	ldr	r5, [r4, #-168]
	sub	r6, r4, #168
	cmp	r5, r6
	beq	.L6633
	mov	r8, #0
.L6632:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r3, [r4, #-160]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #-160]
	str	r8, [r5, #-36]
	ldr	r5, [r4, #-212]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-168]
	cmp	r5, r6
	bne	.L6632
.L6633:
	ldr	r5, [r4, #-140]
	sub	r6, r4, #140
	cmp	r5, r6
	beq	.L6634
	mov	r8, #0
.L6635:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r3, [r4, #-132]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #-132]
	str	r8, [r5, #-36]
	ldr	r5, [r4, #-208]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-140]
	cmp	r5, r6
	bne	.L6635
.L6634:
	ldr	r5, [r4, #-192]
	sub	r6, r4, #192
	cmp	r5, r6
	beq	.L6636
.L6637:
	mov	r0, r5
	sub	r8, r5, #8
	bl	list_del
	ldr	r3, [r4, #-184]
	sub	r3, r3, #1
	str	r3, [r4, #-184]
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	ldr	r5, [r4, #-192]
	cmp	r5, r6
	bne	.L6637
.L6636:
	ldr	r5, [r4, #-180]
	sub	r8, r4, #180
	cmp	r8, r5
	beq	.L6638
.L6639:
	mov	r0, r5
	sub	r6, r5, #8
	bl	list_del
	ldr	r3, [r4, #-172]
	sub	r3, r3, #1
	str	r3, [r4, #-172]
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r5, [r4, #-180]
	cmp	r5, r8
	bne	.L6639
.L6638:
	mov	r3, #0
	movw	r0, #:lower16:.LC618
	ldr	r1, .L6676+4
	movt	r0, #:upper16:.LC618
	sub	r5, r4, #156
	str	r3, [r4, #-104]
	mov	r10, #0
	mov	fp, #0
	bl	printk
.L6641:
	ldr	r0, [r4, #-156]
	cmp	r0, r5
	bne	.L6675
.L6640:
	sub	r5, r4, #128
	mov	r10, #0
	mov	fp, #0
.L6643:
	ldr	r0, [r4, #-128]
	cmp	r0, r5
	beq	.L6642
	cmp	r0, #0
	beq	.L6642
	ldr	r3, [r4, #-120]
	sub	r3, r3, #1
	str	r3, [r4, #-120]
	ldrd	r2, [r0]
	strd	r10, [r0]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	dev_kfree_skb_any
	b	.L6643
.L6674:
	movw	r0, #:lower16:.LC611
	ldr	r1, .L6676+4
	movt	r0, #:upper16:.LC611
	bl	printk
	b	.L6627
.L6675:
	cmp	r0, #0
	beq	.L6640
	ldr	r3, [r4, #-148]
	sub	r3, r3, #1
	str	r3, [r4, #-148]
	ldrd	r2, [r0]
	strd	r10, [r0]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	dev_kfree_skb_any
	b	.L6641
.L6677:
	.align	2
.L6676:
	.word	.LANCHOR4-2256
	.word	.LANCHOR5-3536
	.fnend
	.size	rmnet_close_sdio_work, .-rmnet_close_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_disconnect_work, %function
gbam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-280]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-276]
	bl	msm_bam_dmux_close
	sub	r1, r4, #280
	mov	r0, #1
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	_clear_bit
	.fnend
	.size	gbam_disconnect_work, .-gbam_disconnect_work
	.section	.rodata.str1.4
	.align	2
.LC619:
	.ascii	"<3>%s: usb_bam_disconnect_ipa failed: err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_disconnect_work, %function
gbam2bam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-168]
	cmp	r3, #7
	bxne	lr
	sub	r0, r0, #164
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa
	subs	r2, r0, #0
	bne	.L6694
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6694:
	movw	r0, #:lower16:.LC619
	ldr	r1, .L6695
	movt	r0, #:upper16:.LC619
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L6696:
	.align	2
.L6695:
	.word	.LANCHOR5-3512
	.fnend
	.size	gbam2bam_disconnect_work, .-gbam2bam_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_disconnect_work, %function
bam2bam_data_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-124]
	cmp	r3, #7
	bxne	lr
	sub	r0, r0, #120
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa
	subs	r2, r0, #0
	bne	.L6708
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6708:
	movw	r0, #:lower16:.LC619
	ldr	r1, .L6709
	movt	r0, #:upper16:.LC619
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L6710:
	.align	2
.L6709:
	.word	.LANCHOR5-3484
	.fnend
	.size	bam2bam_data_disconnect_work, .-bam2bam_data_disconnect_work
	.section	.rodata.str1.4
	.align	2
.LC620:
	.ascii	"usb: %s - usb_ncm misc driver fail \012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_init, %function
ncm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:kmalloc_caches
	movt	r5, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, [r5, #24]
	str	lr, [sp, #12]
	cmp	r0, #0
	beq	.L6716
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L6717
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L6712
	mov	r2, #6
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6, #4]
	beq	.L6722
.L6715:
	movw	r1, #:lower16:ncm_work
	mov	r3, r4
	ldr	r0, .L6724
	mov	ip, #2560
	movt	r1, #:upper16:ncm_work
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	str	ip, [r3], #4
	str	r3, [r4, #4]
	str	r3, [r4, #8]
	str	r1, [r4, #12]
	str	r4, [r2, #3536]
	bl	misc_register
	cmp	r0, #0
	bne	.L6723
.L6711:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6716:
	mov	r4, #16
.L6712:
	mov	r3, #16
	str	r3, [r6, #4]
	b	.L6715
.L6722:
	mov	r0, r4
	bl	kfree
	mvn	r0, #11
	b	.L6711
.L6717:
	mvn	r0, #11
	b	.L6711
.L6723:
	movw	r0, #:lower16:.LC620
	ldr	r1, .L6724+4
	movt	r0, #:upper16:.LC620
	bl	printk
	mov	r0, #0
	b	.L6711
.L6725:
	.align	2
.L6724:
	.word	.LANCHOR0+852
	.word	.LANCHOR5-3452
	.fnend
	.size	ncm_function_init, .-ncm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	show_timestamp, %function
show_timestamp:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #3668]
	.pad #28
	sub	sp, sp, #28
	str	r1, [sp, #8]
	strd	r2, [sp, #12]
	cmp	r0, #0
	moveq	r4, r0
	beq	.L6726
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #48]
	cmp	r0, #0
	beq	.L6735
	mov	r2, #4096
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L6739
.L6728:
	ldr	r10, .L6740
	add	r0, r10, #4
	bl	_raw_read_lock_irqsave
	ldr	r6, [r10]
	str	r0, [sp, #20]
	add	r4, r6, #1
	and	r4, r4, #31
	cmp	r6, r4
	beq	.L6737
	movw	r8, #:lower16:.LC80
	mov	r5, #0
	movt	r8, #:upper16:.LC80
	sub	r9, r10, #4096
.L6733:
	add	fp, r9, r4, lsl #7
	mov	r1, #128
	mov	r0, fp
	bl	strnlen
	mov	ip, r0
	rsb	r1, r5, #4096
	cmp	ip, #0
	add	r0, r7, r5
	mov	r3, fp
	mov	r2, r8
	add	lr, r4, #1
	beq	.L6730
	bl	scnprintf
	ldr	r6, [r10]
	add	r4, r4, #1
	add	r5, r5, r0
	and	r4, r4, #31
	cmp	r4, r6
	bne	.L6733
.L6729:
	ldr	r0, .L6740+4
	ldr	r1, [sp, #20]
	bl	_raw_read_unlock_irqrestore
	mov	r3, r7
	str	r5, [sp]
	ldrd	r0, [sp, #8]
	ldr	r2, [sp, #16]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r7
	bl	kfree
.L6726:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6735:
	mov	r7, #16
	b	.L6728
.L6730:
	and	r4, lr, #31
	cmp	r4, r6
	bne	.L6733
	b	.L6729
.L6737:
	mov	r5, #0
	b	.L6729
.L6739:
	mvn	r4, #11
	b	.L6726
.L6741:
	.align	2
.L6740:
	.word	dbg_data+4096
	.word	dbg_data+4100
	.fnend
	.size	show_timestamp, .-show_timestamp
	.section	.rodata.str1.4
	.align	2
.LC621:
	.ascii	"<3>%s: unable open bridge ch:%d err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_connect_w, %function
ghsic_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #88
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #-84]
	cmp	r2, #0
	beq	.L6742
	ldr	r2, [r0, #92]
	tst	r2, #2
	bne	.L6761
.L6742:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6761:
	ldr	r0, .L6762
	ldr	r5, .L6762+4
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	beq	.L6744
	movw	r1, #:lower16:.LC599
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC599
	sub	r2, r5, #8
	bl	__dynamic_pr_debug
.L6744:
	movw	r0, #:lower16:.LC621
	sub	r1, r5, #8
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC621
	mvn	r3, #18
	ldr	lr, [sp, #12]
	ldr	r2, [r4, #68]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	printk
.L6763:
	.align	2
.L6762:
	.word	.LANCHOR4-2224
	.word	.LANCHOR5-3424
	.fnend
	.size	ghsic_data_connect_w, .-ghsic_data_connect_w
	.section	.rodata.str1.4
	.align	2
.LC622:
	.ascii	"<3>%s: smux close timedout\012\000"
	.align	2
.LC623:
	.ascii	"<3> %s smux_open failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_connect_w, %function
ghsuart_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #36
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r2, [r0, #52]
	tst	r2, #2
	beq	.L6764
	ldr	r0, .L6785
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L6784
.L6766:
	ldr	r3, [r4, #52]
	tst	r3, #1
	beq	.L6767
	sub	r0, r4, #20
	mov	r1, #900
	bl	wait_for_completion_timeout
	cmp	r0, #0
	bne	.L6767
	movw	r0, #:lower16:.LC622
	ldr	r1, .L6785+4
	movt	r0, #:upper16:.LC622
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L6764:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6784:
	movw	r1, #:lower16:.LC599
	ldr	r2, .L6785+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC599
	bl	__dynamic_pr_debug
	b	.L6766
.L6767:
	movw	r0, #:lower16:.LC623
	ldr	r1, .L6785+4
	movt	r0, #:upper16:.LC623
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L6786:
	.align	2
.L6785:
	.word	.LANCHOR4-2208
	.word	.LANCHOR5-3408
	.fnend
	.size	ghsuart_ctrl_connect_w, .-ghsuart_ctrl_connect_w
	.section	.rodata.str1.4
	.align	2
.LC624:
	.ascii	"<3>%s: unable to open smux ch:%d err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_connect_w, %function
ghsuart_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #112
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #-108]
	cmp	r2, #0
	beq	.L6787
	ldr	r2, [r0, #76]
	tst	r2, #2
	beq	.L6787
	ldr	r0, .L6810
	ldr	r5, .L6810+4
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L6805
.L6789:
	ldr	r3, [r4, #76]
	tst	r3, #1
	beq	.L6790
	mov	r1, #900
	sub	r0, r4, #84
	bl	wait_for_completion_timeout
	cmp	r0, #0
	bne	.L6790
	movw	r0, #:lower16:.LC622
	sub	r1, r5, #8
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC622
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L6787:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6805:
	movw	r1, #:lower16:.LC599
	sub	r2, r5, #8
	movt	r1, #:upper16:.LC599
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L6789
.L6790:
	movw	r0, #:lower16:.LC624
	sub	r1, r5, #8
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC624
	mvn	r3, #18
	ldr	lr, [sp, #12]
	ldr	r2, [r4, #68]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	printk
.L6811:
	.align	2
.L6810:
	.word	.LANCHOR4-2176
	.word	.LANCHOR5-3376
	.fnend
	.size	ghsuart_data_connect_w, .-ghsuart_data_connect_w
	.section	.rodata.str1.4
	.align	2
.LC625:
	.ascii	"TTY\000"
	.align	2
.LC626:
	.ascii	"SDIO\000"
	.align	2
.LC627:
	.ascii	"SMD\000"
	.align	2
.LC628:
	.ascii	"QTI\000"
	.align	2
.LC629:
	.ascii	"BAM\000"
	.align	2
.LC630:
	.ascii	"BAM2BAM\000"
	.align	2
.LC631:
	.ascii	"BAM2BAM_IPA\000"
	.align	2
.LC632:
	.ascii	"HSIC\000"
	.align	2
.LC633:
	.ascii	"HSUART\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	str_to_xport, %function
str_to_xport:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC625
	movt	r0, #:upper16:.LC625
	mov	r1, r4
	str	lr, [sp, #4]
	mov	r2, #12
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #1
	beq	.L6812
	movw	r0, #:lower16:.LC626
	mov	r2, #12
	movt	r0, #:upper16:.LC626
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #2
	beq	.L6812
	movw	r0, #:lower16:.LC627
	mov	r2, #12
	movt	r0, #:upper16:.LC627
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #3
	beq	.L6812
	movw	r0, #:lower16:.LC628
	mov	r2, #12
	movt	r0, #:upper16:.LC628
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #4
	beq	.L6812
	movw	r0, #:lower16:.LC629
	mov	r2, #12
	movt	r0, #:upper16:.LC629
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #5
	beq	.L6812
	movw	r0, #:lower16:.LC630
	mov	r2, #12
	movt	r0, #:upper16:.LC630
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #6
	beq	.L6812
	movw	r0, #:lower16:.LC631
	mov	r2, #12
	movt	r0, #:upper16:.LC631
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #7
	beq	.L6812
	movw	r0, #:lower16:.LC632
	mov	r2, #12
	movt	r0, #:upper16:.LC632
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #8
	beq	.L6812
	movw	r0, #:lower16:.LC633
	mov	r2, #12
	movt	r0, #:upper16:.LC633
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #9
	beq	.L6812
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	movne	r0, #0
	moveq	r0, #10
.L6812:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	str_to_xport, .-str_to_xport
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_event_add.part.0, %function
__ffs_event_add.part.0:
	.fnstart
	@ Volatile: function does not return.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	.syntax divided
@ 2155 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 2155, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
	.fnend
	.size	__ffs_event_add.part.0, .-__ffs_event_add.part.0
	.section	.rodata.str1.4
	.align	2
.LC634:
	.ascii	"%s: len %d, buffer_len %d, read %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_io, %function
ffs_epfile_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	subs	fp, r3, #0
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	str	r1, [sp, #20]
	ldr	r3, [r4, #36]
	strd	r2, [sp, #12]
	beq	.L6827
	sub	r3, r2, #1
	ldr	r0, .L6890
	mvn	r3, r3, lsr #10
	mvn	r3, r3, lsl #10
	add	r3, r3, #1
	mov	ip, r3
	str	r3, [sp, #8]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6880
.L6829:
	ldr	r5, [r4, #32]
	cmp	r5, #0
	bne	.L6856
	ldr	r3, [r4, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	bne	.L6831
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
.L6832:
	ldr	r7, [r4, #40]
	cmp	r7, #0
	beq	.L6881
.L6854:
	ldrb	r6, [r4, #53]	@ zero_extendqisi2
	and	r9, fp, #1
	clz	r6, r6
	lsr	r6, r6, #5
	cmp	r9, r6
	eor	r3, r9, r6
	beq	.L6837
	ldrb	r2, [r4, #54]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L6861
.L6837:
	cmp	r5, #0
	eoreq	r3, r3, #1
	movne	r3, #0
	cmp	r3, #0
	beq	.L6838
	movw	r1, #32976
	ldr	r0, [sp, #8]
	bl	__kmalloc
	subs	r5, r0, #0
	beq	.L6862
	cmp	fp, #0
	beq	.L6882
.L6838:
	ldr	r3, [r8, #28]
	mov	r0, r4
	tst	r3, #2048
	beq	.L6839
	bl	mutex_trylock
	cmp	r0, #0
	beq	.L6864
.L6842:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #40]
	cmp	r3, r7
	bne	.L6883
	cmp	r9, r6
	bne	.L6884
	ldr	r8, [r7, #4]
	movw	r3, #:lower16:ffs_epfile_io_complete
	cmp	fp, #0
	movt	r3, #:upper16:ffs_epfile_io_complete
	ldr	r2, [sp, #8]
	ldr	r9, [sp, #16]
	str	r5, [r8]
	mov	r1, r8
	str	r3, [r8, #28]
	movne	r3, #0
	str	r2, [r8, #4]
	mov	r2, #32
	strne	r3, [r9, #68]!
	streq	fp, [r9, #52]!
	str	r9, [r8, #32]
	ldr	r0, [r7]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r3, [r4, #36]
	mov	r10, r0
	add	r0, r3, #24
	bl	_raw_spin_unlock_irq
	cmp	r10, #0
	blt	.L6865
	mov	r0, r9
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bne	.L6885
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #36]
	ldr	r3, [r4, #40]
	cmp	r3, r7
	beq	.L6886
	add	r0, r0, #24
	mvn	r9, #18
	bl	_raw_spin_unlock_irq
.L6845:
	mov	r0, r4
	bl	mutex_unlock
	b	.L6833
.L6827:
	ldr	r0, .L6890
	mov	ip, r2
	str	r2, [sp, #8]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6829
.L6880:
	movw	r1, #:lower16:.LC634
	ldr	r2, .L6890+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC634
	str	ip, [sp]
	ldr	r3, [sp, #12]
	str	fp, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L6829
.L6839:
	bl	mutex_lock_interruptible
	cmp	r0, #0
	beq	.L6842
	mov	r9, r0
.L6833:
	mov	r0, r5
	bl	kfree
.L6826:
	mov	r0, r9
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6881:
	ldr	r3, [r8, #28]
	tst	r3, #2048
	bne	.L6864
	cmp	fp, #0
	beq	.L6860
	ldr	r3, [r4, #32]
	cmp	r3, #0
	bne	.L6860
	ldr	r0, [r10, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #40
	movt	r2, #:upper16:autoremove_wake_function
	add	r6, r4, #20
	str	r3, [sp, #28]
	str	r1, [sp, #40]
	str	r0, [sp, #32]
	str	r2, [sp, #36]
	str	r1, [sp, #44]
	b	.L6836
.L6887:
	bl	schedule
.L6836:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r7, [r4, #40]
	cmp	r7, #0
	bne	.L6834
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L6887
	add	r1, sp, #28
	mov	r0, r6
	mov	r9, #65024
	movt	r9, 65535
	bl	finish_wait
	b	.L6833
.L6886:
	ldr	r9, [r7, #24]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	cmp	r9, #0
	movle	r6, #0
	andgt	r6, r6, #1
	cmp	r6, #0
	beq	.L6845
	ldr	r3, [sp, #12]
	cmp	r9, r3
	mvnhi	r9, #74
	bhi	.L6845
	mov	r3, sp
	ldr	r1, [sp, #20]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L6851
.L6852:
	mvn	r9, #13
	b	.L6845
.L6882:
	ldr	r2, [sp, #12]
	ldr	r1, [sp, #20]
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L6838
	mvn	r9, #13
	b	.L6833
.L6860:
	mvn	r9, #18
	b	.L6833
.L6834:
	add	r1, sp, #28
	mov	r0, r6
	bl	finish_wait
	b	.L6854
.L6851:
	mov	r0, r1
	mov	r2, r9
	mov	r1, r5
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L6845
	b	.L6852
.L6883:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	mutex_unlock
	ldr	r3, [r4, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	beq	.L6832
.L6831:
	movw	r0, #:lower16:.LC31
	movw	r1, #785
	movt	r0, #:upper16:.LC31
	mvn	r9, #18
	bl	warn_slowpath_null
	b	.L6833
.L6862:
	mvn	r9, #11
	b	.L6826
.L6865:
	mvn	r9, #4
	b	.L6845
.L6884:
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L6888
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
.L6853:
	ldr	r0, [r4, #36]
	mvn	r9, #73
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	b	.L6845
.L6885:
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #40]
	cmp	r3, r7
	beq	.L6889
.L6849:
	ldr	r0, [r4, #36]
	mvn	r9, #3
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	b	.L6845
.L6889:
	ldr	r0, [r7]
	mov	r1, r8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L6849
.L6864:
	mvn	r9, #10
	b	.L6833
.L6856:
	mvn	r9, #18
	b	.L6826
.L6861:
	mvn	r9, #21
	b	.L6833
.L6888:
	movw	r0, #:lower16:.LC31
	mov	r1, #860
	movt	r0, #:upper16:.LC31
	bl	warn_slowpath_null
	b	.L6853
.L6891:
	.align	2
.L6890:
	.word	.LANCHOR4-2160
	.word	.LANCHOR5-3360
	.fnend
	.size	ffs_epfile_io, .-ffs_epfile_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_write, %function
ffs_epfile_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	b	ffs_epfile_io
	.fnend
	.size	ffs_epfile_write, .-ffs_epfile_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_read, %function
ffs_epfile_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #1
	b	ffs_epfile_io
	.fnend
	.size	ffs_epfile_read, .-ffs_epfile_read
	.section	.rodata.str1.4
	.align	2
.LC635:
	.ascii	"%s: data xport: %s dev: %pK portno: %d\012\000"
	.align	2
.LC636:
	.ascii	"%s: resumed port %d\012\000"
	.align	2
.LC637:
	.ascii	"<3>%s: Un-supported transport: %s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_resume, %function
frmnet_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r6, .L6913
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #16]
	ldrb	ip, [r0, #116]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r6, #-14]
	add	r3, ip, ip, lsl #1
	add	r3, r4, r3, lsl #3
	tst	r2, #4
	ldr	r5, [r3, #3240]
	bne	.L6910
.L6895:
	cmp	r5, #7
	bhi	.L6900
	cmp	r5, #5
	bhi	.L6901
	bne	.L6903
.L6894:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L6900:
	sub	r3, r5, #8
	cmp	r3, #2
	bls	.L6894
.L6903:
	sub	r5, r5, #1
	cmp	r5, #9
	bls	.L6911
	movw	r2, #:lower16:.LC183
	movt	r2, #:upper16:.LC183
.L6897:
	ldr	r1, .L6913+4
	movw	r0, #:lower16:.LC637
	movt	r0, #:upper16:.LC637
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L6901:
	ldr	r3, .L6913+8
	add	ip, ip, ip, lsl #1
	add	ip, r4, ip, lsl #3
	ldrh	r2, [r3, #-6]
	ldrb	r3, [ip, #3248]	@ zero_extendqisi2
	tst	r2, #4
	add	r2, r4, r3, lsl #2
	ldr	r5, [r2, #3672]
	bne	.L6912
.L6899:
	ldr	r0, [r4, #3460]
	add	r1, r5, #332
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	queue_work
.L6910:
	sub	r2, r5, #1
	mov	r7, r0
	cmp	r2, #9
	movwhi	r3, #:lower16:.LC183
	movthi	r3, #:upper16:.LC183
	bhi	.L6896
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #1160]
.L6896:
	movw	r1, #:lower16:.LC635
	ldr	r2, .L6913+4
	stm	sp, {r7, ip}
	ldr	r0, .L6913+12
	movt	r1, #:upper16:.LC635
	bl	__dynamic_pr_debug
	ldrb	ip, [r7, #116]	@ zero_extendqisi2
	b	.L6895
.L6912:
	movw	r1, #:lower16:.LC636
	ldr	r2, .L6913+16
	sub	r0, r6, #8
	movt	r1, #:upper16:.LC636
	bl	__dynamic_pr_debug
	b	.L6899
.L6911:
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r5, lsl #2
	ldr	r2, [r3, #1160]
	b	.L6897
.L6914:
	.align	2
.L6913:
	.word	.LANCHOR4-2128
	.word	.LANCHOR5-3344
	.word	.LANCHOR4-2112
	.word	.LANCHOR4-2160
	.word	.LANCHOR5-3328
	.fnend
	.size	frmnet_resume, .-frmnet_resume
	.section	.rodata.str1.4
	.align	2
.LC638:
	.ascii	"MessageLength:%d DataLength:%d\012\000"
	.align	2
.LC639:
	.ascii	"<3>RNDIS header is NULL.\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_header, %function
rndis_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r4, [r0, #124]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L6916
	ldr	r4, [r0, #144]
	cmp	r4, #0
	beq	.L6917
	mov	r1, #44
	mov	r0, r4
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	ldr	r0, .L6928
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	add	r2, r2, #44
	str	r2, [r4, #4]	@ unaligned
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	str	r3, [r4, #12]	@ unaligned
	ldrh	r1, [r0, #-14]
	tst	r1, #4
	bne	.L6927
.L6918:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6916:
	mov	r1, #44
	mov	r0, r5
	bl	skb_realloc_headroom
	subs	r7, r0, #0
	beq	.L6919
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r6, r0
	bl	__memzero
	mov	r3, #1
	mov	r2, #36
	strb	r3, [r6]
	strb	r4, [r6, #1]
	strb	r4, [r6, #2]
	strb	r4, [r6, #3]
	ldr	r3, [r7, #80]
	str	r3, [r6, #4]	@ unaligned
	strb	r2, [r6, #8]
	strb	r4, [r6, #9]
	strb	r4, [r6, #10]
	strb	r4, [r6, #11]
	ldr	r3, [r7, #80]
	sub	r3, r3, #44
	str	r3, [r6, #12]	@ unaligned
.L6919:
	mov	r0, r5
	mov	r5, r7
	bl	dev_kfree_skb_any
	b	.L6918
.L6927:
	movw	r1, #:lower16:.LC638
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC638
	bl	__dynamic_pr_debug
	b	.L6918
.L6917:
	movw	r0, #:lower16:.LC639
	mov	r5, r4
	movt	r0, #:upper16:.LC639
	bl	printk
	b	.L6918
.L6929:
	.align	2
.L6928:
	.word	.LANCHOR4-2080
	.fnend
	.size	rndis_add_header, .-rndis_add_header
	.section	.rodata.str1.4
	.align	2
.LC640:
	.ascii	"<3>%s: %s: %s failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_bind_config, %function
android_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movt	r1, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #3232]!
	ldr	r0, [r0, #24]
	cmp	r3, r1
	beq	.L6931
	sub	r3, r3, #512
	b	.L6932
.L6948:
	ldr	r3, [r3, #512]
	cmp	r3, r1
	sub	r3, r3, #512
	beq	.L6931
.L6932:
	ldr	r2, [r3, #8]
	cmp	r0, r2
	bne	.L6948
.L6931:
	mov	r7, r5
	ldr	r4, [r7, #112]!
	cmp	r7, r4
	sub	r4, r4, #4
	beq	.L6933
.L6939:
	ldr	r0, [r4]
	mov	r1, r5
	ldr	r3, [r0, #40]
	blx	r3
	subs	r6, r0, #0
	bne	.L6949
	ldr	r4, [r4, #4]
	cmp	r7, r4
	sub	r4, r4, #4
	bne	.L6939
.L6933:
	mov	r6, #0
.L6930:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6949:
	ldr	r2, .L6951
	movw	r0, #:lower16:.LC640
	add	r7, r5, #36
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC640
	mov	r1, r2
	ldr	r3, [r3]
	bl	printk
.L6936:
	ldr	r4, [r5, #36]
	cmp	r4, r7
	beq	.L6950
	mov	r0, r4
	sub	r8, r4, #72
	bl	list_del
	ldr	r3, [r4, #-36]
	cmp	r3, #0
	beq	.L6936
	mov	r1, r8
	mov	r0, r5
	blx	r3
	b	.L6936
.L6950:
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L6930
	mov	r0, r5
	blx	r3
	b	.L6930
.L6952:
	.align	2
.L6951:
	.word	.LANCHOR5-3316
	.fnend
	.size	android_bind_config, .-android_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_in_max_packet_size_store, %function
conn_gadget_in_max_packet_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r3
	bx	lr
	.fnend
	.size	conn_gadget_in_max_packet_size_store, .-conn_gadget_in_max_packet_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.0, %function
_snd_pcm_hw_param_set.constprop.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L6978
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6957
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L6956
.L6957:
	lsr	r6, r1, #5
	and	r3, r1, #31
	mov	r5, #1
	add	r6, r4, r6, lsl #2
	mov	r1, #32
	ldr	r7, [r6, #4]
	and	r7, r7, r5, lsl r3
	bl	__memzero
	str	r7, [r6, #4]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L6964
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L6960
.L6964:
	mov	r0, r5
	b	.L6959
.L6978:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L6956
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6957
.L6956:
	lsr	r5, r1, #5
	and	r3, r1, #31
	mov	r2, #1
	add	r5, r4, r5, lsl #2
	mov	r1, #32
	ldr	r6, [r5, #4]
	and	r6, r6, r2, lsl r3
	bl	__memzero
	str	r6, [r5, #4]
	ldr	r0, [r4, #4]
	cmp	r0, #0
	bne	.L6979
	ldr	r3, [r4, #8]
	cmp	r3, #0
	bne	.L6954
.L6960:
	mvn	r0, #21
.L6959:
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #1
	orr	r3, r3, #1
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L6954:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6979:
	mov	r0, #0
	b	.L6954
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.0, .-_snd_pcm_hw_param_set.constprop.0
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.1, %function
_snd_pcm_hw_param_set.constprop.1:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #36
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L7004
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6983
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L6982
.L6983:
	lsr	r6, r1, #5
	and	r3, r1, #31
	mov	r5, #1
	add	r6, r4, r6, lsl #2
	mov	r1, #32
	ldr	r7, [r6, #36]
	and	r7, r7, r5, lsl r3
	bl	__memzero
	str	r7, [r6, #36]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L6990
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L6986
.L6990:
	mov	r0, r5
	b	.L6985
.L7004:
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L6982
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6983
.L6982:
	lsr	r5, r1, #5
	and	r3, r1, #31
	mov	r2, #1
	add	r5, r4, r5, lsl #2
	mov	r1, #32
	ldr	r6, [r5, #36]
	and	r6, r6, r2, lsl r3
	bl	__memzero
	str	r6, [r5, #36]
	ldr	r0, [r4, #36]
	cmp	r0, #0
	bne	.L7005
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L6980
.L6986:
	mvn	r0, #21
.L6985:
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #2
	orr	r3, r3, #2
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L6980:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7005:
	mov	r0, #0
	b	.L6980
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.1, .-_snd_pcm_hw_param_set.constprop.1
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.2, %function
_snd_pcm_hw_param_set.constprop.2:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #284
	ldrb	r3, [sp, #8]	@ zero_extendqisi2
	mov	r1, sp
	str	r2, [sp]
	str	r2, [sp, #4]
	bic	r3, r3, #15
	orr	r3, r3, #4
	strb	r3, [sp, #8]
	bl	snd_interval_refine
	cmp	r0, #0
	beq	.L7006
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #1024
	orr	r3, r3, #1024
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L7006:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.2, .-_snd_pcm_hw_param_set.constprop.2
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.3, %function
_snd_pcm_hw_param_set.constprop.3:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #296
	ldrb	r3, [sp, #8]	@ zero_extendqisi2
	mov	r1, sp
	str	r2, [sp]
	str	r2, [sp, #4]
	bic	r3, r3, #15
	orr	r3, r3, #4
	strb	r3, [sp, #8]
	bl	snd_interval_refine
	cmp	r0, #0
	beq	.L7012
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #2048
	orr	r3, r3, #2048
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L7012:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.3, .-_snd_pcm_hw_param_set.constprop.3
	.section	.rodata.str1.4
	.align	2
.LC641:
	.ascii	"<6>%s: initialize %d instances\012\000"
	.align	2
.LC642:
	.ascii	"<3>%s: Failed to allocate mbim dev\012\000"
	.align	2
.LC643:
	.ascii	"<3>%s: mbim driver failed to register\000"
	.align	2
.LC644:
	.ascii	"<6>%s: Initialized %d ports\012\000"
	.align	2
.LC645:
	.ascii	"<3>%s: Failed\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_init, %function
mbim_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movw	r0, #:lower16:.LC641
	ldr	r6, .L7027
	mov	r2, #1
	movt	r0, #:upper16:.LC641
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	mov	r1, r6
	add	r7, r6, #4
	bl	printk
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L7025
	mov	r2, #236
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L7019
	movw	r0, #:lower16:.LC642
	mov	r1, r6
	movt	r0, #:upper16:.LC642
	mvn	r4, #11
	bl	printk
	b	.L7020
.L7025:
	mov	r4, #16
.L7019:
	mov	r6, #0
	add	ip, r4, #208
	ldr	r2, .L7027+4
	add	r3, r4, #216
	movw	r1, #:lower16:.LC393
	str	r4, [r5, #3540]
	add	r0, r4, #108
	movt	r1, #:upper16:.LC393
	strb	r6, [r4, #136]
	str	r6, [r4, #204]
	str	ip, [r4, #208]
	str	ip, [r4, #212]
	str	r3, [r4, #216]
	str	r3, [r4, #220]
	str	r6, [r5, #3544]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC394
	add	r0, r4, #120
	ldr	r2, .L7027+4
	movt	r1, #:upper16:.LC394
	bl	__init_waitqueue_head
	ldr	r3, [r5, #3548]
	str	r6, [r4, #92]
	ldr	r0, .L7027+8
	str	r6, [r4, #96]
	str	r6, [r4, #100]
	str	r6, [r4, #104]
	add	r3, r3, #1
	str	r4, [r5, #2504]
	str	r3, [r5, #3548]
	bl	misc_register
	subs	r4, r0, #0
	beq	.L7021
	movw	r0, #:lower16:.LC643
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC643
	bl	printk
	b	.L7020
.L7021:
	movw	r0, #:lower16:.LC644
	sub	r1, r7, #4
	ldr	r2, [r5, #3548]
	movt	r0, #:upper16:.LC644
	bl	printk
	b	.L7018
.L7020:
	sub	r1, r7, #4
	ldr	r7, .L7027+12
	movw	r0, #:lower16:.LC645
	mov	r6, #0
	movt	r0, #:upper16:.LC645
	mov	r8, r6
	bl	printk
.L7023:
	ldr	r3, [r5, #3548]
	add	r7, r7, #8
	cmp	r6, r3
	bcs	.L7018
	ldr	r0, [r7, #-8]
	add	r6, r6, #1
	bl	kfree
	str	r8, [r7, #-8]
	b	.L7023
.L7018:
	mov	r0, r4
	pop	{r4, r5, r6, r7, r8, pc}
.L7028:
	.align	2
.L7027:
	.word	.LANCHOR5-3284
	.word	.LANCHOR1+3684
	.word	.LANCHOR0+960
	.word	.LANCHOR1+3540
	.fnend
	.size	mbim_function_init, .-mbim_function_init
	.section	.rodata.str1.4
	.align	2
.LC646:
	.ascii	"<6>%s: mbim resumed\012\000"
	.align	2
.LC647:
	.ascii	"%s: %s: resumed port %d\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_resume, %function
mbim_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC646
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	ldr	r1, .L7035
	.pad #12
	sub	sp, sp, #12
	movt	r0, #:upper16:.LC646
	bl	printk
	ldr	r0, .L7035+4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	mov	r4, r3
	ldr	r5, [r3, #3684]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L7030
	ldr	r3, .L7035+8
	mov	r2, #0
	movw	r1, #:lower16:.LC647
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC647
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
.L7030:
	ldr	r0, [r4, #3688]
	add	r1, r5, #216
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, lr}
	b	queue_work
.L7036:
	.align	2
.L7035:
	.word	.LANCHOR5-3272
	.word	.LANCHOR4-2064
	.word	.LANCHOR5-3260
	.fnend
	.size	mbim_resume, .-mbim_resume
	.section	.rodata.str1.4
	.align	2
.LC648:
	.ascii	"<6>%s: mbim suspended\012\000"
	.align	2
.LC649:
	.ascii	"%s: %s: suspended port %d\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_suspend, %function
mbim_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC648
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	ldr	r1, .L7043
	.pad #12
	sub	sp, sp, #12
	movt	r0, #:upper16:.LC648
	bl	printk
	ldr	r0, .L7043+4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	mov	r4, r3
	ldr	r5, [r3, #3684]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L7038
	ldr	r3, .L7043+8
	mov	r2, #0
	movw	r1, #:lower16:.LC649
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC649
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
.L7038:
	ldr	r0, [r4, #3688]
	add	r1, r5, #200
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, lr}
	b	queue_work
.L7044:
	.align	2
.L7043:
	.word	.LANCHOR5-3244
	.word	.LANCHOR4-2032
	.word	.LANCHOR5-3228
	.fnend
	.size	mbim_suspend, .-mbim_suspend
	.section	.rodata.str1.4
	.align	2
.LC650:
	.ascii	"<3>%s: invalid bam2bam portno#%d\012\000"
	.align	2
.LC651:
	.ascii	"<3>%s: data port is null\012\000"
	.align	2
.LC652:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_disconnect.constprop.0, %function
bam_data_disconnect.constprop.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L7071
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r0
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L7066
.L7046:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3692]
	cmp	r3, #0
	ble	.L7067
	cmp	r5, #0
	beq	.L7068
	ldr	r5, [r4, #3684]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L7049
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L7049
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L7049
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r5, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r5, #4]
.L7049:
	ldr	r3, [r5, #60]
	cmp	r3, #7
	beq	.L7069
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L7070
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L7069:
	ldr	r0, [r4, #3688]
	add	r1, r5, #184
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work
.L7066:
	mov	ip, #0
	movw	r1, #:lower16:.LC152
	ldr	r2, .L7071+4
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC152
	mov	r3, r5
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L7046
.L7070:
	ldr	r2, .L7071+4
	movw	r0, #:lower16:.LC652
	movt	r0, #:upper16:.LC652
	mov	r1, r2
.L7065:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L7067:
	movw	r0, #:lower16:.LC650
	ldr	r1, .L7071+4
	mov	r2, #0
	movt	r0, #:upper16:.LC650
	b	.L7065
.L7068:
	ldr	r1, .L7071+4
	movw	r0, #:lower16:.LC651
	movt	r0, #:upper16:.LC651
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L7072:
	.align	2
.L7071:
	.word	.LANCHOR4-2016
	.word	.LANCHOR5-3208
	.fnend
	.size	bam_data_disconnect.constprop.0, .-bam_data_disconnect.constprop.0
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_connect.constprop.0, %function
bam_data_connect.constprop.0:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L7090
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r3
	mov	r8, r1
	strd	r10, [sp, #24]
	mov	r10, r2
	ldrh	r3, [ip, #-14]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	fp, [sp, #48]
	tst	r3, #4
	bne	.L7085
.L7074:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #3692]
	cmp	r3, #0
	ble	.L7086
	cmp	r5, #0
	beq	.L7087
	ldr	r0, [r5, #8]
	ldr	r4, [r7, #3684]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L7088
	ldr	r3, [r5, #8]
	str	r4, [r3]
	ldr	r0, [r5, #12]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L7089
	ldr	r3, [r5, #12]
	cmp	r8, #7
	str	r4, [r3]
	str	r5, [r4, #4]
	strb	r10, [r4, #52]
	strb	r9, [r4, #53]
	str	fp, [r4, #56]
	str	r8, [r4, #60]
	bne	.L7080
	add	r2, r4, #44
	add	r3, r4, #48
	strb	r10, [r4, #64]
	strb	r9, [r4, #65]
	strd	r2, [r4, #68]
.L7080:
	add	r1, r4, #168
	ldr	r0, [r7, #3688]
	bl	queue_work
.L7073:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7085:
	mov	r3, #0
	movw	r1, #:lower16:.LC152
	ldr	r2, .L7090+4
	sub	r0, ip, #32
	movt	r1, #:upper16:.LC152
	str	r3, [sp]
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L7074
.L7087:
	movw	r0, #:lower16:.LC651
	ldr	r1, .L7090+4
	mvn	r6, #18
	movt	r0, #:upper16:.LC651
	bl	printk
	b	.L7073
.L7089:
	movw	r0, #:lower16:.LC386
	ldr	r1, .L7090+4
	movt	r0, #:upper16:.LC386
	ldr	r2, [r5, #12]
	bl	printk
	ldr	r3, [r5, #8]
	mov	r2, #0
	str	r2, [r3]
	b	.L7073
.L7086:
	movw	r0, #:lower16:.LC174
	ldr	r1, .L7090+4
	mov	r2, #0
	movt	r0, #:upper16:.LC174
	mvn	r6, #18
	bl	printk
	b	.L7073
.L7088:
	movw	r0, #:lower16:.LC385
	ldr	r1, .L7090+4
	movt	r0, #:upper16:.LC385
	ldr	r2, [r5, #8]
	bl	printk
	b	.L7073
.L7091:
	.align	2
.L7090:
	.word	.LANCHOR4-1984
	.word	.LANCHOR5-3188
	.fnend
	.size	bam_data_connect.constprop.0, .-bam_data_connect.constprop.0
	.section	.rodata.str1.4
	.align	2
.LC653:
	.ascii	"<3>%s: kevent %d may have been dropped\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rx_complete, %function
rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	cmn	r3, #75
	beq	.L7093
	cmn	r3, #74
	bge	.L7094
	cmn	r3, #103
	beq	.L7095
	cmn	r3, #102
	blt	.L7113
.L7096:
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
.L7103:
	add	r6, r4, #16
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r1, r4
	add	r0, r5, #36
	ldr	r2, [r1, #28]!
	bl	__list_add
	mov	r0, r6
	bl	_raw_spin_unlock
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #104
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r0, [r3, #3312]
	b	queue_work
.L7094:
	cmp	r3, #0
	bne	.L7096
	mov	r0, r6
	ldr	r1, [r1, #48]
	bl	skb_put
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L7098
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r7, r0
	cmp	r3, #0
	beq	.L7099
	mov	r1, r6
	mov	r0, r3
	ldr	r3, [r4, #84]
	add	r2, r4, #52
	blx	r3
	cmn	r0, #22
	mov	r6, r0
	beq	.L7114
	cmn	r0, #75
	beq	.L7115
	mov	r1, r7
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L7103
	b	.L7101
.L7113:
	add	r3, r3, #108
	bics	r3, r3, #4
	bne	.L7096
.L7097:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L7101:
	add	r6, r4, #16
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r1, r4
	add	r0, r5, #36
	ldr	r2, [r1, #28]!
	bl	__list_add
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L7098:
	mov	r1, r6
	add	r0, r4, #52
	bl	skb_queue_tail
	b	.L7103
.L7093:
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
	b	.L7096
.L7095:
	add	r1, r4, #120
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L7097
	add	r0, r4, #88
	bl	schedule_work
	subs	r2, r0, #0
	bne	.L7097
	movw	r0, #:lower16:.LC653
	ldr	r1, [r4, #8]
	movt	r0, #:upper16:.LC653
	bl	printk
	b	.L7097
.L7114:
	ldr	r2, [r4, #8]
	mov	r1, r7
	mov	r0, r4
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
	bl	_raw_spin_unlock_irqrestore
	b	.L7101
.L7115:
	ldr	r2, [r4, #8]
	mov	r1, r7
	mov	r0, r4
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
	bl	_raw_spin_unlock_irqrestore
	b	.L7101
.L7099:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r1, r7
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L7101
	.fnend
	.size	rx_complete, .-rx_complete
	.section	.rodata.str1.4
	.align	2
.LC654:
	.ascii	"%s: OID_GEN_SUPPORTED_LIST\012\000"
	.align	2
.LC655:
	.ascii	"%s: OID_GEN_HARDWARE_STATUS\012\000"
	.align	2
.LC656:
	.ascii	"%s: OID_GEN_MEDIA_SUPPORTED\012\000"
	.align	2
.LC657:
	.ascii	"%s: OID_GEN_MEDIA_IN_USE\012\000"
	.align	2
.LC658:
	.ascii	"%s: OID_GEN_MAXIMUM_FRAME_SIZE\012\000"
	.align	2
.LC659:
	.ascii	"%s: OID_GEN_TRANSMIT_BLOCK_SIZE\012\000"
	.align	2
.LC660:
	.ascii	"%s: OID_GEN_RECEIVE_BLOCK_SIZE\012\000"
	.align	2
.LC661:
	.ascii	"%s: OID_GEN_VENDOR_ID\012\000"
	.align	2
.LC662:
	.ascii	"%s: OID_GEN_VENDOR_DESCRIPTION\012\000"
	.align	2
.LC663:
	.ascii	"%s: OID_GEN_VENDOR_DRIVER_VERSION\012\000"
	.align	2
.LC664:
	.ascii	"%s: OID_GEN_CURRENT_PACKET_FILTER\012\000"
	.align	2
.LC665:
	.ascii	"%s: OID_GEN_MAXIMUM_TOTAL_SIZE\012\000"
	.align	2
.LC666:
	.ascii	"%s: OID_GEN_PHYSICAL_MEDIUM\012\000"
	.align	2
.LC667:
	.ascii	"%s: OID_GEN_MAC_OPTIONS\012\000"
	.align	2
.LC668:
	.ascii	"%s: OID_GEN_RCV_NO_BUFFER\012\000"
	.align	2
.LC669:
	.ascii	"%s: OID_802_3_PERMANENT_ADDRESS\012\000"
	.align	2
.LC670:
	.ascii	"%s: OID_802_3_CURRENT_ADDRESS\012\000"
	.align	2
.LC671:
	.ascii	"%s: OID_802_3_MULTICAST_LIST\012\000"
	.align	2
.LC672:
	.ascii	"%s: OID_802_3_MAXIMUM_LIST_SIZE\012\000"
	.align	2
.LC673:
	.ascii	"%s: OID_802_3_MAC_OPTIONS\012\000"
	.align	2
.LC674:
	.ascii	"%s: OID_802_3_RCV_ERROR_ALIGNMENT\012\000"
	.align	2
.LC675:
	.ascii	"%s: OID_802_3_XMIT_ONE_COLLISION\012\000"
	.align	2
.LC676:
	.ascii	"%s: OID_802_3_XMIT_MORE_COLLISIONS\012\000"
	.align	2
.LC677:
	.ascii	"<4>%s: query unknown OID 0x%08X\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gen_ndis_query_resp.constprop.0, %function
gen_ndis_query_resp.constprop.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #188
	sub	sp, sp, #188
	beq	.L7185
	ldr	r5, [r6, #8]
	cmp	r5, #0
	beq	.L7185
	mov	r3, #16
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	mov	r4, r0
	mov	r1, sp
	str	r3, [r5, #20]
	ldr	r0, [r7, #3724]
	bl	dev_get_stats
	movw	r3, #278
	add	r8, r5, #24
	movt	r3, 1
	mov	r9, r0
	cmp	r4, r3
	bhi	.L7118
	mov	r3, #256
	movt	r3, 1
	cmp	r4, r3
	bls	.L7120
	movw	r3, #65279
	movt	r3, 65534
	add	r3, r4, r3
	cmp	r3, #21
	ldrls	pc, [pc, r3, asl #2]
	b	.L7120
.L7134:
	.word	.L7148
	.word	.L7147
	.word	.L7146
	.word	.L7145
	.word	.L7120
	.word	.L7144
	.word	.L7143
	.word	.L7120
	.word	.L7120
	.word	.L7142
	.word	.L7141
	.word	.L7140
	.word	.L7139
	.word	.L7138
	.word	.L7120
	.word	.L7120
	.word	.L7137
	.word	.L7120
	.word	.L7136
	.word	.L7135
	.word	.L7120
	.word	.L7133
.L7118:
	movw	r3, #261
	movt	r3, 257
	cmp	r4, r3
	bhi	.L7149
	movw	r3, #257
	movt	r3, 257
	cmp	r4, r3
	bcs	.L7150
	movw	r3, #514
	movt	r3, 1
	cmp	r4, r3
	beq	.L7151
	movw	r3, #65279
	movt	r3, 65533
	add	r3, r4, r3
	cmp	r3, #4
	bhi	.L7120
	cmp	r3, #4
	ldrls	pc, [pc, r3, asl #2]
	b	.L7120
.L7128:
	.word	.L7132
	.word	.L7131
	.word	.L7130
	.word	.L7129
	.word	.L7127
.L7150:
	movw	r0, #65278
	bfi	r0, r0, #16, #16
	add	r0, r4, r0
	cmp	r0, #3
	ldrls	pc, [pc, r0, asl #2]
	b	.L7121
.L7123:
	.word	.L7126
	.word	.L7125
	.word	.L7124
	.word	.L7122
.L7149:
	movw	r3, #258
	movt	r3, 258
	cmp	r4, r3
	beq	.L7153
	movw	r3, #259
	movt	r3, 258
	cmp	r4, r3
	bne	.L7293
	ldr	r0, .L7308
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7294
.L7183:
	mov	r2, #0
	mov	r3, #28
	mov	r0, r2
	mov	r4, #4
	str	r2, [r5, #24]
.L7157:
	str	r4, [r5, #16]
	str	r3, [r6, #12]
	str	r3, [r5, #4]
.L7116:
	add	sp, sp, #188
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L7293:
	movw	r3, #257
	movt	r3, 258
	cmp	r4, r3
	bne	.L7120
	ldr	r0, .L7308+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7295
.L7181:
	cmp	r9, #0
	beq	.L7165
	ldr	r2, [r9, #104]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7157
.L7124:
	ldr	r0, .L7308+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7296
.L7179:
	mov	r2, #1
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7157
.L7125:
	ldr	r0, .L7308+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7297
.L7178:
	mov	r2, #-536870912
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7157
.L7127:
	ldr	r0, .L7308+16
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7298
.L7175:
	cmp	r9, #0
	beq	.L7165
	ldr	r2, [r9, #48]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7157
.L7126:
	ldr	r0, .L7308+20
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7299
.L7177:
	ldr	r3, [r7, #3724]
	cmp	r3, #0
	beq	.L7165
	ldr	r2, [r7, #3716]
	mov	r3, #30
	mov	r0, #0
	mov	r4, #6
	ldr	r1, [r2]	@ unaligned
	str	r1, [r5, #24]	@ unaligned
	ldrh	r2, [r2, #4]	@ unaligned
	strh	r2, [r8, #4]	@ unaligned
	b	.L7157
.L7122:
	ldr	r0, .L7308+24
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L7183
	movw	r1, #:lower16:.LC673
	ldr	r2, .L7308+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC673
	bl	__dynamic_pr_debug
	b	.L7183
.L7132:
	cmp	r9, #0
	beq	.L7165
	ldr	r2, [r9, #8]
	mov	r3, #28
	ldr	r1, [r9, #40]
	ldr	ip, [r9, #56]
.L7291:
	add	r1, r1, ip
	mov	r0, #0
	sub	r2, r2, r1
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7157
.L7133:
	ldr	r0, .L7308+32
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L7179
	movw	r1, #:lower16:.LC663
	ldr	r2, .L7308+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC663
	bl	__dynamic_pr_debug
	b	.L7179
.L7135:
	ldr	r2, [r7, #3712]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7157
.L7136:
	ldr	r0, .L7308+36
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7300
.L7174:
	mov	r2, #18
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7157
.L7137:
	ldr	r0, .L7308+40
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7301
.L7172:
	movw	r2, #1558
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7157
.L7139:
	ldr	r0, .L7308+44
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7302
.L7168:
	ldr	r7, [r7, #3736]
	subs	r0, r7, #0
	beq	.L7169
	bl	strlen
	mov	r4, r0
	mov	r1, r7
	mov	r0, r8
	mov	r2, r4
	bl	memcpy
	add	r3, r4, #24
	mov	r0, #0
	b	.L7157
.L7138:
	ldr	r0, .L7308+48
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7303
.L7171:
	ldr	r2, [r7, #3720]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	ldrh	r2, [r2]
	str	r2, [r5, #24]
	b	.L7157
.L7140:
	ldr	r0, .L7308+52
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7304
.L7167:
	ldr	r2, [r7, #3728]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7157
.L7141:
	ldr	r0, .L7308+56
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7305
.L7161:
	ldr	r3, [r7, #3724]
	cmp	r3, #0
	beq	.L7165
	ldr	r2, [r3, #356]
	mov	r0, #0
	mov	r4, #4
	mov	r3, #28
	str	r2, [r5, #24]
	b	.L7157
.L7145:
	ldr	r0, .L7308+60
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7306
.L7160:
	ldr	r2, [r7, #3704]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7157
.L7143:
	ldr	r3, [r7, #3712]
	cmp	r3, #1
	beq	.L7183
	ldr	r2, [r7, #3708]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7157
.L7147:
	ldr	r0, .L7308+64
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L7183
	movw	r1, #:lower16:.LC655
	ldr	r2, .L7308+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC655
	bl	__dynamic_pr_debug
	b	.L7183
.L7148:
	ldr	r0, .L7308+68
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7307
.L7156:
	ldr	r1, .L7308+72
	mov	r0, r8
	mov	r2, #112
	bl	memcpy
	mov	r4, #112
	mov	r3, #136
	mov	r0, #0
	b	.L7157
.L7146:
	ldr	r0, .L7308+76
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L7160
	movw	r1, #:lower16:.LC656
	ldr	r2, .L7308+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC656
	bl	__dynamic_pr_debug
	b	.L7160
.L7142:
	ldr	r0, .L7308+80
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L7161
	movw	r1, #:lower16:.LC659
	ldr	r2, .L7308+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC659
	bl	__dynamic_pr_debug
	b	.L7161
.L7144:
	ldr	r0, .L7308+84
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L7161
	movw	r1, #:lower16:.LC658
	ldr	r2, .L7308+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC658
	bl	__dynamic_pr_debug
	b	.L7161
.L7130:
	cmp	r9, #0
	beq	.L7165
	ldr	r2, [r9, #40]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7157
.L7131:
	cmp	r9, #0
	beq	.L7165
	mov	r3, #28
	ldr	r2, [r9]
	ldr	r1, [r9, #32]
	ldr	ip, [r9, #48]
	b	.L7291
.L7129:
	cmp	r9, #0
	beq	.L7165
	ldr	r2, [r9, #32]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7157
.L7294:
	movw	r1, #:lower16:.LC676
	ldr	r2, .L7308+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC676
	bl	__dynamic_pr_debug
	b	.L7183
.L7295:
	movw	r1, #:lower16:.LC674
	ldr	r2, .L7308+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC674
	bl	__dynamic_pr_debug
	b	.L7181
.L7165:
	movw	r0, #65012
	mov	r3, #24
	movt	r0, 65535
	mov	r4, #0
	b	.L7157
.L7151:
	ldr	r0, .L7308+88
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L7183
	movw	r1, #:lower16:.LC666
	ldr	r2, .L7308+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC666
	bl	__dynamic_pr_debug
	b	.L7183
.L7153:
	ldr	r0, .L7308+92
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L7183
	movw	r1, #:lower16:.LC675
	ldr	r2, .L7308+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC675
	bl	__dynamic_pr_debug
	b	.L7183
.L7169:
	mov	r3, #28
	mov	r4, #4
	str	r7, [r5, #24]
	b	.L7157
.L7185:
	mvn	r0, #11
	b	.L7116
.L7301:
	movw	r1, #:lower16:.LC665
	ldr	r2, .L7308+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC665
	bl	__dynamic_pr_debug
	b	.L7172
.L7303:
	movw	r1, #:lower16:.LC664
	ldr	r2, .L7308+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC664
	bl	__dynamic_pr_debug
	b	.L7171
.L7305:
	movw	r1, #:lower16:.LC660
	ldr	r2, .L7308+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC660
	bl	__dynamic_pr_debug
	b	.L7161
.L7307:
	movw	r1, #:lower16:.LC654
	ldr	r2, .L7308+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC654
	bl	__dynamic_pr_debug
	b	.L7156
.L7300:
	movw	r1, #:lower16:.LC667
	ldr	r2, .L7308+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC667
	bl	__dynamic_pr_debug
	b	.L7174
.L7304:
	movw	r1, #:lower16:.LC661
	ldr	r2, .L7308+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC661
	bl	__dynamic_pr_debug
	b	.L7167
.L7302:
	movw	r1, #:lower16:.LC662
	ldr	r2, .L7308+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC662
	bl	__dynamic_pr_debug
	b	.L7168
.L7299:
	movw	r1, #:lower16:.LC670
	ldr	r2, .L7308+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC670
	bl	__dynamic_pr_debug
	b	.L7177
.L7296:
	movw	r1, #:lower16:.LC672
	ldr	r2, .L7308+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC672
	bl	__dynamic_pr_debug
	b	.L7179
.L7298:
	movw	r1, #:lower16:.LC668
	ldr	r2, .L7308+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC668
	bl	__dynamic_pr_debug
	b	.L7175
.L7306:
	movw	r1, #:lower16:.LC657
	ldr	r2, .L7308+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC657
	bl	__dynamic_pr_debug
	b	.L7160
.L7297:
	movw	r1, #:lower16:.LC671
	ldr	r2, .L7308+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC671
	bl	__dynamic_pr_debug
	b	.L7178
.L7120:
	movw	r0, #:lower16:.LC677
	mov	r2, r4
	ldr	r1, .L7308+28
	movt	r0, #:upper16:.LC677
	mov	r4, #0
	bl	printk
	movw	r0, #65012
	mov	r3, #24
	movt	r0, 65535
	b	.L7157
.L7121:
	ldr	r0, .L7308+96
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L7177
	movw	r1, #:lower16:.LC669
	ldr	r2, .L7308+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC669
	bl	__dynamic_pr_debug
	b	.L7177
.L7309:
	.align	2
.L7308:
	.word	.LANCHOR4-1440
	.word	.LANCHOR4-1488
	.word	.LANCHOR4-1536
	.word	.LANCHOR4-1552
	.word	.LANCHOR4-1632
	.word	.LANCHOR4-1584
	.word	.LANCHOR4-1504
	.word	.LANCHOR5-3168
	.word	.LANCHOR4-1744
	.word	.LANCHOR4-1648
	.word	.LANCHOR4-1696
	.word	.LANCHOR4-1776
	.word	.LANCHOR4-1728
	.word	.LANCHOR4-1792
	.word	.LANCHOR4-1824
	.word	.LANCHOR4-1888
	.word	.LANCHOR4-1936
	.word	.LANCHOR4-1968
	.word	.LANCHOR5-3148
	.word	.LANCHOR4-1920
	.word	.LANCHOR4-1840
	.word	.LANCHOR4-1872
	.word	.LANCHOR4-1680
	.word	.LANCHOR4-1456
	.word	.LANCHOR4-1600
	.fnend
	.size	gen_ndis_query_resp.constprop.0, .-gen_ndis_query_resp.constprop.0
	.section	.rodata.str1.4
	.align	2
.LC678:
	.ascii	"&bulk_dev->read_wq\000"
	.align	2
.LC679:
	.ascii	"&bulk_dev->write_wq\000"
	.align	2
.LC680:
	.ascii	"<3>ccid gadget driver failed to initialize\012\000"
	.align	2
.LC681:
	.ascii	"<3>%s: ccid_bulk_device_init failed, err:%d\012\000"
	.align	2
.LC682:
	.ascii	"<3>%s: ccid_ctrl_device_init failed, err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_init, %function
ccid_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L7317
	mov	r2, #204
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L7321
.L7311:
	add	ip, r4, #120
	mov	r0, #0
	ldr	r2, .L7324
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC404
	movt	r3, #:upper16:.LANCHOR1
	movt	r1, #:upper16:.LC404
	str	r0, [r4, #92]
	add	r0, r4, #128
	str	ip, [r4, #120]
	str	ip, [r4, #124]
	str	r4, [r3, #3400]
	bl	__init_waitqueue_head
	ldr	r0, .L7324+4
	bl	misc_register
	subs	r5, r0, #0
	bne	.L7322
	movw	r1, #:lower16:.LC678
	ldr	r2, .L7324
	add	r0, r4, #160
	movt	r1, #:upper16:.LC678
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC679
	ldr	r2, .L7324
	add	r0, r4, #172
	movt	r1, #:upper16:.LC679
	bl	__init_waitqueue_head
	add	r3, r4, #192
	ldr	r0, .L7324+8
	str	r3, [r4, #192]
	str	r3, [r4, #196]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L7323
.L7310:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7317:
	mov	r4, #16
	b	.L7311
.L7321:
	mvn	r5, #11
	b	.L7310
.L7323:
	ldr	r6, .L7324+12
	movw	r0, #:lower16:.LC406
	movt	r0, #:upper16:.LC406
	sub	r1, r6, #12
	bl	printk
	movw	r0, #:lower16:.LC681
	mov	r2, r5
	add	r1, r6, #12
	movt	r0, #:upper16:.LC681
	bl	printk
	ldr	r0, .L7324+4
	bl	misc_deregister
.L7314:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC680
	movt	r0, #:upper16:.LC680
	bl	printk
	b	.L7310
.L7322:
	ldr	r6, .L7324+16
	movw	r0, #:lower16:.LC406
	movt	r0, #:upper16:.LC406
	sub	r1, r6, #8
	bl	printk
	movw	r0, #:lower16:.LC682
	mov	r2, r5
	sub	r1, r6, #20
	movt	r0, #:upper16:.LC682
	bl	printk
	b	.L7314
.L7325:
	.align	2
.L7324:
	.word	.LANCHOR1+3756
	.word	.LANCHOR0+924
	.word	.LANCHOR0+888
	.word	.LANCHOR5-3024
	.word	.LANCHOR5-2992
	.fnend
	.size	ccid_function_init, .-ccid_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_request_new.constprop.0, %function
adb_request_new.constprop.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #208
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L7326
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #48]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4]
	beq	.L7326
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L7333
.L7326:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7333:
	ldr	r2, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L7326
	.fnend
	.size	adb_request_new.constprop.0, .-adb_request_new.constprop.0
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_request_new.constprop.2, %function
adb_request_new.constprop.2:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #208
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L7334
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	bl	kmalloc_order_trace
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L7340
.L7334:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7340:
	ldr	r2, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L7334
	.fnend
	.size	adb_request_new.constprop.2, .-adb_request_new.constprop.2
	.section	.rodata.str1.4
	.align	2
.LC683:
	.ascii	"acm ttyGS%d serial state %04x\012\000"
	.align	2
.LC684:
	.ascii	"<7>acm ttyGS%d serial state %04x\012\000"
	.align	2
.LC685:
	.ascii	"acm ttyGS%d can't notify serial state, %d\012\000"
	.section	.rodata.cst4
	.align	2
.LC686:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_cdc_notify_complete, %function
acm_cdc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r3, #:lower16:.LC686
	mov	r4, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LC686
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r5, [r1, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r3]
	str	r3, [sp, #20]
	mov	r3,#0
	add	r6, r5, #148
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #44]
	mov	r1, r0
	cmn	r3, #108
	beq	.L7356
	ldrb	r7, [r5, #147]	@ zero_extendqisi2
	mov	r0, r6
	str	r4, [r5, #156]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L7341
	ldr	r3, [r5, #20]
	mov	r0, r6
	ldr	r7, [r3, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #156]
	mov	r4, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r5, #147]
	bne	.L7357
.L7347:
	mov	r1, r4
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L7341:
	movw	r3, #:lower16:.LC686
	movt	r3, #:upper16:.LC686
	ldr	r2, [r3]
	ldr	r3, [sp, #20]
	eors	r2, r3, r2
	bne	.L7358
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L7356:
	mov	r0, r6
	str	r4, [r5, #156]
	bl	_raw_spin_unlock_irqrestore
	b	.L7341
.L7358:
	bl	__stack_chk_fail
.L7357:
	ldr	r0, .L7359
	ldrb	r3, [r5, #146]	@ zero_extendqisi2
	ldrh	ip, [r5, #170]
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	beq	.L7345
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC683
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC683
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldrb	r3, [r5, #146]	@ zero_extendqisi2
	ldrh	ip, [r5, #170]
.L7345:
	movw	r0, #:lower16:.LC684
	mov	r2, ip
	mov	r1, r3
	movt	r0, #:upper16:.LC684
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r8, [r5, #152]
	bl	__memzero
	ldr	r7, [r5, #156]
	mov	r2, #0
	mov	r9, #32
	mov	r0, #10
	mvn	r1, #94
	strb	r2, [r5, #147]
	mov	ip, #2
	str	r2, [r5, #156]
	ldr	r3, [r7]
	str	r0, [r7, #4]
	mov	r0, r6
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r5, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	r2, [r5, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	r2, [sp, #10]	@ movhi
	ldr	r2, [sp, #10]	@ unaligned
	str	r2, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r2, [sp, #18]	@ unaligned
	strh	r2, [r3, #16]	@ unaligned
	ldrh	r2, [r5, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r8, #8]
	mov	r2, r9
	mov	r0, r8
	mov	r1, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r8, #0
	bge	.L7347
	ldr	r0, [r5, #20]
	movw	r1, #:lower16:.LC685
	mov	r3, r8
	ldrb	r2, [r5, #146]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC685
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, r9
	bl	dev_err
	str	r7, [r5, #156]
	b	.L7347
.L7360:
	.align	2
.L7359:
	.word	.LANCHOR4-1408
	.fnend
	.size	acm_cdc_notify_complete, .-acm_cdc_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_controlbits_tomodem, %function
ghsuart_send_controlbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	ip, [r3, #1856]
	cmp	r0, #0
	cmpne	r1, ip
	bcs	.L7388
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r2
	mov	r2, #84
	strd	r6, [sp, #8]
	mla	r1, r2, r1, r3
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #24
	sub	sp, sp, #24
	ldr	r5, [r1, #2032]
	cmp	r5, #0
	beq	.L7389
	ldr	r3, [r5, #196]
	cmp	r3, r4
	beq	.L7361
	ldr	r3, [r5, #188]
	str	r4, [r5, #196]
	tst	r3, #4
	beq	.L7361
	tst	r4, #1
	bne	.L7390
.L7368:
	ldr	r0, .L7393
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7391
.L7361:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7390:
	ldr	r0, .L7393+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7392
.L7369:
	add	r7, r5, #20
	mov	r8, #0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r5, #24]
	mov	r1, r0
	mov	r0, r7
	str	r8, [r5, #200]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, r8
	beq	.L7368
	ldr	r3, [r6, #136]
	cmp	r3, r8
	beq	.L7368
	mov	r1, r8
	mov	r0, r6
	blx	r3
	b	.L7368
.L7391:
	ldr	r2, .L7393+8
	movw	r1, #:lower16:.LC598
	mov	r3, r4
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC598
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__dynamic_pr_debug
.L7392:
	mov	r3, #45
	movw	r1, #:lower16:.LC120
	ldr	r2, .L7393+12
	movt	r1, #:upper16:.LC120
	sub	r0, r0, #24
	str	r3, [sp]
	str	r3, [sp, #4]
	str	r3, [sp, #8]
	str	r3, [sp, #12]
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	bl	__dynamic_pr_debug
	b	.L7369
.L7389:
	ldr	r1, .L7393+8
	movw	r0, #:lower16:.LC105
	movt	r0, #:upper16:.LC105
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L7388:
	movw	r0, #:lower16:.LC118
	mov	r2, r1
	ldr	r1, .L7393+8
	movt	r0, #:upper16:.LC118
	b	printk
.L7394:
	.align	2
.L7393:
	.word	.LANCHOR4-1360
	.word	.LANCHOR4-1392
	.word	.LANCHOR5-2976
	.word	.LANCHOR5-2940
	.fnend
	.size	ghsuart_send_controlbits_tomodem, .-ghsuart_send_controlbits_tomodem
	.section	.rodata.str1.4
	.align	2
.LC687:
	.ascii	"%s: ep:%pK head:%pK num:%d cb:%pK\000"
	.align	2
.LC688:
	.ascii	"%s: req allocated:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_alloc_requests.constprop.0, %function
gbam_alloc_requests.constprop.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L7413
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r9, r3
	mov	r8, r2
	str	lr, [sp, #24]
	.pad #20
	sub	sp, sp, #20
	ldrh	r3, [ip, #-6]
	tst	r3, #4
	bne	.L7411
.L7396:
	cmp	r8, #0
	ble	.L7397
	mov	r4, #0
	b	.L7401
.L7398:
	add	r4, r4, #1
	str	r9, [ip, #28]
	ldr	r2, [r5]
	bl	__list_add
	cmp	r8, r4
	beq	.L7397
.L7401:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r7, [r3, #8]
	blx	r7
	subs	ip, r0, #0
	mov	r1, r5
	add	r0, ip, #36
	bne	.L7398
	ldr	r0, .L7413+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7412
.L7399:
	ldr	r3, [r5]
	cmp	r5, r3
	mvneq	r0, #11
	beq	.L7395
.L7397:
	mov	r0, #0
.L7395:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L7411:
	movw	r1, #:lower16:.LC687
	ldr	r2, .L7413+8
	sub	r0, ip, #24
	movt	r1, #:upper16:.LC687
	mov	r3, r6
	stm	sp, {r5, r8, r9}
	bl	__dynamic_pr_debug
	b	.L7396
.L7412:
	movw	r1, #:lower16:.LC688
	ldr	r2, .L7413+8
	mov	r3, r4
	movt	r1, #:upper16:.LC688
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L7399
.L7414:
	.align	2
.L7413:
	.word	.LANCHOR4-1344
	.word	.LANCHOR4-1312
	.word	.LANCHOR5-2916
	.fnend
	.size	gbam_alloc_requests.constprop.0, .-gbam_alloc_requests.constprop.0
	.section	.rodata.str1.4
	.align	2
.LC689:
	.ascii	"<3>%s: usb alloc request failed\012\000"
	.align	2
.LC690:
	.ascii	"<3>%s: request buf allocation failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_alloc_req.constprop.0, %function
gsmd_alloc_req.constprop.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r1, #32
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L7419
	mov	r0, r5
	mov	r1, #32
	str	r5, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4]
	beq	.L7420
.L7415:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7419:
	movw	r0, #:lower16:.LC689
	ldr	r1, .L7421
	movt	r0, #:upper16:.LC689
	bl	printk
	b	.L7415
.L7420:
	movw	r0, #:lower16:.LC690
	ldr	r1, .L7421
	movt	r0, #:upper16:.LC690
	bl	printk
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r4, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7415
.L7422:
	.align	2
.L7421:
	.word	.LANCHOR5-2896
	.fnend
	.size	gsmd_alloc_req.constprop.0, .-gsmd_alloc_req.constprop.0
	.section	.rodata.str1.4
	.align	2
.LC691:
	.ascii	"<3>%s: %s err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_tx, %function
gs_start_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r3, r0, #76
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #76]
	.pad #20
	sub	sp, sp, #20
	str	r3, [sp, #8]
	cmp	r3, r6
	ldr	r3, [r0, #4]
	ldr	r8, [r3, #88]
	beq	.L7438
	ldr	r3, [r0, #84]
	movw	r10, #:lower16:.LANCHOR1
	mov	r4, r0
	mov	fp, #0
	movt	r10, #:upper16:.LANCHOR1
	sub	r9, r6, #36
	cmp	r3, #7
	bgt	.L7439
.L7463:
	ldr	r0, [r4, #92]
	ldr	r1, [r4, #100]
	ldr	r3, [r4, #104]
	add	r3, r3, r0
	sub	r3, r3, r1
	udiv	r5, r3, r0
	mls	r3, r0, r5, r3
	cmp	r3, #0
	bne	.L7459
	movw	r10, #:lower16:.LANCHOR1
	movt	r10, #:upper16:.LANCHOR1
	ldr	r7, [r10, #3756]
	cmp	r7, #0
	beq	.L7430
	ldrh	r1, [r8, #20]
	sdiv	r2, r7, r1
	mls	r7, r1, r2, r7
	cmp	r7, #0
	movne	r7, r3
	beq	.L7460
.L7430:
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	add	r0, r4, #108
	bl	__wake_up
	cmp	fp, #0
	beq	.L7423
.L7436:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L7423
	bl	tty_wakeup
.L7423:
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7459:
	ldr	r7, [r4, #96]
	cmp	r3, #4096
	ldr	fp, [r6, #-36]
	movcc	r5, r3
	movcs	r5, #4096
	mov	r2, r5
	add	r7, r7, r0
	sub	r7, r7, r1
	mov	r0, fp
	sub	r3, r5, r7
	cmp	r5, r7
	str	r3, [sp, #12]
	bls	.L7427
	mov	r2, r7
	bl	memcpy
	ldr	r3, [sp, #12]
	add	r0, fp, r7
	ldr	r1, [r4, #96]
	mov	r2, r3
	bl	memcpy
	ldr	r3, [sp, #12]
	ldr	r2, [r4, #96]
	add	r3, r2, r3
	str	r3, [r4, #100]
.L7428:
	mov	r0, r6
	str	r5, [r6, #-32]
	mov	fp, #1
	bl	list_del
	mov	r0, r4
	bl	_raw_spin_unlock
	ldr	r3, [r8, #8]
	mov	r2, #32
	mov	r1, r9
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7461
	cmp	r7, #0
	bne	.L7462
	ldr	r1, [r6, #-32]
	ldr	r0, [sp, #8]
	ldr	r6, [r4, #76]
	ldr	r3, [r4, #84]
	ldr	r2, [r4, #136]
	str	r1, [r10, #3756]
	cmp	r0, r6
	add	r3, r3, #1
	add	r2, r2, r1
	str	r3, [r4, #84]
	str	r2, [r4, #136]
	beq	.L7436
	cmp	r3, #7
	sub	r9, r6, #36
	ble	.L7463
.L7439:
	mov	r7, #0
.L7425:
	cmp	fp, #0
	beq	.L7423
	b	.L7436
.L7427:
	bl	memcpy
	cmp	r5, r7
	ldrcc	r3, [r4, #100]
	ldrcs	r3, [r4, #96]
	addcc	r3, r3, r5
	str	r3, [r4, #100]
	b	.L7428
.L7461:
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7423
.L7462:
	ldr	r0, .L7467
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7464
.L7435:
	mov	r0, r6
	ldr	r1, [sp, #8]
	ldr	r2, [r4, #76]
	bl	__list_add
	b	.L7436
.L7460:
	mov	r0, r6
	str	r7, [r6, #-32]
	bl	list_del
	mov	r0, r4
	bl	_raw_spin_unlock
	ldr	r3, [r8, #8]
	mov	r2, #32
	mov	r1, r9
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7465
	cmp	r7, #0
	bne	.L7466
.L7432:
	mov	r3, #0
	str	r3, [r10, #3756]
	b	.L7430
.L7438:
	mov	r7, #0
	b	.L7423
.L7464:
	str	r7, [sp, #4]
	ldr	ip, [r8, #4]
	movw	r3, #:lower16:.LC165
	movw	r1, #:lower16:.LC166
	ldr	r2, .L7467+4
	movt	r3, #:upper16:.LC165
	movt	r1, #:upper16:.LC166
	sub	r0, r0, #24
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L7435
.L7465:
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7425
.L7466:
	movw	r2, #:lower16:.LC165
	movw	r0, #:lower16:.LC691
	ldr	r1, .L7467+4
	movt	r2, #:upper16:.LC165
	mov	r3, r7
	movt	r0, #:upper16:.LC691
	bl	printk
	mov	r0, r6
	ldr	r1, [sp, #8]
	ldr	r2, [r4, #76]
	bl	__list_add
	b	.L7432
.L7468:
	.align	2
.L7467:
	.word	.LANCHOR4-1296
	.word	.LANCHOR5-2880
	.fnend
	.size	gs_start_tx, .-gs_start_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_flush_chars, %function
gs_flush_chars:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L7470
	mov	r0, r4
	bl	gs_start_tx
.L7470:
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gs_flush_chars, .-gs_flush_chars
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write, %function
gs_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r0, #272]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	cmp	r4, #0
	mov	r6, r0
	bne	.L7489
.L7476:
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L7480
	mov	r0, r5
	bl	gs_start_tx
.L7480:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7489:
	ldr	r1, [r5, #92]
	ldr	r3, [r5, #100]
	ldr	r0, [r5, #104]
	add	r3, r3, r1
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, r4
	movcc	r4, r3
	cmp	r4, #0
	beq	.L7476
	ldr	r8, [r5, #96]
	add	r8, r8, r1
	sub	r8, r8, r0
	cmp	r4, r8
	bls	.L7478
	mov	r2, r8
	mov	r1, r7
	sub	r9, r4, r8
	bl	memcpy
	mov	r2, r9
	add	r1, r7, r8
	ldr	r0, [r5, #96]
	bl	memcpy
	ldr	r2, [r5, #96]
	add	r2, r2, r9
	str	r2, [r5, #104]
	b	.L7476
.L7478:
	mov	r1, r7
	mov	r2, r4
	bl	memcpy
	cmp	r4, r8
	ldrcc	r3, [r5, #104]
	ldrcs	r3, [r5, #96]
	addcc	r3, r3, r4
	str	r3, [r5, #104]
	b	.L7476
	.fnend
	.size	gs_write, .-gs_write
	.section	.rodata.str1.4
	.align	2
.LC692:
	.ascii	"<4>%s: unexpected %s status %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write_complete, %function
gs_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #48]
	mov	r1, r4
	mov	r7, r0
	ldr	r3, [r4, #140]
	add	r0, r5, #36
	add	r3, r3, r2
	str	r3, [r4, #140]
	ldr	r2, [r1, #76]!
	bl	__list_add
	ldr	r3, [r4, #84]
	sub	r3, r3, #1
	str	r3, [r4, #84]
	ldr	r3, [r5, #44]
	cmn	r3, #108
	bne	.L7503
.L7491:
	mov	r1, r7
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L7503:
	cmp	r3, #0
	bne	.L7504
.L7492:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7491
	mov	r0, r4
	bl	gs_start_tx
	b	.L7491
.L7504:
	movw	r0, #:lower16:.LC692
	ldr	r1, .L7505
	movt	r0, #:upper16:.LC692
	ldr	r2, [r6, #4]
	bl	printk
	b	.L7492
.L7506:
	.align	2
.L7505:
	.word	.LANCHOR5-2868
	.fnend
	.size	gs_write_complete, .-gs_write_complete
	.section	.rodata.str1.4
	.align	2
.LC693:
	.ascii	"<3>'=' missing in %s\012\000"
	.align	2
.LC694:
	.ascii	"<3>%s: invalid value: %s\012\000"
	.align	2
.LC695:
	.ascii	"rmode\000"
	.align	2
.LC696:
	.ascii	"fmode\000"
	.align	2
.LC697:
	.ascii	"mode\000"
	.align	2
.LC698:
	.ascii	"uid\000"
	.align	2
.LC699:
	.ascii	"gid\000"
	.align	2
.LC700:
	.ascii	"<3>%s: invalid option\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_fs_mount, %function
ffs_fs_mount:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #33152
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r4, r3, #0
	movt	ip, 65535
	mov	r3, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	movw	lr, #16704
	stmib	sp, {r0, r2}
	str	r3, [sp, #20]
	strh	ip, [sp, #20]	@ movhi
	str	r3, [sp, #24]
	str	r3, [sp, #28]
	str	r3, [sp, #32]
	strh	lr, [sp, #32]	@ movhi
	str	r3, [sp, #36]
	beq	.L7508
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L7508
	mov	fp, #32768
	movw	r9, #:lower16:.LC695
	str	r1, [sp, #12]
	movw	r10, #:lower16:.LC696
	movt	fp, 65535
	movt	r9, #:upper16:.LC695
	movt	r10, #:upper16:.LC696
	b	.L7527
.L7514:
	mov	r2, r5
	mov	r1, r9
	mov	r0, r4
	bl	memcmp
	cmp	r0, #0
	bne	.L7517
	movw	r0, #365
	and	r7, r7, r0
	orr	r7, r7, #16384
	strh	r7, [sp, #32]	@ movhi
.L7518:
	cmp	r6, #0
	beq	.L7553
	add	r4, r6, #1
.L7527:
	mov	r1, #44
	mov	r0, r4
	bl	strchr
	subs	r6, r0, #0
	mov	r1, #61
	movne	r3, #0
	mov	r0, r4
	strbne	r3, [r6]
	bl	strchr
	subs	r5, r0, #0
	beq	.L7555
	mov	r2, #0
	mov	r8, r5
	add	r1, sp, #16
	strb	r2, [r8], #1
	mov	r0, r8
	bl	simple_strtoul
	ldr	r2, [sp, #16]
	mov	r7, r0
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r2, #44
	cmpne	r2, #0
	bne	.L7556
	sub	r5, r5, r4
	cmp	r5, #4
	beq	.L7513
	cmp	r5, #5
	beq	.L7514
	cmp	r5, #3
	beq	.L7515
.L7516:
	movw	r0, #:lower16:.LC700
	mov	r1, r4
	movt	r0, #:upper16:.LC700
	bl	printk
.L7511:
	mvn	r0, #21
.L7507:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7513:
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #109
	bne	.L7516
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	add	r2, r4, #1
	cmp	r3, #111
	bne	.L7516
	ldrb	r3, [r2, #1]!	@ zero_extendqisi2
	cmp	r3, #100
	bne	.L7516
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #101
	bne	.L7516
	movw	r3, #365
	movw	r2, #438
	and	r3, r3, r0
	and	r7, r7, r2
	orr	r3, r3, #16384
	orr	r7, r7, fp
	strh	r7, [sp, #20]	@ movhi
	strh	r3, [sp, #32]	@ movhi
	b	.L7518
.L7515:
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #117
	beq	.L7557
	cmp	r3, #103
	bne	.L7516
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #105
	bne	.L7516
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	cmp	r3, #100
	bne	.L7516
	str	r0, [sp, #28]
	b	.L7518
.L7553:
	ldr	r8, [sp, #12]
.L7508:
	ldrd	r0, [sp, #4]
	movw	r3, #:lower16:ffs_sb_fill
	add	r2, sp, #20
	movt	r3, #:upper16:ffs_sb_fill
	str	r1, [sp, #36]
	mov	r1, r8
	bl	mount_single
	b	.L7507
.L7517:
	mov	r2, r5
	mov	r1, r10
	mov	r0, r4
	bl	memcmp
	cmp	r0, #0
	bne	.L7516
	movw	r0, #438
	and	r7, r7, r0
	orr	r7, r7, fp
	strh	r7, [sp, #20]	@ movhi
	b	.L7518
.L7557:
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #105
	bne	.L7516
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	cmp	r3, #100
	bne	.L7516
	str	r0, [sp, #24]
	b	.L7518
.L7555:
	movw	r0, #:lower16:.LC693
	mov	r1, r4
	movt	r0, #:upper16:.LC693
	bl	printk
	b	.L7511
.L7556:
	movw	r0, #:lower16:.LC694
	mov	r2, r8
	mov	r1, r4
	movt	r0, #:upper16:.LC694
	bl	printk
	b	.L7511
	.fnend
	.size	ffs_fs_mount, .-ffs_fs_mount
	.section	.rodata.str1.4
	.align	2
.LC701:
	.ascii	"bRequest 0x%x, w_value 0x%04x, len %d, endpoint %d\012"
	.ascii	"\000"
	.align	2
.LC702:
	.ascii	"audio req%02x.%02x v%04x i%04x l%d\012\000"
	.align	2
.LC703:
	.ascii	"<3>audio response on err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_setup, %function
audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #20]
	.pad #20
	sub	sp, sp, #20
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldrh	r8, [r1, #4]	@ unaligned
	ldrh	r7, [r1, #2]	@ unaligned
	ldr	r6, [r0, #24]
	cmp	r2, #34
	ldrh	r9, [r1, #6]	@ unaligned
	ldr	r5, [r6, #4]
	beq	.L7559
	cmp	r2, #162
	bne	.L7565
	ldr	r0, .L7583
	ldr	fp, [r5]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7579
.L7563:
	cmp	r7, #256
	bne	.L7565
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	sub	r3, r3, #129
	cmp	r3, #3
	bhi	.L7565
	mov	r1, #68
	mvn	r2, #83
	mov	r3, #0
	mov	r10, #3
	strb	r1, [fp]
	strb	r2, [fp, #1]
	strb	r3, [fp, #2]
.L7567:
	ldr	r0, .L7583+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7580
.L7566:
	ldrb	r0, [r5, #26]	@ zero_extendqisi2
	movw	r3, #:lower16:audio_control_complete
	str	r10, [r5, #4]
	movt	r3, #:upper16:audio_control_complete
	mov	r1, r5
	mov	r2, #32
	str	r3, [r5, #28]
	bfc	r0, #1, #1
	strb	r0, [r5, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L7558
	movw	r0, #:lower16:.LC703
	mov	r1, r4
	movt	r0, #:upper16:.LC703
	bl	printk
	b	.L7558
.L7559:
	ldr	r0, .L7583+8
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7581
.L7562:
	sub	r2, r2, #1
	cmp	r2, #3
	bls	.L7582
.L7565:
	mvn	r4, #94
.L7558:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7582:
	mov	r10, r9
	b	.L7567
.L7579:
	lsr	ip, r8, #8
	movw	r1, #:lower16:.LC701
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC701
	mov	r3, r7
	sub	r0, r0, #24
	stm	sp, {r9, ip}
	bl	__dynamic_pr_debug
	b	.L7563
.L7580:
	movw	r1, #:lower16:.LC702
	sub	r0, r0, #32
	stm	sp, {r7, r8}
	movt	r1, #:upper16:.LC702
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	str	r9, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L7566
.L7581:
	movw	r1, #:lower16:.LC701
	sub	r0, r0, #32
	str	r9, [sp]
	movt	r1, #:upper16:.LC701
	mov	r3, r7
	str	r8, [sp, #4]
	bl	__dynamic_pr_debug
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	b	.L7562
.L7584:
	.align	2
.L7583:
	.word	.LANCHOR4-1248
	.word	.LANCHOR4-1216
	.word	.LANCHOR4-1264
	.fnend
	.size	audio_setup, .-audio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_alloc_ctrl_pkt.constprop.0, %function
rmnet_alloc_ctrl_pkt.constprop.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L7590
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L7594
.L7586:
	mov	r1, #32
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	strne	r5, [r4, #4]
	beq	.L7595
.L7585:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7590:
	mov	r4, #16
	b	.L7586
.L7594:
	mvn	r4, #11
	b	.L7585
.L7595:
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L7585
	.fnend
	.size	rmnet_alloc_ctrl_pkt.constprop.0, .-rmnet_alloc_ctrl_pkt.constprop.0
	.section	.rodata.str1.4
	.align	2
.LC704:
	.ascii	"<3>%s: Invalid grmnet/buf, grmnet:%pK buf:%pK\012\000"
	.align	2
.LC705:
	.ascii	"%s:dev:%pK portno#%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_send_cpkt_response, %function
frmnet_send_cpkt_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	cmpne	r0, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	beq	.L7630
	mov	r0, r2
	mov	r6, r2
	bl	rmnet_alloc_ctrl_pkt.constprop.0
	cmn	r0, #4096
	mov	r5, r0
	bhi	.L7631
	mov	r1, r7
	mov	r2, r6
	ldr	r0, [r0]
	bl	memcpy
	ldr	r0, .L7636
	str	r6, [r5, #4]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7632
.L7600:
	ldr	r3, [r4, #120]
	cmp	r3, #0
	beq	.L7601
	ldr	r3, [r4, #124]
	cmp	r3, #0
	bne	.L7602
.L7601:
	ldr	r0, [r5]
	bl	kfree
	mov	r0, r5
	bl	kfree
	mov	r0, #0
.L7596:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7602:
	add	r6, r4, #132
	ldr	r7, .L7636+4
	add	r8, r4, #144
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r2, r8
	ldr	r1, [r4, #148]
	add	r0, r5, #8
	bl	__list_add
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldrh	r3, [r7, #-14]
	ldr	r5, [r4, #140]
	tst	r3, #4
	bne	.L7633
.L7603:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #120]
	clz	r3, r5
	mov	r1, r0
	lsr	r3, r3, #5
	cmp	r9, #0
	movne	r9, r3
	moveq	r9, #1
	cmp	r9, #0
	bne	.L7629
	ldr	r3, [r5]
	cmp	r3, #0
	beq	.L7629
	ldr	r3, [r4, #152]
	add	r3, r3, #1
	cmp	r3, #1
	str	r3, [r4, #152]
	bne	.L7634
	ldr	r2, [r5]
	mvn	ip, #94
	mov	r0, r6
	strb	ip, [r2]
	strb	r3, [r2, #1]
	strb	r9, [r2, #2]
	strb	r9, [r2, #3]
	ldrh	r3, [r4, #112]
	strh	r3, [r2, #4]	@ unaligned
	strb	r9, [r2, #6]
	strb	r9, [r2, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #136]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bne	.L7607
.L7628:
	mov	r0, #0
	b	.L7596
.L7634:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	b	.L7596
.L7609:
	ldr	r2, .L7636+8
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L7635
.L7610:
	mov	r1, r9
.L7629:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L7596
.L7632:
	ldrb	ip, [r4, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC152
	mov	r3, r4
	ldr	r2, .L7636+12
	movt	r1, #:upper16:.LC152
	sub	r0, r0, #24
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L7600
.L7633:
	ldrb	ip, [r4, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC705
	mov	r3, r4
	ldr	r2, .L7636+16
	movt	r1, #:upper16:.LC705
	sub	r0, r7, #32
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L7603
.L7607:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #144]
	mov	r9, r0
	cmp	r8, r10
	beq	.L7608
	ldr	r3, [r4, #152]
	cmp	r3, #0
	beq	.L7609
	sub	r3, r3, #1
	mov	r0, r10
	str	r3, [r4, #152]
	sub	r4, r10, #8
	bl	list_del
	ldr	r0, [r10, #-8]
	bl	kfree
	mov	r0, r4
	bl	kfree
.L7608:
	mov	r0, r6
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, .L7636+20
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L7628
	movw	r1, #:lower16:.LC156
	mov	r2, r5
	movt	r1, #:upper16:.LC156
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L7628
.L7635:
	movw	r1, #:lower16:.LC154
	ldr	r2, .L7636+16
	sub	r0, r7, #8
	movt	r1, #:upper16:.LC154
	bl	__dynamic_pr_debug
	b	.L7610
.L7630:
	movw	r0, #:lower16:.LC704
	mov	r3, r1
	ldr	r1, .L7636+12
	mov	r2, r4
	movt	r0, #:upper16:.LC704
	bl	printk
	mvn	r0, #18
	b	.L7596
.L7631:
	movw	r0, #:lower16:.LC242
	ldr	r1, .L7636+12
	movt	r0, #:upper16:.LC242
	bl	printk
	mvn	r0, #11
	b	.L7596
.L7637:
	.align	2
.L7636:
	.word	.LANCHOR4-1200
	.word	.LANCHOR4-1168
	.word	.LANCHOR4-1152
	.word	.LANCHOR5-2848
	.word	.LANCHOR5-2820
	.word	.LANCHOR4-1120
	.fnend
	.size	frmnet_send_cpkt_response, .-frmnet_send_cpkt_response
	.section	.rodata.str1.4
	.align	2
.LC706:
	.ascii	"<3>given pkt size too big:%d > max_pkt_size:%d\012\000"
	.align	2
.LC707:
	.ascii	"<3>rmnet file handler %pK is not open\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_qti_send_cpkt_tomodem, %function
grmnet_ctrl_qti_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	cmp	r2, #2048
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	mov	r4, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r3, #3228]
	bhi	.L7652
	mov	r0, r2
	mov	r7, r1
	bl	rmnet_alloc_ctrl_pkt.constprop.0
	cmn	r0, #4096
	mov	r5, r0
	bhi	.L7653
	mov	r1, r7
	mov	r2, r4
	ldr	r0, [r0]
	bl	memcpy
	ldr	r0, .L7657
	str	r4, [r5, #4]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7654
.L7642:
	add	r8, r6, #52
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldrb	r4, [r6, #4]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r4, #0
	beq	.L7655
	add	r0, r5, #8
	add	r2, r6, #44
	ldr	r1, [r6, #48]
	bl	__list_add
	mov	r0, r8
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, .L7657+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7656
.L7644:
	add	r0, r6, #32
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	mov	r0, #0
.L7638:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7654:
	movw	r1, #:lower16:.LC243
	ldr	r2, .L7657+8
	mov	r3, r4
	movt	r1, #:upper16:.LC243
	sub	r0, r0, #24
	bl	__dynamic_pr_debug
	b	.L7642
.L7656:
	movw	r1, #:lower16:.LC244
	ldr	r2, .L7657+8
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC244
	bl	__dynamic_pr_debug
	b	.L7644
.L7655:
	movw	r0, #:lower16:.LC707
	mov	r1, r6
	movt	r0, #:upper16:.LC707
	bl	printk
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5]
	bl	kfree
	mov	r0, r5
	bl	kfree
	mov	r0, r4
	b	.L7638
.L7653:
	movw	r0, #:lower16:.LC242
	ldr	r1, .L7657+8
	movt	r0, #:upper16:.LC242
	bl	printk
	mvn	r0, #11
	b	.L7638
.L7652:
	movw	r0, #:lower16:.LC706
	mov	r1, r2
	movt	r0, #:upper16:.LC706
	mov	r2, #2048
	bl	printk
	mvn	r0, #21
	b	.L7638
.L7658:
	.align	2
.L7657:
	.word	.LANCHOR4-1104
	.word	.LANCHOR4-1072
	.word	.LANCHOR5-2788
	.fnend
	.size	grmnet_ctrl_qti_send_cpkt_tomodem, .-grmnet_ctrl_qti_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_send_cpkt_tomodem, %function
grmnet_ctrl_smd_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #5
	mov	r3, r0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bhi	.L7660
	movw	r7, #:lower16:.LANCHOR1
	mov	r5, r2
	movt	r7, #:upper16:.LANCHOR1
	mov	r2, #84
	mla	r2, r2, r0, r7
	ldr	r6, [r2, #512]
	cmp	r6, #0
	beq	.L7660
	mov	r0, r5
	mov	r8, r1
	bl	rmnet_alloc_ctrl_pkt.constprop.0
	cmn	r0, #4096
	mov	r4, r0
	bhi	.L7670
	mov	r1, r8
	mov	r2, r5
	ldr	r0, [r0]
	add	r9, r6, #108
	bl	memcpy
	mov	r0, r9
	str	r5, [r4, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #8]
	mov	r8, r0
	ands	r5, r3, #1
	beq	.L7671
	add	r0, r4, #8
	add	r2, r6, #40
	ldr	r1, [r6, #44]
	bl	__list_add
	add	r1, r6, #68
	ldr	r0, [r7, #3412]
	mov	r5, #0
	bl	queue_work
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
.L7659:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7671:
	ldr	r0, [r4]
	bl	kfree
	mov	r0, r4
	bl	kfree
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L7659
.L7670:
	movw	r0, #:lower16:.LC242
	ldr	r1, .L7672
	mvn	r5, #11
	movt	r0, #:upper16:.LC242
	bl	printk
	b	.L7659
.L7660:
	movw	r0, #:lower16:.LC118
	ldr	r1, .L7672
	mov	r2, r3
	movt	r0, #:upper16:.LC118
	mvn	r5, #18
	bl	printk
	b	.L7659
.L7673:
	.align	2
.L7672:
	.word	.LANCHOR5-2752
	.fnend
	.size	grmnet_ctrl_smd_send_cpkt_tomodem, .-grmnet_ctrl_smd_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_stop, %function
acc_hid_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_stop, .-acc_hid_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_complete_epout, %function
rmnet_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r8, [r1, #32]
	ldr	r7, [r5, #84]
	cmn	r3, #104
	beq	.L7702
	cmp	r3, #0
	beq	.L7677
	cmn	r3, #108
	beq	.L7702
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC213
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC213
	ldr	lr, [r4, #4]
	ldr	ip, [r4, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
	mov	r0, r8
	bl	dev_kfree_skb_any
	ldr	r3, [r5, #316]
	tst	r3, #2
	beq	.L7679
	add	r6, r5, #188
	mov	r0, r6
	bl	_raw_spin_lock
.L7680:
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r5, #324]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #1256]
	cmp	r2, r3
	bcs	.L7703
	mov	r0, r6
	bl	_raw_spin_unlock
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	movw	r0, #2056
	bl	__alloc_skb
	subs	r6, r0, #0
	beq	.L7684
	ldr	r0, [r6, #160]
	mov	ip, #2048
	mov	r2, #32
	ldr	r3, [r6, #172]
	mov	r1, r4
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	stm	r4, {r3, ip}
	str	r6, [r4, #32]
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	bne	.L7704
.L7675:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7677:
	mov	r0, r8
	ldr	r1, [r1, #48]
	bl	skb_put
	ldr	r3, [r5, #316]
	tst	r3, #2
	beq	.L7679
	add	r6, r5, #188
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #176]
	add	r2, r5, #172
	add	r1, r5, #236
	strd	r2, [r8]
	str	r8, [r3]
	ldr	r3, [r5, #180]
	str	r8, [r5, #176]
	ldr	r0, [r5, #200]
	add	r3, r3, #1
	str	r3, [r5, #180]
	bl	queue_work
	b	.L7680
.L7679:
	movw	r0, #:lower16:.LC277
	ldr	r1, .L7705
	movt	r0, #:upper16:.LC277
	bl	printk
.L7702:
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r0, #0
	str	r0, [r4]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L7703:
	add	r0, r4, #36
	add	r2, r5, #160
	ldr	r1, [r5, #164]
	bl	__list_add
	ldr	r3, [r5, #168]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r5, #168]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L7704:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L7682:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC30
	mov	r2, r8
	movt	r1, #:upper16:.LC30
	add	r0, r0, #32
	bl	dev_err
	add	r0, r4, #36
	add	r2, r5, #160
	ldr	r1, [r5, #164]
	bl	__list_add
	ldr	r3, [r5, #168]
	add	r3, r3, #1
	str	r3, [r5, #168]
	b	.L7675
.L7684:
	mvn	r8, #11
	b	.L7682
.L7706:
	.align	2
.L7705:
	.word	.LANCHOR5-2716
	.fnend
	.size	rmnet_sdio_complete_epout, .-rmnet_sdio_complete_epout
	.section	.rodata.str1.4
	.align	2
.LC708:
	.ascii	"unable to allocate memory for QMI req\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_command_complete, %function
rmnet_sdio_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r5, #84]
	cmp	r2, #0
	blt	.L7719
	ldr	r3, [r5, #320]
	tst	r3, #2
	bne	.L7720
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7720:
	movw	r3, #:lower16:kmalloc_caches
	mov	r4, r1
	ldr	r8, [r1, #48]
	movt	r3, #:upper16:kmalloc_caches
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L7710
	mov	r0, r6
	mov	r2, #16
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L7712
	mov	r1, #32
	mov	r0, r8
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6]
	beq	.L7716
	cmn	r6, #4096
	bhi	.L7712
.L7715:
	mov	r2, r8
	ldr	r1, [r4]
	add	r4, r5, #188
	bl	memcpy
	mov	r0, r4
	str	r8, [r6, #4]
	bl	_raw_spin_lock
	add	r0, r6, #8
	add	r2, r5, #108
	ldr	r1, [r5, #112]
	bl	__list_add
	ldr	r3, [r5, #116]
	mov	r0, r4
	add	r3, r3, #1
	str	r3, [r5, #116]
	bl	_raw_spin_unlock
	add	r1, r5, #220
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r5, #200]
	ldrd	r4, [sp]
	add	sp, sp, #24
	b	queue_work
.L7710:
	mov	r1, #32
	mov	r0, r8
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6, #16]
	mov	r6, #16
	bne	.L7715
.L7716:
	mov	r0, r6
	bl	kfree
.L7712:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC708
	movt	r1, #:upper16:.LC708
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
.L7719:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC210
	movt	r1, #:upper16:.LC210
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_sdio_command_complete, .-rmnet_sdio_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_close, %function
modem_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	modem_close, .-modem_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_init, %function
qdss_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	qdss_function_init, .-qdss_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_init, %function
ptp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ptp_function_init, .-ptp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_init, %function
uasp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	uasp_function_init, .-uasp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_open, %function
debug_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_sdio_open, .-debug_sdio_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_open, %function
debug_smd_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_smd_open, .-debug_smd_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_close, %function
f_midi_in_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_in_close, .-f_midi_in_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_close, %function
f_midi_out_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_out_close, .-f_midi_out_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_start, %function
acc_hid_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_start, .-acc_hid_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_open, %function
acc_hid_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_open, .-acc_hid_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_debug_open, %function
serial_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	serial_debug_open, .-serial_debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_rmnet_sdio_open, %function
debug_rmnet_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	debug_rmnet_sdio_open, .-debug_rmnet_sdio_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	dbg_rmnet_mux_open, %function
dbg_rmnet_mux_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	dbg_rmnet_mux_open, .-dbg_rmnet_mux_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_cleanup, %function
uasp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	uasp_function_cleanup, .-uasp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_release, %function
fsg_lun_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	fsg_lun_release, .-fsg_lun_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_cleanup, %function
ptp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	ptp_function_cleanup, .-ptp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_close, %function
acc_hid_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_close, .-acc_hid_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_cleanup, %function
audio_source_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree
	.fnend
	.size	audio_source_function_cleanup, .-audio_source_function_cleanup
	.section	.rodata.str1.4
	.align	2
.LC709:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/u_serial.c"
	.ascii	"\000"
	.align	2
.LC710:
	.ascii	"%s: cleaned up ttyGS* support\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_cleanup.part.0, %function
gserial_cleanup.part.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r6, #3760]
	str	lr, [sp, #24]
	.pad #28
	sub	sp, sp, #28
	cmp	r3, #0
	movne	r4, #0
	beq	.L7743
.L7740:
	mov	r1, r4
	ldr	r0, [r6, #3768]
	add	r4, r4, #1
	bl	tty_unregister_device
	ldr	r3, [r6, #3760]
	cmp	r4, r3
	bcc	.L7740
	cmp	r3, #0
	beq	.L7743
	mov	r3, sp
	ldr	r5, .L7761
	mov	r8, #0
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L7751
.L7759:
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7744
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L7758
.L7749:
	mov	r0, r4
	add	r8, r8, #1
	bl	kfree
	ldr	r3, [r6, #3760]
	add	r5, r5, #24
	cmp	r8, r3
	bcs	.L7743
.L7751:
	mov	r0, r5
	bl	mutex_lock
	ldr	r4, [r5, #20]
	mov	r3, #0
	mov	r0, r5
	str	r3, [r5, #20]
	bl	mutex_unlock
	add	r0, r4, #60
	bl	cancel_work_sync
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L7759
.L7744:
	mov	r0, r4
	add	r7, r4, #20
	bl	_raw_spin_unlock_irq
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	mov	r3, #0
	movt	r2, #:upper16:autoremove_wake_function
	str	r3, [sp, #4]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
.L7748:
	mov	r2, #2
	add	r1, sp, #4
	mov	r0, r7
	bl	prepare_to_wait
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	mov	r0, r4
	cmp	r3, #0
	bne	.L7746
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7746
	bl	_raw_spin_unlock_irq
	add	r1, sp, #4
	mov	r0, r7
	bl	finish_wait
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7749
.L7758:
	movw	r0, #:lower16:.LC709
	movw	r1, #1477
	movt	r0, #:upper16:.LC709
	add	r8, r8, #1
	bl	warn_slowpath_null
	mov	r0, r4
	add	r5, r5, #24
	bl	kfree
	ldr	r3, [r6, #3760]
	cmp	r3, r8
	bhi	.L7751
.L7743:
	mov	r4, #0
	ldr	r0, [r6, #3764]
	str	r4, [r6, #3760]
	bl	debugfs_remove_recursive
	ldr	r0, [r6, #3320]
	bl	destroy_workqueue
	ldr	r0, [r6, #3768]
	bl	tty_unregister_driver
	ldr	r0, [r6, #3768]
	bl	put_tty_driver
	ldr	r0, .L7761+4
	str	r4, [r6, #3768]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7760
.L7739:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L7746:
	bl	_raw_spin_unlock_irq
	bl	schedule
	b	.L7748
.L7760:
	movw	r1, #:lower16:.LC710
	ldr	r2, .L7761+8
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC710
	bl	__dynamic_pr_debug
	b	.L7739
.L7762:
	.align	2
.L7761:
	.word	.LANCHOR1+3772
	.word	.LANCHOR4-1056
	.word	.LANCHOR5-2688
	.fnend
	.size	gserial_cleanup.part.0, .-gserial_cleanup.part.0
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_cleanup, %function
acm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r3, #3768]
	cmp	r3, #0
	beq	.L7764
	bl	gserial_cleanup.part.0
.L7764:
	ldr	r0, [r4, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	acm_function_cleanup, .-acm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_cleanup, %function
rndis_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_cleanup, .-rndis_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_cleanup, %function
mass_storage_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	mass_storage_function_cleanup, .-mass_storage_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_indicate_status_msg, %function
rndis_indicate_status_msg:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	lsl	r10, r0, #4
	strd	r8, [sp, #16]
	ldr	r9, .L7780
	sub	r6, r10, r0
	str	lr, [sp, #28]
	lsl	r6, r6, #2
	add	r8, r9, r6
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L7776
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	mov	r7, r1
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L7777
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L7778
	add	r2, r4, #20
.L7775:
	movw	r3, #:lower16:.LANCHOR1
	sub	r5, r10, r5
	str	r2, [r4, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r10, #20
	add	r3, r3, r5, lsl #2
	mov	r5, #0
	add	r2, r6, #52
	str	r10, [r4, #12]
	mov	r0, r4
	add	r2, r9, r2
	str	r5, [r4, #16]
	ldr	r1, [r3, #3752]
	bl	__list_add
	ldr	r3, [r4, #8]
	mov	r2, #7
	stm	r3, {r2, r10}
	str	r7, [r3, #8]
	str	r5, [r3, #12]
	str	r5, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	blx	r3
	mov	r0, r5
.L7773:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7777:
	mov	r2, #36
	mov	r4, #16
	b	.L7775
.L7778:
	mvn	r0, #11
	b	.L7773
.L7776:
	movw	r0, #65012
	movt	r0, 65535
	b	.L7773
.L7781:
	.align	2
.L7780:
	.word	.LANCHOR1+3696
	.fnend
	.size	rndis_indicate_status_msg, .-rndis_indicate_status_msg
	.section	.rodata.str1.4
	.align	2
.LC711:
	.ascii	"%c is not valid\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_write, %function
rndis_proc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	subs	r7, r2, #0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #12]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r3, #32]
	ldr	r3, [r3, #-20]
	ldr	r9, [r3, #44]
	beq	.L7783
	mov	r3, sp
	mov	r10, #0
	bic	r6, r3, #8128
	movw	r8, #:lower16:.LANCHOR1
	mov	r4, r1
	mov	r5, r10
	bic	r6, r6, #63
	movt	r8, #:upper16:.LANCHOR1
	add	fp, r1, r7
	b	.L7793
.L7816:
	cmp	r2, #57
	bhi	.L7787
	cmp	r2, #47
	bls	.L7789
	add	r5, r5, r5, lsl #2
	sub	r2, r2, #48
	mov	r10, #1
	add	r5, r2, r5, lsl r10
.L7791:
	add	r4, r4, #1
	cmp	r4, fp
	beq	.L7783
.L7793:
	ldr	r1, [r6, #8]
	mov	r0, r4
	sub	r1, r1, #1
	.syntax divided
@ 1185 "/home/jprim/hlte/lolz/drivers/usb/gadget/rndis.c" 1
	.ifnc r0,r0 ; .err ; .endif
	.ifnc r2,r2 ; .err ; .endif
	.ifnc r1,r1 ; .err ; .endif
	bl	__get_user_1
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r0, #0
	uxtb	r2, r2
	bne	.L7794
	cmp	r2, #68
	beq	.L7785
	bls	.L7816
	cmp	r2, #99
	beq	.L7790
	cmp	r2, #100
	bne	.L7789
.L7785:
	ldrb	r0, [r9]	@ zero_extendqisi2
	mov	r2, #1
	mov	r1, #12
.L7815:
	rsb	r3, r0, r0, lsl #4
	movt	r1, 16385
	add	r4, r4, #1
	add	r3, r8, r3, lsl #2
	str	r2, [r3, #3712]
	bl	rndis_indicate_status_msg
	cmp	r4, fp
	bne	.L7793
.L7783:
	mov	r0, r7
.L7782:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7787:
	cmp	r2, #67
	bne	.L7789
.L7790:
	ldrb	r0, [r9]	@ zero_extendqisi2
	mov	r2, #0
	mov	r1, #11
	b	.L7815
.L7789:
	cmp	r10, #0
	strne	r5, [r9, #12]
	bne	.L7791
	ldr	r0, .L7817
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L7791
	movw	r1, #:lower16:.LC711
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC711
	bl	__dynamic_pr_debug
	b	.L7791
.L7794:
	mvn	r0, #13
	b	.L7782
.L7818:
	.align	2
.L7817:
	.word	.LANCHOR4-1038
	.fnend
	.size	rndis_proc_write, .-rndis_proc_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_unbind, %function
audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	add	r8, r1, #108
	add	r9, r1, #96
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	b	.L7820
.L7821:
	bl	list_del
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L7822
	ldr	r5, [r6, #104]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L7820:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r6, #96]
	mov	r5, r0
	cmp	r4, r9
	mov	r0, r4
	sub	r7, r4, #36
	bne	.L7821
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L7822:
	ldr	r0, [r6, #84]
	bl	snd_card_free_when_closed
	mov	r3, #0
	str	r3, [r6, #84]
	str	r3, [r6, #88]
	str	r3, [r6, #92]
	str	r3, [r6, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	audio_unbind, .-audio_unbind
	.section	.rodata.str1.4
	.align	2
.LC712:
	.ascii	"%s: intf %d, alt %d\012\000"
	.align	2
.LC713:
	.ascii	"<3>%s: Failed to enable capture ep\000"
	.align	2
.LC714:
	.ascii	"<3>%s: request allocation failed\012\000"
	.align	2
.LC715:
	.ascii	"<3>%s: request buffer allocation failed\012\000"
	.align	2
.LC716:
	.ascii	"<3>%s: Failed to queue %s req: err %d\012\000"
	.align	2
.LC717:
	.ascii	"<3>%s: Failed to enable playback ep\000"
	.align	2
.LC718:
	.ascii	"<3>%s: Failed to queue %s queue req: err %d\012\000"
	.align	2
.LC719:
	.ascii	"%s: Allocated %d requests\012\000"
	.align	2
.LC720:
	.ascii	"<3>%s: Schedule playback_work\000"
	.align	2
.LC721:
	.ascii	"<3>%s: playback_buf is empty. Stop.\000"
	.align	2
.LC722:
	.ascii	"<3>%s: Interface %d. Do nothing. Return %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_set_alt, %function
f_audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L7878
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	ldrh	r3, [ip, #-2]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #172]
	ldr	r7, [r0, #176]
	tst	r3, #4
	bne	.L7870
.L7826:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	cmp	r3, r4
	beq	.L7871
	ldrb	r3, [r6, #17]	@ zero_extendqisi2
	cmp	r3, r4
	bne	.L7838
	cmp	r10, #1
	bne	.L7839
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r7, r0, #0
	bne	.L7872
	str	r8, [r5]
	ldr	r0, [r6, #1176]
	bl	f_audio_buffer_alloc
	cmn	r0, #4096
	str	r0, [r8, #184]
	bhi	.L7841
	ldr	r3, [r6, #1264]
	cmp	r3, #0
	ble	.L7868
	movw	r9, #:lower16:f_audio_complete
	movt	r9, #:upper16:f_audio_complete
.L7842:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	add	r7, r7, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	movw	r1, #32800
	beq	.L7844
	ldr	r0, [r6, #1268]
	bl	__kmalloc
	mov	r3, r0
	mov	r2, #32
	cmp	r3, #0
	mov	r1, r4
	mov	r0, r5
	str	r3, [r4]
	beq	.L7845
	ldr	r3, [r6, #1268]
	str	r3, [r4, #4]
	str	r9, [r4, #28]
	str	r8, [r4, #32]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L7873
	ldr	r3, [r6, #1264]
	cmp	r3, r7
	bgt	.L7842
.L7843:
	ldr	r0, .L7878+4
	ldrh	r2, [r0, #-2]
	tst	r2, #4
	bne	.L7874
.L7847:
	strb	r10, [r8, #249]
.L7825:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7871:
	cmp	r10, #1
	bne	.L7828
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r1, [r7, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L7875
	str	r8, [r7]
	mov	r1, #32
	mov	r0, r7
	str	r4, [r8, #216]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L7844
	movw	r1, #32800
	ldr	r0, [r6, #1260]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L7845
	ldr	ip, [r6, #1260]
	movw	r3, #:lower16:f_audio_complete
	mov	r1, r4
	movt	r3, #:upper16:f_audio_complete
	mov	r2, #32
	mov	r0, r7
	str	ip, [r4, #4]
	str	r3, [r4, #28]
	str	r8, [r4, #32]
	str	r4, [r8, #244]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L7876
.L7833:
	add	r0, r8, #220
	bl	schedule_work
.L7834:
	strb	r10, [r8, #248]
	b	.L7825
.L7828:
	add	fp, r8, #212
	add	r6, r8, #236
	mov	r0, fp
	mov	r7, #0
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
.L7836:
	ldr	r4, [r8, #236]
	cmp	r4, r6
	sub	r5, r4, #8
	mov	r0, r4
	beq	.L7877
	bl	list_del
	cmp	r5, #0
	beq	.L7836
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r5
	str	r7, [r4, #-8]
	bl	kfree
	b	.L7836
.L7877:
	mov	r1, r9
	mov	r0, fp
	mov	r4, #0
	bl	_raw_spin_unlock_irqrestore
	b	.L7834
.L7870:
	movw	r1, #:lower16:.LC712
	ldr	r2, .L7878+8
	sub	r0, ip, #20
	movt	r1, #:upper16:.LC712
	mov	r3, r4
	str	r10, [sp]
	bl	__dynamic_pr_debug
	b	.L7826
.L7868:
	mov	r4, r7
	b	.L7843
.L7874:
	movw	r1, #:lower16:.LC719
	ldr	r2, .L7878+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC719
	bl	__dynamic_pr_debug
	b	.L7847
.L7875:
	movw	r0, #:lower16:.LC713
	ldr	r1, .L7878+8
	movt	r0, #:upper16:.LC713
	bl	printk
	b	.L7825
.L7844:
	movw	r0, #:lower16:.LC714
	ldr	r1, .L7878+8
	mvn	r4, #11
	movt	r0, #:upper16:.LC714
	bl	printk
	b	.L7825
.L7873:
	movw	r0, #:lower16:.LC718
	mov	r3, r4
	ldr	r1, .L7878+8
	movt	r0, #:upper16:.LC718
	ldr	r2, [r5, #4]
	bl	printk
	ldr	r3, [r6, #1264]
	b	.L7843
.L7845:
	movw	r0, #:lower16:.LC715
	ldr	r1, .L7878+8
	mvn	r4, #11
	movt	r0, #:upper16:.LC715
	bl	printk
	b	.L7825
.L7841:
	movw	r0, #:lower16:.LC37
	ldr	r1, .L7878+8
	mvn	r4, #11
	movt	r0, #:upper16:.LC37
	bl	printk
	b	.L7825
.L7872:
	movw	r0, #:lower16:.LC717
	ldr	r1, .L7878+8
	mov	r4, r7
	movt	r0, #:upper16:.LC717
	bl	printk
	b	.L7825
.L7839:
	ldr	r4, [r8, #184]
	cmp	r4, #0
	beq	.L7848
	movw	r0, #:lower16:.LC720
	ldr	r1, .L7878+8
	movt	r0, #:upper16:.LC720
	bl	printk
	add	r0, r4, #8
	add	r2, r8, #204
	ldr	r1, [r8, #208]
	bl	__list_add
	add	r0, r8, #188
	bl	schedule_work
	mov	r3, #0
	mov	r4, r3
	str	r3, [r8, #184]
	b	.L7847
.L7838:
	movw	r0, #:lower16:.LC722
	mov	r2, r4
	ldr	r1, .L7878+8
	mov	r3, #0
	movt	r0, #:upper16:.LC722
	mov	r4, r3
	bl	printk
	b	.L7825
.L7876:
	movw	r0, #:lower16:.LC716
	ldr	r1, .L7878+8
	mov	r3, r4
	movt	r0, #:upper16:.LC716
	ldr	r2, [r7, #4]
	bl	printk
	b	.L7833
.L7848:
	movw	r0, #:lower16:.LC721
	ldr	r1, .L7878+8
	movt	r0, #:upper16:.LC721
	bl	printk
	b	.L7847
.L7879:
	.align	2
.L7878:
	.word	.LANCHOR4-1012
	.word	.LANCHOR4-988
	.word	.LANCHOR5-2672
	.fnend
	.size	f_audio_set_alt, .-f_audio_set_alt
	.section	.rodata.str1.4
	.align	2
.LC723:
	.ascii	"reset interface\012\000"
	.align	2
.LC724:
	.ascii	"can't allocate request for %s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_set_interface, %function
do_set_interface:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #144]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	tst	r3, #32
	beq	.L7881
	ldr	r0, .L7919
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L7917
.L7881:
	clz	r3, r6
	movw	r9, #:lower16:bulk_in_complete
	lsr	r3, r3, #5
	movw	r8, #:lower16:bulk_out_complete
	mov	r10, #0
	movt	r9, #:upper16:bulk_in_complete
	movt	r8, #:upper16:bulk_out_complete
	str	r10, [sp]
	str	r3, [sp, #4]
.L7890:
	ldr	r10, [r4, #8]
	cmp	r10, #0
	bne	.L7918
.L7882:
	ldm	sp, {r1, r2}
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	cmp	r1, #0
	movne	r2, #1
	bfc	r3, #5, #1
	cmp	r2, #0
	strb	r3, [r4, #144]
	bne	.L7915
	mov	r10, r2
	str	r6, [r4, #8]
.L7892:
	ldr	r7, [r6, #100]
	mov	r1, #32
	ldr	r5, [r4, #68]
	ldr	r3, [r7, #8]
	mov	r0, r7
	add	r5, r5, r10
	add	r10, r10, r1
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r1, #32
	str	r0, [r5, #16]
	beq	.L7914
	ldr	r7, [r6, #104]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r5, #24]
	beq	.L7914
	ldr	r3, [r5]
	cmp	r10, #128
	str	r3, [r0]
	ldr	r2, [r5, #16]
	str	r3, [r2]
	ldr	r3, [r5, #24]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r9, [r3, #28]
	ldr	r3, [r5, #24]
	str	r8, [r3, #28]
	bne	.L7892
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	ldr	r2, [r4, #92]
	orr	r3, r3, #32
	cmp	r2, #0
	movne	r2, #0
	movne	r0, #10496
	strb	r3, [r4, #144]
	movne	r1, r2
	movtne	r0, 6
	beq	.L7894
.L7893:
	ldr	r3, [r4, #100]
	add	r1, r1, #1
	add	r3, r3, r2
	add	r2, r2, #392
	str	r0, [r3, #36]
	ldr	r3, [r4, #92]
	cmp	r3, r1
	bhi	.L7893
.L7894:
	mov	r10, #0
.L7880:
	mov	r0, r10
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7918:
	mov	r7, #0
	mov	fp, r7
.L7885:
	ldr	r5, [r4, #68]
	add	r5, r5, r7
	add	r7, r7, #32
	ldr	r1, [r5, #16]
	cmp	r1, #0
	beq	.L7883
	ldr	r0, [r10, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	fp, [r5, #16]
.L7883:
	ldr	r1, [r5, #24]
	cmp	r1, #0
	beq	.L7884
	ldr	r0, [r10, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	fp, [r5, #24]
.L7884:
	cmp	r7, #128
	bne	.L7885
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #16
	str	r3, [r4, #8]
	bl	__wake_up
	b	.L7882
.L7917:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC723
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC723
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L7881
.L7915:
	mov	r10, r1
	b	.L7880
.L7914:
	ldr	r0, [r4]
	mvn	r3, #11
	movw	r1, #:lower16:.LC724
	movt	r1, #:upper16:.LC724
	str	r3, [sp]
	ldr	r2, [r7, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L7890
.L7920:
	.align	2
.L7919:
	.word	.LANCHOR4-964
	.fnend
	.size	do_set_interface, .-do_set_interface
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_write_tohost, %function
ghsic_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #136
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #88
	mov	r0, r8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #-128]
	mov	r7, r0
	cmp	r9, #0
	beq	.L7925
	ldr	r3, [r4, #-112]
	sub	r2, r4, #112
	str	r2, [sp, #8]
	cmp	r3, r2
	beq	.L7925
	movw	r3, #:lower16:.LANCHOR1
	movw	fp, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR0
	str	fp, [sp]
	str	r3, [sp, #12]
	sub	r3, r4, #104
	str	r3, [sp, #4]
.L7933:
	ldr	r5, [r4, #-104]
	ldr	r3, [sp, #4]
	cmp	r5, r3
	beq	.L7925
	cmp	r5, #0
	beq	.L7925
	ldr	r3, [r4, #-96]
	mov	r10, #0
	mov	fp, #0
	sub	r3, r3, #1
	str	r3, [r4, #-96]
	ldm	r5, {r1, r3}
	strd	r10, [r5]
	str	r3, [r1, #4]
	str	r1, [r3]
	ldr	r6, [r4, #-112]
	ldrb	r1, [r6, #-10]	@ zero_extendqisi2
	str	r5, [r6, #-4]
	sub	r10, r6, #36
	ldr	r0, [r5, #172]
	orr	r1, r1, #2
	str	r0, [r6, #-36]
	ldr	r0, [r5, #80]
	strb	r1, [r6, #-10]
	ldr	r3, [sp]
	str	r0, [r6, #-32]
	ldr	r1, [r4, #48]
	ldr	r0, [r3, #1272]
	add	r1, r1, #1
	str	r1, [r4, #48]
	cmp	r1, r0
	ldrb	r1, [r6, #-10]	@ zero_extendqisi2
	orrne	r1, r1, #1
	strbne	r1, [r6, #-10]
	bne	.L7927
	mov	r0, #0
	bfc	r1, #0, #1
	strb	r1, [r6, #-10]
	str	r0, [r4, #48]
.L7927:
	mov	r0, r6
	bl	list_del
	ldr	r3, [sp, #12]
	ldr	ip, [r3, #3668]
	cmp	ip, #0
	beq	.L7928
	add	r0, sp, #16
	bl	do_gettimeofday
	ldr	ip, [sp, #16]
	movw	r1, #16960
	ldr	r0, [sp, #20]
	movt	r1, 15
	ubfx	ip, ip, #0, #12
	mla	ip, r1, ip, r0
.L7928:
	mov	r1, r7
	mov	r0, r8
	str	ip, [r5, #44]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r9, #8]
	mov	r1, r10
	mov	r2, #208
	mov	r0, r9
	ldr	r10, [ip, #16]
	blx	r10
	mov	r10, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	r7, r0
	bne	.L7953
	ldr	r2, [sp]
	ldr	r3, [r4, #56]
	ldr	r1, [r2, #596]
	add	r3, r3, #1
	str	r3, [r4, #56]
	cmp	r1, #0
	beq	.L7931
	ldr	r1, [r4, #-96]
	ldr	r3, [r2, #1276]
	cmp	r1, r3
	bls	.L7954
.L7931:
	ldr	r3, [r4, #-112]
	ldr	r2, [sp, #8]
	cmp	r3, r2
	bne	.L7933
.L7925:
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7954:
	add	r1, r4, #28
	mov	r0, #2
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L7931
	ldr	r1, [r4, #-96]
	ldr	r3, [r4, #64]
	str	r1, [r4, #80]
	add	r3, r3, #1
	str	r3, [r4, #64]
	b	.L7931
.L7953:
	movw	r0, #:lower16:.LC617
	ldr	r1, .L7955
	movt	r0, #:upper16:.LC617
	bl	printk
	mov	r0, r6
	ldr	r2, [r4, #-112]
	ldr	r1, [sp, #8]
	bl	__list_add
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L7925
.L7956:
	.align	2
.L7955:
	.word	.LANCHOR5-2656
	.fnend
	.size	ghsic_data_write_tohost, .-ghsic_data_write_tohost
	.section	.rodata.str1.4
	.align	2
.LC725:
	.ascii	"%s: name:%s no_data_ports= %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_probe, %function
ghsic_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L7993
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR1
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r0]
	ldr	r6, [r5, #1436]
	ldrh	r3, [r2, #-2]
	tst	r3, #4
	bne	.L7991
.L7958:
	cmp	r6, #0
	beq	.L7959
	ldr	r4, [r5, #1440]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L7960
	cmp	r6, #1
	bls	.L7959
	ldr	r4, [r5, #1544]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L7960
	cmp	r6, #2
	beq	.L7959
	ldr	r4, [r5, #1648]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L7960
	cmp	r6, #3
	beq	.L7959
	ldr	r4, [r5, #1752]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L7960
.L7959:
	movw	r0, #:lower16:.LC180
	ldr	r1, .L7993+4
	mvn	r2, #21
	movt	r0, #:upper16:.LC180
	bl	printk
	mvn	r0, #21
	b	.L7957
.L7960:
	mov	r0, #1
	add	r1, r4, #180
	bl	_set_bit
	ldr	r0, [r4, #4]
	cmp	r0, #0
	bne	.L7992
.L7957:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L7992:
	add	r1, r4, #88
	ldr	r0, [r4, #84]
	bl	queue_work
	mov	r0, #0
	b	.L7957
.L7991:
	movw	r1, #:lower16:.LC725
	mov	r4, r0
	str	r6, [sp]
	mov	r3, r7
	sub	r0, r2, #20
	ldr	r2, .L7993+4
	movt	r1, #:upper16:.LC725
	bl	__dynamic_pr_debug
	ldr	r7, [r4]
	ldr	r6, [r5, #1436]
	b	.L7958
.L7994:
	.align	2
.L7993:
	.word	.LANCHOR4-940
	.word	.LANCHOR5-2632
	.fnend
	.size	ghsic_data_probe, .-ghsic_data_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_probe, %function
ghsic_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L8031
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldrh	r3, [ip, #-2]
	tst	r3, #4
	bne	.L8030
.L7996:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #1016]
	cmp	r7, #0
	beq	.L7997
	ldr	r4, [r5, #1020]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L7998
	cmp	r7, #1
	bls	.L7997
	ldr	r4, [r5, #1124]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L7998
	cmp	r7, #2
	beq	.L7997
	ldr	r4, [r5, #1228]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L7998
	cmp	r7, #3
	beq	.L7997
	ldr	r4, [r5, #1332]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L7998
.L7997:
	movw	r0, #:lower16:.LC180
	ldr	r1, .L8031+4
	mvn	r2, #21
	movt	r0, #:upper16:.LC180
	bl	printk
	mvn	r0, #21
	b	.L7995
.L7998:
	add	r1, r4, #84
	mov	r0, #1
	add	r6, r4, #4
	bl	_set_bit
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #8]
	mov	r5, r0
	cmp	r3, #0
	beq	.L8001
	add	r1, r4, #16
	ldr	r0, [r4, #12]
	bl	queue_work
.L8001:
	mov	r0, r6
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L7995:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8030:
	movw	r1, #:lower16:.LC178
	mov	r4, r0
	ldr	r2, .L8031+4
	mov	r3, r6
	sub	r0, ip, #20
	movt	r1, #:upper16:.LC178
	bl	__dynamic_pr_debug
	ldr	r6, [r4]
	b	.L7996
.L8032:
	.align	2
.L8031:
	.word	.LANCHOR4-916
	.word	.LANCHOR5-2612
	.fnend
	.size	ghsic_ctrl_probe, .-ghsic_ctrl_probe
	.section	.rodata.str1.4
	.align	2
.LC726:
	.ascii	"<3>%s() _conn_gadget_dev is offlined\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_poll, %function
conn_gadget_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r5, r1, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #124]
	beq	.L8035
	ldr	r7, [r5]
	mov	r6, r0
	subs	r3, r7, #0
	movne	r3, #1
	adds	r1, r4, #144
	movne	r2, r3
	moveq	r2, #0
	cmp	r2, #0
	bne	.L8051
	adds	r1, r4, #156
	moveq	r3, #0
	cmp	r3, #0
	bne	.L8052
.L8035:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	cmp	r3, #0
	beq	.L8053
	ldr	r5, [r3, #100]
	cmp	r5, #0
	beq	.L8054
	add	r3, r4, #108
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	bne	.L8040
	ldr	r5, [r4, #168]
	ldr	r2, [r4, #172]
	cmp	r5, r2
	movne	r5, #65
	moveq	r5, #0
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L8043:
	add	r6, r4, #88
	add	r4, r4, #120
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r1, r0
	mov	r0, r6
	cmp	r3, r4
	beq	.L8044
	orr	r5, r5, #260
	bl	_raw_spin_unlock_irqrestore
.L8033:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8052:
	mov	r2, r5
	mov	r0, r6
	blx	r7
	b	.L8035
.L8051:
	mov	r2, r5
	blx	r7
	ldr	r7, [r5]
	subs	r3, r7, #0
	movne	r3, #1
	adds	r1, r4, #156
	moveq	r3, #0
	cmp	r3, #0
	beq	.L8035
	b	.L8052
.L8044:
	bl	_raw_spin_unlock_irqrestore
	b	.L8033
.L8040:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r5, #0
	b	.L8043
.L8054:
	movw	r0, #:lower16:.LC726
	ldr	r1, .L8055
	movt	r0, #:upper16:.LC726
	bl	printk
	b	.L8033
.L8053:
	movw	r0, #:lower16:.LC448
	ldr	r1, .L8055
	mov	r5, #40
	movt	r0, #:upper16:.LC448
	bl	printk
	b	.L8033
.L8056:
	.align	2
.L8055:
	.word	.LANCHOR5-2592
	.fnend
	.size	conn_gadget_poll, .-conn_gadget_poll
	.section	.rodata.str1.4
	.align	2
.LC727:
	.ascii	"acc_complete_in set disconnected\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_in, %function
acc_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2488]
	cmn	r2, #108
	beq	.L8064
.L8058:
	add	r7, r4, #88
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	add	r2, r4, #1648
	mov	r6, r0
	ldr	r1, [r4, #1660]
	add	r0, r5, #36
	add	r2, r2, #8
	bl	__list_add
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #1664
	mov	r3, #0
	ldrd	r4, [sp]
	add	r0, r0, #12
	mov	r2, #1
	ldrd	r6, [sp, #8]
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L8064:
	ldr	r0, .L8066
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8065
.L8059:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	bic	r3, r3, #3
	orr	r3, r3, #2
	strb	r3, [r4, #100]
	b	.L8058
.L8065:
	movw	r1, #:lower16:.LC727
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC727
	bl	__dynamic_pr_debug
	b	.L8059
.L8067:
	.align	2
.L8066:
	.word	.LANCHOR4-892
	.fnend
	.size	acc_complete_in, .-acc_complete_in
	.section	.rodata.str1.4
	.align	2
.LC728:
	.ascii	"bogus ep0 stall!\012\000"
	.section	.rodata.cst4
	.align	2
.LC729:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_read, %function
ffs_ep0_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 1, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:.LC729
	mov	r5, r2
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LC729
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	.setfp fp, sp, #32
	add	fp, sp, #32
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	ldr	r4, [r0, #124]
	ldr	r3, [r3]
	str	r3, [fp, #-40]
	mov	r3,#0
	str	r1, [fp, #-64]
	add	r9, r4, #96
	.syntax divided
@ 193 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r2, #0
.L8069:
	.syntax divided
@ 170 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r0, [r9]
	mov	r1, #0
	teq	r0, #2
	strexeq r1, r2, [r9]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #0
	bne	.L8069
	.syntax divided
@ 195 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r0, #2
	beq	.L8098
	ldr	r2, [r6, #28]
	add	r7, r4, #4
	mov	r0, r7
	tst	r2, #2048
	bne	.L8126
	bl	mutex_lock_interruptible
	subs	r10, r0, #0
	blt	.L8068
.L8074:
	ldr	r2, [r4, #92]
	cmp	r2, #2
	mvnne	r10, #76
	movne	r5, #0
	beq	.L8127
.L8072:
	mov	r0, r7
	bl	mutex_unlock
	mov	r0, r5
	bl	kfree
.L8068:
	movw	r3, #:lower16:.LC729
	movt	r3, #:upper16:.LC729
	ldr	r2, [r3]
	ldr	r3, [fp, #-40]
	eors	r2, r3, r2
	bne	.L8128
	mov	r0, r10
	sub	sp, fp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8126:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L8074
	mvn	r10, #10
	b	.L8068
.L8127:
	add	r8, r4, #116
	mov	r0, r8
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
.L8075:
	.syntax divided
@ 170 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r10, [r9]
	mov	r2, #0
	teq	r10, #2
	strexeq r2, r0, [r9]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L8075
	.syntax divided
@ 195 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r10, #1
	beq	.L8076
	cmp	r10, #2
	beq	.L8101
	cmp	r10, #0
	movne	r5, r2
	mvnne	r10, #76
	beq	.L8129
.L8077:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
	b	.L8072
.L8101:
	mov	r5, r2
	mvn	r10, #42
	b	.L8077
.L8129:
	cmp	r5, #11
	bls	.L8103
	ldr	r3, [r6, #28]
	ldrh	r2, [r4, #104]
	tst	r3, #2048
	bne	.L8130
	cmp	r2, #0
	bne	.L8079
	mov	r0, #57344
	mov	r3, sp
	str	r2, [fp, #-60]
	movt	r0, 65535
	movw	r1, #:lower16:autoremove_wake_function
	and	r3, r3, r0
	movt	r1, #:upper16:autoremove_wake_function
	str	r0, [fp, #-72]
	sub	r9, fp, #48
	mov	r10, r3
	str	r2, [fp, #-56]
	add	r6, r4, #120
	str	r2, [fp, #-52]
	str	r1, [fp, #-52]
	mov	r1, #1
	str	r2, [fp, #-48]
	str	r2, [fp, #-44]
	ldr	r0, [r3, #12]
	mov	r2, r9
	str	r1, [fp, #-60]
	str	r0, [fp, #-56]
	str	r9, [fp, #-48]
	str	r9, [fp, #-44]
	b	.L8083
.L8131:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
	bl	schedule
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldrh	r2, [r4, #104]
	cmp	r2, #0
	bne	.L8082
	ldr	r2, [fp, #-48]
.L8083:
	cmp	r2, r9
	bne	.L8080
	mov	r2, r6
	mov	r0, r9
	ldr	r1, [r4, #124]
	bl	__list_add
.L8080:
	ldr	r2, [r10, #12]
	mov	r1, #1
	str	r1, [r2]
	.syntax divided
@ 635 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r10, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	ands	r3, r2, r1
	str	r3, [fp, #-68]
	beq	.L8131
	mov	r0, r9
	mvn	r10, #3
	bl	list_del
	ldr	r3, [fp, #-72]
	mov	r2, sp
	and	r3, r3, r2
	mov	r2, #0
	ldr	r1, [r3, #12]
	mov	r5, r2
	str	r2, [r1]
	b	.L8077
.L8076:
	ldrsb	r3, [r4, #108]
	cmp	r3, #0
	blt	.L8132
	ldrh	r3, [r4, #114]
	mov	r0, r8
	cmp	r3, r5
	movcc	r6, r3
	movcs	r6, r5
	bl	_raw_spin_unlock_irq
	cmp	r6, #0
	beq	.L8107
	mov	r1, #208
	mov	r0, r6
	bl	__kmalloc
	subs	r5, r0, #0
	beq	.L8133
.L8095:
	mov	r0, r8
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r2, #0
.L8096:
	.syntax divided
@ 170 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r0, [r9]
	mov	r1, #0
	teq	r0, #2
	strexeq r1, r2, [r9]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #0
	bne	.L8096
	.syntax divided
@ 195 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r0, #2
	mvneq	r10, #42
	beq	.L8077
	mov	r0, r4
	mov	r2, r6
	mov	r1, r5
	bl	__ffs_ep0_queue_wait
	subs	r10, r0, #0
	ble	.L8072
	mov	r2, r6
	mov	r1, r5
	ldr	r0, [fp, #-64]
	bl	__copy_to_user
	cmp	r0, #0
	mvnne	r10, #13
	b	.L8072
.L8130:
	cmp	r2, #0
	bne	.L8079
	mov	r5, r2
	mvn	r10, #10
	b	.L8077
.L8107:
	mov	r5, r6
	b	.L8095
.L8082:
	mov	r0, r9
	bl	list_del
	ldr	r3, [fp, #-72]
	mov	r2, sp
	and	r3, r3, r2
	ldr	r2, [fp, #-68]
	ldr	r3, [r3, #12]
	str	r2, [r3]
	ldrh	r2, [r4, #104]
.L8079:
	movw	r3, #43691
	mov	r9, sp
	movt	r3, 43690
	umull	r3, r5, r3, r5
	lsr	r5, r5, #3
	cmp	r5, r2
	movcs	r5, r2
	add	r10, r5, r5, lsl #1
	lsl	r10, r10, #2
	add	r3, r10, #7
	cmp	r10, #0
	bic	r3, r3, #7
	sub	sp, sp, r3
	mov	r3, sp
	bne	.L8134
.L8084:
	ldrb	r2, [r4, #100]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r3, #8]
	bne	.L8085
	ldrd	r0, [r4, #108]
	mov	r2, #1
	str	r0, [r3]	@ unaligned
	str	r1, [r3, #4]	@ unaligned
	str	r2, [r4, #96]
.L8085:
	cmp	r5, #1
	bls	.L8086
	ldrb	r2, [r4, #101]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r3, #20]
	bne	.L8087
	ldrd	r0, [r4, #108]
	mov	r2, #1
	str	r0, [r3, #12]	@ unaligned
	str	r1, [r3, #16]	@ unaligned
	str	r2, [r4, #96]
.L8087:
	cmp	r5, #2
	beq	.L8086
	ldrb	r2, [r4, #102]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r3, #32]
	bne	.L8088
	ldrd	r0, [r4, #108]
	mov	r2, #1
	str	r0, [r3, #24]	@ unaligned
	str	r1, [r3, #28]	@ unaligned
	str	r2, [r4, #96]
.L8088:
	cmp	r5, #3
	beq	.L8086
	ldrb	r2, [r4, #103]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r3, #44]
	bne	.L8086
	ldrd	r0, [r4, #108]
	mov	r2, #1
	str	r0, [r3, #36]	@ unaligned
	str	r1, [r3, #40]	@ unaligned
	str	r2, [r4, #96]
.L8086:
	ldrh	r2, [r4, #104]
	cmp	r5, r2
	movcs	r2, #0
	strhcs	r2, [r4, #104]	@ movhi
	bcc	.L8135
.L8091:
	mov	r0, r8
	str	r3, [fp, #-68]
	bl	_raw_spin_unlock_irq
	mov	r0, r7
	bl	mutex_unlock
	ldr	r3, [fp, #-68]
	mov	r2, r10
	ldr	r0, [fp, #-64]
	mov	r1, r3
	bl	__copy_to_user
	cmp	r0, #0
	mov	sp, r9
	mvnne	r10, #13
	b	.L8068
.L8132:
	mov	r0, r8
	str	r2, [fp, #-64]
	bl	_raw_spin_unlock_irq
	ldrh	ip, [r4, #106]
	cmp	ip, #0
	beq	.L8094
	ldr	r0, [r4]
	mov	r1, r10
	mvn	r10, #50
	ldr	r2, [fp, #-64]
	ldr	r0, [r0, #4]
	mov	r5, r2
	ldr	ip, [r0, #8]
	ldr	r3, [ip, #24]
	blx	r3
	ldr	r2, [fp, #-64]
	str	r2, [r4, #96]
	b	.L8072
.L8134:
	mov	r1, r10
	mov	r0, sp
	str	r3, [fp, #-68]
	bl	__memzero
	ldr	r3, [fp, #-68]
	b	.L8084
.L8098:
	mvn	r10, #42
	b	.L8068
.L8135:
	sub	r2, r2, r5
	add	r0, r4, #100
	str	r3, [fp, #-68]
	uxth	r2, r2
	add	r1, r0, r5
	strh	r2, [r4, #104]	@ movhi
	bl	memmove
	ldr	r3, [fp, #-68]
	b	.L8091
.L8094:
	ldr	r0, .L8136
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	ubfx	r3, r3, #2, #1
	moveq	r5, r3
	mvneq	r10, #2
	beq	.L8072
	movw	r1, #:lower16:.LC728
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC728
	mov	r5, ip
	mvn	r10, #2
	bl	__dynamic_pr_debug
	b	.L8072
.L8103:
	mov	r5, r10
	mvn	r10, #21
	b	.L8077
.L8133:
	mvn	r10, #11
	b	.L8072
.L8128:
	bl	__stack_chk_fail
.L8137:
	.align	2
.L8136:
	.word	.LANCHOR4-868
	.fnend
	.size	ffs_ep0_read, .-ffs_ep0_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_remove, %function
android_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	mov	r8, r6
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r0, #88]
	ldr	r1, [r8, #3232]!
	cmp	r7, #0
	ldrbne	r2, [r7, #8]	@ zero_extendqisi2
	moveq	r2, r7
	cmp	r1, r8
	sub	r4, r1, #512
	mov	r5, r1
	bne	.L8141
	b	.L8140
.L8164:
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L8140
	ldr	r4, [r4, #512]
	mov	r5, r4
	sub	r4, r4, #512
	cmp	r5, r8
	beq	.L8140
.L8141:
	ldr	r3, [r4, #44]
	cmp	r3, #0
	bne	.L8164
.L8140:
	cmp	r4, #0
	beq	.L8142
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r1, [r3, #1280]
	cmp	r1, #0
	ldrne	r9, .L8167
	beq	.L8146
.L8143:
	ldr	r0, [r4, #12]
	bl	device_remove_file
	ldr	r1, [r9], #4
	cmp	r1, #0
	bne	.L8143
.L8146:
	ldr	r3, [r4, #12]
	ldr	r0, [r6, #3564]
	ldr	r1, [r3, #288]
	bl	device_destroy
	cmp	r7, #0
	beq	.L8145
	ldr	r3, [r7, #4]
	cmp	r3, #0
	bne	.L8165
.L8145:
	mov	r0, r5
	bl	list_del
	ldr	r3, [r6, #3396]
	mov	r0, r4
	sub	r3, r3, #1
	str	r3, [r6, #3396]
	bl	kfree
	ldr	r1, [r6, #3232]
.L8142:
	cmp	r1, r8
	beq	.L8166
.L8148:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8165:
	add	r0, r4, #60
	bl	pm_qos_remove_request
	b	.L8145
.L8166:
	ldr	r0, [r6, #3564]
	bl	class_destroy
	ldr	r3, .L8167+4
	mov	r2, #0
	ldr	r0, [r6, #2476]
	str	r2, [r6, #3564]
	cmp	r0, r3
	bne	.L8148
	sub	r0, r0, #1000
	bl	usb_gadget_unregister_driver
	b	.L8148
.L8168:
	.align	2
.L8167:
	.word	.LANCHOR0+1284
	.word	.LANCHOR0+1356
	.fnend
	.size	android_remove, .-android_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_complete_in, %function
ccid_bulk_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #3400]
	cmp	r2, #0
	movne	r3, #1
	add	r7, r4, #92
	mov	r0, r7
	strne	r3, [r4, #148]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	add	r2, r4, #192
	ldr	r1, [r4, #196]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #172
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
	.fnend
	.size	ccid_bulk_complete_in, .-ccid_bulk_complete_in
	.section	.rodata.str1.4
	.align	2
.LC730:
	.ascii	"audio_data_complete req->status %d req->actual %d\012"
	.ascii	"\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_data_complete, %function
audio_data_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L8188
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8186
.L8176:
	add	r7, r4, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	add	r2, r4, #96
	ldr	r1, [r4, #100]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #112]
	cmp	r3, #0
	beq	.L8175
	ldr	r6, [r5, #44]
	cmp	r6, #0
	bne	.L8175
	ldr	r1, [r5, #48]
	ldrd	r2, [r4, #124]
	add	r3, r3, r1
	cmp	r3, r2
	str	r3, [r4, #128]
	bcs	.L8187
.L8178:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	audio_send
.L8175:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8187:
	ldr	r0, [r4, #92]
	bl	snd_pcm_period_elapsed
	str	r6, [r4, #128]
	b	.L8178
.L8186:
	movw	r1, #:lower16:.LC730
	sub	r0, r0, #20
	ldrd	r2, [r5, #44]
	movt	r1, #:upper16:.LC730
	bl	__dynamic_pr_debug
	b	.L8176
.L8189:
	.align	2
.L8188:
	.word	.LANCHOR4-844
	.fnend
	.size	audio_data_complete, .-audio_data_complete
	.section	.rodata.str1.4
	.align	2
.LC731:
	.ascii	"acc_write(%d)\012\000"
	.align	2
.LC732:
	.ascii	"acc_write disconnected or not online\000"
	.align	2
.LC733:
	.ascii	"acc_write dev->error\012\000"
	.align	2
.LC734:
	.ascii	"acc_write: xfer error %d\012\000"
	.align	2
.LC735:
	.ascii	"acc_write returning %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_write, %function
acc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8240
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #32]
	ldrh	r1, [r3, #-2]
	.pad #36
	sub	sp, sp, #36
	ldr	r5, [r0, #124]
	str	r2, [sp]
	tst	r1, #4
	bne	.L8232
.L8191:
	ldrb	r3, [r5, #100]	@ zero_extendqisi2
	and	r2, r3, #3
	cmp	r2, #1
	bne	.L8192
	cmp	r7, #0
	beq	.L8228
	mov	r2, sp
	tst	r3, #1
	bic	fp, r2, #8128
	bic	fp, fp, #63
	beq	.L8233
.L8196:
	add	r8, r5, #88
	add	r9, r5, #1648
	mov	r0, r8
	add	r9, r9, #8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #1656]
	mov	r6, r0
	cmp	r9, r4
	beq	.L8234
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	beq	.L8198
.L8199:
	cmp	r7, #16384
	movhi	r6, #16384
	movhi	r3, #0
	bhi	.L8205
	ldr	r3, [r5, #92]
	mov	r6, r7
	ldrh	r2, [r3, #20]
	udiv	r3, r7, r2
	mls	r3, r2, r3, r7
	clz	r3, r3
	lsr	r3, r3, #5
.L8205:
	ldrb	r2, [r4, #26]	@ zero_extendqisi2
	ldr	r0, [r4]
	bfi	r2, r3, #1, #1
	strb	r2, [r4, #26]
	ldr	r3, [fp, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r10, r6; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L8235
	mov	r1, r6
	bl	__memzero
	mvn	r3, #13
	str	r3, [sp]
.L8207:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r2, r9
	ldr	r1, [r5, #1660]
	mov	r5, r0
	add	r0, r4, #36
	bl	__list_add
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L8194:
	ldr	r0, .L8240+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8236
.L8190:
	ldr	r0, [sp]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8235:
	mov	r2, r6
	mov	r1, r10
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L8237
	str	r6, [r4, #4]
	ldr	r0, [r5, #92]
	mov	r2, #208
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L8238
	subs	r7, r7, r6
	add	r10, r10, r6
	beq	.L8194
	ldrb	r3, [r5, #100]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L8196
.L8233:
	ldr	r0, .L8240+8
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	mvneq	r3, #4
	streq	r3, [sp]
	beq	.L8194
	mvn	r3, #4
	movw	r1, #:lower16:.LC733
	movt	r1, #:upper16:.LC733
	sub	r0, r0, #20
	str	r3, [sp]
	bl	__dynamic_pr_debug
	b	.L8194
.L8234:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L8198:
	ldrb	r3, [r5, #100]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L8212
	ldr	r0, [fp, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	str	r7, [sp, #4]
	add	r6, r5, #1664
	add	r6, r6, #12
	str	r3, [sp, #12]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L8204
.L8200:
	bl	list_del
	mov	r1, r4
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L8202
	ldrb	r3, [r5, #100]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L8231
.L8239:
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L8214
	bl	schedule
.L8204:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, r6
	bl	prepare_to_wait
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1656]
	mov	r4, r0
	cmp	r9, r3
	mov	r0, r3
	sub	r7, r3, #36
	bne	.L8200
	mov	r1, r4
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldrb	r3, [r5, #100]	@ zero_extendqisi2
	ands	r3, r3, #1
	bne	.L8239
.L8231:
	add	r1, sp, #12
	mov	r0, r6
	str	r3, [sp]
	bl	finish_wait
	b	.L8194
.L8214:
	mov	r3, #65024
	add	r1, sp, #12
	movt	r3, 65535
	mov	r0, r6
	str	r3, [sp]
	bl	finish_wait
	b	.L8194
.L8212:
	str	r3, [sp]
	b	.L8194
.L8202:
	add	r1, sp, #12
	mov	r0, r6
	mov	r4, r7
	ldr	r7, [sp, #4]
	bl	finish_wait
	b	.L8199
.L8238:
	ldr	r3, .L8240+12
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	mvneq	r3, #4
	streq	r3, [sp]
	beq	.L8207
	movw	r1, #:lower16:.LC734
	mov	r2, r0
	movt	r1, #:upper16:.LC734
	sub	r0, r3, #20
	bl	__dynamic_pr_debug
	mvn	r3, #4
	str	r3, [sp]
	b	.L8207
.L8232:
	movw	r1, #:lower16:.LC731
	sub	r0, r3, #20
	movt	r1, #:upper16:.LC731
	bl	__dynamic_pr_debug
	b	.L8191
.L8236:
	movw	r1, #:lower16:.LC735
	sub	r0, r0, #20
	ldr	r2, [sp]
	movt	r1, #:upper16:.LC735
	bl	__dynamic_pr_debug
	b	.L8190
.L8228:
	str	r7, [sp]
	b	.L8194
.L8192:
	ldr	r0, .L8240+16
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	mvneq	r3, #18
	streq	r3, [sp]
	beq	.L8190
	mvn	r3, #18
	movw	r1, #:lower16:.LC732
	movt	r1, #:upper16:.LC732
	sub	r0, r0, #20
	str	r3, [sp]
	bl	__dynamic_pr_debug
	b	.L8190
.L8237:
	mvn	r3, #13
	str	r3, [sp]
	b	.L8207
.L8241:
	.align	2
.L8240:
	.word	.LANCHOR4-820
	.word	.LANCHOR4-724
	.word	.LANCHOR4-772
	.word	.LANCHOR4-748
	.word	.LANCHOR4-796
	.fnend
	.size	acc_write, .-acc_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_write_tomdm, %function
ghsic_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r8, r0, #120
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	beq	.L8242
	ldr	r3, [r0, #-116]
	mov	r4, r0
	cmp	r3, #0
	bne	.L8297
.L8242:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8297:
	sub	r7, r0, #40
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #44]
	mov	r5, r0
	tst	r3, #2
	bne	.L8248
	mov	r3, r4
	ldr	r6, [r3, #-56]!
	cmp	r6, r3
	beq	.L8248
	cmp	r6, #0
	beq	.L8248
	ldr	r3, [r4, #-48]
	mov	r10, #0
	mov	fp, #0
	ldr	r0, .L8305
	ldr	r9, .L8305+4
	sub	r3, r3, #1
	str	r3, [r4, #-48]
	ldrd	r2, [r6]
	strd	r10, [r6]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8249
.L8250:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3668]
	cmp	r3, #0
	beq	.L8246
	add	r0, sp, #24
	bl	do_gettimeofday
	ldr	r3, [sp, #24]
	movw	r2, #16960
	ldr	r1, [sp, #28]
	movt	r2, 15
	ubfx	r3, r3, #0, #12
	mla	r3, r2, r3, r1
.L8246:
	mov	r1, r5
	mov	r0, r7
	str	r3, [r6, #40]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	sub	r9, r9, #12
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r1, r9
	ldr	r0, .L8305+8
	bl	___ratelimit
	cmp	r0, #0
	bne	.L8298
.L8247:
	ldr	r3, [r4, #92]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #92]
	bl	dev_kfree_skb_any
.L8248:
.L8245:
	mov	r0, r7
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, .L8305+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8299
.L8251:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #-108]
	mov	r5, r0
	cmp	r8, #0
	beq	.L8253
	movw	r3, #:lower16:.LANCHOR1
	movw	r2, #16960
	movt	r3, #:upper16:.LANCHOR1
	movt	r2, 15
	movw	r9, #:lower16:.LANCHOR0
	movt	r9, #:upper16:.LANCHOR0
	str	r3, [sp, #12]
	str	r2, [sp, #16]
	b	.L8252
.L8302:
	bl	do_gettimeofday
	ldr	r3, [sp, #16]
	mov	r2, #208
	mov	r1, r10
	ldr	ip, [sp, #24]
	mov	r0, r8
	ldr	lr, [sp, #28]
	ubfx	ip, ip, #0, #12
	mla	ip, r3, ip, lr
	str	ip, [fp, #32]
	ldr	ip, [r8, #8]
.L8296:
	ldr	r5, [ip, #16]
	blx	r5
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	r5, #0
	mov	r5, r0
	bne	.L8300
.L8252:
	ldr	r3, [r4, #-116]
	sub	r2, r4, #64
	str	r2, [sp, #20]
	cmp	r3, #0
	beq	.L8253
	ldr	r6, [r4, #-64]
	cmp	r6, r2
	mov	r0, r6
	sub	r10, r6, #36
	beq	.L8253
	ldr	r2, [r4, #-48]
	ldr	r3, [r9, #1424]
	cmp	r2, r3
	bhi	.L8253
	bl	list_del
	mov	r1, r5
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #12]
	add	r0, sp, #24
	ldr	r5, [r3, #3668]
	cmp	r5, #0
	beq	.L8254
	bl	do_gettimeofday
	ldr	r2, [sp, #16]
	ldr	r5, [sp, #24]
	ldr	r3, [sp, #28]
	ubfx	r5, r5, #0, #12
	mla	r5, r2, r5, r3
.L8254:
	mov	r2, #0
	mov	r1, #208
	ldr	r0, [r9, #1428]
	mvn	r3, #0
	bl	__alloc_skb
	mov	fp, r0
	mov	r2, #208
	cmp	fp, #0
	add	r0, sp, #24
	mov	r1, r10
	beq	.L8301
	ldr	ip, [fp, #172]
	str	r5, [fp, #28]
	ldr	r3, [sp, #12]
	str	ip, [r6, #-36]
	ldr	ip, [r9, #1428]
	str	ip, [r6, #-32]
	str	fp, [r6, #-4]
	ldr	ip, [r3, #3668]
	cmp	ip, #0
	bne	.L8302
	mov	r0, r8
	str	ip, [fp, #32]
	ldr	ip, [r8, #8]
	b	.L8296
.L8300:
	ldr	r9, .L8305+16
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r0, .L8305+20
	mov	r1, r9
	bl	___ratelimit
	cmp	r0, #0
	bne	.L8303
.L8259:
	ldr	r3, [r4, #-116]
	cmp	r3, #0
	bne	.L8304
	ldr	r3, [r8, #8]
	mov	r1, r10
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L8253:
	mov	r1, r5
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L8242
.L8301:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r0, r6
	ldr	r2, [r4, #-64]
	ldr	r1, [sp, #20]
	bl	__list_add
	b	.L8253
.L8299:
	movw	r1, #:lower16:.LC599
	ldr	r2, .L8305+16
	mov	r3, r8
	movt	r1, #:upper16:.LC599
	sub	r0, r0, #20
	bl	__dynamic_pr_debug
	b	.L8251
.L8249:
	ldr	lr, [r4, #-120]
	movw	r1, #:lower16:.LC615
	mov	r3, r8
	ldr	ip, [r4, #68]
	movt	r1, #:upper16:.LC615
	sub	r2, r9, #12
	sub	r0, r0, #20
	stm	sp, {ip, lr}
	bl	__dynamic_pr_debug
	b	.L8250
.L8304:
	mov	r0, r6
	ldr	r2, [r4, #-64]
	ldr	r1, [sp, #20]
	bl	__list_add
	b	.L8253
.L8298:
	movw	r0, #:lower16:.LC121
	mov	r1, r9
	mvn	r2, #18
	movt	r0, #:upper16:.LC121
	bl	printk
	b	.L8247
.L8303:
	movw	r0, #:lower16:.LC616
	mov	r1, r9
	movt	r0, #:upper16:.LC616
	bl	printk
	b	.L8259
.L8306:
	.align	2
.L8305:
	.word	.LANCHOR4-700
	.word	.LANCHOR5-2560
	.word	.LANCHOR0+1400
	.word	.LANCHOR4-676
	.word	.LANCHOR5-2548
	.word	.LANCHOR0+1432
	.fnend
	.size	ghsic_data_write_tomdm, .-ghsic_data_write_tomdm
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_complete_in, %function
adb_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #3404]
	cmp	r2, #0
	movne	r3, #1
	add	r7, r4, #88
	mov	r0, r7
	strne	r3, [r4, #104]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	add	r2, r4, #120
	ldr	r1, [r4, #124]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #140
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
	.fnend
	.size	adb_complete_in, .-adb_complete_in
	.section	.rodata.str1.4
	.align	2
.LC736:
	.ascii	"qdss_unbind\012\000"
	.align	2
.LC737:
	.ascii	"clear_eps\012\000"
	.align	2
.LC738:
	.ascii	"clear_desc\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_unbind, %function
qdss_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8350
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #24]
	ldrh	r2, [r3, #-2]
	ldr	r5, [r0]
	tst	r2, #4
	bne	.L8346
.L8314:
	ldr	r0, [r4, #196]
	bl	flush_workqueue
	movw	r0, #:lower16:.LC528
	ldr	r1, [r5, #28]
	movt	r0, #:upper16:.LC528
	bl	strcmp
	subs	r1, r0, #0
	beq	.L8347
	ldr	r0, .L8350+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8348
.L8316:
	ldr	r3, [r4, #104]
	ldr	r0, .L8350+8
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #108]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8349
.L8320:
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L8321
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L8325
	bl	kfree
	ldr	r3, [r5, #20]
.L8321:
	cmp	r3, #2
	bhi	.L8325
.L8313:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8325:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L8313
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L8347:
	ldr	r0, [r4, #108]
	bl	dwc3_tx_fifo_resize_request
	ldr	r0, .L8350+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L8316
.L8348:
	movw	r1, #:lower16:.LC737
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC737
	bl	__dynamic_pr_debug
	b	.L8316
.L8346:
	movw	r1, #:lower16:.LC736
	sub	r0, r3, #20
	movt	r1, #:upper16:.LC736
	bl	__dynamic_pr_debug
	b	.L8314
.L8349:
	movw	r1, #:lower16:.LC738
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC738
	bl	__dynamic_pr_debug
	b	.L8320
.L8351:
	.align	2
.L8350:
	.word	.LANCHOR4-652
	.word	.LANCHOR4-628
	.word	.LANCHOR4-604
	.fnend
	.size	qdss_unbind, .-qdss_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_suspend, %function
ffs_func_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #-28]
	add	r5, r4, #116
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r6, r0
	add	lr, r4, #100
	ldrh	r2, [r4, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r4, #96]
	cmp	r2, #0
	beq	.L8357
	add	r1, r4, #99
	mov	r3, lr
	add	r2, r1, r2
.L8356:
	ldrb	ip, [r1, #1]!	@ zero_extendqisi2
	mov	r0, r3
	cmp	ip, #5
	strbne	ip, [r0], #1
	movne	r3, r0
	cmp	r2, r1
	bne	.L8356
	sub	r3, r3, lr
	add	r2, r3, #1
	uxth	r3, r3
	uxth	r2, r2
.L8354:
	add	r3, r4, r3
	strh	r2, [r4, #104]	@ movhi
	mov	r0, #5
	mov	r1, #3
	mov	r2, #1
	strb	r0, [r3, #100]
	mov	r0, r5
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L8357:
	mov	r3, r2
	mov	r2, #1
	b	.L8354
	.fnend
	.size	ffs_func_suspend, .-ffs_func_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_resume, %function
ffs_func_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #-28]
	add	r5, r4, #116
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r6, r0
	add	lr, r4, #100
	ldrh	r2, [r4, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r4, #96]
	cmp	r2, #0
	beq	.L8368
	add	r1, r4, #99
	mov	r3, lr
	add	r2, r1, r2
.L8367:
	ldrb	ip, [r1, #1]!	@ zero_extendqisi2
	mov	r0, r3
	sub	r7, ip, #5
	cmp	r7, #1
	strbhi	ip, [r0], #1
	movhi	r3, r0
	cmp	r2, r1
	bne	.L8367
	sub	r3, r3, lr
	add	r2, r3, #1
	uxth	r3, r3
	uxth	r2, r2
.L8365:
	add	r3, r4, r3
	strh	r2, [r4, #104]	@ movhi
	mov	r0, #6
	mov	r1, #3
	mov	r2, #1
	strb	r0, [r3, #100]
	mov	r0, r5
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L8368:
	mov	r3, r2
	mov	r2, #1
	b	.L8365
	.fnend
	.size	ffs_func_resume, .-ffs_func_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_out_transfer, %function
start_out_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L8372
	ldr	r0, [r4, #88]
	mov	r5, r1
	ldr	r7, [r1, #24]
	ldr	r6, [r4, #104]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq
	mov	r3, #1
	mov	r2, #2
	str	r2, [r5, #4]
	str	r3, [r5, #28]
	ldr	r0, [r4, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L8384
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #4]
	str	r2, [r5, #28]
	beq	.L8384
	cmn	r3, #95
	bne	.L8376
	ldr	r2, [r7, #4]
	cmp	r2, #0
	bne	.L8376
.L8384:
	mov	r0, #1
.L8374:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8376:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC88
	movt	r1, #:upper16:.LC88
	ldr	r2, [r6, #4]
	add	r0, r0, #32
	bl	dev_warn
	b	.L8384
.L8372:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC86
	movw	r3, #805
	ldr	r2, .L8385
	movt	r1, #:upper16:.LC86
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC87
	movw	r1, #550
	movt	r0, #:upper16:.LC87
	bl	warn_slowpath_null
	mov	r0, r4
	b	.L8374
.L8386:
	.align	2
.L8385:
	.word	.LANCHOR5-2528
	.fnend
	.size	start_out_transfer, .-start_out_transfer
	.section	.rodata.str1.4
	.align	2
.LC739:
	.ascii	"write %u @ %llu beyond end %llu\012\000"
	.align	2
.LC740:
	.ascii	"error in file write: %d\012\000"
	.align	2
.LC741:
	.ascii	"partial file write: %d/%u\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_write, %function
do_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #104]
	.pad #68
	sub	sp, sp, #68
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #2
	movne	r3, #9984
	mvnne	r0, #21
	movtne	r3, 7
	strne	r3, [r6, #28]
	bne	.L8387
	mov	r4, r0
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_lock
	ldr	r2, [r6]
	ldr	r3, [r2, #28]
	bic	r3, r3, #1048576
	bic	r3, r3, #4096
	str	r3, [r2, #28]
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_unlock
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #10
	beq	.L8459
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	ldr	r5, [r4, #78]	@ unaligned
	tst	r3, #231
	movne	r3, #9216
	rev	r5, r5
	movtne	r3, 5
	mvnne	r0, #21
	strne	r3, [r6, #28]
	bne	.L8387
	ldrsb	r2, [r6, #24]
	cmp	r2, #0
	blt	.L8391
	tst	r3, #8
	bne	.L8460
.L8391:
	ldrd	r2, [r6, #16]
	mov	r1, #0
	mov	r0, r5
	cmp	r5, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r0, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L8387
	ldr	r3, [r6, #40]
	ldr	r1, [r4, #128]
	sub	r2, r3, #32
	lsl	r10, r5, r3
	lsl	fp, r5, r2
	str	r1, [sp, #44]
	cmp	r1, #0
	rsb	r2, r3, #32
	orr	fp, fp, r5, lsr r2
	beq	.L8401
	mov	r3, sp
	strd	r10, [sp, #16]
	bic	r3, r3, #8128
	mov	r9, r1
	strd	r10, [sp, #24]
	bic	r3, r3, #63
	mov	r8, #1
	str	r3, [sp, #48]
.L8394:
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L8395
.L8462:
	cmp	r8, #0
	beq	.L8396
	ldrd	r2, [r6, #8]
	ldrd	r0, [sp, #16]
	cmp	r0, r2
	sbcs	r3, r1, r3
	bge	.L8461
	ldr	r2, [r4, #140]
	cmp	r9, #16384
	movcc	r3, r9
	movcs	r3, #16384
	adds	r0, r0, r3
	adc	r1, r1, #0
	subs	r9, r9, r3
	sub	r2, r2, r3
	movne	r8, #1
	strd	r0, [sp, #16]
	moveq	r8, #0
	mov	r0, r4
	str	r2, [r4, #140]
	str	r3, [r5, #12]
	ldr	r1, [r4, #108]
	udiv	r2, r3, r1
	mls	r2, r1, r2, r3
	cmp	r2, #0
	addne	r3, r3, r1
	mov	r1, r5
	subne	r3, r3, r2
	ldr	r2, [r5, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer
	cmp	r0, #0
	beq	.L8401
	ldr	r3, [r5, #8]
	str	r3, [r4, #60]
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L8462
.L8395:
	ldr	r5, [r4, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L8425
	cmp	r8, #0
	beq	.L8401
.L8404:
	mov	r0, r4
	bl	sleep_thread
	cmp	r0, #0
	beq	.L8394
.L8387:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8396:
	ldr	r5, [r4, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L8401
.L8425:
	cmp	r3, #1
	bne	.L8404
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L8404
	.syntax divided
@ 1354 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r5, #8]
	mov	r3, #0
	str	r2, [r4, #64]
	ldr	r2, [r5, #24]
	str	r3, [r5, #4]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	bne	.L8463
	ldr	r3, [r6, #8]
	ldrd	r10, [sp, #24]
	ldr	ip, [r6, #12]
	ldr	r2, [r2, #48]
	subs	r1, r3, r10
	str	r1, [sp, #32]
	sbc	r1, ip, fp
	str	r1, [sp, #36]
	mov	r1, #0
	ldrd	r10, [sp, #32]
	cmp	r10, r2
	sbcs	r1, fp, r1
	blt	.L8464
.L8407:
	ldr	r7, [r6, #44]
	ldr	r3, [r5, #12]
	rsb	r7, r7, #0
	cmp	r3, r2
	andls	r7, r7, r3
	andhi	r7, r7, r2
	cmp	r7, #0
	beq	.L8408
	ldrd	r0, [sp, #24]
	add	r3, sp, #56
	mov	r2, r7
	strd	r0, [sp, #56]
	ldr	r1, [r5]
	ldr	r0, [r6]
	bl	vfs_write
	ldr	r3, [sp, #48]
	ldr	r2, [r3, #12]
	mov	r3, r0
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	ands	r2, r2, #1
	mov	r10, r2
	bne	.L8429
	cmp	r0, #0
	blt	.L8465
	cmp	r0, r7
	mov	r10, r0
	bcs	.L8411
	ldr	r0, .L8467
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L8466
.L8412:
	ldr	r2, [r6, #44]
	ldrd	r0, [sp, #24]
	ldr	ip, [r4, #136]
	rsb	r2, r2, #0
	and	r3, r3, r2
	ldr	r2, [sp, #44]
	adds	r0, r0, r3
	mov	r10, r3
	adc	r1, r1, r3, asr #31
	cmp	r3, r7
	strd	r0, [sp, #24]
	sub	r1, ip, r3
	sub	r3, r2, r3
	str	r3, [sp, #44]
	str	r1, [r4, #136]
	bcs	.L8413
.L8424:
	movw	r2, #3074
	ldr	r3, [r6, #40]
	movt	r2, 3
	ldr	r0, [sp, #28]
	str	r2, [r6, #28]
	ldr	r2, [sp, #24]
	subs	r1, r3, #32
	lsr	r2, r2, r3
	rsb	r3, r3, #32
	orr	r2, r2, r0, lsl r3
	movpl	r3, r0
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	movw	r1, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LANCHOR1
	str	r2, [r6, #32]
	mov	r2, #1
	orr	r3, r3, #64
	str	r2, [r1, #3580]
	strb	r3, [r6, #24]
.L8413:
	cmp	r7, r10
	beq	.L8415
.L8458:
.L8416:
	ldr	r3, [r5, #12]
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r2, r3
	bcc	.L8427
	ldr	r3, [sp, #44]
	cmp	r3, #0
	bne	.L8394
.L8401:
	mvn	r0, #4
	b	.L8387
.L8408:
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r3, r2
	bls	.L8394
.L8427:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #4
	orr	r3, r3, #8
	strb	r3, [r4, #144]
	b	.L8387
.L8461:
	ldr	r3, [r6, #40]
	mov	r2, #8448
	mov	fp, r1
	movt	r2, 5
	mov	r8, #0
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r0, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	movpl	r3, fp
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L8394
.L8464:
	ldrd	r10, [sp, #24]
	movw	r1, #:lower16:.LC739
	add	r0, r6, #48
	movt	r1, #:upper16:.LC739
	strd	r10, [sp]
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	bl	dev_err
	ldr	r2, [r6, #8]
	sub	r2, r2, r10
	b	.L8407
.L8465:
	ldr	r0, .L8467+4
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L8424
	movw	r2, #:lower16:.LC740
	add	r1, r6, #48
	movt	r2, #:upper16:.LC740
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L8424
.L8411:
	ldrd	r0, [sp, #24]
	ldr	r3, [r4, #136]
	adds	r0, r0, r10
	adc	r1, r1, r10, asr #31
	sub	r3, r3, r10
	cmp	r7, r10
	str	r3, [r4, #136]
	strd	r0, [sp, #24]
	ldr	r1, [sp, #44]
	sub	r1, r1, r10
	str	r1, [sp, #44]
	bne	.L8458
.L8415:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3964]
	cmp	r2, #0
	bne	.L8458
	ldr	r2, [r3, #3580]
	cmp	r2, #0
	bne	.L8401
	ldr	r2, [r4, #68]
	ldr	r1, [r2, #4]
	cmp	r1, #2
	beq	.L8458
	ldr	r1, [r2, #36]
	cmp	r1, #2
	beq	.L8458
	ldr	r1, [r2, #68]
	cmp	r1, #2
	beq	.L8458
	ldr	r2, [r2, #100]
	cmp	r2, #2
	beq	.L8458
	cmp	r9, #0
	bne	.L8458
	mov	r2, #1
	mov	r0, r4
	str	r2, [r3, #3964]
	bl	send_status
	b	.L8458
.L8459:
	ldrb	r5, [r4, #78]	@ zero_extendqisi2
	ldrb	r2, [r4, #77]	@ zero_extendqisi2
	ldrb	r3, [r4, #79]	@ zero_extendqisi2
	lsl	r5, r5, #8
	orr	r5, r5, r2, lsl #16
	orr	r5, r5, r3
	b	.L8391
.L8460:
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_lock
	ldr	r2, [r6]
	ldr	r3, [r2, #28]
	orr	r3, r3, #1048576
	orr	r3, r3, #4096
	str	r3, [r2, #28]
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_unlock
	b	.L8391
.L8429:
	mvn	r0, #3
	b	.L8387
.L8463:
	ldrd	r10, [sp, #24]
	mov	r2, #2048
	mvn	r0, #4
	ldr	r3, [r6, #40]
	movt	r2, 4
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	orrpl	r2, r2, fp, asr r1
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	str	r2, [r6, #32]
	b	.L8387
.L8466:
	movw	r2, #:lower16:.LC741
	sub	r0, r0, #18
	str	r7, [sp]
	movt	r2, #:upper16:.LC741
	add	r1, r6, #48
	str	r3, [sp, #52]
	bl	__dynamic_dev_dbg
	ldr	r3, [sp, #52]
	b	.L8412
.L8468:
	.align	2
.L8467:
	.word	.LANCHOR4-558
	.word	.LANCHOR4-582
	.fnend
	.size	do_write, .-do_write
	.section	.rodata.str1.4
	.align	2
.LC742:
	.ascii	"&ffs->mutex\000"
	.align	2
.LC743:
	.ascii	"&ffs->ev.waitq\000"
	.align	2
.LC744:
	.ascii	"&x->wait\000"
	.align	2
.LC745:
	.ascii	"ep0\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_sb_fill, %function
ffs_sb_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r1
	str	lr, [sp, #24]
	ldr	r3, [r3, #32]
	.pad #12
	sub	sp, sp, #12
	cmp	r3, #0
	beq	.L8477
	mov	r0, r3
	mov	r2, #212
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L8470
.L8494:
	mvn	r0, #11
.L8469:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L8477:
	mov	r4, #16
.L8470:
	mov	r7, #0
	mov	r6, #1
	ldr	r2, .L8495
	movw	r1, #:lower16:.LC742
	add	r0, r4, #4
	movt	r1, #:upper16:.LC742
	strd	r6, [r4, #84]
	mov	r9, #12
	str	r7, [r4, #92]
	bl	__mutex_init
	movw	r1, #:lower16:.LC743
	ldr	r2, .L8495
	add	r0, r4, #116
	movt	r1, #:upper16:.LC743
	str	r7, [r4, #24]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC744
	ldr	r2, .L8495
	add	r0, r4, #36
	movt	r1, #:upper16:.LC744
	str	r7, [r4, #32]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC744
	ldr	r2, .L8495
	add	r0, r4, #72
	movt	r1, #:upper16:.LC744
	str	r7, [r4, #68]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC744
	ldr	r2, .L8495
	add	r0, r4, #56
	movt	r1, #:upper16:.LC744
	str	r7, [r4, #52]
	bl	__init_waitqueue_head
	strh	r6, [r4, #106]	@ movhi
	ldr	ip, .L8495+4
	movw	r1, #29537
	str	r5, [r4, #192]
	ldr	r3, [r8, #16]
	movt	r1, 2660
	mov	lr, #4096
	mov	r0, r5
	str	r3, [r4, #136]
	ldrd	r2, [r8]
	strd	r2, [r4, #196]
	ldr	r3, [r8, #8]
	str	r3, [r4, #204]
	strb	r9, [r5, #13]
	str	lr, [r5, #16]
	str	ip, [r5, #36]
	str	r1, [r5, #56]
	str	r4, [r5, #488]
	str	r6, [r5, #500]
	ldrh	r3, [r8, #12]
	strh	r3, [r8]	@ movhi
	bl	new_inode
	subs	r6, r0, #0
	beq	.L8472
	mov	r0, sp
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r6, #40]
	ldrh	r2, [r8]
	movw	r3, #:lower16:simple_dir_operations
	movt	r3, #:upper16:simple_dir_operations
	ldrd	r0, [sp]
	cmp	r3, r7
	strh	r2, [r6]	@ movhi
	ldr	r2, [r8, #4]
	str	r2, [r6, #4]
	ldr	r2, [r8, #8]
	strne	r3, [r6, #200]
	movw	r3, #:lower16:simple_dir_inode_operations
	movt	r3, #:upper16:simple_dir_inode_operations
	cmp	r3, #0
	str	r2, [r6, #8]
	strne	r3, [r6, #24]
	strd	r0, [r6, #52]
	strd	r0, [r6, #60]
	strd	r0, [r6, #68]
	str	r7, [r6, #328]
.L8472:
	mov	r0, r6
	bl	d_make_root
	cmp	r0, #0
	str	r0, [r5, #60]
	beq	.L8494
	movw	r1, #:lower16:.LC745
	ldr	r7, [r5, #488]
	movt	r1, #:upper16:.LC745
	bl	d_alloc_name
	subs	r6, r0, #0
	beq	.L8494
	mov	r0, r5
	bl	new_inode
	subs	r5, r0, #0
	beq	.L8476
	mov	r0, sp
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r5, #40]
	ldrh	r3, [r7, #196]
	mov	r1, r5
	ldr	ip, .L8495+8
	mov	r0, r6
	strh	r3, [r5]	@ movhi
	ldr	lr, [r7, #200]
	ldrd	r2, [sp]
	str	lr, [r5, #4]
	ldr	lr, [r7, #204]
	str	lr, [r5, #8]
	strd	r2, [r5, #52]
	strd	r2, [r5, #60]
	strd	r2, [r5, #68]
	str	ip, [r5, #200]
	str	r4, [r5, #328]
	bl	d_instantiate
	mov	r0, r6
	bl	d_rehash
	mov	r0, #0
	b	.L8469
.L8476:
	mov	r0, r6
	bl	dput
	b	.L8494
.L8496:
	.align	2
.L8495:
	.word	.LANCHOR1+3968
	.word	.LANCHOR5-2508
	.word	.LANCHOR5-2404
	.fnend
	.size	ffs_sb_fill, .-ffs_sb_fill
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_add_header, %function
rndis_qc_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #44
	mov	r0, r6
	str	lr, [sp, #12]
	bl	skb_realloc_headroom
	subs	r5, r0, #0
	beq	.L8498
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r4, r0
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	str	r2, [r4, #4]	@ unaligned
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L8498:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_add_header, .-rndis_qc_add_header
	.section	.rodata.str1.4
	.align	2
.LC746:
	.ascii	"ecm unbind\012\000"
	.align	2
.LC747:
	.ascii	"%s: bam_data_destroy: Freeing ports\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_unbind, %function
ecm_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8523
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L8519
.L8504:
	ldr	r0, .L8523+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8520
.L8505:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r0, [r5, #3684]
	bl	kfree
	ldr	r0, [r5, #3688]
	mov	r3, #0
	str	r3, [r5, #3684]
	cmp	r0, r3
	beq	.L8506
	bl	destroy_workqueue
.L8506:
	ldr	r3, [r6, #24]
	mov	r2, #0
	str	r2, [r5, #3688]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L8521
	cmp	r3, #2
	bhi	.L8522
.L8508:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #148]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #144]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	str	r2, [r3, #1468]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L8521:
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L8508
.L8522:
	ldr	r0, [r4, #8]
	bl	kfree
	b	.L8508
.L8520:
	movw	r1, #:lower16:.LC747
	ldr	r2, .L8523+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC747
	bl	__dynamic_pr_debug
	b	.L8505
.L8519:
	ldr	r1, [r6, #24]
	movw	r2, #:lower16:.LC746
	sub	r0, r3, #20
	movt	r2, #:upper16:.LC746
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8504
.L8524:
	.align	2
.L8523:
	.word	.LANCHOR4-532
	.word	.LANCHOR4-508
	.word	.LANCHOR5-2296
	.fnend
	.size	ecm_qc_unbind, .-ecm_qc_unbind
	.section	.rodata.str1.4
	.align	2
.LC748:
	.ascii	"%s: ecm resumed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_resume, %function
ecm_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L8537
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8535
.L8526:
	ldr	r0, .L8537+4
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3684]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L8536
.L8527:
	ldr	r0, [r4, #3688]
	add	r1, r5, #216
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work
.L8535:
	movw	r1, #:lower16:.LC748
	ldr	r2, .L8537+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC748
	bl	__dynamic_pr_debug
	b	.L8526
.L8536:
	ldr	r3, .L8537+12
	mov	r2, #0
	movw	r1, #:lower16:.LC647
	movt	r1, #:upper16:.LC647
	sub	r0, r0, #24
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8527
.L8538:
	.align	2
.L8537:
	.word	.LANCHOR4-484
	.word	.LANCHOR4-2064
	.word	.LANCHOR5-2276
	.word	.LANCHOR5-3260
	.fnend
	.size	ecm_qc_resume, .-ecm_qc_resume
	.section	.rodata.str1.4
	.align	2
.LC749:
	.ascii	"%s: ecm suspended\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_suspend, %function
ecm_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L8551
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8549
.L8540:
	ldr	r0, .L8551+4
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3684]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L8550
.L8541:
	ldr	r0, [r4, #3688]
	add	r1, r5, #200
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work
.L8549:
	movw	r1, #:lower16:.LC749
	ldr	r2, .L8551+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC749
	bl	__dynamic_pr_debug
	b	.L8540
.L8550:
	ldr	r3, .L8551+12
	mov	r2, #0
	movw	r1, #:lower16:.LC649
	movt	r1, #:upper16:.LC649
	sub	r0, r0, #32
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8541
.L8552:
	.align	2
.L8551:
	.word	.LANCHOR4-460
	.word	.LANCHOR4-2032
	.word	.LANCHOR5-2260
	.word	.LANCHOR5-3228
	.fnend
	.size	ecm_qc_suspend, .-ecm_qc_suspend
	.section	.rodata.str1.4
	.align	2
.LC750:
	.ascii	"%s: %s: rndis suspended\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_suspend, %function
rndis_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L8565
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8563
.L8554:
	ldr	r0, .L8565+4
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3684]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L8564
.L8555:
	ldr	r0, [r4, #3688]
	add	r1, r5, #200
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work
.L8563:
	ldr	r3, .L8565+8
	movw	r1, #:lower16:.LC750
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC750
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8554
.L8564:
	ldr	r3, .L8565+12
	mov	r2, #0
	movw	r1, #:lower16:.LC649
	movt	r1, #:upper16:.LC649
	sub	r0, r0, #32
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8555
.L8566:
	.align	2
.L8565:
	.word	.LANCHOR4-436
	.word	.LANCHOR4-2032
	.word	.LANCHOR5-2244
	.word	.LANCHOR5-3228
	.fnend
	.size	rndis_qc_suspend, .-rndis_qc_suspend
	.section	.rodata.str1.4
	.align	2
.LC751:
	.ascii	"%s: %s: rndis resumed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_resume, %function
rndis_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L8579
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8577
.L8568:
	ldr	r0, .L8579+4
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3684]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L8578
.L8569:
	ldr	r0, [r4, #3688]
	add	r1, r5, #216
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work
.L8577:
	ldr	r3, .L8579+8
	movw	r1, #:lower16:.LC751
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC751
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8568
.L8578:
	ldr	r3, .L8579+12
	mov	r2, #0
	movw	r1, #:lower16:.LC647
	movt	r1, #:upper16:.LC647
	sub	r0, r0, #24
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8569
.L8580:
	.align	2
.L8579:
	.word	.LANCHOR4-412
	.word	.LANCHOR4-2064
	.word	.LANCHOR5-2224
	.word	.LANCHOR5-3260
	.fnend
	.size	rndis_qc_resume, .-rndis_qc_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_unbind, %function
mbim_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8596
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r6, [r1, #136]	@ zero_extendqisi2
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L8593
.L8582:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	add	r6, r5, r6, lsl #2
	ldr	r0, [r6, #3684]
	bl	kfree
	ldr	r0, [r5, #3688]
	mov	r3, #0
	str	r3, [r6, #3684]
	cmp	r0, r3
	beq	.L8583
	bl	destroy_workqueue
.L8583:
	ldr	r3, [r7, #24]
	mov	r2, #0
	str	r2, [r5, #3688]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L8594
	cmp	r3, #2
	bhi	.L8595
.L8585:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #160]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #234]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8594:
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L8585
.L8595:
	ldr	r0, [r4, #8]
	bl	kfree
	b	.L8585
.L8593:
	movw	r1, #:lower16:.LC747
	ldr	r2, .L8596+4
	sub	r0, r3, #20
	movt	r1, #:upper16:.LC747
	bl	__dynamic_pr_debug
	b	.L8582
.L8597:
	.align	2
.L8596:
	.word	.LANCHOR4-508
	.word	.LANCHOR5-2296
	.fnend
	.size	mbim_unbind, .-mbim_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_in, %function
mtp_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2500]
	cmp	r2, #0
	movne	r3, #4
	add	r7, r4, #88
	mov	r0, r7
	strne	r3, [r4, #104]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	add	r2, r4, #116
	ldr	r1, [r4, #120]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #144
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
	.fnend
	.size	mtp_complete_in, .-mtp_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_intr, %function
mtp_complete_intr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2500]
	cmp	r2, #0
	movne	r3, #4
	add	r7, r4, #88
	mov	r0, r7
	strne	r3, [r4, #104]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #156
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
	.fnend
	.size	mtp_complete_intr, .-mtp_complete_intr
	.section	.rodata.str1.4
	.align	2
.LC752:
	.ascii	"<3>%s: Buffer size is too big %d, should be at most"
	.ascii	" %d\012\000"
	.align	2
.LC753:
	.ascii	"<3>%s: Previous reading is not finished yet\012\000"
	.align	2
.LC754:
	.ascii	"<3>%s: USB cable not connected. Wait.\012\000"
	.align	2
.LC755:
	.ascii	"%s: Received request packet\012\000"
	.align	2
.LC756:
	.ascii	"<3>%s: cpkt size too big:%d > buf size:%d\012\000"
	.align	2
.LC757:
	.ascii	"<3>%s: copy_to_user failed: err %d\012\000"
	.align	2
.LC758:
	.ascii	"<3>%s: Waiting failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_read, %function
mbim_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8674
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	ldr	r4, [r0, #124]
	str	r2, [sp, #4]
	ldrh	r2, [r3, #-2]
	str	r1, [sp, #8]
	tst	r2, #4
	bne	.L8660
.L8611:
	cmp	r4, #0
	beq	.L8661
	ldr	r3, [sp, #4]
	cmp	r3, #4096
	bhi	.L8662
	add	r3, r4, #100
	str	r3, [sp, #12]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L8615
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L8623
	mov	r3, sp
	bic	r5, r3, #8128
	bic	r5, r5, #63
.L8616:
	ldr	r3, [r4, #232]
	cmp	r3, #0
	beq	.L8663
.L8623:
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L8664
	add	r6, r4, #204
	add	r9, r4, #208
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #208]
	mov	r7, r0
	cmp	r5, r9
	bne	.L8625
	mov	r3, sp
	ldr	r10, .L8674+4
	bic	r8, r3, #8128
	bic	r8, r8, #63
	b	.L8633
.L8627:
	ldr	r0, .L8674+8
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L8665
.L8631:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #208]
	mov	r7, r0
	cmp	r9, r5
	bne	.L8625
.L8633:
	ldrh	r3, [r10, #-2]
	tst	r3, #4
	bne	.L8666
.L8626:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #208]
	cmp	r5, r3
	bne	.L8627
	ldr	r0, [r8, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #32
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r7, sp, #20
	add	fp, r4, #108
	str	r3, [sp, #20]
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L8630
.L8667:
	bl	schedule
.L8630:
	mov	r2, #1
	mov	r1, r7
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #208]
	cmp	r5, r3
	bne	.L8628
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8667
	mov	r1, r7
	mov	r0, fp
	bl	finish_wait
	movw	r0, #:lower16:.LC758
	ldr	r1, .L8674+12
	movt	r0, #:upper16:.LC758
	bl	printk
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L8610
.L8625:
	ldr	r3, [r5, #-4]
	sub	r8, r5, #8
	ldr	r2, [sp, #4]
	cmp	r3, r2
	bhi	.L8668
	ldr	r0, .L8674+16
	ldrh	r2, [r0, #-2]
	tst	r2, #4
	bne	.L8669
.L8635:
	mov	r0, r5
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	ldr	r2, [r5, #-4]
	bic	r3, r3, #8128
	ldr	r0, [sp, #8]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L8670
.L8636:
	cmp	r2, #0
	bne	.L8671
	ldr	r0, .L8674+20
	ldr	r4, [r5, #-4]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8672
.L8638:
	cmp	r8, #0
	beq	.L8610
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
.L8610:
	mov	r0, r4
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8666:
	movw	r1, #:lower16:.LC309
	ldr	r2, .L8674+12
	movt	r1, #:upper16:.LC309
	ldr	r0, .L8674+24
	bl	__dynamic_pr_debug
	b	.L8626
.L8665:
	movw	r1, #:lower16:.LC755
	ldr	r2, .L8674+12
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC755
	bl	__dynamic_pr_debug
	b	.L8631
.L8628:
	mov	r1, r7
	mov	r0, fp
	bl	finish_wait
	b	.L8627
.L8670:
	ldr	r1, [r5, #-8]
	bl	__copy_to_user
	mov	r2, r0
	b	.L8636
.L8660:
	movw	r1, #:lower16:.LC306
	ldr	r2, .L8674+12
	sub	r0, r3, #20
	movt	r1, #:upper16:.LC306
	ldr	r3, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L8611
.L8672:
	movw	r1, #:lower16:.LC314
	mov	r3, r4
	ldr	r2, .L8674+12
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC314
	bl	__dynamic_pr_debug
	ldr	r4, [r5, #-4]
	b	.L8638
.L8669:
	movw	r1, #:lower16:.LC312
	ldr	r2, .L8674+12
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC312
	bl	__dynamic_pr_debug
	b	.L8635
.L8615:
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC753
	ldr	r1, .L8674+12
	mvn	r4, #15
	movt	r0, #:upper16:.LC753
	bl	printk
	b	.L8610
.L8664:
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r4, #4
	b	.L8610
.L8668:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC756
	ldr	r1, .L8674+12
	mvn	r4, #11
	movt	r0, #:upper16:.LC756
	ldr	r2, [r5, #-4]
	ldr	r3, [sp, #4]
	bl	printk
	b	.L8610
.L8662:
	movw	r0, #:lower16:.LC752
	mov	r2, r3
	ldr	r1, .L8674+12
	movt	r0, #:upper16:.LC752
	mov	r3, #4096
	mvn	r4, #21
	bl	printk
	b	.L8610
.L8663:
	movw	r0, #:lower16:.LC754
	ldr	r1, .L8674+12
	movt	r0, #:upper16:.LC754
	bl	printk
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L8619
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L8619
	ldr	r0, [r5, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #32
	movt	r2, #:upper16:autoremove_wake_function
	add	r7, sp, #20
	str	r3, [sp, #20]
	add	r6, r4, #108
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
.L8622:
	mov	r2, #1
	mov	r1, r7
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L8673
.L8620:
	mov	r1, r7
	mov	r0, r6
	bl	finish_wait
.L8619:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L8616
	b	.L8623
.L8661:
	movw	r0, #:lower16:.LC562
	ldr	r1, .L8674+12
	mvn	r4, #18
	movt	r0, #:upper16:.LC562
	bl	printk
	b	.L8610
.L8671:
	movw	r0, #:lower16:.LC757
	ldr	r1, .L8674+12
	mvn	r4, #11
	movt	r0, #:upper16:.LC757
	bl	printk
	b	.L8638
.L8673:
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L8620
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L8621
	bl	schedule
	b	.L8622
.L8621:
	mov	r1, r7
	mov	r0, r6
	bl	finish_wait
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L8610
.L8675:
	.align	2
.L8674:
	.word	.LANCHOR4-388
	.word	.LANCHOR4-364
	.word	.LANCHOR4-342
	.word	.LANCHOR5-2208
	.word	.LANCHOR4-316
	.word	.LANCHOR4-292
	.word	.LANCHOR4-384
	.fnend
	.size	mbim_read, .-mbim_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_unbind, %function
f_audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	ldr	r0, [r1, #16]
	str	lr, [sp, #4]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	f_audio_unbind, .-f_audio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_put_char, %function
gs_put_char:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r0, #272]
	.pad #12
	sub	sp, sp, #12
	strb	r1, [sp, #7]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #92]
	mov	r1, r0
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r5
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r2, r3, r5
	mls	r3, r5, r2, r3
	cmp	r3, #0
	moveq	r5, r3
	beq	.L8679
	ldr	r2, [r4, #96]
	add	r5, r2, r5
	subs	r3, r5, r0
	bne	.L8680
	ldrb	r3, [sp, #7]	@ zero_extendqisi2
	mov	r5, #1
	strb	r3, [r2]
	ldr	r3, [r4, #96]
	add	r3, r3, r5
	str	r3, [r4, #104]
.L8679:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L8680:
	ldrb	r2, [sp, #7]	@ zero_extendqisi2
	cmp	r3, #1
	strb	r2, [r0]
	beq	.L8681
	ldr	r3, [r4, #104]
	mov	r5, #1
	add	r3, r3, r5
	str	r3, [r4, #104]
	b	.L8679
.L8681:
	ldr	r2, [r4, #96]
	mov	r5, r3
	str	r2, [r4, #104]
	b	.L8679
	.fnend
	.size	gs_put_char, .-gs_put_char
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_setup, %function
ffs_func_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #-28]
	ldr	r3, [r5, #92]
	cmp	r3, #2
	bne	.L8695
	ldrb	r3, [r1]	@ zero_extendqisi2
	mov	r8, r1
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L8686
	cmp	r3, #2
	mvnne	r4, #94
	bne	.L8684
	ldrh	r3, [r1, #4]	@ unaligned
	and	r3, r3, #15
	add	r0, r0, r3
	ldrb	r4, [r0, #-20]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L8697
.L8689:
	add	r6, r5, #116
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r5, #96]
	mov	r7, r0
	add	lr, r5, #100
	ldr	r3, [r8, #4]	@ unaligned
	ldr	r2, [r8]	@ unaligned
	ldrh	r0, [r5, #104]
	cmp	r1, #1
	strd	r2, [r5, #108]
	moveq	r3, #2
	strh	r4, [r5, #112]	@ movhi
	streq	r3, [r5, #96]
	cmp	r0, #0
	beq	.L8698
	add	r3, r5, #99
	mov	ip, lr
	add	r0, r3, r0
.L8694:
	ldrb	r1, [r3, #1]!	@ zero_extendqisi2
	mov	r2, ip
	cmp	r1, #4
	strbne	r1, [r2], #1
	movne	ip, r2
	cmp	r0, r3
	bne	.L8694
	sub	ip, ip, lr
	add	r3, ip, #1
	uxth	r0, ip
	uxth	r3, r3
.L8692:
	add	r0, r5, r0
	strh	r3, [r5, #104]	@ movhi
	mov	ip, #4
	mov	r1, #3
	mov	r2, #1
	mov	r4, #0
	strb	ip, [r0, #100]
	mov	r0, r6
	bl	__wake_up_locked
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L8684:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8686:
	ldrh	r2, [r5, #178]
	ldrh	r1, [r1, #4]	@ unaligned
	ldr	r4, [r0, #-4]
	cmp	r2, #0
	uxtb	r1, r1
	beq	.L8697
	mov	r3, r4
.L8690:
	mov	ip, r3
	ldrsh	r0, [r3], #2
	cmp	r0, #0
	blt	.L8688
	cmp	r0, r1
	beq	.L8705
.L8688:
	subs	r2, r2, #1
	bne	.L8690
.L8697:
	mvn	r4, #32
	b	.L8684
.L8705:
	sub	ip, ip, r4
	cmp	ip, #0
	asr	r4, ip, #1
	bge	.L8689
	b	.L8684
.L8698:
	mov	r3, #1
	b	.L8692
.L8695:
	mvn	r4, #18
	b	.L8684
	.fnend
	.size	ffs_func_setup, .-ffs_func_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_unbind_config, %function
ncm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #3968]
	cmp	r3, #0
	beq	.L8706
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #3968]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #3968]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #3968]
.L8706:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_function_unbind_config, .-ncm_function_unbind_config
	.section	.rodata.str1.4
	.align	2
.LC759:
	.ascii	"<3>%s() req->status f %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_complete_in, %function
conn_gadget_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r4, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #16]
	ldr	r2, [r1, #44]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r3, #2484]
	cmp	r2, #0
	bne	.L8722
.L8713:
	add	r7, r5, #88
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	add	r2, r5, #120
	ldr	r1, [r5, #124]
	add	r0, r4, #36
	bl	__list_add
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	r0, r5, #156
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__wake_up
.L8722:
	ldr	r0, .L8723
	mov	r3, #1
	ldr	r6, .L8723+4
	str	r3, [r5, #104]
	ldrh	r2, [r0, #-2]
	tst	r2, #4
	beq	.L8714
	movw	r1, #:lower16:.LC246
	str	r3, [sp]
	sub	r3, r6, #4
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC246
	mov	r2, r3
	bl	__dynamic_pr_debug
.L8714:
	movw	r0, #:lower16:.LC759
	sub	r1, r6, #4
	ldr	r2, [r4, #44]
	movt	r0, #:upper16:.LC759
	bl	printk
	b	.L8713
.L8724:
	.align	2
.L8723:
	.word	.LANCHOR4-268
	.word	.LANCHOR5-2192
	.fnend
	.size	conn_gadget_complete_in, .-conn_gadget_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_unbind_config, %function
rndis_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #3968]
	cmp	r3, #0
	beq	.L8725
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #3968]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #3968]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #3968]
.L8725:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_unbind_config, .-rndis_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_unbind_config, %function
ecm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #3968]
	cmp	r3, #0
	beq	.L8731
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #3968]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #3968]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #3968]
.L8731:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_unbind_config, .-ecm_function_unbind_config
	.section	.rodata.str1.4
	.align	2
.LC760:
	.ascii	"<6>DUN is unregisterd\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_unbind, %function
acm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	mov	r2, #1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	ip, #:upper16:.LANCHOR1
	mov	r3, #0
	str	r6, [sp, #8]
	add	r0, ip, #2192
	mov	r4, r1
	str	lr, [sp, #12]
	mov	r1, r2
	add	r0, r0, #12
	str	r2, [ip, #2200]
	str	r3, [ip, #3972]
	bl	__wake_up
	movw	r0, #:lower16:.LC760
	movt	r0, #:upper16:.LC760
	bl	printk
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4]
	bl	kfree
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
	.fnend
	.size	acm_unbind, .-acm_unbind
	.section	.rodata.str1.4
	.align	2
.LC761:
	.ascii	"%s: %s: size: %d\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rx_fill, %function
rx_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #28
	mov	r6, r0
	strd	r8, [sp, #16]
	add	r9, r0, #16
	strd	r10, [sp, #24]
	mov	r0, r9
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	str	r7, [sp, #16]
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r6, #28]
	mov	r4, r0
	cmp	r5, r7
	beq	.L8740
	movw	r3, #:lower16:.LANCHOR0
	mov	r8, #0
	movt	r3, #:upper16:.LANCHOR0
	str	r3, [sp, #20]
	b	.L8756
.L8742:
	ldr	r7, [r3, #92]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L8751
	ldmib	r6, {r2, ip}
	ldrh	r3, [r7, #20]
	ldr	r1, [r6, #72]
	ldr	r0, [r2, #100]
	ldr	r4, [ip, #356]
	cmp	r1, #0
	add	r4, r4, r0
	add	r4, r4, #33
	add	r4, r4, r3
	udiv	r0, r4, r3
	mls	r3, r3, r0, r4
	sub	r4, r4, r3
	ldrb	r3, [r2, #104]	@ zero_extendqisi2
	mulne	r4, r1, r4
	cmp	r3, #0
	beq	.L8746
	ldr	r3, [r2, #108]
	cmp	r4, r3
	movcc	r4, r3
.L8746:
	movw	r0, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, #-246]
	tst	r3, #4
	bne	.L8779
.L8747:
	mvn	r3, #0
	mov	r2, #0
	mov	r1, r10
	add	r0, r4, #2
	bl	__alloc_skb
	subs	r3, r0, #0
	beq	.L8748
	ldr	lr, [r3, #160]
	mov	r1, fp
	mov	r0, r7
	ldr	ip, [r3, #172]
	mov	r2, r10
	str	r3, [sp, #12]
	add	lr, lr, #2
	add	ip, ip, #2
	str	lr, [r3, #160]
	str	ip, [r3, #172]
	str	ip, [r5, #-36]
	str	r4, [r5, #-32]
	str	r3, [r5, #-4]
	ldr	ip, [r7, #8]
	ldr	r4, [ip, #16]
	blx	r4
	cmn	r0, #12
	mov	r4, r0
	ldr	r3, [sp, #12]
	beq	.L8780
	cmp	r0, #0
	bne	.L8781
.L8752:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #16]
	mov	r4, r0
	ldr	r5, [r6, #28]
	cmp	r5, r3
	beq	.L8740
.L8756:
	ldr	r3, [r6, #12]
	add	r8, r8, #1
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L8763
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L8763
	ldr	r3, [sp, #20]
	ldr	r3, [r3, #604]
	lsl	r3, r3, #1
	cmp	r3, r8
	blt	.L8740
.L8783:
	mov	r0, r5
	sub	fp, r5, #36
	bl	__list_del_entry
	mov	r1, r4
	mov	r0, r9
	str	r5, [r5]
	str	r5, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #4]
	mov	r1, r0
	cmp	r3, #0
	bne	.L8742
	mov	r0, r6
	add	r4, r6, #120
	bl	_raw_spin_unlock_irqrestore
.L8743:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r0, r5
	ldr	r1, [sp, #16]
	ldr	r2, [r6, #28]
	bl	__list_add
	mov	r1, r7
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r4
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	beq	.L8782
.L8739:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8763:
	mov	r3, #2
	cmp	r3, r8
	bge	.L8783
.L8740:
	mov	r1, r4
	mov	r0, r9
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L8780:
	add	r4, r6, #120
	mov	r0, #0
	str	r3, [sp, #12]
	mov	r1, r4
	bl	_test_and_set_bit
	cmp	r0, #0
	ldr	r3, [sp, #12]
	bne	.L8758
	add	r0, r6, #88
	str	r3, [sp, #12]
	bl	schedule_work
	subs	r2, r0, #0
	ldr	r3, [sp, #12]
	beq	.L8784
.L8758:
	mov	r0, r3
	bl	dev_kfree_skb_any
	b	.L8743
.L8748:
	add	r4, r6, #120
	mov	r1, r4
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L8743
	add	r0, r6, #88
	bl	schedule_work
	subs	r2, r0, #0
	bne	.L8743
	movw	r0, #:lower16:.LC653
	ldr	r1, [r6, #8]
	movt	r0, #:upper16:.LC653
	bl	printk
	b	.L8743
.L8779:
	ldr	r3, .L8785
	movw	r1, #:lower16:.LC761
	sub	r0, r0, #264
	movt	r1, #:upper16:.LC761
	str	r4, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8747
.L8781:
	mov	r0, r3
	bl	dev_kfree_skb_any
	cmp	r4, #0
	bge	.L8752
.L8751:
	add	r4, r6, #120
	b	.L8743
.L8782:
	add	r0, r6, #88
	bl	schedule_work
	subs	r2, r0, #0
	bne	.L8739
	ldr	r1, [r6, #8]
	movw	r0, #:lower16:.LC653
	movt	r0, #:upper16:.LC653
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L8784:
	movw	r0, #:lower16:.LC653
	ldr	r1, [r6, #8]
	movt	r0, #:upper16:.LC653
	bl	printk
	ldr	r3, [sp, #12]
	b	.L8758
.L8786:
	.align	2
.L8785:
	.word	.LANCHOR5-2172
	.fnend
	.size	rx_fill, .-rx_fill
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_work, %function
eth_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, #0
	add	r1, r4, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L8787
	ldr	r3, [r4, #-80]
	ldr	r3, [r3, #160]
	tst	r3, #1
	bne	.L8796
.L8787:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8796:
	sub	r5, r4, #88
	mov	r1, #208
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rx_fill
	.fnend
	.size	eth_work, .-eth_work
	.section	.rodata.str1.4
	.align	2
.LC762:
	.ascii	"<3>usb: %s  drop incase of NCM rx length %d\012\000"
	.align	2
.LC763:
	.ascii	"<3>usb: %s  Dont drop incase of NCM rx length %d\012"
	.ascii	"\000"
	.align	2
.LC764:
	.ascii	"<3>usb: %s Drop rx length %d\012\000"
	.align	2
.LC765:
	.ascii	"ncm\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	process_rx_w, %function
process_rx_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-100]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, #0
	strd	r6, [sp, #8]
	mov	r6, r0
	sub	r7, r0, #52
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LC765
	movw	r9, #:lower16:.LC764
	movt	r8, #:upper16:.LC765
	movt	r9, #:upper16:.LC764
	strd	r10, [sp, #24]
	ldr	r10, .L8824
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	b	.L8800
.L8808:
	cmp	r5, #0
	blt	.L8801
	ldr	fp, [r4, #80]
	movw	r3, #1500
	sub	r2, fp, #14
	cmp	r2, r3
	bhi	.L8821
.L8803:
	mov	r0, r4
	ldr	r1, [r6, #-96]
	bl	eth_type_trans
	mov	r3, r0
	mov	r0, r4
	strh	r3, [r4, #102]	@ movhi
	ldr	r2, [r6, #-96]
	ldr	r3, [r2, #232]
	add	r3, r3, #1
	str	r3, [r2, #232]
	ldr	r2, [r6, #-96]
	ldr	r1, [r4, #80]
	ldr	r3, [r2, #240]
	add	r3, r3, r1
	str	r3, [r2, #240]
	bl	netif_rx_ni
	mov	r5, r0
.L8800:
	mov	r0, r7
	bl	skb_dequeue
	subs	r4, r0, #0
	bne	.L8808
	ldr	r3, [r6, #-96]
	ldr	r3, [r3, #160]
	tst	r3, #1
	bne	.L8822
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8822:
	sub	r0, r6, #104
	mov	r1, #208
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rx_fill
.L8821:
	ldr	r3, [r6, #-100]
	mov	r1, r8
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	bne	.L8806
	cmp	fp, #13
	bhi	.L8823
.L8804:
	movw	r0, #:lower16:.LC762
	mov	r1, r10
	ldr	r2, [r4, #80]
	movt	r0, #:upper16:.LC762
	bl	printk
.L8806:
	ldr	r2, [r6, #-96]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
	ldr	r2, [r6, #-96]
	ldr	r3, [r2, #272]
	add	r3, r3, #1
	str	r3, [r2, #272]
	ldr	r2, [r4, #80]
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	b	.L8800
.L8801:
	ldr	r3, [r6, #-100]
	mov	r1, r8
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	beq	.L8804
	b	.L8806
.L8823:
	ldr	r3, [r6, #-96]
	ldr	r3, [r3, #356]
	add	r3, r3, #14
	cmp	fp, r3
	bhi	.L8804
	movw	r0, #:lower16:.LC763
	mov	r2, fp
	mov	r1, r10
	movt	r0, #:upper16:.LC763
	bl	printk
	b	.L8803
.L8825:
	.align	2
.L8824:
	.word	.LANCHOR5-2160
	.fnend
	.size	process_rx_w, .-process_rx_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_open, %function
eth_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r5, r0, #1152
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #1160]
	ldr	r3, [r3, #160]
	tst	r3, #4
	beq	.L8827
.L8828:
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L8830
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L8830
	blx	r3
.L8830:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8827:
	mov	r1, #208
	mov	r0, r5
	bl	rx_fill
	ldr	r3, [r4, #1160]
	mov	r0, #0
	str	r0, [r4, #1188]
	ldr	r6, [r3, #576]
	add	r1, r6, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L8828
	ldr	r0, [r6, #4]
	bl	__netif_schedule
	b	.L8828
	.fnend
	.size	eth_open, .-eth_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_disable, %function
ffs_func_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #-28]
	.pad #4
	sub	sp, sp, #4
	ldr	fp, [r4, #132]
	cmp	fp, #0
	beq	.L8842
	ldr	r3, [fp, #8]
	mov	r10, #1
	mov	r8, #0
	ldr	r5, [fp, #12]
	add	r0, r3, #24
	ldrh	r7, [r3, #180]
	ldr	r6, [r3, #208]
	add	r5, r5, #28
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	b	.L8846
.L8861:
	ldr	r3, [r3, #8]
	add	r5, r5, #28
	add	r6, r6, #56
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #-56]
	subs	r7, r7, #1
	str	r8, [r3]
	str	r8, [r6, #-16]
	beq	.L8845
.L8846:
	str	r10, [r6, #32]
	ldr	r3, [r5, #-28]
	subs	r0, r3, #0
	bne	.L8861
	subs	r7, r7, #1
	add	r5, r5, #28
	str	r3, [r6, #40]
	add	r6, r6, #56
	bne	.L8846
.L8845:
	ldr	r0, [fp, #8]
	mov	r1, r9
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r4, #132]
.L8842:
	ldr	r7, [r4, #92]
	cmp	r7, #2
	bne	.L8841
	mov	r3, #0
	add	r5, r4, #116
	mov	r0, r5
	str	r3, [r4, #132]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r6, r0
	add	lr, r4, #100
	ldrh	r2, [r4, #104]
	cmp	r3, #1
	streq	r7, [r4, #96]
	cmp	r2, #0
	beq	.L8852
	add	r1, r4, #99
	mov	r3, lr
	add	r2, r1, r2
.L8851:
	ldrb	ip, [r1, #1]!	@ zero_extendqisi2
	mov	r0, r3
	sub	r7, ip, #5
	cmp	r7, #1
	strbls	ip, [r0], #1
	movls	r3, r0
	cmp	r2, r1
	bne	.L8851
	sub	r3, r3, lr
	add	r2, r3, #1
	uxth	r3, r3
	uxth	r2, r2
.L8849:
	add	r3, r4, r3
	strh	r2, [r4, #104]	@ movhi
	mov	r1, #3
	mov	r0, r5
	mov	r2, #1
	strb	r1, [r3, #100]
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L8852:
	mov	r3, r2
	mov	r2, #1
	b	.L8849
.L8841:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_func_disable, .-ffs_func_disable
	.section	.rodata.str1.4
	.align	2
.LC766:
	.ascii	"unbind\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_unbind, %function
f_midi_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR4
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r0, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	ldr	r3, [r1, #20]
	ldrh	r2, [r0, #-222]
	tst	r2, #4
	ldr	r2, [r3, #24]
	bne	.L8876
.L8863:
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, #162]
	tst	r3, #4
	bne	.L8877
.L8864:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	mov	r3, #0
	str	r3, [r4, #96]
	cmp	r0, r3
	beq	.L8865
	bl	snd_card_free
.L8865:
	ldr	r0, [r4, #332]
	bl	kfree
	mov	r3, #0
	ldr	r0, [r4, #16]
	str	r3, [r4, #332]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L8876:
	ldr	r1, [r2]
	movw	r2, #:lower16:.LC766
	sub	r0, r0, #240
	movt	r2, #:upper16:.LC766
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #20]
	ldr	r2, [r3, #24]
	b	.L8863
.L8877:
	ldr	r1, [r2]
	movw	r2, #:lower16:.LC11
	add	r0, r0, #144
	movt	r2, #:upper16:.LC11
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8864
	.fnend
	.size	f_midi_unbind, .-f_midi_unbind
	.section	.rodata.str1.4
	.align	2
.LC767:
	.ascii	"bulk-in\000"
	.align	2
.LC768:
	.ascii	"%s set halt\012\000"
	.align	2
.LC769:
	.ascii	"usb_ep_set_halt -> %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	halt_bulk_in_endpoint, %function
halt_bulk_in_endpoint:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR4
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	ip, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	ldrh	r3, [ip, #-198]
	str	lr, [sp, #12]
	ldr	r5, [r0, #100]
	tst	r3, #4
	bne	.L8895
.L8879:
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	cmp	r0, #0
	bne	.L8884
	b	.L8894
.L8883:
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	mov	r1, #1
	bne	.L8886
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	cmp	r0, #0
	beq	.L8894
.L8884:
	cmn	r0, #11
	beq	.L8883
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC769
	mov	r2, r0
	movt	r1, #:upper16:.LC769
	add	r0, r3, #32
	bl	dev_warn
.L8894:
	mov	r0, #0
.L8878:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8886:
	mvn	r0, #3
	b	.L8878
.L8895:
	ldr	r1, [r4, #84]
	movw	r3, #:lower16:.LC767
	movw	r2, #:lower16:.LC768
	sub	r0, ip, #216
	movt	r3, #:upper16:.LC767
	movt	r2, #:upper16:.LC768
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8879
	.fnend
	.size	halt_bulk_in_endpoint, .-halt_bulk_in_endpoint
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_unbind, %function
ecm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-174]
	tst	r2, #4
	bne	.L8902
.L8897:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	str	r2, [r3, #1500]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L8902:
	ldr	r1, [r0, #24]
	movw	r2, #:lower16:.LC746
	sub	r0, r3, #192
	movt	r2, #:upper16:.LC746
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8897
	.fnend
	.size	ecm_unbind, .-ecm_unbind
	.section	.rodata.str1.4
	.align	2
.LC770:
	.ascii	"ncm unbind\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_unbind, %function
ncm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-150]
	tst	r2, #4
	bne	.L8909
.L8904:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	str	r2, [r3, #1540]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L8909:
	ldr	r1, [r0, #24]
	movw	r2, #:lower16:.LC770
	sub	r0, r3, #168
	movt	r2, #:upper16:.LC770
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8904
	.fnend
	.size	ncm_unbind, .-ncm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_start, %function
bam_data_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	bne	.L8911
	cmp	r3, #0
	beq	.L8910
	ldr	r0, .L8936
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L8934
.L8914:
	ldr	r0, [r3, #12]
	mov	r2, #32
	ldr	r1, [r4, #36]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	ldrne	r1, .L8936+4
	movwne	r0, #:lower16:.LC112
	bne	.L8933
.L8910:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L8911:
	cmp	r3, #0
	beq	.L8910
	ldr	r0, .L8936+8
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L8935
.L8916:
	ldr	r0, [r3, #8]
	mov	r2, #32
	ldr	r1, [r4, #40]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L8910
	ldr	r1, .L8936+12
	movw	r0, #:lower16:.LC112
.L8933:
	movt	r0, #:upper16:.LC112
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L8935:
	ldr	r3, .L8936+12
	movw	r1, #:lower16:.LC381
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC381
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #4]
	b	.L8916
.L8934:
	ldr	r3, .L8936+4
	movw	r1, #:lower16:.LC381
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC381
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #4]
	b	.L8914
.L8937:
	.align	2
.L8936:
	.word	.LANCHOR4-3664
	.word	.LANCHOR3+3060
	.word	.LANCHOR4-3648
	.word	.LANCHOR3+3088
	.fnend
	.size	bam_data_start, .-bam_data_start
	.section	.rodata.str1.4
	.align	2
.LC771:
	.ascii	"adb_write(%d)\012\000"
	.align	2
.LC772:
	.ascii	"adb_write dev->error\012\000"
	.align	2
.LC773:
	.ascii	"adb_write: xfer error %d\012\000"
	.align	2
.LC774:
	.ascii	"adb_write returning %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_write, %function
adb_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #3404]
	.pad #44
	sub	sp, sp, #44
	ldr	r4, [r0, #124]
	str	r1, [sp]
	str	r2, [sp, #8]
	cmp	r3, #0
	beq	.L8962
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	str	r3, [sp, #4]
	ldrh	r3, [r3, #-126]
	tst	r3, #4
	bne	.L8985
.L8940:
	add	r3, r4, #112
	str	r3, [sp, #12]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L8986
	mov	r3, sp
	ldr	r8, [sp, #8]
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L8961:
	cmp	r8, #0
	beq	.L8981
.L8993:
	add	r7, r4, #120
	add	r5, r4, #88
.L8946:
	ldr	r3, [r4, #104]
	mov	r0, r5
	cmp	r3, #0
	bne	.L8987
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	mov	r10, r0
	cmp	r7, r3
	mov	r0, r3
	sub	r6, r3, #36
	beq	.L8988
	bl	list_del
	mov	r1, r10
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L8944
.L8945:
	cmp	r8, #4096
	ldr	r1, [sp]
	movcc	r10, r8
	movcs	r10, #4096
	ldr	r3, [r9, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r10; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	ldr	r0, [r6]
	beq	.L8989
	mov	r1, r10
	mvn	r8, #13
	bl	__memzero
.L8954:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r2, r7
	mov	r7, r0
	ldr	r1, [r4, #124]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L8942:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L8990
.L8960:
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [sp, #4]
	ldrh	r3, [r3, #-54]
	tst	r3, #4
	bne	.L8991
.L8938:
	mov	r0, r8
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8988:
	mov	r1, r10
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L8944:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L8946
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #32
	movt	r2, #:upper16:autoremove_wake_function
	add	r10, r4, #140
	str	r3, [sp, #20]
	str	r1, [sp, #32]
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #36]
	b	.L8952
.L8947:
	bl	list_del
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L8949
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L8950
.L8992:
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L8951
	bl	schedule
.L8952:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r10
	bl	prepare_to_wait
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	mov	fp, r0
	cmp	r7, r3
	mov	r0, r3
	sub	r6, r3, #36
	bne	.L8947
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L8992
.L8950:
	add	r1, sp, #20
	mov	r0, r10
	bl	finish_wait
	cmp	r8, #0
	bne	.L8993
.L8981:
	ldr	r3, [r4, #104]
	ldr	r8, [sp, #8]
	cmp	r3, #0
	beq	.L8960
.L8990:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #128
	bl	__wake_up
	b	.L8960
.L8989:
	mov	r2, r10
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L8994
	str	r10, [r6, #4]
	ldr	r0, [r4, #92]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L8995
	ldr	r3, [sp]
	sub	r8, r8, r10
	add	r3, r3, r10
	str	r3, [sp]
	b	.L8961
.L8987:
	ldr	r3, [sp, #4]
	ldrh	r3, [r3, #-102]
	tst	r3, #4
	mvneq	r8, #4
	beq	.L8942
	movw	r1, #:lower16:.LC772
	ldr	r0, .L8997
	mvn	r8, #4
	movt	r1, #:upper16:.LC772
	bl	__dynamic_pr_debug
	b	.L8942
.L8985:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC771
	movt	r1, #:upper16:.LC771
	sub	r0, r3, #144
	bl	__dynamic_pr_debug
	b	.L8940
.L8991:
	movw	r1, #:lower16:.LC774
	mov	r2, r8
	ldr	r0, .L8997+4
	movt	r1, #:upper16:.LC774
	bl	__dynamic_pr_debug
	b	.L8938
.L8986:
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r8, #15
	b	.L8938
.L8951:
	add	r1, sp, #20
	mov	r0, r10
	mov	r8, #65024
	movt	r8, 65535
	bl	finish_wait
	b	.L8942
.L8995:
	ldr	r3, [sp, #4]
	ldrh	r3, [r3, #-78]
	tst	r3, #4
	bne	.L8996
.L8957:
	mov	r3, #1
	mvn	r8, #4
	str	r3, [r4, #104]
	b	.L8954
.L8962:
	mvn	r8, #18
	b	.L8938
.L8996:
	movw	r1, #:lower16:.LC773
	mov	r2, r0
	ldr	r0, .L8997+8
	movt	r1, #:upper16:.LC773
	bl	__dynamic_pr_debug
	b	.L8957
.L8949:
	add	r1, sp, #20
	mov	r0, r10
	bl	finish_wait
	b	.L8945
.L8994:
	mvn	r8, #13
	b	.L8954
.L8998:
	.align	2
.L8997:
	.word	.LANCHOR4-120
	.word	.LANCHOR4-72
	.word	.LANCHOR4-96
	.fnend
	.size	adb_write, .-adb_write
	.section	.rodata.str1.4
	.align	2
.LC775:
	.ascii	"<3>%s: %s: Card is NULL\000"
	.align	2
.LC776:
	.ascii	"%s: Initialize hw params\000"
	.align	2
.LC777:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_DROP failed: %d\012\000"
	.align	2
.LC778:
	.ascii	"<3>%s: Preparing playback failed: %d\012\000"
	.align	2
.LC779:
	.ascii	"%s: playback params: access %x, format %x, channels"
	.ascii	" %d, rate %d\012\000"
	.align	2
.LC780:
	.ascii	"<3>%s: Setting playback params failed: err %d\000"
	.align	2
.LC781:
	.ascii	"%s: Initialized playback params\000"
	.align	2
.LC782:
	.ascii	"<3>%s: Failed to allocate hw params\000"
	.align	2
.LC783:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_HW_PARAMS failed: %d\012\000"
	.align	2
.LC784:
	.ascii	"<3>%s: Preparing capture failed: %d\012\000"
	.align	2
.LC785:
	.ascii	"<3>%s: Failed to allocate sw params\000"
	.align	2
.LC786:
	.ascii	"%s: buffer_bytes = (%d,%d) omin=%d omax=%d int=%d e"
	.ascii	"mpty=%d\012\000"
	.align	2
.LC787:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_SW_PARAMS failed: %d\012\000"
	.align	2
.LC788:
	.ascii	"%s: capture params: access %x, format %x, channels "
	.ascii	"%d, rate %d\012\000"
	.align	2
.LC789:
	.ascii	"<3>%s: Setting capture params failed: err %d\000"
	.align	2
.LC790:
	.ascii	"<6>%s: Initialized capture params\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_open_streams, %function
gaudio_open_streams:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r9, #3976]
	.pad #24
	sub	sp, sp, #24
	cmp	r5, #0
	beq	.L9060
	movw	r8, #:lower16:.LANCHOR4
	movt	r8, #:upper16:.LANCHOR4
	ldrh	r3, [r8, #-30]
	tst	r3, #4
	bne	.L9061
.L9002:
	movw	r6, #:lower16:kmalloc_caches
	mov	r3, #3
	ldr	r10, [r5, #124]
	movt	r6, #:upper16:kmalloc_caches
	mov	r2, #8000
	ldr	r0, [r6, #40]
	str	r3, [r5, #128]
	mov	r3, #2
	str	r3, [r5, #132]
	str	r3, [r5, #136]
	cmp	r0, #0
	str	r2, [r5, #140]
	beq	.L9030
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L9062
.L9003:
	mov	r0, r4
	bl	_snd_pcm_hw_params_any
	mov	r0, r4
	ldr	r1, [r5, #128]
	bl	_snd_pcm_hw_param_set.constprop.0
	mov	r0, r4
	ldr	r1, [r5, #132]
	bl	_snd_pcm_hw_param_set.constprop.1
	mov	r0, r4
	ldr	r1, [r5, #136]
	bl	_snd_pcm_hw_param_set.constprop.2
	mov	r0, r4
	ldr	r1, [r5, #140]
	bl	_snd_pcm_hw_param_set.constprop.3
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r10
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L9063
.L9005:
	movw	r1, #16657
	mov	r2, r4
	movt	r1, 49756
	mov	r0, r10
	bl	snd_pcm_kernel_ioctl
	subs	r7, r0, #0
	blt	.L9064
	mov	r2, #0
	mov	r0, r10
	movw	r1, #16704
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L9065
.L9006:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L9032
	ldr	r3, [r4, #8]
	cmp	r3, #0
	movne	r2, #32
	bne	.L9007
.L9008:
	str	r3, [r5, #128]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L9034
	ldr	r3, [r4, #40]
	cmp	r3, #0
	movne	r2, #32
	bne	.L9009
.L9010:
	str	r3, [r5, #132]
	ldr	r3, [r4, #284]
	mov	r0, r4
	str	r3, [r5, #136]
	ldr	r3, [r4, #296]
	str	r3, [r5, #140]
	bl	kfree
	ldrh	r3, [r8, #-6]
	tst	r3, #4
	bne	.L9066
.L9011:
	ldrh	r3, [r8, #18]
	tst	r3, #4
	bne	.L9067
.L9012:
	ldr	r4, [r9, #3976]
	mov	ip, #3
	mov	r1, #2
	ldr	r0, [r6, #40]
	mov	r2, #1
	mov	r3, #8000
	ldr	r9, [r4, #152]
	cmp	r0, #0
	ldr	r10, [r9, #208]
	str	ip, [r4, #156]
	str	r1, [r4, #160]
	strd	r2, [r4, #164]
	beq	.L9036
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L9068
.L9013:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	mov	r0, r5
	ldr	r1, [r4, #156]
	bl	_snd_pcm_hw_param_set.constprop.0
	mov	r0, r5
	ldr	r1, [r4, #160]
	bl	_snd_pcm_hw_param_set.constprop.1
	mov	r0, r5
	ldr	r1, [r4, #164]
	bl	_snd_pcm_hw_param_set.constprop.2
	mov	r0, r5
	ldr	r1, [r4, #168]
	bl	_snd_pcm_hw_param_set.constprop.3
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r9
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L9069
.L9015:
	movw	r1, #16657
	mov	r2, r5
	movt	r1, 49756
	mov	r0, r9
	bl	snd_pcm_kernel_ioctl
	subs	r7, r0, #0
	blt	.L9070
	mov	r2, #0
	movw	r1, #16704
	mov	r0, r9
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L9071
.L9017:
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L9037
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r2, #32
	bne	.L9018
.L9019:
	str	r3, [r4, #156]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L9039
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r2, #32
	bne	.L9020
.L9021:
	str	r3, [r4, #160]
	ldr	r3, [r5, #284]
	str	r3, [r4, #164]
	ldr	r3, [r5, #296]
	str	r3, [r4, #168]
	ldr	r0, [r10, #44]
	bl	snd_pcm_format_physical_width
	mov	r3, r0
	mov	r0, r5
	str	r3, [r10, #80]
	bl	kfree
	ldr	r0, [r6, #28]
	cmp	r0, #0
	beq	.L9041
	mov	r2, #104
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L9072
	ldrh	r3, [r8, #42]
	tst	r3, #4
	bne	.L9073
.L9023:
	ldr	r3, [r5, #332]
	mov	r2, #1
	mov	ip, #0
	mvn	lr, #-2147483648
	movw	r1, #16659
	mov	r0, r9
	movt	r1, 49256
	str	ip, [r6]
	str	r2, [r6, #4]
	lsr	r3, r3, r2
	str	r3, [r6, #12]
	str	r3, [r6, #16]
	str	r2, [r6, #20]
	mov	r2, r6
	str	lr, [r6, #24]
	str	ip, [r6, #28]
	str	ip, [r6, #32]
	bl	snd_pcm_kernel_ioctl
	subs	r7, r0, #0
	blt	.L9074
	mov	r0, r6
	bl	kfree
	ldrh	r3, [r8, #66]
	tst	r3, #4
	beq	.L9025
	ldr	r5, .L9075
.L9026:
	ldr	r3, [r4, #156]
	movw	r1, #:lower16:.LC788
	sub	r2, r5, #4
	ldr	ip, [r4, #168]
	movt	r1, #:upper16:.LC788
	ldr	r0, .L9075+4
	str	ip, [sp, #8]
	ldr	ip, [r4, #164]
	str	ip, [sp, #4]
	ldr	ip, [r4, #160]
	str	ip, [sp]
	bl	__dynamic_pr_debug
.L9025:
	cmp	r7, #0
	beq	.L9027
.L9014:
	movw	r0, #:lower16:.LC789
	ldr	r1, .L9075+8
	mov	r2, r7
	movt	r0, #:upper16:.LC789
	bl	printk
	b	.L8999
.L9041:
	ldrh	r3, [r8, #42]
	mov	r6, #16
	tst	r3, #4
	beq	.L9023
.L9073:
	ldrb	ip, [r5, #388]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC786
	ldr	r3, [r5, #380]
	movt	r1, #:upper16:.LC786
	ldr	r2, .L9075+12
	ldr	r0, .L9075+16
	ubfx	ip, ip, #3, #1
	str	ip, [sp, #16]
	ldrb	ip, [r5, #388]	@ zero_extendqisi2
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #12]
	ldrb	ip, [r5, #388]	@ zero_extendqisi2
	ubfx	ip, ip, #1, #1
	str	ip, [sp, #8]
	ldrb	ip, [r5, #388]	@ zero_extendqisi2
	and	ip, ip, #1
	str	ip, [sp, #4]
	ldr	ip, [r5, #384]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L9023
.L9036:
	mov	r5, #16
	b	.L9013
.L9030:
	mov	r4, #16
	b	.L9003
.L9067:
	movw	r1, #:lower16:.LC781
	movw	r0, #:lower16:.LANCHOR4
	ldr	r2, .L9075+8
	movt	r1, #:upper16:.LC781
	movt	r0, #:upper16:.LANCHOR4
	bl	__dynamic_pr_debug
	b	.L9012
.L9061:
	movw	r1, #:lower16:.LC776
	ldr	r2, .L9075+8
	sub	r0, r8, #48
	movt	r1, #:upper16:.LC776
	bl	__dynamic_pr_debug
	ldr	r5, [r9, #3976]
	b	.L9002
.L9066:
	ldr	r3, [r5, #128]
	movw	r1, #:lower16:.LC779
	ldr	r0, [r5, #140]
	movt	r1, #:upper16:.LC779
	ldr	r2, .L9075+20
	str	r0, [sp, #8]
	ldr	ip, [r5, #136]
	ldr	r0, .L9075+24
	str	ip, [sp, #4]
	ldr	ip, [r5, #132]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L9011
.L9037:
	mov	r2, #0
.L9018:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/jprim/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L9019
.L9039:
	mov	r2, #0
.L9020:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/jprim/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L9021
.L9034:
	mov	r2, #0
.L9009:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/jprim/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L9010
.L9032:
	mov	r2, #0
.L9007:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/jprim/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L9008
.L9062:
	mvn	r7, #11
.L9004:
	movw	r0, #:lower16:.LC780
	ldr	r1, .L9075+8
	mov	r2, r7
	movt	r0, #:upper16:.LC780
	bl	printk
.L8999:
	mov	r0, r7
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9065:
	movw	r0, #:lower16:.LC778
	ldr	r1, .L9075+20
	movt	r0, #:upper16:.LC778
	bl	printk
	b	.L9006
.L9074:
	ldr	r5, .L9075
	movw	r0, #:lower16:.LC787
	mov	r2, r7
	movt	r0, #:upper16:.LC787
	sub	r1, r5, #4
	bl	printk
	mov	r0, r6
	bl	kfree
	ldrh	r3, [r8, #66]
	tst	r3, #4
	bne	.L9026
	b	.L9014
.L9027:
	movw	r0, #:lower16:.LC790
	ldr	r1, .L9075+8
	movt	r0, #:upper16:.LC790
	bl	printk
	b	.L8999
.L9060:
	ldr	r2, .L9075+8
	movw	r0, #:lower16:.LC775
	mvn	r7, #18
	movt	r0, #:upper16:.LC775
	mov	r1, r2
	bl	printk
	b	.L8999
.L9072:
	movw	r0, #:lower16:.LC785
	ldr	r1, .L9075+28
	mvn	r7, #11
	movt	r0, #:upper16:.LC785
	bl	printk
	b	.L9014
.L9069:
	movw	r0, #:lower16:.LC777
	ldr	r1, .L9075+28
	movt	r0, #:upper16:.LC777
	bl	printk
	b	.L9015
.L9068:
	movw	r0, #:lower16:.LC782
	ldr	r1, .L9075+28
	mvn	r7, #11
	movt	r0, #:upper16:.LC782
	bl	printk
	b	.L9014
.L9071:
	movw	r0, #:lower16:.LC784
	ldr	r1, .L9075+28
	movt	r0, #:upper16:.LC784
	bl	printk
	b	.L9017
.L9070:
	movw	r0, #:lower16:.LC783
	ldr	r1, .L9075+28
	mov	r2, r7
	movt	r0, #:upper16:.LC783
	bl	printk
	mov	r0, r5
	bl	kfree
	b	.L9014
.L9064:
	movw	r0, #:lower16:.LC783
	ldr	r1, .L9075+20
	mov	r2, r7
	movt	r0, #:upper16:.LC783
	bl	printk
	mov	r0, r4
	bl	kfree
	b	.L9004
.L9063:
	movw	r0, #:lower16:.LC777
	ldr	r1, .L9075+20
	movt	r0, #:upper16:.LC777
	bl	printk
	b	.L9005
.L9076:
	.align	2
.L9075:
	.word	.LANCHOR5-2096
	.word	.LANCHOR4+48
	.word	.LANCHOR5-2144
	.word	.LANCHOR5-2076
	.word	.LANCHOR4+24
	.word	.LANCHOR5-2124
	.word	.LANCHOR4-24
	.word	.LANCHOR5-2100
	.fnend
	.size	gaudio_open_streams, .-gaudio_open_streams
	.section	.rodata.str1.4
	.align	2
.LC791:
	.ascii	"<3>%s: %s: buffer alloc failed\012\000"
	.align	2
.LC792:
	.ascii	"<3>%s: Failed to init audio streams: err %d\000"
	.align	2
.LC793:
	.ascii	"<3>%s: copying failed\000"
	.align	2
.LC794:
	.ascii	"%s: frames = %d, count = %d\000"
	.align	2
.LC795:
	.ascii	"<3>%s: Capture error: %d\012\000"
	.align	2
.LC796:
	.ascii	"%s: Queue capture packet: size %d\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_capture_work, %function
f_audio_capture_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, r0
	movt	r5, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r0, [r5, #1180]
	bl	f_audio_buffer_alloc
	subs	fp, r0, #0
	beq	.L9092
	ldr	r3, [fp]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r8, [r4, #-68]
	ldr	r2, [r5, #1180]
	str	r3, [sp, #12]
	ldrb	r3, [r6, #2216]	@ zero_extendqisi2
	ldr	r10, [r8, #208]
	str	r2, [sp, #16]
	cmp	r3, #0
	beq	.L9093
.L9079:
	mov	r3, sp
	movw	r6, #:lower16:.LANCHOR4
	bic	r7, r3, #8128
	ldr	r3, [sp, #16]
	movw	r9, #:lower16:.LC794
	movt	r9, #:upper16:.LC794
	movt	r6, #:upper16:.LANCHOR4
	bic	r7, r7, #63
	str	r9, [sp, #28]
	lsl	r3, r3, #3
	str	r3, [sp, #24]
.L9086:
	ldr	r3, [r10, #160]
	mov	r2, #146
	movw	r1, #16704
	mov	r0, r8
	ldr	r3, [r3]
	cmp	r3, #7
	mvn	r2, r2, lsr r3
	bhi	.L9082
	ands	r2, r2, #1
	bne	.L9082
	bl	snd_pcm_kernel_ioctl
	cmp	r0, #0
	blt	.L9094
.L9082:
	ldrh	ip, [r6, #90]
	mov	r2, #0
	mov	r0, r8
	ldr	r3, [r10, #80]
	ldr	r1, [sp, #12]
	tst	ip, #4
	ldr	ip, [r7, #8]
	str	r2, [r7, #8]
	ldr	r2, [sp, #24]
	str	ip, [sp, #20]
	udiv	r9, r2, r3
	bne	.L9095
	mov	r2, r9
	bl	snd_pcm_lib_read
	cmp	r9, r0
	mov	r2, r0
	bne	.L9084
.L9085:
	mov	r3, sp
	ldr	r2, [sp, #20]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	str	r2, [r3, #8]
.L9081:
	ldrh	r3, [r6, #114]
	tst	r3, #4
	bne	.L9096
.L9087:
	sub	r5, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	add	r2, r4, #16
	ldr	r1, [r4, #20]
	mov	r4, r0
	add	r0, fp, #8
	bl	__list_add
	mov	r1, r4
	mov	r0, r5
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L9093:
	bl	gaudio_open_streams
	subs	r2, r0, #0
	moveq	r3, #1
	strbeq	r3, [r6, #2216]
	beq	.L9079
	movw	r0, #:lower16:.LC792
	ldr	r1, .L9097
	movw	r6, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LC792
	movt	r6, #:upper16:.LANCHOR4
	bl	printk
	b	.L9081
.L9096:
	movw	r1, #:lower16:.LC796
	ldr	r2, .L9097+4
	movt	r1, #:upper16:.LC796
	ldr	r0, .L9097+8
	ldr	r3, [r5, #1180]
	bl	__dynamic_pr_debug
	b	.L9087
.L9095:
	ldr	r3, [sp, #16]
	ldr	r2, .L9097
	ldr	r0, .L9097+12
	ldr	r1, [sp, #28]
	str	r3, [sp]
	mov	r3, r9
	bl	__dynamic_pr_debug
	mov	r2, r9
	mov	r0, r8
	ldr	r1, [sp, #12]
	bl	snd_pcm_lib_read
	cmp	r9, r0
	mov	r2, r0
	beq	.L9085
.L9084:
	ldr	r3, .L9097+16
	movw	r0, #:lower16:.LC795
	movt	r0, #:upper16:.LC795
	sub	r1, r3, #4
	bl	printk
	ldr	r3, [sp, #20]
	str	r3, [r7, #8]
	b	.L9086
.L9092:
	ldr	r2, .L9097+4
	movw	r0, #:lower16:.LC791
	movt	r0, #:upper16:.LC791
	mov	r1, r2
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L9094:
	ldr	r7, .L9097+16
	mov	r2, r0
	movw	r0, #:lower16:.LC784
	movt	r0, #:upper16:.LC784
	sub	r1, r7, #4
	bl	printk
	movw	r0, #:lower16:.LC793
	sub	r1, r7, #28
	movt	r0, #:upper16:.LC793
	bl	printk
	b	.L9081
.L9098:
	.align	2
.L9097:
	.word	.LANCHOR5-2036
	.word	.LANCHOR5-2060
	.word	.LANCHOR4+96
	.word	.LANCHOR4+72
	.word	.LANCHOR5-2032
	.fnend
	.size	f_audio_capture_work, .-f_audio_capture_work
	.section	.rodata.str1.4
	.align	2
.LC797:
	.ascii	"<3>%s: playback_buf is empty\000"
	.align	2
.LC798:
	.ascii	"%s: play_buf->actual = %d\000"
	.align	2
.LC799:
	.ascii	"<3>%s: Buffer is empty, no data to play\000"
	.align	2
.LC800:
	.ascii	"<3>%s: Failed to init audio streams\000"
	.align	2
.LC801:
	.ascii	"<3>%s: SND failure - runtime->frame_bits == 0\000"
	.align	2
.LC802:
	.ascii	"%s: runtime->frame_bits = %d, count = %d, frames = "
	.ascii	"%d\000"
	.align	2
.LC803:
	.ascii	"<3>%s: snd_pcm_lib_write failed with err %d\012\000"
	.align	2
.LC804:
	.ascii	"%s: Done. Sent %d frames\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_playback_work, %function
f_audio_playback_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #8
	mov	r0, r8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	bl	_raw_spin_lock_irqsave
	mov	r3, r5
	mov	r7, r0
	ldr	r4, [r3, #16]!
	cmp	r4, r3
	beq	.L9120
	mov	r0, r4
	movw	r6, #:lower16:.LANCHOR4
	bl	list_del
	sub	r3, r4, #8
	mov	r1, r7
	mov	r0, r8
	movt	r6, #:upper16:.LANCHOR4
	str	r3, [sp, #24]
	bl	_raw_spin_unlock_irqrestore
	ldrh	r3, [r6, #138]
	tst	r3, #4
	bne	.L9121
.L9101:
	ldrd	r2, [r4, #-8]
	ldr	r9, [r5, #-64]
	cmp	r3, #0
	strd	r2, [sp, #12]
	ldr	r10, [r9, #208]
	beq	.L9122
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldrb	r3, [r7, #2216]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9123
.L9104:
	mov	r3, sp
	movw	fp, #:lower16:.LC802
	bic	r7, r3, #8128
	ldr	r3, [sp, #16]
	movt	fp, #:upper16:.LC802
	bic	r7, r7, #63
	lsl	r3, r3, #3
	str	r3, [sp, #28]
.L9111:
	ldr	r3, [r10, #160]
	mov	r2, #146
	movw	r1, #16704
	mov	r0, r9
	ldr	r3, [r3]
	cmp	r3, #7
	mvn	r2, r2, lsr r3
	bls	.L9124
.L9106:
	ldr	r3, [r10, #80]
	ldr	r1, [sp, #12]
	cmp	r3, #0
	beq	.L9125
	ldrh	r2, [r6, #162]
	ldr	r0, [sp, #28]
	tst	r2, #4
	ubfx	r2, r2, #2, #1
	udiv	r8, r0, r3
	bne	.L9126
	ldr	r3, [r7, #8]
	ldr	r0, [r5, #-64]
	str	r2, [r7, #8]
	mov	r2, r8
	str	r3, [sp, #20]
	bl	snd_pcm_lib_write
	cmp	r8, r0
	mov	r2, r0
	bne	.L9109
.L9110:
	ldrh	r1, [r6, #186]
	mov	r3, r2
	mov	r2, sp
	ldr	r0, [sp, #20]
	bic	r2, r2, #8128
	bic	r2, r2, #63
	tst	r1, #4
	str	r0, [r2, #8]
	bne	.L9127
.L9103:
	ldr	r5, [sp, #24]
	cmp	r5, #0
	beq	.L9099
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #-8]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree
.L9124:
	ands	r2, r2, #1
	bne	.L9106
	bl	snd_pcm_kernel_ioctl
	cmp	r0, #0
	bge	.L9106
	ldr	r5, .L9128
	mov	r2, r0
	movw	r0, #:lower16:.LC778
	movt	r0, #:upper16:.LC778
	sub	r1, r5, #12
	bl	printk
	movw	r0, #:lower16:.LC793
	sub	r1, r5, #36
	movt	r0, #:upper16:.LC793
	bl	printk
	b	.L9103
.L9099:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9123:
	bl	gaudio_open_streams
	cmp	r0, #0
	moveq	r3, #1
	strbeq	r3, [r7, #2216]
	beq	.L9104
	movw	r0, #:lower16:.LC800
	ldr	r1, .L9128+4
	movt	r0, #:upper16:.LC800
	bl	printk
	b	.L9103
.L9121:
	movw	r1, #:lower16:.LC798
	ldr	r2, .L9128+8
	add	r0, r6, #120
	movt	r1, #:upper16:.LC798
	ldr	r3, [r4, #-4]
	bl	__dynamic_pr_debug
	b	.L9101
.L9126:
	ldr	ip, [sp, #16]
	mov	r1, fp
	ldr	r2, .L9128+4
	ldr	r0, .L9128+12
	str	ip, [sp]
	str	r8, [sp, #4]
	bl	__dynamic_pr_debug
	ldr	ip, [r7, #8]
	mov	r3, #0
	mov	r2, r8
	ldr	r0, [r5, #-64]
	str	r3, [r7, #8]
	ldr	r1, [sp, #12]
	str	ip, [sp, #20]
	bl	snd_pcm_lib_write
	cmp	r8, r0
	mov	r2, r0
	beq	.L9110
.L9109:
	ldr	r3, .L9128
	movw	r0, #:lower16:.LC803
	movt	r0, #:upper16:.LC803
	sub	r1, r3, #12
	bl	printk
	ldr	r3, [sp, #20]
	str	r3, [r7, #8]
	b	.L9111
.L9127:
	movw	r1, #:lower16:.LC804
	ldr	r2, .L9128+4
	movt	r1, #:upper16:.LC804
	ldr	r0, .L9128+16
	bl	__dynamic_pr_debug
	b	.L9103
.L9125:
	movw	r0, #:lower16:.LC801
	ldr	r1, .L9128+4
	movt	r0, #:upper16:.LC801
	bl	printk
	b	.L9103
.L9120:
	movw	r0, #:lower16:.LC797
	ldr	r1, .L9128+8
	movt	r0, #:upper16:.LC797
	bl	printk
	mov	r1, r7
	mov	r0, r8
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L9122:
	movw	r0, #:lower16:.LC799
	ldr	r1, .L9128+4
	movt	r0, #:upper16:.LC799
	bl	printk
	b	.L9103
.L9129:
	.align	2
.L9128:
	.word	.LANCHOR5-1984
	.word	.LANCHOR5-1996
	.word	.LANCHOR5-2020
	.word	.LANCHOR4+144
	.word	.LANCHOR4+168
	.fnend
	.size	f_audio_playback_work, .-f_audio_playback_work
	.section	.rodata.str1.4
	.align	2
.LC805:
	.ascii	"rndis0\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_unbind_config, %function
rndis_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC805
	movw	r0, #:lower16:init_net
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r1, #:upper16:.LC805
	movt	r0, #:upper16:init_net
	str	lr, [sp, #4]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L9130
	.syntax divided
@ 17 "/home/jprim/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/jprim/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	free_netdev
.L9130:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_function_unbind_config, .-rndis_qc_function_unbind_config
	.section	.rodata.str1.4
	.align	2
.LC806:
	.ascii	"driver/rndis-%03d\000"
	.section	.rodata.cst4
	.align	2
.LC807:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_unbind, %function
rndis_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #:lower16:.LC807
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movt	r3, #:upper16:.LC807
	movt	r0, #:upper16:.LANCHOR4
	str	lr, [sp, #8]
	.pad #28
	sub	sp, sp, #28
	mov	r4, r1
	ldr	r5, [r1, #164]
	ldr	r3, [r3]
	str	r3, [sp, #20]
	mov	r3,#0
	ldrh	r3, [r0, #210]
	tst	r3, #4
	bne	.L9147
.L9134:
	cmp	r5, #0
	movwgt	r3, #:lower16:.LANCHOR1
	movtgt	r3, #:upper16:.LANCHOR1
	bgt	.L9135
	rsb	r5, r5, r5, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r5, r3, r5, lsl #2
	mov	r2, #0
	strb	r2, [r5, #3697]
.L9135:
	ldrb	r2, [r3, #3980]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L9148
.L9136:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #172]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r4
	bl	kfree
	movw	r3, #:lower16:.LC807
	movt	r3, #:upper16:.LC807
	ldr	r2, [r3]
	ldr	r3, [sp, #20]
	eors	r2, r3, r2
	bne	.L9149
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L9148:
	mov	r5, #0
	movw	r1, #:lower16:.LC806
	mov	r2, r5
	movt	r1, #:upper16:.LC806
	mov	r0, sp
	strb	r5, [r3, #3980]
	bl	sprintf
	mov	r0, sp
	mov	r1, r5
	bl	remove_proc_entry
	b	.L9136
.L9147:
	movw	r1, #:lower16:.LC285
	ldr	r2, .L9150
	add	r0, r0, #192
	movt	r1, #:upper16:.LC285
	bl	__dynamic_pr_debug
	b	.L9134
.L9149:
	bl	__stack_chk_fail
.L9151:
	.align	2
.L9150:
	.word	.LANCHOR5-1976
	.fnend
	.size	rndis_unbind, .-rndis_unbind
	.section	.rodata.str1.4
	.align	2
.LC808:
	.ascii	"<3>%s() cmd is not proper ioctl type %c\012\000"
	.align	2
.LC809:
	.ascii	"<3>%s() cmd is not proper ioctl number %d\012\000"
	.align	2
.LC810:
	.ascii	"<3>%s() cmd has no buffer\012\000"
	.align	2
.LC811:
	.ascii	"<3>%s() cmd has invalid direction\012\000"
	.align	2
.LC812:
	.ascii	"<3>%s() SUPPORT_LIST copy_to_user f %d\012\000"
	.align	2
.LC813:
	.ascii	"<3>%s() close called\012\000"
	.align	2
.LC814:
	.ascii	"<3>%s() copy_to_user f %d\012\000"
	.align	2
.LC815:
	.ascii	"<3>%s() WAIT_NOTIFY copy_to_user f %d\012\000"
	.align	2
.LC816:
	.ascii	"<3>%s() GET_STATUS copy_to_user f %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_ioctl, %function
conn_gadget_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r3, #29442
	ubfx	ip, r1, #8, #8
	strd	r6, [sp, #8]
	adr	r7, .L9202
	ldrd	r6, [r7]
	movt	r3, 32772
	mov	r0, #0
	cmp	ip, #115
	str	lr, [sp, #16]
	.pad #44
	sub	sp, sp, #44
	strd	r6, [sp]
	str	r3, [sp, #8]
	str	r0, [sp, #12]
	bne	.L9192
	mov	r4, r2
	uxtb	r2, r1
	cmp	r2, #2
	bhi	.L9193
	ubfx	r2, r1, #16, #14
	cmp	r2, #0
	beq	.L9194
	cmp	r1, #0
	bge	.L9195
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r5, [r2, #2484]
	cmp	r5, #0
	beq	.L9196
	movw	r2, #29441
	movt	r2, 32772
	cmp	r1, r2
	beq	.L9159
	cmp	r1, r3
	beq	.L9160
	mov	r3, #29440
	movt	r3, 32772
	cmp	r1, r3
	movne	r2, r0
	beq	.L9197
.L9152:
	mov	r0, r2
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L9159:
	ldr	r2, [r5, #100]
	ldr	r3, [r5, #212]
	cmp	r3, r2
	beq	.L9162
.L9191:
	cmp	r2, #0
	mov	r3, sp
	str	r2, [r5, #212]
	bic	r3, r3, #8128
	movne	r2, #1
	moveq	r2, #2
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #20]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r4, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r2, #4
	beq	.L9198
.L9169:
	movw	r0, #:lower16:.LC814
	ldr	r1, .L9202+8
	movt	r0, #:upper16:.LC814
	bl	printk
	movw	r0, #:lower16:.LC815
	mvn	r2, #13
	ldr	r1, .L9202+12
	movt	r0, #:upper16:.LC815
	bl	printk
	mvn	r2, #13
	b	.L9152
.L9197:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r4, #16; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r2, #16
	beq	.L9199
.L9161:
	movw	r0, #:lower16:.LC812
	ldr	r1, .L9202+12
	movt	r0, #:upper16:.LC812
	bl	printk
	mvn	r2, #13
	b	.L9152
.L9199:
	mov	r2, #16
	mov	r0, r4
	mov	r1, sp
	bl	__copy_to_user
	subs	r2, r0, #0
	beq	.L9152
	b	.L9161
.L9160:
	ldr	r2, [r5, #100]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	cmp	r2, #0
	movne	r2, #1
	moveq	r2, #2
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r4, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	str	r2, [sp, #20]
	movne	r2, #4
	beq	.L9200
.L9172:
	movw	r0, #:lower16:.LC814
	ldr	r1, .L9202+8
	movt	r0, #:upper16:.LC814
	bl	printk
	movw	r0, #:lower16:.LC816
	mvn	r2, #13
	ldr	r1, .L9202+12
	movt	r0, #:upper16:.LC816
	bl	printk
	mvn	r2, #13
	b	.L9152
.L9200:
	mov	r2, #4
	mov	r0, r4
	add	r1, sp, #20
	bl	__copy_to_user
	subs	r2, r0, #0
	beq	.L9152
	b	.L9172
.L9162:
	ldr	r3, [r5, #216]
	cmp	r3, #0
	bne	.L9174
	mov	r2, sp
	str	r3, [sp, #20]
	add	r1, sp, #32
	bic	r6, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r6, r6, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r6, #12]
	add	r7, r5, #200
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L9167
.L9201:
	bl	schedule
.L9167:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r5, #100]
	ldr	r2, [r5, #212]
	cmp	r2, r3
	bne	.L9165
	ldr	r3, [r5, #216]
	cmp	r3, #0
	bne	.L9166
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L9201
.L9165:
	add	r1, sp, #20
	mov	r0, r7
	bl	finish_wait
	ldr	r2, [r5, #100]
	b	.L9191
.L9198:
	mov	r2, #4
	mov	r0, r4
	add	r1, sp, #20
	bl	__copy_to_user
	subs	r2, r0, #0
	beq	.L9152
	b	.L9169
.L9166:
	add	r1, sp, #20
	mov	r0, r7
	bl	finish_wait
	ldr	r3, [r5, #100]
	str	r3, [r5, #212]
.L9174:
	movw	r0, #:lower16:.LC813
	ldr	r1, .L9202+12
	movt	r0, #:upper16:.LC813
	bl	printk
	mvn	r2, #3
	b	.L9152
.L9196:
	movw	r0, #:lower16:.LC448
	ldr	r1, .L9202+12
	movt	r0, #:upper16:.LC448
	bl	printk
	mvn	r2, #18
	b	.L9152
.L9195:
	movw	r0, #:lower16:.LC811
	ldr	r1, .L9202+12
	movt	r0, #:upper16:.LC811
	bl	printk
	mvn	r2, #21
	b	.L9152
.L9194:
	movw	r0, #:lower16:.LC810
	ldr	r1, .L9202+12
	movt	r0, #:upper16:.LC810
	bl	printk
	mvn	r2, #21
	b	.L9152
.L9193:
	movw	r0, #:lower16:.LC809
	ldr	r1, .L9202+12
	movt	r0, #:upper16:.LC809
	bl	printk
	mvn	r2, #24
	b	.L9152
.L9192:
	movw	r0, #:lower16:.LC808
	mov	r2, ip
	ldr	r1, .L9202+12
	movt	r0, #:upper16:.LC808
	bl	printk
	mvn	r2, #21
	b	.L9152
.L9203:
	.align	3
.L9202:
	.word	-2147192064
	.word	-2147192063
	.word	.LANCHOR5-1936
	.word	.LANCHOR5-1956
	.fnend
	.size	conn_gadget_ioctl, .-conn_gadget_ioctl
	.section	.rodata.str1.4
	.align	2
.LC817:
	.ascii	"eject attempt prevented\012\000"
	.align	2
.LC818:
	.ascii	"close backing file\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_file, %function
fsg_store_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r3
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldrb	r3, [r4, #-24]	@ zero_extendqisi2
	mov	r6, r0
	tst	r3, #16
	beq	.L9205
	ldr	r3, [r4, #-48]
	cmp	r3, #0
	bne	.L9233
.L9205:
	cmp	r5, #0
	beq	.L9207
	sub	r3, r5, #1
	mov	r0, r6
	ldrb	r2, [r7, r3]	@ zero_extendqisi2
	cmp	r2, #10
	moveq	r2, #0
	strbeq	r2, [r7, r3]
	bl	down_write
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L9219
	movw	r1, #:lower16:.LANCHOR4
	movw	r3, #258
	movt	r1, #:upper16:.LANCHOR4
	ldrh	r3, [r1, r3]
	tst	r3, #4
	ubfx	r8, r3, #2, #1
	bne	.L9234
	bl	fput
	mov	r3, #14848
	str	r8, [r4, #-48]
	movt	r3, 2
	str	r3, [r4, #-12]
.L9219:
	ldrb	r3, [r7]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L9235
.L9210:
	mov	r0, r6
	bl	up_write
.L9209:
	mov	r7, r5
.L9204:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9207:
	mov	r0, r6
	bl	down_write
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L9210
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #258
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L9236
.L9232:
	bl	fput
	mov	r3, #14848
	str	r5, [r4, #-48]
	movt	r3, 2
	str	r3, [r4, #-12]
	b	.L9210
.L9235:
	mov	r1, r7
	sub	r0, r4, #48
	bl	fsg_lun_open
	subs	r7, r0, #0
	bne	.L9211
	mov	r3, #10240
	mov	r0, r6
	movt	r3, 6
	str	r3, [r4, #-12]
	bl	up_write
	b	.L9209
.L9211:
	mov	r0, r6
	bl	up_write
	cmp	r7, #0
	blt	.L9204
	b	.L9209
.L9233:
	movw	r0, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, #234]
	tst	r3, #4
	mvneq	r7, #15
	beq	.L9204
	movw	r2, #:lower16:.LC817
	mov	r1, r4
	add	r0, r0, #216
	movt	r2, #:upper16:.LC817
	mvn	r7, #15
	bl	__dynamic_dev_dbg
	b	.L9204
.L9236:
	movw	r2, #:lower16:.LC818
	add	r0, r3, #240
	movt	r2, #:upper16:.LC818
	mov	r1, r4
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #-48]
	b	.L9232
.L9234:
	movw	r2, #:lower16:.LC818
	add	r0, r1, #240
	movt	r2, #:upper16:.LC818
	mov	r1, r4
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #-48]
	bl	fput
	mov	r3, #14848
	mov	r2, #0
	movt	r3, 2
	str	r2, [r4, #-48]
	str	r3, [r4, #-12]
	b	.L9219
	.fnend
	.size	fsg_store_file, .-fsg_store_file
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_set_alt, %function
ffs_func_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmn	r2, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r10, [r0, #-28]
	str	r0, [sp]
	beq	.L9238
	mov	r3, r0
	ldrh	r0, [r10, #178]
	ldr	ip, [r3, #-4]
	cmp	r0, #0
	beq	.L9262
	uxtb	r2, r1
	mov	r3, ip
.L9241:
	mov	r4, r3
	ldrsh	r1, [r3], #2
	cmp	r1, #0
	blt	.L9240
	cmp	r1, r2
	beq	.L9282
.L9240:
	subs	r0, r0, #1
	bne	.L9241
.L9262:
	mvn	r4, #32
	b	.L9237
.L9282:
	subs	r4, r4, ip
	asrmi	r4, r4, #1
	bmi	.L9237
.L9238:
	ldr	r8, [r10, #132]
	cmp	r8, #0
	beq	.L9242
	ldr	r3, [r8, #8]
	mov	r7, #1
	mov	r5, #0
	ldr	r4, [r8, #12]
	add	r0, r3, #24
	ldrh	r9, [r3, #180]
	ldr	fp, [r3, #208]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	b	.L9246
.L9283:
	ldr	r3, [r3, #8]
	add	r4, r4, #28
	add	fp, fp, #56
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-56]
	subs	r9, r9, #1
	str	r5, [r3]
	str	r5, [fp, #-16]
	beq	.L9245
.L9246:
	str	r7, [fp, #32]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	bne	.L9283
	subs	r9, r9, #1
	add	r4, r4, #28
	str	r3, [fp, #40]
	add	fp, fp, #56
	bne	.L9246
.L9245:
	ldr	r0, [r8, #8]
	ldr	r1, [sp, #4]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r10, #132]
.L9242:
	ldr	r4, [r10, #92]
	cmp	r4, #2
	bne	.L9263
	cmn	r6, #1
	beq	.L9284
	ldr	r2, [sp]
	sub	r3, r2, #36
	str	r3, [r10, #132]
	ldr	fp, [r2, #-28]
	ldr	r5, [r2, #-24]
	ldr	r6, [fp, #208]
	add	r0, fp, #24
	ldrh	r9, [fp, #180]
	add	r5, r5, #28
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	add	r6, r6, #20
	b	.L9255
.L9286:
	str	r8, [r6, #20]
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	add	r6, r6, #56
	lsr	ip, ip, #7
	strb	ip, [r6, #-23]
	ldrb	ip, [r7, #3]	@ zero_extendqisi2
	and	ip, ip, r1
	sub	ip, ip, r2
	clz	ip, ip
	lsr	ip, ip, #5
	strb	ip, [r6, #-22]
	bl	__wake_up
	subs	r9, r9, #1
	beq	.L9285
.L9255:
	ldr	r3, [fp]
	sub	r8, r5, #28
	ldr	r3, [r3, #16]
	cmp	r3, #5
	subne	r3, r3, #3
	moveq	r3, #2
	clzne	r3, r3
	lsrne	r3, r3, #5
	add	r3, r3, #2
	ldr	r7, [r8, r3, lsl #2]
	cmp	r7, #0
	beq	.L9253
	ldr	r3, [r5, #-28]
	add	r5, r5, #28
	str	r8, [r3]
	ldr	r3, [r5, #-56]
	str	r7, [r3, #28]
	ldr	r0, [r5, #-56]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	mov	r4, r0
	mov	r2, #1
	cmp	r4, #0
	mov	r0, r6
	mov	r1, #3
	mov	r3, r4
	beq	.L9286
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	blt	.L9237
.L9261:
	add	r5, r10, #116
	add	r7, r10, #100
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r10, #96]
	mov	r6, r0
	ldrh	lr, [r10, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r10, #96]
	cmp	lr, #0
	beq	.L9266
	add	r3, r10, #99
	mov	r0, r7
	add	lr, r3, lr
.L9260:
	ldrb	r2, [r3, #1]!	@ zero_extendqisi2
	mov	r1, r0
	sub	ip, r2, #5
	cmp	ip, #1
	strbls	r2, [r1], #1
	movls	r0, r1
	cmp	lr, r3
	bne	.L9260
	sub	lr, r0, r7
	add	r3, lr, #1
	uxth	lr, lr
	uxth	r3, r3
.L9258:
	add	lr, r10, lr
	strh	r3, [r10, #104]	@ movhi
	mov	r0, #2
	mov	r1, #3
	mov	r2, #1
	strb	r0, [lr, #100]
	mov	r0, r5
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L9237:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9284:
	mov	r3, #0
	add	r5, r10, #116
	mov	r0, r5
	str	r3, [r10, #132]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r10, #96]
	mov	r6, r0
	ldrh	lr, [r10, #104]
	cmp	r3, #1
	streq	r4, [r10, #96]
	cmp	lr, #0
	add	r4, r10, #100
	beq	.L9264
	add	r3, r10, #99
	mov	r1, r4
	add	lr, r3, lr
.L9251:
	ldrb	r2, [r3, #1]!	@ zero_extendqisi2
	mov	r0, r1
	sub	ip, r2, #5
	cmp	ip, #1
	strbls	r2, [r0], #1
	movls	r1, r0
	cmp	lr, r3
	bne	.L9251
.L9249:
	sub	r3, r1, r4
	mov	r1, #3
	add	r2, r3, #1
	uxtah	r3, r10, r3
	mov	r0, r5
	strh	r2, [r10, #104]	@ movhi
	mov	r2, #1
	mov	r4, #0
	strb	r1, [r3, #100]
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L9237
.L9285:
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	b	.L9261
.L9253:
	ldr	r3, [sp]
	mvn	r4, #21
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	b	.L9237
.L9266:
	mov	r3, #1
	b	.L9258
.L9264:
	mov	r1, r4
	b	.L9249
.L9263:
	mvn	r4, #18
	b	.L9237
	.fnend
	.size	ffs_func_set_alt, .-ffs_func_set_alt
	.section	.rodata.str1.4
	.align	2
.LC819:
	.ascii	"%s: %u %u\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_open, %function
rndis_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #282
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR4
	mov	r4, r0
	str	lr, [sp, #16]
	ldr	r2, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r5, r3]
	ldr	r6, [r2, #24]
	tst	r3, #4
	ldr	r1, [r6]
	bne	.L9306
.L9288:
	ldr	r3, [r1, #20]
	ldr	r0, [r4, #144]
	cmp	r3, #4
	uxtb	r6, r0
	bls	.L9289
	ldr	r3, [r1, #16]
	cmp	r3, #5
	beq	.L9307
.L9291:
	cmp	r3, #3
	movne	r7, #97280
	moveq	r7, #4259840
.L9290:
	movw	r3, #306
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L9308
.L9292:
	movw	r3, #:lower16:.LANCHOR1
	cmp	r6, #0
	movt	r3, #:upper16:.LANCHOR1
	rsb	ip, r0, r0, lsl #4
	mov	r1, #11
	streq	r6, [r3, #3704]
	mov	r2, #0
	movt	r1, 16385
	streq	r7, [r3, #3708]
	add	r3, r3, ip, lsl #2
	str	r2, [r3, #3712]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	rndis_indicate_status_msg
.L9289:
	cmp	r3, #2
	movls	r7, #97280
	bls	.L9290
	ldr	r3, [r1, #16]
	b	.L9291
.L9307:
	movw	r3, #306
	mov	r7, #8519680
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L9292
.L9308:
	movw	r1, #:lower16:.LC819
	ldr	r2, .L9309
	mov	r3, #0
	ldr	r0, .L9309+4
	movt	r1, #:upper16:.LC819
	str	r7, [sp]
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #144]
	b	.L9292
.L9306:
	movw	r2, #:lower16:.LC80
	add	r1, r1, #32
	ldr	r3, .L9309+8
	movt	r2, #:upper16:.LC80
	add	r0, r5, #264
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L9288
.L9310:
	.align	2
.L9309:
	.word	.LANCHOR5-1880
	.word	.LANCHOR4+288
	.word	.LANCHOR5-1896
	.fnend
	.size	rndis_qc_open, .-rndis_qc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_open, %function
rndis_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #330
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR4
	mov	r4, r0
	str	lr, [sp, #16]
	ldr	r2, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r5, r3]
	ldr	r6, [r2, #24]
	tst	r3, #4
	ldr	r1, [r6]
	bne	.L9330
.L9312:
	ldr	r3, [r1, #20]
	ldr	r0, [r4, #164]
	cmp	r3, #4
	uxtb	r6, r0
	bls	.L9313
	ldr	r3, [r1, #16]
	cmp	r3, #5
	beq	.L9331
.L9315:
	cmp	r3, #3
	movne	r7, #97280
	moveq	r7, #4259840
.L9314:
	movw	r3, #306
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L9332
.L9316:
	movw	r3, #:lower16:.LANCHOR1
	cmp	r6, #0
	movt	r3, #:upper16:.LANCHOR1
	rsb	ip, r0, r0, lsl #4
	mov	r1, #11
	streq	r6, [r3, #3704]
	mov	r2, #0
	movt	r1, 16385
	streq	r7, [r3, #3708]
	add	r3, r3, ip, lsl #2
	str	r2, [r3, #3712]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	rndis_indicate_status_msg
.L9313:
	cmp	r3, #2
	movls	r7, #97280
	bls	.L9314
	ldr	r3, [r1, #16]
	b	.L9315
.L9331:
	movw	r3, #306
	mov	r7, #8519680
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L9316
.L9332:
	movw	r1, #:lower16:.LC819
	ldr	r2, .L9333
	mov	r3, #0
	ldr	r0, .L9333+4
	movt	r1, #:upper16:.LC819
	str	r7, [sp]
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #164]
	b	.L9316
.L9330:
	movw	r2, #:lower16:.LC80
	add	r1, r1, #32
	ldr	r3, .L9333+8
	movt	r2, #:upper16:.LC80
	add	r0, r5, #312
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L9312
.L9334:
	.align	2
.L9333:
	.word	.LANCHOR5-1880
	.word	.LANCHOR4+288
	.word	.LANCHOR5-1856
	.fnend
	.size	rndis_open, .-rndis_open
	.section	.rodata.str1.4
	.align	2
.LC820:
	.ascii	"%s: rndis_qc_unbind: free\000"
	.section	.rodata.cst4
	.align	2
.LC821:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_unbind, %function
rndis_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r3, #354
	movw	r2, #:lower16:.LC821
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	movt	r2, #:upper16:.LC821
	movt	r6, #:upper16:.LANCHOR4
	str	lr, [sp, #16]
	.pad #28
	sub	sp, sp, #28
	ldrh	r3, [r6, r3]
	mov	r5, r1
	ldr	r2, [r2]
	str	r2, [sp, #20]
	mov	r2,#0
	mov	r7, r0
	tst	r3, #4
	bne	.L9360
	ldr	r0, .L9366
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L9361
.L9337:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3684]
	bl	kfree
	ldr	r0, [r4, #3688]
	mov	r3, #0
	str	r3, [r4, #3684]
	cmp	r0, r3
	beq	.L9338
	bl	destroy_workqueue
.L9338:
	ldrh	r3, [r6, #210]
	mov	r2, #0
	ldr	r6, [r5, #144]
	str	r2, [r4, #3688]
	tst	r3, #4
	bne	.L9362
.L9339:
	cmp	r6, #0
	bgt	.L9340
	rsb	r6, r6, r6, lsl #4
	mov	r3, #0
	add	r6, r4, r6, lsl #2
	strb	r3, [r6, #3697]
.L9340:
	ldrb	r3, [r4, #3980]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L9363
.L9341:
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L9364
.L9342:
	ldr	r0, [r5, #16]
	bl	kfree
	ldr	r3, [r5, #160]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r5, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, .L9366+4
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r5
	mov	r5, r1
	bl	kfree
	mov	r3, #0
	ldr	r0, .L9366+4
	mov	r1, r5
	str	r3, [r4, #2496]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LC821
	movt	r3, #:upper16:.LC821
	ldr	r2, [r3]
	ldr	r3, [sp, #20]
	eors	r2, r3, r2
	bne	.L9365
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L9363:
	mov	r6, #0
	movw	r1, #:lower16:.LC806
	mov	r2, r6
	movt	r1, #:upper16:.LC806
	mov	r0, sp
	strb	r6, [r4, #3980]
	bl	sprintf
	mov	r0, sp
	mov	r1, r6
	bl	remove_proc_entry
	b	.L9341
.L9364:
	ldr	r0, [r5, #8]
	bl	kfree
	b	.L9342
.L9362:
	movw	r1, #:lower16:.LC285
	ldr	r2, .L9366+8
	movt	r1, #:upper16:.LC285
	ldr	r0, .L9366+12
	bl	__dynamic_pr_debug
	b	.L9339
.L9360:
	movw	r1, #:lower16:.LC820
	ldr	r2, .L9366+16
	add	r0, r6, #336
	movt	r1, #:upper16:.LC820
	bl	__dynamic_pr_debug
	ldr	r0, .L9366
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L9337
.L9361:
	movw	r1, #:lower16:.LC747
	ldr	r2, .L9366+20
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC747
	bl	__dynamic_pr_debug
	b	.L9337
.L9365:
	bl	__stack_chk_fail
.L9367:
	.align	2
.L9366:
	.word	.LANCHOR4-508
	.word	.LANCHOR1+2492
	.word	.LANCHOR5-1976
	.word	.LANCHOR4+192
	.word	.LANCHOR5-1844
	.word	.LANCHOR5-2296
	.fnend
	.size	rndis_qc_unbind, .-rndis_qc_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_free_buffers.part.0, %function
ghsic_data_free_buffers.part.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #48
	mov	r0, r7
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #8]
	mov	r6, r0
	cmp	r8, #0
	beq	.L9377
	ldr	r0, [r4, #24]
	add	r9, r4, #24
	cmp	r9, r0
	beq	.L9370
.L9371:
	sub	r5, r0, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r0, r8
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #24]
	cmp	r9, r0
	bne	.L9371
.L9370:
	ldr	r3, [r4, #32]
	add	r5, r4, #32
	cmp	r5, r3
	beq	.L9372
	mov	r8, #0
	mov	r9, #0
	b	.L9373
.L9390:
	ldr	r2, [r4, #40]
	sub	r2, r2, #1
	str	r2, [r4, #40]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #32]
	cmp	r3, r5
	beq	.L9372
.L9373:
	subs	r0, r3, #0
	bne	.L9390
.L9372:
	mov	r1, r6
	mov	r0, r7
	add	r7, r4, #80
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #12]
	mov	r6, r0
	cmp	r8, #0
	beq	.L9377
	ldr	r0, [r4, #56]
	add	r9, r4, #56
	cmp	r9, r0
	beq	.L9375
.L9376:
	sub	r5, r0, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r0, r8
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #56]
	cmp	r9, r0
	bne	.L9376
.L9375:
	ldr	r3, [r4, #64]
	add	r5, r4, #64
	cmp	r3, r5
	beq	.L9377
	mov	r8, #0
	mov	r9, #0
	b	.L9378
.L9391:
	ldr	r2, [r4, #72]
	sub	r2, r2, #1
	str	r2, [r4, #72]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #64]
	cmp	r3, r5
	beq	.L9377
.L9378:
	subs	r0, r3, #0
	bne	.L9391
.L9377:
	mov	r1, r6
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ghsic_data_free_buffers.part.0, .-ghsic_data_free_buffers.part.0
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_remove, %function
ghsic_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR4
	movw	r3, #378
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	ip, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	ldrh	r3, [ip, r3]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	tst	r3, #4
	bne	.L9441
.L9393:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #1436]
	cmp	r7, #0
	beq	.L9394
	ldr	r4, [r5, #1440]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L9395
	cmp	r7, #1
	bls	.L9394
	ldr	r4, [r5, #1544]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L9395
	cmp	r7, #2
	beq	.L9394
	ldr	r4, [r5, #1648]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L9395
	cmp	r7, #3
	beq	.L9394
	ldr	r4, [r5, #1752]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L9395
.L9394:
	movw	r0, #:lower16:.LC180
	ldr	r1, .L9442
	mvn	r2, #21
	movt	r0, #:upper16:.LC180
	bl	printk
	mvn	r0, #21
	b	.L9392
.L9395:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L9398
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9398
	blx	r3
.L9398:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L9399
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9399
	blx	r3
.L9399:
	add	r0, r4, #120
	bl	cancel_work_sync
	cmp	r4, #0
	beq	.L9400
	mov	r0, r4
	bl	ghsic_data_free_buffers.part.0
.L9400:
	add	r0, r4, #88
	add	r4, r4, #180
	bl	cancel_work_sync
	mov	r1, r4
	mov	r0, #0
	bl	_test_and_clear_bit
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
.L9392:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9441:
	movw	r1, #:lower16:.LC178
	mov	r4, r0
	ldr	r2, .L9442
	mov	r3, r6
	add	r0, ip, #360
	movt	r1, #:upper16:.LC178
	bl	__dynamic_pr_debug
	ldr	r6, [r4]
	b	.L9393
.L9443:
	.align	2
.L9442:
	.word	.LANCHOR5-1828
	.fnend
	.size	ghsic_data_remove, .-ghsic_data_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_free_buffers.part.0, %function
ghsuart_data_free_buffers.part.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #72
	mov	r0, r7
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #8]
	mov	r6, r0
	cmp	r8, #0
	beq	.L9453
	ldr	r0, [r4, #48]
	add	r9, r4, #48
	cmp	r9, r0
	beq	.L9446
.L9447:
	sub	r5, r0, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r0, r8
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #48]
	cmp	r9, r0
	bne	.L9447
.L9446:
	ldr	r3, [r4, #56]
	add	r5, r4, #56
	cmp	r5, r3
	beq	.L9448
	mov	r8, #0
	mov	r9, #0
	b	.L9449
.L9466:
	ldr	r2, [r4, #64]
	sub	r2, r2, #1
	str	r2, [r4, #64]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #56]
	cmp	r3, r5
	beq	.L9448
.L9449:
	subs	r0, r3, #0
	bne	.L9466
.L9448:
	mov	r1, r6
	mov	r0, r7
	add	r7, r4, #104
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #12]
	mov	r6, r0
	cmp	r8, #0
	beq	.L9453
	ldr	r0, [r4, #80]
	add	r9, r4, #80
	cmp	r9, r0
	beq	.L9451
.L9452:
	sub	r5, r0, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r0, r8
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #80]
	cmp	r9, r0
	bne	.L9452
.L9451:
	ldr	r3, [r4, #88]
	add	r5, r4, #88
	cmp	r3, r5
	beq	.L9453
	mov	r8, #0
	mov	r9, #0
	b	.L9454
.L9467:
	ldr	r2, [r4, #96]
	sub	r2, r2, #1
	str	r2, [r4, #96]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #88]
	cmp	r3, r5
	beq	.L9453
.L9454:
	subs	r0, r3, #0
	bne	.L9467
.L9453:
	mov	r1, r6
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ghsuart_data_free_buffers.part.0, .-ghsuart_data_free_buffers.part.0
	.section	.rodata.str1.4
	.align	2
.LC822:
	.ascii	"<3>%s:Unable to close smux channel: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_remove, %function
ghsuart_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #402
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L9503
.L9469:
	movw	r2, #:lower16:.LANCHOR1
	ldr	r3, [r4, #4]
	movt	r2, #:upper16:.LANCHOR1
	ldr	r1, [r2, #2028]
	cmp	r3, r1
	bcs	.L9504
	mov	r1, #84
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #2032]
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L9472
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9472
	blx	r3
.L9472:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L9473
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9473
	blx	r3
.L9473:
	cmp	r4, #0
	beq	.L9474
	mov	r0, r4
	bl	ghsuart_data_free_buffers.part.0
.L9474:
	ldr	r6, [r4, #16]
	cmp	r6, #0
	bne	.L9476
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #24]
	mov	r1, r0
	mov	r0, r7
	str	r6, [r4, #200]
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	beq	.L9476
	ldr	r3, [r5, #120]
	cmp	r3, #0
	beq	.L9476
	mov	r0, r5
	blx	r3
.L9476:
	movw	r0, #:lower16:.LC822
	add	r5, r4, #188
	ldr	r1, .L9505
	movt	r0, #:upper16:.LC822
	ldr	r2, [r4, #180]
	bl	printk
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r5
	mov	r0, #0
	bl	_clear_bit
	mov	r0, #2
	mov	r1, r5
	bl	_clear_bit
	mov	r0, #0
.L9468:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9503:
	movw	r1, #:lower16:.LC178
	ldr	r2, .L9505
	add	r0, r3, #384
	movt	r1, #:upper16:.LC178
	ldr	r3, [r4]
	bl	__dynamic_pr_debug
	b	.L9469
.L9504:
	movw	r0, #:lower16:.LC180
	ldr	r1, .L9505
	mov	r2, r3
	movt	r0, #:upper16:.LC180
	bl	printk
	mvn	r0, #21
	b	.L9468
.L9506:
	.align	2
.L9505:
	.word	.LANCHOR5-1808
	.fnend
	.size	ghsuart_data_remove, .-ghsuart_data_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_free_buffers, %function
gbam_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #4
	add	r7, r0, #8
	mov	r0, r6
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r4, #0
	beq	.L9509
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9509
	ldr	r0, [r4, #28]
	add	r10, r4, #28
	ldr	r9, [r3, #84]
	cmp	r10, r0
	beq	.L9510
.L9511:
	sub	r8, r0, #36
	bl	list_del
	ldr	r3, [r9, #8]
	mov	r0, r9
	mov	r1, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #28]
	cmp	r10, r0
	bne	.L9511
	ldr	r3, [r4, #12]
.L9510:
	ldr	r0, [r4, #52]
	add	r10, r4, #52
	ldr	r9, [r3, #88]
	cmp	r10, r0
	beq	.L9515
.L9512:
	sub	r8, r0, #36
	bl	list_del
	ldr	r3, [r9, #8]
	mov	r0, r9
	mov	r1, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #52]
	cmp	r10, r0
	bne	.L9512
.L9515:
	ldr	r3, [r4, #36]
	add	r10, r4, #36
	cmp	r10, r3
	beq	.L9513
	mov	r8, #0
	mov	r9, #0
	b	.L9514
.L9530:
	ldr	r2, [r4, #44]
	sub	r2, r2, #1
	str	r2, [r4, #44]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #36]
	cmp	r3, r10
	beq	.L9513
.L9514:
	subs	r0, r3, #0
	bne	.L9530
.L9513:
	ldr	r3, [r4, #60]
	add	r10, r4, #60
	cmp	r3, r10
	beq	.L9509
	mov	r8, #0
	mov	r9, #0
	b	.L9516
.L9531:
	ldr	r2, [r4, #68]
	sub	r2, r2, #1
	str	r2, [r4, #68]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #60]
	cmp	r3, r10
	beq	.L9509
.L9516:
	subs	r0, r3, #0
	bne	.L9531
.L9509:
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gbam_free_buffers, .-gbam_free_buffers
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_ch_remove, %function
gbam_data_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #426
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r5, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, r2]
	.pad #12
	sub	sp, sp, #12
	tst	r2, #4
	bne	.L9562
.L9533:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r7, [r4, #424]
	cmp	r7, #0
	ble	.L9560
	mov	fp, #0
	movw	r6, #:lower16:.LC361
	str	r4, [sp]
	mov	r9, fp
	mov	r8, fp
	movt	r6, #:upper16:.LC361
.L9534:
	mov	r0, r6
	ldr	r1, [r5]
	bl	strcmp
	cmp	r0, #0
	beq	.L9563
.L9535:
	add	fp, fp, #1
	cmp	r7, fp
	bgt	.L9534
.L9560:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9563:
	mov	r3, #84
	ldr	r2, .L9564
	mul	r3, r3, fp
	ldr	r7, [r3, r2]
	add	r1, r7, #8
	add	r4, r7, #4
	mov	r0, r4
	str	r1, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r1, [sp, #4]
	mov	r10, r0
	mov	r0, r1
	bl	_raw_spin_lock
	ldr	r3, [r7, #12]
	ldr	r1, [sp, #4]
	cmp	r3, #0
	ldrdne	r8, [r3, #84]
	mov	r0, r1
	bl	_raw_spin_unlock
	mov	r1, r10
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L9537
	ldr	r3, [r8, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9537
	mov	r0, r8
	blx	r3
.L9537:
	cmp	r9, #0
	beq	.L9538
	ldr	r3, [r9, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9538
	mov	r0, r9
	blx	r3
.L9538:
	mov	r0, r7
	add	r10, r7, #20
	bl	gbam_free_buffers
	ldr	r0, [r7, #24]
	bl	msm_bam_dmux_close
	mov	r3, #0
	mov	r1, r10
	mov	r0, #2
	str	r3, [r7, #240]
	bl	_clear_bit
	mov	r1, r10
	mov	r0, #1
	bl	_clear_bit
	ldr	r3, [sp]
	ldr	r7, [r3, #424]
	b	.L9535
.L9562:
	movw	r1, #:lower16:.LC178
	ldr	r2, .L9564+4
	add	r0, r3, #408
	movt	r1, #:upper16:.LC178
	ldr	r3, [r5]
	bl	__dynamic_pr_debug
	b	.L9533
.L9565:
	.align	2
.L9564:
	.word	.LANCHOR1+428
	.word	.LANCHOR5-1788
	.fnend
	.size	gbam_data_ch_remove, .-gbam_data_ch_remove
	.section	.rodata.str1.4
	.align	2
.LC823:
	.ascii	"gs_close: ttyGS%d (%pK,%pK) ...\012\000"
	.align	2
.LC824:
	.ascii	"gs_close: ttyGS%d (%pK,%pK) done!\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_close, %function
gs_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #272]
	.pad #32
	sub	sp, sp, #32
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #1
	beq	.L9567
	cmp	r3, #0
	subne	r3, r3, #1
	strne	r3, [r4, #12]
	beq	.L9603
.L9569:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9567:
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #450
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9604
.L9570:
	ldr	r0, [r4, #4]
	mov	r2, #0
	mov	r3, #1
	str	r2, [r4, #12]
	strb	r3, [r4, #16]
	cmp	r0, r2
	beq	.L9571
	ldr	r3, [r0, #120]
	cmp	r3, r2
	beq	.L9572
	blx	r3
.L9572:
	ldr	r1, [r4, #92]
	ldr	r2, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r0, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L9605
.L9586:
	str	r0, [r4, #100]
.L9583:
	mov	r3, #0
	movw	r2, #474
	str	r3, [r5, #272]
	str	r3, [r4, #8]
	strb	r3, [r4, #16]
	ldrh	r3, [r6, r2]
	tst	r3, #4
	bne	.L9606
.L9584:
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	add	r0, r4, #20
	bl	__wake_up
	b	.L9569
.L9603:
	movw	r0, #:lower16:.LC709
	movw	r1, #905
	movt	r0, #:upper16:.LC709
	bl	warn_slowpath_null
	b	.L9569
.L9605:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L9602
	ldr	r1, [r4, #92]
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L9575
.L9602:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
.L9574:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	ldrne	r0, [r4, #104]
	bne	.L9586
.L9571:
	ldr	r0, [r4, #96]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #96]
	b	.L9583
.L9604:
	movw	r1, #:lower16:.LC823
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	mov	r3, r5
	movt	r1, #:upper16:.LC823
	add	r0, r6, #432
	str	r7, [sp]
	bl	__dynamic_pr_debug
	b	.L9570
.L9575:
	mov	r0, r4
	add	r10, r4, #108
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	movw	r2, #:lower16:autoremove_wake_function
	bic	r8, r3, #8128
	add	r1, sp, #24
	bic	r8, r8, #63
	mov	r3, #0
	ldr	r0, [r8, #12]
	movt	r2, #:upper16:autoremove_wake_function
	movw	r9, #4500
	str	r3, [sp, #12]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
.L9581:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, r10
	bl	prepare_to_wait
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L9576
	ldr	r1, [r4, #92]
	mov	r0, r4
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L9601
	bl	_raw_spin_unlock_irq
	ldr	r3, [r8, #12]
	mov	r0, r9
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L9578
	bl	schedule_timeout
	subs	r9, r0, #0
	bne	.L9581
	mov	r0, r4
	bl	_raw_spin_lock_irq
	mov	r0, r4
	bl	_raw_spin_unlock_irq
.L9578:
	add	r1, sp, #12
	mov	r0, r10
	bl	finish_wait
	b	.L9574
.L9576:
	mov	r0, r4
.L9601:
	bl	_raw_spin_unlock_irq
	b	.L9578
.L9606:
	movw	r1, #:lower16:.LC824
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	mov	r3, r5
	movt	r1, #:upper16:.LC824
	ldr	r0, .L9607
	str	r7, [sp]
	bl	__dynamic_pr_debug
	b	.L9584
.L9608:
	.align	2
.L9607:
	.word	.LANCHOR4+456
	.fnend
	.size	gs_close, .-gs_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_unbind, %function
acc_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	add	r7, r1, #88
	strd	r8, [sp, #16]
	add	r9, r1, #1648
	add	r9, r9, #8
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	b	.L9610
.L9611:
	bl	list_del
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L9612
	ldr	r6, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r8
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9610:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #1656]
	mov	r6, r0
	cmp	r5, r9
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L9611
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L9612:
	ldr	r5, [r4, #1688]
	cmp	r5, #0
	beq	.L9614
	ldr	r6, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9614:
	ldr	r5, [r4, #1692]
	cmp	r5, #0
	beq	.L9615
	ldr	r6, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9615:
	ldr	r0, .L9631
	add	r8, r4, #1760
	bl	hid_unregister_driver
	mov	r0, r7
	add	r8, r8, #4
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #1764]
	mov	r9, r0
	cmp	r5, r8
	ldr	r6, [r5]
	addne	r10, r4, #1776
	addne	r10, r10, #4
	beq	.L9620
.L9619:
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	mov	r1, r10
	ldr	r2, [r4, #1780]
	bl	__list_add
	cmp	r6, r8
	mov	r5, r6
	ldr	r6, [r6]
	bne	.L9619
.L9620:
	ldr	r5, [r4, #1772]
	add	r8, r4, #1760
	add	r8, r8, #12
	cmp	r8, r5
	ldr	r6, [r5]
	addne	r10, r4, #1776
	addne	r10, r10, #4
	beq	.L9618
.L9621:
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	mov	r1, r10
	ldr	r2, [r4, #1780]
	bl	__list_add
	cmp	r8, r6
	mov	r5, r6
	ldr	r6, [r6]
	bne	.L9621
.L9618:
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #1744
	ldrd	r4, [sp]
	add	r0, r0, #4
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	schedule_work
.L9632:
	.align	2
.L9631:
	.word	.LANCHOR0+1568
	.fnend
	.size	acc_function_unbind, .-acc_function_unbind
	.section	.rodata.str1.4
	.align	2
.LC825:
	.ascii	"<6>%s: usb cable is not connected\012\000"
	.align	2
.LC826:
	.ascii	"%s: USB_CDC_RESET_FUNCTION\000"
	.align	2
.LC827:
	.ascii	"%s: USB_CDC_SEND_ENCAPSULATED_COMMAND\000"
	.align	2
.LC828:
	.ascii	"%s: w_length > req->length: %d > %d\000"
	.align	2
.LC829:
	.ascii	"%s: USB_CDC_GET_ENCAPSULATED_RESPONSE\000"
	.align	2
.LC830:
	.ascii	"<3>%s: w_length > 0: %d\000"
	.align	2
.LC831:
	.ascii	"%s: req%02x.%02x v%04x i%04x l%d\012\000"
	.align	2
.LC832:
	.ascii	"<3>%s: ctrl resp queue empty\012\000"
	.align	2
.LC833:
	.ascii	"%s: copied encapsulated_response %d bytes\000"
	.align	2
.LC834:
	.ascii	"%s: USB_CDC_GET_NTB_PARAMETERS\000"
	.align	2
.LC835:
	.ascii	"%s: USB_CDC_GET_NTB_INPUT_SIZE\000"
	.align	2
.LC836:
	.ascii	"%s: Reply to host INPUT SIZE %d\012\000"
	.align	2
.LC837:
	.ascii	"%s: USB_CDC_SET_NTB_INPUT_SIZE\000"
	.align	2
.LC838:
	.ascii	"<3>%s: wrong NTB length %d\000"
	.align	2
.LC839:
	.ascii	"%s: USB_CDC_GET_NTB_FORMAT\000"
	.align	2
.LC840:
	.ascii	"%s: NTB FORMAT: sending %d\012\000"
	.align	2
.LC841:
	.ascii	"%s: USB_CDC_SET_NTB_FORMAT\000"
	.align	2
.LC842:
	.ascii	"%s: NCM16 selected\012\000"
	.align	2
.LC843:
	.ascii	"%s: NCM32 selected\012\000"
	.align	2
.LC844:
	.ascii	"<3>%s: invalid control req: %02x.%02x v%04x i%04x l"
	.ascii	"%d\012\000"
	.align	2
.LC845:
	.ascii	"%s: control request: %02x.%02x v%04x i%04x l%d\012\000"
	.align	2
.LC846:
	.ascii	"<3>%s: queueing req failed: %02x.%02x, err %d\012\000"
	.align	2
.LC847:
	.ascii	"<3>%s: ctrl req err %d: %02x.%02x v%04x i%04x l%d\012"
	.ascii	"\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_setup, %function
mbim_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r1, #4]	@ unaligned
	.pad #28
	sub	sp, sp, #28
	ldr	r9, [r0, #84]
	ldr	r3, [r0, #88]
	str	r2, [sp, #20]
	ldrh	r2, [r1, #2]	@ unaligned
	ldr	r6, [r9, #4]
	cmp	r3, #0
	str	r2, [sp, #16]
	ldrh	r8, [r1, #6]	@ unaligned
	beq	.L9732
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #41217
	mov	r5, r0
	mov	r4, r1
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L9636
	bgt	.L9637
	movw	r2, #8580
	cmp	r3, r2
	beq	.L9638
	bgt	.L9639
	cmp	r3, #8448
	bne	.L9733
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #522
	movt	r7, #:upper16:.LANCHOR4
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L9734
.L9649:
	ldr	r0, [r6, #4]
	mov	r10, r8
	cmp	r8, r0
	bls	.L9650
	movw	r3, #546
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L9735
.L9650:
	movw	r3, #:lower16:fmbim_cmd_complete
	mov	fp, #0
	str	r5, [r6, #32]
	movt	r3, #:upper16:fmbim_cmd_complete
	str	r3, [r6, #28]
	b	.L9648
.L9637:
	movw	r2, #41347
	cmp	r3, r2
	beq	.L9644
	movw	r2, #41349
	cmp	r3, r2
	bne	.L9736
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #666
	movt	r7, #:upper16:.LANCHOR4
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L9737
.L9659:
	ldr	r3, [sp, #16]
	subs	r3, r3, #0
	movne	r3, #1
	cmp	r8, #3
	orrls	r3, r3, #1
	cmp	r3, #0
	bne	.L9731
	ldrb	r3, [r5, #196]	@ zero_extendqisi2
	ldr	r2, [sp, #20]
	cmp	r3, r2
	bne	.L9731
	ldr	r3, [r5, #224]
	movw	r0, #690
	cmp	r8, #4
	ldr	r2, [r6]
	movle	fp, #0
	movgt	fp, #1
	lsr	r1, r3, #16
	strb	r3, [r2]
	ubfx	r3, r3, #8, #8
	lsr	ip, r1, #8
	strb	r3, [r2, #1]
	strb	r1, [r2, #2]
	strb	ip, [r2, #3]
	ldrh	r3, [r7, r0]
	tst	r3, #4
	moveq	r10, #4
	beq	.L9648
	movw	r1, #:lower16:.LC836
	ldr	r2, .L9752
	mov	r10, #4
	movt	r1, #:upper16:.LC836
	ldr	r0, .L9752+4
	ldr	r3, [r5, #224]
	bl	__dynamic_pr_debug
	b	.L9648
.L9733:
	movw	r2, #8453
	cmp	r3, r2
	bne	.L9642
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #498
	movt	r7, #:upper16:.LANCHOR4
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L9738
.L9647:
	movw	r3, #:lower16:fmbim_reset_cmd_complete
	subs	fp, r8, #0
	str	r5, [r6, #32]
	movt	r3, #:upper16:fmbim_reset_cmd_complete
	movne	fp, #1
	mov	r10, #0
	str	r3, [r6, #28]
	b	.L9648
.L9639:
	movw	r2, #8582
	cmp	r3, r2
	bne	.L9642
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #714
	movt	r7, #:upper16:.LANCHOR4
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L9739
.L9660:
	sub	r3, r8, #4
	bic	r3, r3, #4
	uxth	r3, r3
	cmp	r3, #0
	bne	.L9740
	ldr	r3, [sp, #16]
	cmp	r3, #0
	bne	.L9731
	ldrb	r3, [r5, #196]	@ zero_extendqisi2
	ldr	r2, [sp, #20]
	cmp	r3, r2
	bne	.L9731
	movw	r3, #:lower16:mbim_ep0out_complete
	mov	r10, r8
	str	r8, [r6, #4]
	movt	r3, #:upper16:mbim_ep0out_complete
	ldr	fp, [sp, #16]
	str	r3, [r6, #28]
	str	r5, [r6, #32]
	b	.L9648
.L9736:
	movw	r2, #41344
	cmp	r3, r2
	bne	.L9642
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #642
	movt	r7, #:upper16:.LANCHOR4
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L9741
.L9657:
	ldr	r3, [sp, #16]
	subs	r3, r3, #0
	movne	r3, #1
	cmp	r8, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L9731
	ldrb	r3, [r5, #196]	@ zero_extendqisi2
	ldr	r2, [sp, #20]
	cmp	r3, r2
	bne	.L9731
	cmp	r8, #28
	ldr	r1, .L9752+8
	movcc	r10, r8
	movcs	r10, #28
	ldr	r0, [r6]
	cmp	r10, r8
	mov	r2, r10
	movcs	fp, #0
	movcc	fp, #1
	bl	memcpy
.L9648:
	movw	r3, #858
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L9742
.L9666:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r10, [r6, #4]
	mov	r1, r6
	mov	r2, #32
	bfi	r3, fp, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r9]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	blt	.L9743
.L9633:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9638:
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #786
	movt	r7, #:upper16:.LANCHOR4
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L9744
.L9663:
	cmp	r8, #0
	bne	.L9731
	ldrb	r3, [r5, #196]	@ zero_extendqisi2
	ldr	r2, [sp, #20]
	cmp	r3, r2
	bne	.L9731
	ldr	r3, [sp, #16]
	cmp	r3, #0
	beq	.L9664
	cmp	r3, #1
	bne	.L9670
	movw	r3, #834
	ldr	r2, .L9752+12
	ldrh	r3, [r7, r3]
	str	r2, [r5, #200]
	tst	r3, #4
	bne	.L9745
.L9670:
	mov	r10, r8
	mov	fp, r8
	b	.L9648
.L9636:
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #570
	movt	r7, #:upper16:.LANCHOR4
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L9746
.L9651:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	bne	.L9747
	movw	r3, #594
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L9748
.L9654:
	add	r10, r5, #204
	mov	r0, r10
	bl	_raw_spin_lock
	ldr	fp, [r5, #216]!
	cmp	fp, r5
	beq	.L9749
	mov	r0, fp
	sub	r5, fp, #8
	bl	list_del
	mov	r0, r10
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r10}
	ldr	r0, [r6]
	cmp	r8, r10
	movcc	r10, r8
	mov	r2, r10
	bl	memcpy
	cmp	r5, #0
	beq	.L9656
	ldr	r0, [fp, #-8]
	bl	kfree
	mov	r0, r5
	bl	kfree
.L9656:
	movw	r3, #618
	cmp	r10, r8
	ldrh	r3, [r7, r3]
	movge	fp, #0
	movlt	fp, #1
	tst	r3, #4
	beq	.L9648
	movw	r1, #:lower16:.LC833
	ldr	r2, .L9752
	mov	r3, r10
	movt	r1, #:upper16:.LC833
	ldr	r0, .L9752+16
	bl	__dynamic_pr_debug
	b	.L9648
.L9644:
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #738
	movt	r7, #:upper16:.LANCHOR4
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L9750
.L9662:
	ldr	r3, [sp, #16]
	subs	r2, r3, #0
	movne	r2, #1
	cmp	r8, #1
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L9731
	ldrb	r3, [r5, #196]	@ zero_extendqisi2
	ldr	r1, [sp, #20]
	cmp	r3, r1
	bne	.L9731
	ldr	ip, .L9752+20
	cmp	r8, #2
	movw	r0, #762
	ldr	r3, [r5, #200]
	movle	fp, #0
	movgt	fp, #1
	ldr	r1, [r6]
	subs	r3, r3, ip
	movne	r3, #1
	strb	r3, [r1]
	strb	r2, [r1, #1]
	ldrh	r2, [r7, r0]
	tst	r2, #4
	moveq	r10, #2
	beq	.L9648
	movw	r1, #:lower16:.LC840
	ldr	r2, .L9752
	mov	r10, #2
	movt	r1, #:upper16:.LC840
	ldr	r0, .L9752+24
	bl	__dynamic_pr_debug
	b	.L9648
.L9742:
	ldr	r3, [sp, #16]
	movw	r1, #:lower16:.LC845
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC845
	ldr	r2, .L9752
	ldr	r0, .L9752+28
	str	r3, [sp, #4]
	ldr	r3, [sp, #20]
	str	r3, [sp, #8]
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	ip, [sp]
	str	r8, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L9666
.L9737:
	movw	r1, #:lower16:.LC835
	ldr	r2, .L9752
	add	r0, r7, #648
	movt	r1, #:upper16:.LC835
	bl	__dynamic_pr_debug
	b	.L9659
.L9741:
	movw	r1, #:lower16:.LC834
	ldr	r2, .L9752
	add	r0, r7, #624
	movt	r1, #:upper16:.LC834
	bl	__dynamic_pr_debug
	b	.L9657
.L9739:
	movw	r1, #:lower16:.LC837
	ldr	r2, .L9752
	add	r0, r7, #696
	movt	r1, #:upper16:.LC837
	bl	__dynamic_pr_debug
	b	.L9660
.L9738:
	movw	r1, #:lower16:.LC826
	ldr	r2, .L9752
	add	r0, r7, #480
	movt	r1, #:upper16:.LC826
	bl	__dynamic_pr_debug
	b	.L9647
.L9734:
	movw	r1, #:lower16:.LC827
	ldr	r2, .L9752
	add	r0, r7, #504
	movt	r1, #:upper16:.LC827
	bl	__dynamic_pr_debug
	b	.L9649
.L9745:
	movw	r1, #:lower16:.LC843
	ldr	r2, .L9752
	mov	r10, r8
	ldr	r0, .L9752+32
	movt	r1, #:upper16:.LC843
	mov	fp, r8
	bl	__dynamic_pr_debug
	b	.L9648
.L9664:
	movw	r3, #810
	ldr	r2, .L9752+20
	ldrh	r3, [r7, r3]
	str	r2, [r5, #200]
	tst	r3, #4
	bne	.L9751
	ldr	fp, [sp, #16]
	mov	r10, fp
	b	.L9648
.L9746:
	movw	r1, #:lower16:.LC829
	ldr	r2, .L9752
	add	r0, r7, #552
	movt	r1, #:upper16:.LC829
	bl	__dynamic_pr_debug
	b	.L9651
.L9750:
	movw	r1, #:lower16:.LC839
	ldr	r2, .L9752
	add	r0, r7, #720
	movt	r1, #:upper16:.LC839
	bl	__dynamic_pr_debug
	b	.L9662
.L9748:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC831
	ldr	r3, [sp, #16]
	movt	r1, #:upper16:.LC831
	ldr	r2, [sp, #20]
	ldr	r0, .L9752+36
	str	r3, [sp, #4]
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	ip, [sp]
	str	r2, [sp, #8]
	ldr	r2, .L9752
	str	r8, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L9654
.L9744:
	movw	r1, #:lower16:.LC841
	ldr	r2, .L9752
	add	r0, r7, #768
	movt	r1, #:upper16:.LC841
	bl	__dynamic_pr_debug
	b	.L9663
.L9735:
	movw	r1, #:lower16:.LC828
	ldr	r2, .L9752
	mov	r3, r8
	movt	r1, #:upper16:.LC828
	str	r0, [sp]
	ldr	r0, .L9752+40
	bl	__dynamic_pr_debug
	b	.L9650
.L9751:
	ldr	fp, [sp, #16]
	movw	r1, #:lower16:.LC842
	ldr	r2, .L9752
	movt	r1, #:upper16:.LC842
	ldr	r0, .L9752+44
	mov	r10, fp
	bl	__dynamic_pr_debug
	b	.L9648
.L9740:
	ldr	r5, .L9752+48
	movw	r0, #:lower16:.LC838
	mov	r2, r8
	movt	r0, #:upper16:.LC838
	sub	r1, r5, #8
	bl	printk
.L9653:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC847
	sub	r1, r5, #8
	ldr	r3, [sp, #16]
	movt	r0, #:upper16:.LC847
	ldr	r2, [sp, #20]
	str	r3, [sp, #4]
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	ip, [sp]
	str	r2, [sp, #8]
	mvn	r2, #94
	str	r8, [sp, #12]
	mov	r5, r2
	bl	printk
	b	.L9633
.L9749:
	ldr	r5, .L9752+48
	movw	r0, #:lower16:.LC832
	movt	r0, #:upper16:.LC832
	sub	r1, r5, #8
	bl	printk
	mov	r0, r10
	bl	_raw_spin_unlock
	b	.L9653
.L9747:
	ldr	r5, .L9752+48
	movw	r0, #:lower16:.LC830
	mov	r2, r8
	movt	r0, #:upper16:.LC830
	sub	r1, r5, #8
	bl	printk
	b	.L9653
.L9743:
	movw	r0, #:lower16:.LC846
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r5, [sp]
	ldr	r1, .L9752
	movt	r0, #:upper16:.LC846
	ldrb	r2, [r4]	@ zero_extendqisi2
	bl	printk
	b	.L9633
.L9731:
	ldr	r5, .L9752+48
	b	.L9653
.L9642:
	ldr	r5, .L9752+48
	movw	r0, #:lower16:.LC844
	ldr	r3, [sp, #16]
	movt	r0, #:upper16:.LC844
	ldr	r2, [sp, #20]
	sub	r1, r5, #8
	str	r3, [sp]
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r2, [sp, #4]
	ldrb	r2, [r4]	@ zero_extendqisi2
	str	r8, [sp, #8]
	bl	printk
	b	.L9653
.L9732:
	movw	r0, #:lower16:.LC825
	ldr	r1, .L9752
	mvn	r5, #106
	movt	r0, #:upper16:.LC825
	bl	printk
	b	.L9633
.L9753:
	.align	2
.L9752:
	.word	.LANCHOR5-1768
	.word	.LANCHOR4+672
	.word	.LANCHOR0+180
	.word	.LANCHOR0+1744
	.word	.LANCHOR4+600
	.word	.LANCHOR0+1700
	.word	.LANCHOR4+744
	.word	.LANCHOR4+840
	.word	.LANCHOR4+816
	.word	.LANCHOR4+576
	.word	.LANCHOR4+528
	.word	.LANCHOR4+792
	.word	.LANCHOR5-1760
	.fnend
	.size	mbim_setup, .-mbim_setup
	.section	.rodata.str1.4
	.align	2
.LC848:
	.ascii	"<3>%s() conn_gadget_lock(write_excl) f\012\000"
	.align	2
.LC849:
	.ascii	"<3>%s() conn_gadget_write dev->error\012\000"
	.align	2
.LC850:
	.ascii	"<3>%s: copy_from_user failed\012\000"
	.align	2
.LC851:
	.ascii	"<3>%s() xfer error %d\012\000"
	.align	2
.LC852:
	.ascii	"%s: %s: req_put\012\000"
	.align	2
.LC853:
	.ascii	"<3>%s: wait_event_interruptible(wrwq,reqget) failed"
	.ascii	" %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_write, %function
conn_gadget_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #2484]
	.pad #52
	sub	sp, sp, #52
	ldr	r4, [r0, #124]
	str	r1, [sp, #12]
	str	r2, [sp, #16]
	cmp	r3, #0
	beq	.L9800
	add	r3, r4, #112
	mov	r8, r2
	str	r3, [sp, #20]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L9794
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L9782:
	cmp	r8, #0
	beq	.L9758
.L9804:
	ldr	r3, [r4, #104]
	add	r7, r4, #120
	add	r5, r4, #88
.L9762:
	cmp	r3, #0
	mov	r0, r5
	bne	.L9801
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	mov	r10, r0
	cmp	r7, r3
	mov	r0, r3
	sub	r6, r3, #36
	beq	.L9802
	bl	list_del
	mov	r1, r10
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L9760
.L9761:
	ldr	r10, [r4, #192]
	ldr	r0, [r6]
	ldr	r3, [r9, #8]
	ldr	r1, [sp, #12]
	cmp	r10, r8
	bcc	.L9769
	.syntax divided
@ 439 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L9771
	mov	r10, r8
.L9770:
	mov	r2, r10
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L9773
.L9774:
	str	r10, [r6, #4]
	ldr	r0, [r4, #92]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L9803
	ldr	r3, [sp, #12]
	sub	r8, r8, r10
	cmp	r8, #0
	add	r3, r3, r10
	str	r3, [sp, #12]
	bne	.L9804
.L9758:
	ldr	r1, [sp, #20]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L9754:
	ldr	r0, [sp, #16]
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9802:
	mov	r1, r10
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L9760:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L9762
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #40
	movt	r2, #:upper16:autoremove_wake_function
	add	r10, r4, #156
	str	r3, [sp, #28]
	str	r1, [sp, #40]
	str	r0, [sp, #32]
	str	r2, [sp, #36]
	str	r1, [sp, #44]
	b	.L9768
.L9763:
	bl	list_del
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L9765
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L9766
.L9805:
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L9767
	bl	schedule
.L9768:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r10
	bl	prepare_to_wait
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	mov	fp, r0
	cmp	r7, r3
	mov	r0, r3
	sub	r6, r3, #36
	bne	.L9763
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L9805
.L9766:
	add	r1, sp, #28
	mov	r0, r10
	bl	finish_wait
	b	.L9782
.L9769:
	.syntax divided
@ 439 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r10; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L9770
	cmp	r10, #0
	beq	.L9774
	mov	r8, r10
.L9771:
	mov	r1, r8
	bl	__memzero
.L9773:
	ldr	r9, .L9807
	movw	r0, #:lower16:.LC850
	mvn	r3, #13
	movw	r8, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LC850
	movt	r8, #:upper16:.LANCHOR4
	str	r3, [sp, #16]
	sub	r1, r9, #12
	bl	printk
.L9775:
	movw	r3, #906
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L9806
.L9781:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r2, r7
	mov	r7, r0
	ldr	r1, [r4, #124]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L9758
.L9794:
	ldr	r1, [sp, #20]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r3, #15
	movw	r0, #:lower16:.LC848
	ldr	r1, .L9807+4
	movt	r0, #:upper16:.LC848
	str	r3, [sp, #16]
	bl	printk
	b	.L9754
.L9765:
	add	r1, sp, #28
	mov	r0, r10
	bl	finish_wait
	b	.L9761
.L9803:
	movw	r8, #:lower16:.LANCHOR4
	movw	r2, #882
	ldr	r9, .L9807
	movt	r8, #:upper16:.LANCHOR4
	mov	r3, #1
	ldrh	r2, [r8, r2]
	mov	r10, r0
	str	r3, [r4, #104]
	tst	r2, #4
	beq	.L9777
	movw	r1, #:lower16:.LC246
	str	r3, [sp]
	sub	r3, r9, #12
	add	r0, r8, #864
	movt	r1, #:upper16:.LC246
	mov	r2, r3
	bl	__dynamic_pr_debug
.L9777:
	movw	r0, #:lower16:.LC851
	mov	r2, r10
	movt	r0, #:upper16:.LC851
	sub	r1, r9, #12
	bl	printk
	mvn	r3, #4
	str	r3, [sp, #16]
	b	.L9775
.L9800:
	mvn	r3, #18
	movw	r0, #:lower16:.LC448
	ldr	r1, .L9807+4
	movt	r0, #:upper16:.LC448
	str	r3, [sp, #16]
	bl	printk
	b	.L9754
.L9806:
	sub	r3, r9, #12
	movw	r1, #:lower16:.LC852
	ldr	r0, .L9807+8
	mov	r2, r3
	movt	r1, #:upper16:.LC852
	bl	__dynamic_pr_debug
	b	.L9781
.L9801:
	mvn	r3, #4
	movw	r0, #:lower16:.LC849
	ldr	r1, .L9807+4
	movt	r0, #:upper16:.LC849
	str	r3, [sp, #16]
	bl	printk
	b	.L9758
.L9767:
	add	r1, sp, #28
	mov	r0, r10
	bl	finish_wait
	mov	r3, #65024
	mov	r2, #65024
	ldr	r1, .L9807+4
	movw	r0, #:lower16:.LC853
	mov	r5, r3
	movt	r2, 65535
	movt	r0, #:upper16:.LC853
	bl	printk
	mov	r3, r5
	movt	r3, 65535
	str	r3, [sp, #16]
	b	.L9758
.L9808:
	.align	2
.L9807:
	.word	.LANCHOR5-1744
	.word	.LANCHOR5-1756
	.word	.LANCHOR4+888
	.fnend
	.size	conn_gadget_write, .-conn_gadget_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_unbind, %function
diag_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L9825
	cmp	r3, #2
	bhi	.L9826
.L9811:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #124]
	cmp	r3, #0
	beq	.L9812
	ldr	r2, [r3, #20]
	cmp	r2, r4
	moveq	r2, #0
	streq	r2, [r3, #20]
.L9812:
	add	r0, r4, #140
	add	r8, r4, #108
	bl	list_del
	mov	r6, r4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r6, #100]!
	mov	r7, r0
	cmp	r5, r6
	ldr	r9, [r5]
	beq	.L9816
.L9813:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r0, [r4, #88]
	mov	r1, r5
	mov	r5, r9
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r9
	ldr	r9, [r9]
	bne	.L9813
.L9816:
	mov	r6, r4
	ldr	r0, [r6, #92]!
	cmp	r0, r6
	ldr	r9, [r0]
	beq	.L9815
.L9814:
	sub	r5, r0, #36
	bl	list_del
	ldr	r0, [r4, #84]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r9
	mov	r0, r9
	ldr	r9, [r9]
	bne	.L9814
.L9815:
	mov	r0, r8
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree
.L9825:
	mov	r5, r0
	ldr	r0, [r1, #12]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L9811
.L9826:
	ldr	r0, [r4, #8]
	bl	kfree
	b	.L9811
	.fnend
	.size	diag_function_unbind, .-diag_function_unbind
	.section	.rodata.str1.4
	.align	2
.LC854:
	.ascii	"%s: suspended port %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_suspend, %function
frmnet_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #930
	mov	r4, r0
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR4
	movw	r6, #:lower16:.LANCHOR1
	strd	r8, [sp, #16]
	movt	r7, #:upper16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldrh	r2, [r7, r3]
	str	lr, [sp, #32]
	ldrb	ip, [r0, #116]	@ zero_extendqisi2
	.pad #20
	sub	sp, sp, #20
	tst	r2, #4
	add	r3, ip, ip, lsl #1
	add	r3, r6, r3, lsl #3
	ldr	r8, [r3, #3240]
	bne	.L9856
.L9828:
	ldr	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9830
	blx	r3
.L9830:
	ldr	r0, .L9861
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L9857
.L9831:
	add	fp, r4, #132
	add	r10, r4, #144
	mov	r0, fp
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #144]
	mov	r9, r0
	cmp	r5, r10
	beq	.L9832
.L9833:
	sub	r3, r5, #8
	mov	r0, r5
	str	r3, [sp, #12]
	bl	list_del
	ldr	r0, [r5, #-8]
	bl	kfree
	ldr	r3, [sp, #12]
	mov	r0, r3
	bl	kfree
	ldr	r5, [r4, #144]
	cmp	r10, r5
	bne	.L9833
.L9832:
	mov	r3, #0
	mov	r1, r9
	mov	r0, fp
	str	r3, [r4, #152]
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #7
	bhi	.L9834
	cmp	r8, #5
	bls	.L9858
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	movw	r2, #954
	ldrh	r2, [r7, r2]
	add	r3, r3, r3, lsl #1
	tst	r2, #4
	add	r3, r6, r3, lsl #3
	ldrb	r3, [r3, #3248]	@ zero_extendqisi2
	add	r2, r6, r3, lsl #2
	ldr	r4, [r2, #3672]
	bne	.L9859
.L9838:
	ldr	r0, [r6, #3460]
	add	r1, r4, #316
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work
.L9834:
	sub	r3, r8, #8
	cmp	r3, #2
	bhi	.L9837
.L9827:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9858:
	beq	.L9827
.L9837:
	sub	r8, r8, #1
	cmp	r8, #9
	bls	.L9860
	movw	r2, #:lower16:.LC183
	movt	r2, #:upper16:.LC183
.L9839:
	ldr	r1, .L9861+4
	movw	r0, #:lower16:.LC637
	movt	r0, #:upper16:.LC637
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L9856:
	sub	r2, r8, #1
	cmp	r2, #9
	movwhi	r3, #:lower16:.LC183
	movthi	r3, #:upper16:.LC183
	bhi	.L9829
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #1160]
.L9829:
	movw	r1, #:lower16:.LC635
	ldr	r2, .L9861+4
	stm	sp, {r4, ip}
	movt	r1, #:upper16:.LC635
	ldr	r0, .L9861+8
	bl	__dynamic_pr_debug
	b	.L9828
.L9857:
	movw	r1, #:lower16:.LC612
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	sub	r0, r0, #24
	ldr	r2, .L9861+12
	movt	r1, #:upper16:.LC612
	bl	__dynamic_pr_debug
	b	.L9831
.L9859:
	movw	r1, #:lower16:.LC854
	ldr	r2, .L9861+16
	movt	r1, #:upper16:.LC854
	ldr	r0, .L9861+20
	bl	__dynamic_pr_debug
	b	.L9838
.L9860:
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r8, r3, r8, lsl #2
	ldr	r2, [r8, #1160]
	b	.L9839
.L9862:
	.align	2
.L9861:
	.word	.LANCHOR4-2400
	.word	.LANCHOR5-1736
	.word	.LANCHOR4+912
	.word	.LANCHOR5-3708
	.word	.LANCHOR5-1720
	.word	.LANCHOR4+936
	.fnend
	.size	frmnet_suspend, .-frmnet_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_unbind, %function
mtp_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	add	r6, r1, #88
	strd	r8, [sp, #16]
	add	r9, r1, #116
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	b	.L9864
.L9865:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L9866
	ldr	r7, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r8
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L9864:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #116]
	mov	r7, r0
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L9865
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L9866:
	ldr	r5, [r4, #168]
	cmp	r5, #0
	beq	.L9868
	ldr	r7, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L9868:
	ldr	r5, [r4, #172]
	cmp	r5, #0
	beq	.L9869
	ldr	r7, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L9869:
	add	r9, r4, #124
	b	.L9870
.L9871:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L9872
	ldr	r7, [r4, #100]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r8
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L9870:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #124]
	mov	r7, r0
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L9871
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L9872:
	mov	r3, #0
	str	r3, [r4, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	mtp_function_unbind, .-mtp_function_unbind
	.section	.rodata.str1.4
	.align	2
.LC855:
	.ascii	"ecm0\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_function_unbind_config, %function
ecm_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L9890
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	bl	strim
	mov	r1, r0
	movw	r0, #:lower16:.LC631
	movt	r0, #:upper16:.LC631
	bl	strcmp
	cmp	r0, #0
	bne	.L9889
.L9881:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L9889:
	movw	r1, #:lower16:.LC855
	movw	r0, #:lower16:init_net
	movt	r1, #:upper16:.LC855
	movt	r0, #:upper16:init_net
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L9881
	.syntax divided
@ 17 "/home/jprim/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/jprim/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	free_netdev
.L9891:
	.align	2
.L9890:
	.word	.LANCHOR1+3020
	.fnend
	.size	ecm_qc_function_unbind_config, .-ecm_qc_function_unbind_config
	.section	.rodata.str1.4
	.align	2
.LC856:
	.ascii	"%s complete --> %d, %d/%d\012\000"
	.align	2
.LC857:
	.ascii	"kill %s:  resubmit %d bytes --> %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_complete, %function
f_midi_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r0]
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r1, #44]
	ldr	r2, [r0, #20]
	cmn	r3, #102
	ldr	r7, [r2, #24]
	bge	.L9893
	cmn	r3, #104
	bge	.L9894
	cmn	r3, #121
	bne	.L9936
.L9895:
	ldr	r3, [r4, #8]
	mov	r2, #32
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L9937
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L9893:
	cmp	r3, #0
	bne	.L9896
	ldr	r3, [r0, #92]
	cmp	r3, r4
	beq	.L9938
	ldr	r3, [r0, #88]
	cmp	r3, r4
	bne	.L9895
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	f_midi_transmit
.L9936:
	cmn	r3, #108
	bne	.L9896
.L9894:
	ldr	r3, [r0, #92]
	ldr	r0, [r5]
	cmp	r4, r3
	beq	.L9939
.L9902:
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L9937:
	ldr	ip, [r7]
	movw	r1, #:lower16:.LC857
	str	r0, [sp]
	movt	r1, #:upper16:.LC857
	ldr	r3, [r5, #4]
	ldr	r2, [r4, #4]
	add	r0, ip, #32
	bl	dev_err
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3
.L9896:
	movw	r0, #:lower16:.LANCHOR4
	movw	r2, #978
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r2, [r0, r2]
	tst	r2, #4
	beq	.L9895
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC856
	add	r0, r0, #960
	ldr	lr, [r5, #4]
	str	r3, [sp]
	movt	r2, #:upper16:.LC856
	ldr	ip, [r5, #48]
	ldr	r3, [r4, #4]
	add	r1, r1, #32
	stmib	sp, {ip, lr}
	bl	__dynamic_dev_dbg
	b	.L9895
.L9939:
	ldr	r2, [r5, #48]
	cmp	r2, #3
	bls	.L9902
	movw	r8, #:lower16:.LANCHOR5
	add	r6, r0, #1
	movt	r8, #:upper16:.LANCHOR5
	rsb	r7, r0, #2
	b	.L9904
.L9903:
	add	r6, r6, #4
	add	r3, r7, r6
	cmp	r3, r2
	bcs	.L9940
.L9904:
	ldrb	r3, [r6, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9903
	ldr	ip, [r4]
	lsr	lr, r3, #4
	and	r3, r3, #15
	add	r3, r8, r3
	add	r0, lr, #42
	mov	r1, r6
	ldr	r0, [ip, r0, lsl #2]
	cmp	r0, #0
	beq	.L9903
	ldr	ip, [ip, #296]
	lsr	ip, ip, lr
	tst	ip, #1
	beq	.L9903
	ldrb	r2, [r3, #-1704]	@ zero_extendqisi2
	bl	snd_rawmidi_receive
	ldr	r2, [r5, #48]
	b	.L9903
.L9938:
	ldr	r8, [r1]
	ldr	r2, [r1, #48]
	cmp	r2, #3
	bls	.L9895
	movw	r9, #:lower16:.LANCHOR5
	add	r6, r8, #1
	movt	r9, #:upper16:.LANCHOR5
	rsb	r8, r8, #2
	b	.L9900
.L9899:
	add	r6, r6, #4
	add	r3, r8, r6
	cmp	r3, r2
	bcs	.L9895
.L9900:
	ldrb	r3, [r6, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9899
	ldr	ip, [r4]
	lsr	lr, r3, #4
	and	r3, r3, #15
	add	r3, r9, r3
	add	r0, lr, #42
	mov	r1, r6
	ldr	r0, [ip, r0, lsl #2]
	cmp	r0, #0
	beq	.L9899
	ldr	ip, [ip, #296]
	lsr	ip, ip, lr
	tst	ip, #1
	beq	.L9899
	ldrb	r2, [r3, #-1704]	@ zero_extendqisi2
	bl	snd_rawmidi_receive
	ldr	r2, [r5, #48]
	b	.L9899
.L9940:
	ldr	r0, [r5]
	b	.L9902
	.fnend
	.size	f_midi_complete, .-f_midi_complete
	.section	.rodata.str1.4
	.align	2
.LC858:
	.ascii	"send_file_work(%lld %lld)\012\000"
	.align	2
.LC859:
	.ascii	"send_file_work: xfer error %d\012\000"
	.align	2
.LC860:
	.ascii	"send_file_work returning %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_file_work, %function
send_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 72
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-100]
	.pad #92
	sub	sp, sp, #92
	str	r3, [sp, #52]
	.syntax divided
@ 751 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r8, [r0, #48]
	ldr	r3, [r6, #32]
	ldrd	r0, [r0, #40]
	cmp	r8, #0
	str	r3, [sp, #24]
	sbcs	r3, r9, #0
	mvnlt	r3, #21
	strd	r0, [sp, #56]
	strlt	r3, [r6, #68]
	blt	.L9941
	movw	r3, #:lower16:.LANCHOR4
	mov	r2, r3
	movw	r3, #1002
	movt	r2, #:upper16:.LANCHOR4
	ldrh	r3, [r2, r3]
	str	r2, [sp, #48]
	tst	r3, #4
	bne	.L9996
.L9944:
	ldr	r4, [r6, #56]
	cmp	r4, #0
	bne	.L9997
.L9945:
	ldr	r3, [r6, #-92]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	asr	r1, r3, #31
	and	r3, r3, r8
	and	r2, r1, r9
	orrs	r3, r3, r2
	moveq	r3, #1
	movne	r3, #0
	cmp	r8, #1
	mov	r1, r3
	sbcs	r2, r9, #0
	orrge	r3, r3, #1
	cmp	r3, #0
	beq	.L9953
	mov	r3, sp
	sub	r7, r6, #96
	bic	r10, r3, #8128
	sub	r3, r6, #68
	bic	r10, r10, #63
	mov	fp, r1
	str	r3, [sp, #20]
	str	r10, [sp, #44]
	b	.L9965
.L9949:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	movne	r3, #0
	beq	.L9950
	ldr	r2, [r6, #-80]
	cmp	r2, #3
	beq	.L9958
.L10002:
	cmp	r5, #0
	beq	.L9947
	movw	r2, #:lower16:.LANCHOR0
	mov	r1, #0
	ldr	r3, [r5]
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #1788]
	cmp	r2, r8
	sbcs	r1, r1, r9
	movge	r2, r8
	cmp	r4, #0
	beq	.L9961
	mov	r1, #2
	str	r8, [r3]
	strh	r1, [r3, #4]	@ movhi
	ldrh	r1, [r6, #60]
	strh	r1, [r3, #6]	@ movhi
	ldr	r1, [r6, #64]
	str	r1, [r3, #8]
	ldr	r3, [r5]
.L9961:
	add	r1, r3, r4
	sub	r2, r2, r4
	ldr	r0, [sp, #24]
	add	r3, sp, #56
	bl	vfs_read
	subs	r3, r0, #0
	blt	.L9962
	add	r4, r3, r4
	mov	r2, #208
	mov	r1, r5
	str	r4, [r5, #4]
	ldr	r0, [r6, #-92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L9998
	subs	r8, r8, r4
	and	r3, fp, #1
	sbc	r9, r9, r4, asr #31
	cmp	r8, #1
	mov	r4, #0
	sbcs	r2, r9, #0
	orrge	r3, r3, #1
	cmp	r3, r4
	beq	.L9953
.L9965:
	orrs	r3, r8, r9
	mov	r0, r7
	moveq	fp, #0
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r6, #-68]
	mov	r10, r0
	ldr	r3, [sp, #20]
	cmp	r5, r3
	bne	.L9949
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L9950:
	ldr	r3, [r6, #-80]
	cmp	r3, #2
	bne	.L9999
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #80
	str	fp, [sp, #28]
	ldr	ip, [sp, #44]
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	sub	r10, r6, #40
	strd	r8, [sp, #32]
	ldr	r5, [sp, #20]
	str	r4, [sp, #40]
	str	r2, [sp, #76]
	ldr	r0, [ip, #12]
	mov	r4, ip
	str	r3, [sp, #68]
	str	r0, [sp, #72]
	str	r1, [sp, #80]
	str	r1, [sp, #84]
	b	.L9957
.L9954:
	bl	list_del
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	bne	.L9970
	ldr	r3, [r6, #-80]
	cmp	r3, #2
	bne	.L9971
.L10000:
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L9972
	bl	schedule
.L9957:
	mov	r2, #1
	add	r1, sp, #68
	mov	r0, r10
	bl	prepare_to_wait
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #-68]
	mov	fp, r0
	cmp	r3, r5
	mov	r0, r3
	sub	r9, r3, #36
	bne	.L9954
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6, #-80]
	cmp	r3, #2
	beq	.L10000
.L9971:
	mov	r5, #0
	ldr	fp, [sp, #28]
	mov	r3, r5
	ldrd	r8, [sp, #32]
	ldr	r4, [sp, #40]
	b	.L9956
.L9999:
	cmp	r3, #3
	beq	.L9966
.L9953:
	mov	r3, #0
.L9947:
	ldr	r1, [sp, #48]
	movw	r2, #1050
	ldrh	r2, [r1, r2]
	tst	r2, #4
	bne	.L10001
.L9967:
	str	r3, [r6, #68]
	.syntax divided
@ 841 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L9941:
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9972:
	ldr	fp, [sp, #28]
	mov	r3, #65024
	mov	r5, #0
	ldrd	r8, [sp, #32]
	movt	r3, 65535
	ldr	r4, [sp, #40]
.L9956:
	add	r1, sp, #68
	mov	r0, r10
	str	r3, [sp, #28]
	bl	finish_wait
	ldr	r2, [r6, #-80]
	ldr	r3, [sp, #28]
	cmp	r2, #3
	bne	.L10002
.L9958:
	cmp	r5, #0
	beq	.L9966
	mvn	r3, #124
.L9962:
	mov	r0, r7
	str	r3, [sp, #24]
	bl	_raw_spin_lock_irqsave
	mov	r4, r0
	add	r0, r5, #36
	ldr	r1, [r6, #-64]
	ldr	r2, [sp, #20]
	bl	__list_add
	mov	r1, r4
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #24]
	b	.L9947
.L9997:
	adds	r8, r8, #12
	mov	r4, #12
	adc	r9, r9, #0
	b	.L9945
.L9970:
	mov	r5, r9
	mov	r3, #0
	ldr	fp, [sp, #28]
	ldrd	r8, [sp, #32]
	ldr	r4, [sp, #40]
	b	.L9956
.L9998:
	ldr	r2, [sp, #48]
	movw	r3, #1026
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L10003
.L9964:
	ldr	r3, [r6, #-80]
	cmp	r3, #0
	mvneq	r3, #4
	beq	.L9962
	mov	r2, #4
	mvn	r3, #4
	str	r2, [r6, #-80]
	b	.L9962
.L9996:
	ldr	r3, [sp, #52]
	movw	r2, #:lower16:.LC858
	movt	r2, #:upper16:.LC858
	ldr	r3, [r3]
	strd	r0, [sp]
	ldr	r1, [sp, #48]
	strd	r8, [sp, #8]
	add	r0, r1, #984
	add	r1, r3, #32
	bl	__dynamic_dev_dbg
	b	.L9944
.L10001:
	ldr	r2, [sp, #52]
	str	r3, [sp, #20]
	ldr	r0, .L10004
	ldr	r1, [r2]
	movw	r2, #:lower16:.LC860
	movt	r2, #:upper16:.LC860
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [sp, #20]
	b	.L9967
.L9966:
	mvn	r3, #124
	b	.L9947
.L10003:
	ldr	r3, [sp, #52]
	movw	r2, #:lower16:.LC859
	movt	r2, #:upper16:.LC859
	ldr	r1, [r3]
	mov	r3, r0
	ldr	r0, .L10004+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9964
.L10005:
	.align	2
.L10004:
	.word	.LANCHOR4+1032
	.word	.LANCHOR4+1008
	.fnend
	.size	send_file_work, .-send_file_work
	.section	.rodata.str1.4
	.align	2
.LC861:
	.ascii	"mtp_write(%d)\012\000"
	.align	2
.LC862:
	.ascii	"mtp_write dev->error\012\000"
	.align	2
.LC863:
	.ascii	"mtp_write: xfer error %d\012\000"
	.align	2
.LC864:
	.ascii	"mtp_write returning %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_write, %function
mtp_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	ip, r3
	movw	r3, #1074
	strd	r6, [sp, #8]
	movt	ip, #:upper16:.LANCHOR4
	strd	r8, [sp, #16]
	mov	r7, r2
	strd	r10, [sp, #24]
	mov	r9, r1
	str	lr, [sp, #32]
	ldrh	r3, [ip, r3]
	.pad #52
	sub	sp, sp, #52
	ldr	r5, [r0, #124]
	str	r2, [sp, #8]
	str	ip, [sp, #12]
	tst	r3, #4
	ldr	r3, [r5, #84]
	str	r3, [sp, #20]
	bne	.L10054
.L10007:
	add	r8, r5, #88
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #104]
	cmp	r3, #3
	beq	.L10055
	cmp	r3, #0
	beq	.L10056
	mov	r3, #2
	mov	r0, r8
	str	r3, [r5, #104]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r5, #92]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	tst	r3, r7
	movne	r3, r7
	orreq	r3, r7, #1
	moveq	r2, #1
	movne	r2, #0
	cmp	r3, #0
	str	r2, [sp, #4]
	beq	.L10011
	mov	r3, sp
	bic	fp, r3, #8128
	bic	fp, fp, #63
.L10028:
	ldr	r3, [r5, #104]
	cmp	r7, #0
	ldr	r2, [sp, #4]
	moveq	r2, #0
	cmp	r3, #2
	str	r2, [sp, #4]
	bne	.L10057
	mov	r0, r8
	add	r10, r5, #116
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #116]
	mov	r6, r0
	cmp	r10, r4
	beq	.L10058
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	beq	.L10015
.L10016:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r6, [r3, #1788]
	cmp	r6, r7
	movcc	r3, r6
	movcs	r3, r7
	movcs	r6, r7
	cmp	r3, #0
	beq	.L10024
	ldr	r3, [fp, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r6; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	ldr	r0, [r4]
	beq	.L10059
	mov	r1, r6
	bl	__memzero
	mvn	r3, #13
	str	r3, [sp, #8]
.L10026:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	add	r0, r4, #36
	mov	r2, r10
	ldr	r4, [sp, #4]
	ldr	r1, [r5, #120]
	bl	__list_add
	mov	r0, r8
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore
.L10011:
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #104]
	cmp	r3, #3
	beq	.L10036
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r5, #104]
.L10029:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
	ldr	r2, [sp, #12]
	movw	r3, #1146
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L10060
.L10006:
	ldr	r0, [sp, #8]
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10059:
	mov	r2, r6
	mov	r1, r9
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L10061
.L10024:
	str	r6, [r4, #4]
	ldr	r0, [r5, #92]
	mov	r2, #208
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L10062
	ldr	r3, [sp, #4]
	sub	r7, r7, r6
	add	r9, r9, r6
	orrs	r3, r3, r7
	bne	.L10028
	b	.L10011
.L10058:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L10015:
	ldr	r3, [r5, #104]
	cmp	r3, #2
	bne	.L10031
	ldr	r0, [fp, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #40
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	str	r7, [sp, #16]
	add	r6, r5, #144
	str	r3, [sp, #28]
	str	r0, [sp, #32]
	str	r2, [sp, #36]
	str	r1, [sp, #40]
	str	r1, [sp, #44]
	b	.L10021
.L10017:
	bl	list_del
	mov	r1, r4
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L10019
	ldr	r3, [r5, #104]
	cmp	r3, #2
	bne	.L10032
.L10063:
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L10033
	bl	schedule
.L10021:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r6
	bl	prepare_to_wait
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #116]
	mov	r4, r0
	cmp	r10, r3
	mov	r0, r3
	sub	r7, r3, #36
	bne	.L10017
	mov	r1, r4
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #104]
	cmp	r3, #2
	beq	.L10063
.L10032:
	mov	r3, #0
	str	r3, [sp, #8]
	b	.L10020
.L10033:
	mov	r3, #65024
	movt	r3, 65535
	str	r3, [sp, #8]
.L10020:
	add	r1, sp, #28
	mov	r0, r6
	bl	finish_wait
	b	.L10011
.L10031:
	mov	r3, #0
	str	r3, [sp, #8]
	b	.L10011
.L10019:
	add	r1, sp, #28
	mov	r0, r6
	mov	r4, r7
	ldr	r7, [sp, #16]
	bl	finish_wait
	b	.L10016
.L10036:
	mvn	r3, #124
	str	r3, [sp, #8]
	b	.L10029
.L10057:
	ldr	r2, [sp, #12]
	movw	r3, #1098
	ldrh	r3, [r2, r3]
	tst	r3, #4
	mvneq	r3, #4
	streq	r3, [sp, #8]
	beq	.L10011
	ldr	r3, [sp, #20]
	movw	r2, #:lower16:.LC862
	movt	r2, #:upper16:.LC862
	ldr	r0, .L10064
	ldr	r1, [r3]
	mvn	r3, #4
	str	r3, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10011
.L10062:
	ldr	r2, [sp, #12]
	movw	r3, #1122
	ldrh	r3, [r2, r3]
	tst	r3, #4
	mvneq	r3, #4
	streq	r3, [sp, #8]
	beq	.L10026
	ldr	r3, [sp, #20]
	mvn	ip, #4
	movw	r2, #:lower16:.LC863
	movt	r2, #:upper16:.LC863
	str	ip, [sp, #8]
	ldr	r1, [r3]
	mov	r3, r0
	ldr	r0, .L10064+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10026
.L10054:
	ldr	r1, [r3]
	movw	r2, #:lower16:.LC861
	add	r0, ip, #1056
	movt	r2, #:upper16:.LC861
	mov	r3, r7
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10007
.L10060:
	ldr	r3, [sp, #20]
	movw	r2, #:lower16:.LC864
	movt	r2, #:upper16:.LC864
	ldr	r0, .L10064+8
	ldr	r1, [r3]
	ldr	r3, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10006
.L10056:
	mvn	r3, #18
	mov	r0, r8
	str	r3, [sp, #8]
	bl	_raw_spin_unlock_irq
	b	.L10006
.L10055:
	mov	r3, #1
	mvn	r2, #124
	mov	r0, r8
	str	r3, [r5, #104]
	str	r2, [sp, #8]
	bl	_raw_spin_unlock_irq
	b	.L10006
.L10061:
	mvn	r3, #13
	str	r3, [sp, #8]
	b	.L10026
.L10065:
	.align	2
.L10064:
	.word	.LANCHOR4+1080
	.word	.LANCHOR4+1104
	.word	.LANCHOR4+1128
	.fnend
	.size	mtp_write, .-mtp_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_disable, %function
fsg_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #94]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L10067
	ldr	r0, [r0, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #100]
	bfc	r3, #0, #1
	strb	r3, [r4, #94]
	str	r1, [r2]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
.L10067:
	tst	r3, #2
	beq	.L10068
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #104]
	bfc	r3, #1, #1
	strb	r3, [r4, #94]
	str	r1, [r2]
.L10068:
	ldr	r3, [r4, #88]
	mov	r2, #0
	str	r2, [r3, #12]
	ldr	r4, [r4, #88]
	add	r6, r4, #44
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r5, r0
	cmp	r3, #4
	bgt	.L10070
	ldr	r3, [r4, #56]
	mov	r1, #4
	ldr	r2, [r4, #168]
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	cmp	r2, #0
	beq	.L10070
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L10070:
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	fsg_disable, .-fsg_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_unbind, %function
adb_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, #0
	mov	r2, #1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	add	r0, r1, #128
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	str	r3, [r1, #100]
	mov	r1, #3
	str	r2, [r6, #104]
	bl	__wake_up
	ldr	r4, [r6, #152]
	cmp	r4, #0
	beq	.L10083
	ldr	r5, [r6, #96]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L10083:
	add	r9, r6, #120
	add	r8, r6, #88
	b	.L10084
.L10085:
	bl	list_del
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L10091
	ldr	r5, [r6, #92]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L10084:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r6, #120]
	mov	r5, r0
	cmp	r4, r9
	mov	r0, r4
	sub	r7, r4, #36
	bne	.L10085
	mov	r1, r5
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L10091:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	adb_function_unbind, .-adb_function_unbind
	.section	.rodata.str1.4
	.align	2
.LC865:
	.ascii	"rndis req%02x.%02x v%04x i%04x l%d\012\000"
	.align	2
.LC866:
	.ascii	"<3>%s: rndis response on err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_setup, %function
rndis_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r1]	@ unaligned
	.pad #36
	sub	sp, sp, #36
	ldr	r2, [r0, #20]
	ldrh	fp, [r1, #4]	@ unaligned
	ldrh	r10, [r1, #2]	@ unaligned
	rev16	r3, r3
	ldrh	r1, [r1, #6]	@ unaligned
	uxth	r3, r3
	ldr	r8, [r2, #24]
	cmp	r3, #8448
	str	r1, [sp, #16]
	ldr	r6, [r8, #4]
	beq	.L10093
	movw	r2, #41217
	cmp	r3, r2
	bne	.L10097
	cmp	r10, #0
	bne	.L10097
	ldrb	r3, [r0, #120]	@ zero_extendqisi2
	cmp	r3, fp
	bne	.L10097
	ldr	r1, [r0, #144]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	add	r3, r7, #3696
	rsb	r1, r1, r1, lsl #4
	lsl	r1, r1, #2
	add	r2, r7, r1
	add	r1, r1, #52
	ldr	r0, [r2, #3748]
	add	r1, r3, r1
	cmp	r1, r0
	ldr	r2, [r0]
	bne	.L10101
	b	.L10097
.L10099:
	cmp	r1, r2
	mov	r0, r2
	ldr	r2, [r2]
	beq	.L10097
.L10101:
	ldr	ip, [r0, #16]
	cmp	ip, #0
	bne	.L10099
	ldr	r1, [r0, #8]
	mov	r2, #1
	ldr	r9, [r0, #12]
	str	r2, [r0, #16]
	cmp	r1, #0
	beq	.L10097
	mov	r2, r9
	ldr	r0, [r6]
	str	r1, [sp, #20]
	bl	memcpy
	movw	r2, #:lower16:rndis_qc_response_complete
	ldr	r3, .L10121
	movt	r2, #:upper16:rndis_qc_response_complete
	ldr	r1, [sp, #20]
	str	r2, [r6, #28]
	ldr	r2, [r5, #144]
	rsb	r2, r2, r2, lsl #4
	lsl	r2, r2, #2
	add	r7, r7, r2
	add	r2, r2, #52
	ldr	r0, [r7, #3748]
	add	r3, r3, r2
	cmp	r0, r3
	ldr	r7, [r0]
	strne	r5, [sp, #24]
	movne	r5, r3
	strne	r4, [sp, #28]
	movne	r4, r1
	bne	.L10102
	b	.L10105
.L10104:
	cmp	r7, r5
	mov	r0, r7
	ldr	r7, [r7]
	beq	.L10119
.L10102:
	cmp	r0, #0
	beq	.L10104
	ldr	r2, [r0, #8]
	cmp	r4, r2
	bne	.L10104
	str	r0, [sp, #20]
	bl	list_del
	ldr	r0, [sp, #20]
	bl	kfree
	cmp	r7, r5
	mov	r0, r7
	ldr	r7, [r7]
	bne	.L10102
.L10119:
	ldr	r5, [sp, #24]
	ldr	r4, [sp, #28]
.L10105:
	cmp	r9, #0
	mov	r7, r9
	blt	.L10092
	ldr	r3, [sp, #16]
	cmp	r9, r3
	movge	r7, #0
	movlt	r7, #1
	b	.L10098
.L10097:
	mvn	r7, #94
.L10092:
	mov	r0, r7
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10093:
	cmp	r10, #0
	bne	.L10097
	ldrb	r3, [r0, #120]	@ zero_extendqisi2
	cmp	r3, fp
	bne	.L10097
	movw	r3, #:lower16:rndis_qc_command_complete
	mov	r9, r1
	movt	r3, #:upper16:rndis_qc_command_complete
	mov	r7, r10
	str	r3, [r6, #28]
.L10098:
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #1170
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L10120
.L10106:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r9, [r6, #4]
	mov	r1, r6
	str	r5, [r6, #32]
	mov	r2, #32
	bfi	r3, r7, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bge	.L10092
	movw	r0, #:lower16:.LC866
	ldr	r1, .L10121+4
	mov	r2, r7
	movt	r0, #:upper16:.LC866
	bl	printk
	b	.L10092
.L10120:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC865
	add	r0, r0, #1152
	ldr	r1, [r8]
	movt	r2, #:upper16:.LC865
	str	r10, [sp, #4]
	ldr	lr, [sp, #16]
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	str	fp, [sp, #8]
	str	lr, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L10106
.L10122:
	.align	2
.L10121:
	.word	.LANCHOR1+3696
	.word	.LANCHOR5-1688
	.fnend
	.size	rndis_qc_setup, .-rndis_qc_setup
	.section	.rodata.str1.4
	.align	2
.LC867:
	.ascii	"rndis response on err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_setup, %function
rndis_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r1]	@ unaligned
	.pad #36
	sub	sp, sp, #36
	ldrh	r3, [r1, #4]	@ unaligned
	ldrh	r10, [r1, #2]	@ unaligned
	ldrh	fp, [r1, #6]	@ unaligned
	ldr	r1, [r0, #20]
	rev16	r2, r2
	uxth	r2, r2
	cmp	r2, #8448
	ldr	r8, [r1, #24]
	ldr	r6, [r8, #4]
	beq	.L10124
	movw	r1, #41217
	cmp	r2, r1
	bne	.L10128
	cmp	r10, #0
	bne	.L10128
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L10128
	ldr	r1, [r0, #164]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	rsb	r1, r1, r1, lsl #4
	lsl	r1, r1, #2
	add	r2, r7, r1
	add	r1, r1, #52
	ldr	r0, [r2, #3748]
	add	r2, r7, #3696
	add	r1, r2, r1
	cmp	r1, r0
	ldr	r2, [r0]
	bne	.L10132
	b	.L10128
.L10130:
	cmp	r1, r2
	mov	r0, r2
	ldr	r2, [r2]
	beq	.L10128
.L10132:
	ldr	ip, [r0, #16]
	cmp	ip, #0
	bne	.L10130
	ldr	r1, [r0, #8]
	mov	r2, #1
	ldr	r9, [r0, #12]
	str	r2, [r0, #16]
	cmp	r1, #0
	beq	.L10128
	mov	r2, r9
	ldr	r0, [r6]
	str	r1, [sp, #20]
	str	r3, [sp, #24]
	bl	memcpy
	movw	r2, #:lower16:rndis_response_complete
	str	r5, [r6, #32]
	ldr	r3, .L10152
	movt	r2, #:upper16:rndis_response_complete
	ldr	r1, [sp, #20]
	str	r2, [r6, #28]
	ldr	r2, [r5, #164]
	rsb	r2, r2, r2, lsl #4
	lsl	r2, r2, #2
	add	r7, r7, r2
	add	r2, r2, #52
	ldr	r7, [r7, #3748]
	add	r2, r3, r2
	ldr	r3, [sp, #24]
	cmp	r7, r2
	ldr	r5, [r7]
	beq	.L10136
	str	r6, [sp, #20]
	mov	r6, r2
	str	r3, [sp, #24]
	str	r4, [sp, #28]
	mov	r4, r1
	b	.L10133
.L10135:
	cmp	r5, r6
	mov	r7, r5
	ldr	r5, [r5]
	beq	.L10150
.L10133:
	cmp	r7, #0
	beq	.L10135
	ldr	r0, [r7, #8]
	cmp	r4, r0
	bne	.L10135
	mov	r0, r7
	bl	list_del
	mov	r0, r7
	mov	r7, r5
	bl	kfree
	cmp	r5, r6
	ldr	r5, [r5]
	bne	.L10133
.L10150:
	ldr	r6, [sp, #20]
	ldr	r3, [sp, #24]
	ldr	r4, [sp, #28]
.L10136:
	cmp	r9, #0
	mov	r5, r9
	blt	.L10123
	cmp	r9, fp
	movge	r5, #0
	movlt	r5, #1
	b	.L10129
.L10128:
	mvn	r5, #94
.L10123:
	mov	r0, r5
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10124:
	cmp	r10, #0
	bne	.L10128
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L10128
	movw	r2, #:lower16:rndis_command_complete
	mov	r9, fp
	str	r0, [r6, #32]
	movt	r2, #:upper16:rndis_command_complete
	mov	r5, r10
	str	r2, [r6, #28]
.L10129:
	movw	r2, #:lower16:.LANCHOR4
	movw	r1, #1194
	movt	r2, #:upper16:.LANCHOR4
	ldrh	r2, [r2, r1]
	tst	r2, #4
	bne	.L10151
.L10137:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r9, [r6, #4]
	mov	r1, r6
	mov	r2, #32
	bfi	r3, r5, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L10123
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC867
	mov	r2, r5
	movt	r1, #:upper16:.LC867
	add	r0, r0, #32
	bl	dev_err
	b	.L10123
.L10151:
	ldr	r1, [r8]
	str	r10, [sp, #4]
	movw	r2, #:lower16:.LC865
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC865
	str	r3, [sp, #8]
	ldr	r0, .L10152+4
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	str	fp, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L10137
.L10153:
	.align	2
.L10152:
	.word	.LANCHOR1+3696
	.word	.LANCHOR4+1176
	.fnend
	.size	rndis_setup, .-rndis_setup
	.section	.rodata.str1.4
	.align	2
.LC868:
	.ascii	"<3>%s: usb cable is not connected\012\000"
	.align	2
.LC869:
	.ascii	"<3>%s: given_xport:%s cur_xport:%s doing nothing\012"
	.ascii	"\000"
	.align	2
.LC870:
	.ascii	"usb_rmnet_mux: TransportRequested: %s\012\000"
	.align	2
.LC871:
	.ascii	"%s: undefined xport, do nothing\012\000"
	.align	2
.LC872:
	.ascii	"%s: USB not connected\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	transport_store, %function
transport_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r7, #2480]
	.pad #44
	sub	sp, sp, #44
	str	r3, [sp, #4]
	ldr	r3, [r4, #368]
	cmp	r3, #0
	beq	.L10259
	movw	r1, #:lower16:.LC450
	mov	r0, r2
	movt	r1, #:upper16:.LC450
	add	r2, sp, #16
	bl	sscanf
	ldr	r1, [sp, #16]
	movw	r3, #:lower16:.LC626
	movw	r2, #:lower16:.LC627
	ldr	r8, [r4, #360]
	movt	r3, #:upper16:.LC626
	movt	r2, #:upper16:.LC627
	cmp	r1, #0
	movne	r1, #2
	moveq	r1, #3
	movne	r2, r3
	cmp	r8, r1
	str	r1, [sp]
	beq	.L10260
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #1218
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L10261
.L10159:
	mov	r3, #0
	cmp	r8, #0
	str	r3, [r4, #360]
	bne	.L10262
.L10160:
	movw	r3, #1242
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L10263
.L10173:
	ldr	r3, [sp]
	cmp	r3, #3
	str	r3, [r4, #360]
	beq	.L10180
.L10269:
	movw	r9, #:lower16:rmnet_mux_sdio_complete_epout
	mov	r7, #16
	movt	r9, #:upper16:rmnet_mux_sdio_complete_epout
	add	r8, r4, #216
	b	.L10184
.L10265:
	cmn	r3, #4096
	bhi	.L10182
	str	r9, [r3, #28]
	ldr	r1, [r4, #220]
	bl	__list_add
	subs	r7, r7, #1
	beq	.L10264
.L10184:
	ldr	r0, [r4, #88]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	bne	.L10265
.L10182:
	ldr	r0, [sp, #4]
.L10154:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10262:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10161
	blx	r3
.L10161:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10162
	blx	r3
.L10162:
	cmp	r8, #2
	bne	.L10266
	add	r3, r4, #364
	add	r9, r4, #192
	mov	r0, r3
	mov	r8, #0
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #192]
	str	r0, [sp, #8]
	str	r8, [r4, #308]
	cmp	r9, r5
	beq	.L10168
.L10165:
	mov	r0, r5
	sub	fp, r5, #36
	bl	list_del
	str	r8, [r5, #-36]
	ldr	r5, [r4, #88]
	mov	r0, #0
	bl	kfree
	mov	r1, fp
	ldr	r2, [r5, #8]
	mov	r0, r5
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r5, [r4, #192]
	cmp	r9, r5
	bne	.L10165
.L10168:
	ldr	r5, [r4, #216]
	add	r8, r4, #216
	cmp	r8, r5
	beq	.L10167
	mov	r9, #0
.L10166:
	mov	r0, r5
	sub	fp, r5, #36
	bl	list_del
	str	r9, [r5, #-36]
	ldr	r5, [r4, #92]
	mov	r0, #0
	bl	kfree
	mov	r1, fp
	ldr	r2, [r5, #8]
	mov	r0, r5
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r5, [r4, #216]
	cmp	r8, r5
	bne	.L10166
.L10167:
	ldr	r3, [r4, #200]
	add	r8, r4, #200
	cmp	r8, r3
	bne	.L10170
	b	.L10169
.L10267:
	ldr	r2, [r4, #208]
	mov	r10, #0
	mov	fp, #0
	sub	r2, r2, #1
	str	r2, [r4, #208]
	ldm	r3, {r1, r2}
	strd	r10, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #200]
	cmp	r3, r8
	beq	.L10169
.L10170:
	subs	r0, r3, #0
	bne	.L10267
.L10169:
	ldr	r3, [r4, #224]
	add	r8, r4, #224
	cmp	r8, r3
	bne	.L10172
	b	.L10171
.L10268:
	ldr	r2, [r4, #232]
	mov	r10, #0
	mov	fp, #0
	sub	r2, r2, #1
	str	r2, [r4, #232]
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	strd	r10, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #224]
	cmp	r8, r3
	beq	.L10171
.L10172:
	subs	r0, r3, #0
	bne	.L10268
.L10171:
	ldr	r1, [sp, #8]
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp]
	cmp	r3, #3
	str	r3, [r4, #360]
	bne	.L10269
.L10180:
	ldr	r3, [r4, #172]
	tst	r3, #1
	beq	.L10270
.L10192:
	movw	r9, #:lower16:kmalloc_caches
	movw	r10, #:lower16:rmnet_mux_smd_complete_epout
	movt	r9, #:upper16:kmalloc_caches
	movt	r10, #:upper16:rmnet_mux_smd_complete_epout
	mov	r8, #8
.L10199:
	ldr	r7, [r4, #88]
	mov	r1, #208
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	mov	r2, #2048
	beq	.L10182
	str	r2, [r6, #4]
	ldr	r0, [r9, #44]
	mov	r3, #16
	mov	r1, #208
	cmp	r0, #0
	streq	r3, [r6]
	beq	.L10198
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6]
	bne	.L10198
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10182
.L10266:
	cmp	r8, #3
	bne	.L10160
	add	r3, r4, #364
	add	r0, r4, #152
	mov	r5, r3
	add	r8, r4, #104
	str	r3, [sp, #8]
	bl	tasklet_kill
	add	r0, r4, #132
	bl	tasklet_kill
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #104]
	mov	r10, r0
	cmp	r8, r9
	beq	.L10177
.L10174:
	mov	r0, r9
	sub	fp, r9, #36
	bl	list_del
	ldr	r5, [r4, #88]
	ldr	r0, [r9, #-36]
	bl	kfree
	mov	r1, fp
	ldr	r2, [r5, #8]
	mov	r0, r5
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r9, [r4, #104]
	cmp	r8, r9
	bne	.L10174
.L10177:
	ldr	r9, [r4, #112]
	add	r8, r4, #112
	cmp	r8, r9
	beq	.L10176
.L10175:
	mov	r0, r9
	sub	fp, r9, #36
	bl	list_del
	ldr	r5, [r4, #92]
	ldr	r0, [r9, #-36]
	bl	kfree
	mov	r1, fp
	ldr	r2, [r5, #8]
	mov	r0, r5
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r9, [r4, #112]
	cmp	r8, r9
	bne	.L10175
.L10176:
	ldr	r9, [r4, #120]
	add	r8, r4, #120
	cmp	r8, r9
	beq	.L10179
.L10178:
	mov	r0, r9
	sub	fp, r9, #36
	bl	list_del
	ldr	r5, [r4, #92]
	ldr	r0, [r9, #-36]
	bl	kfree
	mov	r1, fp
	ldr	r2, [r5, #8]
	mov	r0, r5
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r9, [r4, #120]
	cmp	r8, r9
	bne	.L10178
.L10179:
	mov	r1, r10
	ldr	r0, [sp, #8]
	bl	_raw_spin_unlock_irqrestore
	b	.L10173
.L10198:
	cmn	r6, #4096
	mov	r7, #2048
	add	r2, r4, #112
	add	r0, r6, #36
	bhi	.L10182
	str	r7, [r6, #4]
	str	r10, [r6, #28]
	str	r4, [r6, #32]
	ldr	r1, [r4, #116]
	bl	__list_add
	subs	r8, r8, #1
	bne	.L10199
	movw	r8, #:lower16:rmnet_mux_smd_complete_epin
	mov	r10, #8
	movt	r8, #:upper16:rmnet_mux_smd_complete_epin
.L10202:
	ldr	fp, [r4, #92]
	mov	r1, #208
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L10182
	str	r7, [r6, #4]
	ldr	r0, [r9, #44]
	mov	r3, #16
	mov	r2, #2048
	mov	r1, #208
	cmp	r0, #0
	streq	r3, [r6]
	beq	.L10201
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6]
	bne	.L10201
	ldr	r3, [fp, #8]
	mov	r1, r6
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10182
.L10264:
	movw	r9, #:lower16:rmnet_mux_sdio_complete_epin
	mov	r7, #100
	movt	r9, #:upper16:rmnet_mux_sdio_complete_epin
	add	r10, r4, #192
	b	.L10185
.L10272:
	cmn	r3, #4096
	bhi	.L10182
	str	r9, [r3, #28]
	ldr	r1, [r4, #196]
	bl	__list_add
	subs	r7, r7, #1
	beq	.L10271
.L10185:
	ldr	r0, [r4, #92]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r10
	add	r0, r3, #36
	bne	.L10272
	b	.L10182
.L10270:
	movw	r3, #:lower16:rmnet_mux_smd_notify
	mov	r2, r4
	ldr	r0, [r7, #3984]
	movt	r3, #:upper16:rmnet_mux_smd_notify
	add	r1, r4, #128
	ldr	r6, [r4, #84]
	bl	smd_open
	cmp	r0, #0
	bne	.L10273
	ldr	r3, [r4, #172]
	ands	r3, r3, #1
	bne	.L10192
	mov	r2, sp
	str	r3, [sp, #20]
	add	r6, r4, #180
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #32
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L10196
.L10274:
	bl	schedule
.L10196:
	mov	r2, #2
	add	r1, sp, #20
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #172]
	tst	r3, #1
	beq	.L10274
	add	r1, sp, #20
	mov	r0, r6
	bl	finish_wait
	b	.L10192
.L10201:
	cmn	r6, #4096
	add	r2, r4, #104
	add	r0, r6, #36
	bhi	.L10182
	str	r8, [r6, #28]
	str	r4, [r6, #32]
	ldr	r1, [r4, #108]
	bl	__list_add
	subs	r10, r10, #1
	bne	.L10202
	mov	r0, r4
	bl	rmnet_mux_smd_start_rx
	b	.L10182
.L10261:
	movw	r1, #:lower16:.LC870
	add	r0, r6, #1200
	movt	r1, #:upper16:.LC870
	bl	__dynamic_pr_debug
	ldr	r8, [r4, #360]
	b	.L10159
.L10263:
	movw	r1, #:lower16:.LC871
	ldr	r2, .L10276
	movt	r1, #:upper16:.LC871
	ldr	r0, .L10276+4
	bl	__dynamic_pr_debug
	b	.L10173
.L10273:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC236
	movt	r1, #:upper16:.LC236
	add	r0, r0, #32
	bl	dev_err
	b	.L10182
.L10271:
	ldr	r3, [r4, #368]
	cmp	r3, #0
	bne	.L10186
	movw	r3, #1266
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L10182
	movw	r1, #:lower16:.LC872
	ldr	r2, .L10276+8
	movt	r1, #:upper16:.LC872
	ldr	r0, .L10276+12
	bl	__dynamic_pr_debug
	b	.L10182
.L10186:
	ldr	r10, [r4, #84]
	add	r9, r4, #364
	mov	r0, r9
.L10258:
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #216]
	mov	r6, r0
	cmp	r8, r7
	beq	.L10187
	mov	r0, r7
	sub	fp, r7, #36
	bl	list_del
	mov	r1, r6
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #208
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb
	subs	r6, r0, #0
	mov	ip, #2048
	mov	r2, #208
	mov	r1, fp
	beq	.L10275
	ldr	r0, [r6, #160]
	ldr	r3, [r6, #172]
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	str	r3, [r7, #-36]
	str	ip, [r7, #-32]
	str	r6, [r7, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r9
	cmp	fp, #0
	beq	.L10258
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
.L10189:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC284
	mov	r2, fp
	movt	r1, #:upper16:.LC284
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r7
	ldr	r1, [r4, #220]
	bl	__list_add
.L10187:
	mov	r1, r6
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L10182
.L10275:
	mov	r0, r9
	mvn	fp, #11
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	b	.L10189
.L10259:
	movw	r0, #:lower16:.LC868
	ldr	r1, .L10276
	movt	r0, #:upper16:.LC868
	bl	printk
	mvn	r0, #21
	b	.L10154
.L10260:
	movw	r0, #:lower16:.LC869
	ldr	r1, .L10276
	mov	r3, r2
	movt	r0, #:upper16:.LC869
	bl	printk
	mov	r0, #0
	b	.L10154
.L10277:
	.align	2
.L10276:
	.word	.LANCHOR5-1672
	.word	.LANCHOR4+1224
	.word	.LANCHOR5-1656
	.word	.LANCHOR4+1248
	.fnend
	.size	transport_store, .-transport_store
	.section	.rodata.str1.4
	.align	2
.LC873:
	.ascii	"<3>%s: USB not connected\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_start_io, %function
rmnet_sdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r7, r0, #188
	mov	r0, r7
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #192]
	mov	r6, r0
	cmp	r4, #0
	beq	.L10307
	ldr	r3, [r5, #316]
	tst	r3, #2
	beq	.L10281
	ldr	r3, [r5, #320]
	tst	r3, #2
	beq	.L10281
	movw	r9, #:lower16:rmnet_sdio_complete_epout
	mov	r4, #16
	movt	r9, #:upper16:rmnet_sdio_complete_epout
	add	r8, r5, #160
	b	.L10282
.L10309:
	cmn	r3, #4096
	bhi	.L10306
	str	r9, [r3, #28]
	ldr	r1, [r5, #164]
	bl	__list_add
	ldr	r3, [r5, #168]
	subs	r4, r4, #1
	add	r3, r3, #1
	str	r3, [r5, #168]
	beq	.L10308
.L10282:
	ldr	r0, [r5, #88]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	bne	.L10309
.L10297:
	mvn	r4, #11
.L10286:
.L10285:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	bl	rmnet_sdio_free_buf
	mov	r3, #0
	str	r3, [r5, #88]
	str	r3, [r5, #92]
	str	r3, [r5, #96]
.L10278:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10281:
	mov	r1, r6
	mov	r0, r7
	mov	r4, #0
	bl	_raw_spin_unlock_irqrestore
	b	.L10278
.L10307:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L10278
.L10308:
	movw	r9, #:lower16:rmnet_sdio_complete_epin
	mov	r4, #200
	movt	r9, #:upper16:rmnet_sdio_complete_epin
	add	r10, r5, #132
	b	.L10288
.L10311:
	cmn	r3, #4096
	bhi	.L10306
	str	r9, [r3, #28]
	ldr	r1, [r5, #136]
	bl	__list_add
	ldr	r3, [r5, #140]
	subs	r4, r4, #1
	add	r3, r3, #1
	str	r3, [r5, #140]
	beq	.L10310
.L10288:
	ldr	r0, [r5, #92]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r10
	add	r0, r3, #36
	bne	.L10311
	b	.L10297
.L10310:
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r9, [r5, #84]
	ldr	r4, [r5, #192]
	cmp	r4, #0
	movne	r0, r7
	beq	.L10312
.L10305:
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r5, #160]
	mov	r4, r0
	cmp	r8, r6
	beq	.L10290
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	ldr	r3, [r5, #168]
	mov	r1, r4
	mov	r0, r7
	sub	r3, r3, #1
	str	r3, [r5, #168]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #32
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb
	subs	r4, r0, #0
	mov	ip, #2048
	mov	r2, #32
	mov	r1, r10
	beq	.L10313
	ldr	r0, [r4, #160]
	ldr	r3, [r4, #172]
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r4, #160]
	str	r3, [r4, #172]
	str	r3, [r6, #-36]
	str	ip, [r6, #-32]
	str	r4, [r6, #-4]
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r7
	cmp	r10, #0
	beq	.L10305
	mov	r0, r4
	bl	dev_kfree_skb_any
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r4, r0
.L10292:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC30
	mov	r2, r10
	movt	r1, #:upper16:.LC30
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r6
	ldr	r1, [r5, #164]
	bl	__list_add
	ldr	r3, [r5, #168]
	add	r3, r3, #1
	str	r3, [r5, #168]
.L10290:
	mov	r1, r4
	mov	r0, r7
	mov	r4, #0
	bl	_raw_spin_unlock_irqrestore
	b	.L10278
.L10313:
	mov	r0, r7
	mvn	r10, #11
	bl	_raw_spin_lock_irqsave
	mov	r4, r0
	b	.L10292
.L10306:
	mov	r4, r3
	b	.L10286
.L10312:
	movw	r0, #:lower16:.LC873
	ldr	r1, .L10314
	movt	r0, #:upper16:.LC873
	bl	printk
	b	.L10278
.L10315:
	.align	2
.L10314:
	.word	.LANCHOR5-1632
	.fnend
	.size	rmnet_sdio_start_io, .-rmnet_sdio_start_io
	.section	.rodata.str1.4
	.align	2
.LC874:
	.ascii	"<6>%s: usb rmnet sdio channels are open retry_cnt:%"
	.ascii	"d\012\000"
	.align	2
.LC875:
	.ascii	"%s: usb rmnet sdio open retry_cnt:%d\012\000"
	.align	2
.LC876:
	.ascii	"Unable to open control SDIO channel\012\000"
	.align	2
.LC877:
	.ascii	"Unable to open DATA SDIO channel\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_open_sdio_work, %function
rmnet_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #-168]
	ldr	r3, [r0, #68]
	ldr	r3, [r0, #64]
	ldr	r3, [r0, #64]
	tst	r3, #2
	beq	.L10317
	ldr	r3, [r0, #68]
	tst	r3, #2
	bne	.L10336
.L10317:
	movw	r5, #:lower16:.LANCHOR1
	movw	r2, #:lower16:.LANCHOR4
	movt	r5, #:upper16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR4
	movw	r1, #1290
	ldr	r3, [r5, #3988]
	ldrh	r2, [r2, r1]
	add	r3, r3, #1
	tst	r2, #4
	str	r3, [r5, #3988]
	bne	.L10337
.L10320:
	cmp	r3, #90
	ble	.L10321
	ldr	r3, [r4, #68]
	tst	r3, #2
	beq	.L10338
	ldr	r3, [r4, #64]
	tst	r3, #2
	beq	.L10339
.L10316:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10339:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC877
	movt	r1, #:upper16:.LC877
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	add	r0, r0, #32
	b	dev_err
.L10338:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC876
	movt	r1, #:upper16:.LC876
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #64]
	tst	r3, #2
	bne	.L10316
	b	.L10339
.L10321:
	ldr	r5, [r4, #-52]
	mov	r0, #2000
	bl	msecs_to_jiffies
	mov	r2, r0
	mov	r1, r4
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_delayed_work
.L10337:
	movw	r1, #:lower16:.LC875
	ldr	r2, .L10340
	ldr	r0, .L10340+4
	movt	r1, #:upper16:.LC875
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #3988]
	b	.L10320
.L10336:
	sub	r0, r0, #252
	bl	rmnet_sdio_start_io
	ldr	r3, [r4, #-60]
	cmp	r3, #0
	beq	.L10318
	add	r1, r4, #80
	ldr	r0, [r4, #-52]
	bl	queue_work
.L10318:
	movw	r4, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC874
	ldr	r1, .L10340
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC874
	ldr	r2, [r4, #3988]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #3988]
	b	.L10316
.L10341:
	.align	2
.L10340:
	.word	.LANCHOR5-1612
	.word	.LANCHOR4+1272
	.fnend
	.size	rmnet_open_sdio_work, .-rmnet_open_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start, %function
gbam_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bne	.L10343
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #4
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10356
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #978
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L10357
.L10345:
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L10358
.L10346:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L10343:
	b	gbam_start_endless_tx
.L10356:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC108
	ldr	r1, .L10359
	movt	r0, #:upper16:.LC108
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L10357:
	movw	r1, #:lower16:.LC111
	ldr	r2, .L10359
	add	r0, r0, #960
	movt	r1, #:upper16:.LC111
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L10345
.L10358:
	movw	r0, #:lower16:.LC112
	ldr	r1, .L10359
	movt	r0, #:upper16:.LC112
	bl	printk
	b	.L10346
.L10360:
	.align	2
.L10359:
	.word	.LANCHOR3+404
	.fnend
	.size	gbam_start, .-gbam_start
	.section	.rodata.str1.4
	.align	2
.LC878:
	.ascii	"reset config\012\000"
	.align	2
.LC879:
	.ascii	"delayed status mismatch..resetting\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_disconnect, %function
composite_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r0, #32
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	mov	r5, r0
	mov	r0, #0
	bl	set_string_mode
	movw	r0, #:lower16:.LC478
	ldr	r1, .L10384
	add	r7, r5, #60
	movt	r0, #:upper16:.LC478
	bl	printk
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L10362
	movw	r0, #:lower16:.LANCHOR4
	movw	r2, #1314
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L10383
.L10363:
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	beq	.L10369
	mov	r8, #0
.L10364:
	ldr	r3, [r4, #48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L10367
	blx	r3
	str	r8, [r4, #80]
	ldr	r3, [r5, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L10364
.L10369:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	str	r2, [r5, #12]
	str	r2, [r5, #56]
	ldr	r3, [r3, #32]
	cmp	r3, r2
	beq	.L10370
.L10365:
	mov	r0, r5
	blx	r3
.L10371:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	beq	.L10370
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC879
	movt	r1, #:upper16:.LC879
	add	r0, r0, #32
	bl	_dev_info
	mov	r3, #0
	str	r3, [r5, #56]
.L10370:
	mov	r1, r6
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L10367:
	str	r3, [r4, #80]
	ldr	r3, [r5, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L10364
	b	.L10369
.L10362:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	bne	.L10365
	b	.L10371
.L10383:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC878
	add	r0, r0, #1296
	movt	r2, #:upper16:.LC878
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r5, #12]
	b	.L10363
.L10385:
	.align	2
.L10384:
	.word	.LANCHOR5-1588
	.fnend
	.size	composite_disconnect, .-composite_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_disconnect, %function
android_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r2, r5
	mov	r7, r0
	ldr	r4, [r2, #3232]!
	cmp	r4, r2
	sub	r4, r4, #512
	bne	.L10388
	b	.L10387
.L10399:
	ldr	r4, [r4, #512]
	cmp	r4, r2
	sub	r4, r4, #512
	beq	.L10387
.L10388:
	ldr	r3, [r4, #8]
	cmp	r7, r3
	bne	.L10399
.L10387:
	mov	r0, r6
	bl	composite_disconnect
	ldr	r6, [r5, #2488]
	add	fp, r6, #88
	add	r8, r6, #1760
	mov	r0, fp
	add	r8, r8, #4
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r6, #1764]
	str	r0, [sp, #4]
	cmp	r10, r8
	ldr	r5, [r10]
	addne	r9, r6, #1776
	addne	r9, r9, #4
	beq	.L10393
.L10392:
	mov	r0, r10
	bl	list_del
	mov	r0, r10
	mov	r1, r9
	ldr	r2, [r6, #1780]
	bl	__list_add
	cmp	r8, r5
	mov	r10, r5
	ldr	r5, [r5]
	bne	.L10392
.L10393:
	ldr	r10, [r6, #1772]
	add	r8, r6, #1760
	add	r8, r8, #12
	cmp	r8, r10
	ldr	r5, [r10]
	addne	r9, r6, #1776
	addne	r9, r9, #4
	beq	.L10391
.L10394:
	mov	r0, r10
	bl	list_del
	mov	r0, r10
	mov	r1, r9
	ldr	r2, [r6, #1780]
	bl	__list_add
	cmp	r8, r5
	mov	r10, r5
	ldr	r5, [r5]
	bne	.L10394
.L10391:
	mov	r0, fp
	ldr	r1, [sp, #4]
	add	r7, r7, #60
	bl	_raw_spin_unlock_irqrestore
	add	r0, r6, #1744
	add	r0, r0, #4
	bl	schedule_work
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r5, r0
	add	r0, r4, #176
	strb	r3, [r4, #48]
	bl	schedule_work
	mov	r1, r5
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	android_disconnect, .-android_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_common_release, %function
fsg_common_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-224]
	cmp	r3, #7
	bne	.L10433
.L10401:
	ldr	r0, [r6, #-236]
	cmp	r0, #0
	beq	.L10405
	ldr	r5, [r6, #-244]
	cmp	r5, #0
	beq	.L10406
	ldr	r7, .L10436
	add	r4, r0, #48
	add	r9, r7, #16
	add	r8, r7, #32
.L10409:
	mov	r1, r7
	mov	r0, r4
	bl	device_remove_file
	mov	r1, r9
	mov	r0, r4
	bl	device_remove_file
	mov	r1, r8
	mov	r0, r4
	bl	device_remove_file
	mov	r0, r4
	ldr	r1, .L10436+4
	bl	device_remove_file
	ldr	r0, [r4, #-48]
	ldr	r3, .L10436+8
	cmp	r0, #0
	beq	.L10407
	ldrh	r2, [r3]
	tst	r2, #4
	bne	.L10434
.L10408:
	bl	fput
	mov	r3, #0
	str	r3, [r4, #-48]
.L10407:
	mov	r0, r4
	add	r4, r4, #392
	bl	device_unregister
	subs	r5, r5, #1
	bne	.L10409
	ldr	r0, [r6, #-236]
.L10406:
	bl	kfree
.L10405:
	ldr	r5, [r6, #-268]
	add	r4, r5, #32
	add	r5, r5, #160
.L10410:
	add	r4, r4, #32
	ldr	r0, [r4, #-64]
	bl	kfree
	cmp	r5, r4
	bne	.L10410
	ldr	r0, [r6, #-268]
	bl	kfree
	ldrb	r3, [r6, #-192]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L10435
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10434:
	movw	r2, #:lower16:.LC818
	sub	r0, r3, #18
	movt	r2, #:upper16:.LC818
	mov	r1, r4
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #-48]
	b	.L10408
.L10433:
	sub	r5, r0, #292
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #-224]
	mov	r4, r0
	cmp	r3, #6
	bgt	.L10403
	ldr	r3, [r6, #-280]
	mov	r1, #6
	ldr	r2, [r6, #-168]
	str	r1, [r6, #-224]
	str	r3, [r6, #-220]
	cmp	r2, #0
	beq	.L10403
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L10403:
	mov	r0, r5
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore
	sub	r0, r6, #184
	bl	wait_for_completion
	b	.L10401
.L10435:
	sub	r0, r6, #336
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree
.L10437:
	.align	2
.L10436:
	.word	.LANCHOR0+1792
	.word	.LANCHOR0+1840
	.word	.LANCHOR4+258
	.fnend
	.size	fsg_common_release, .-fsg_common_release
	.section	.rodata.str1.4
	.align	2
.LC880:
	.ascii	"lun%d\000"
	.align	2
.LC881:
	.ascii	"Linux\000"
	.align	2
.LC882:
	.ascii	"File-Stor Gadget\000"
	.align	2
.LC883:
	.ascii	"File-CD Gadget\000"
	.align	2
.LC884:
	.ascii	"file-storage\000"
	.align	2
.LC885:
	.ascii	"(error)\000"
	.align	2
.LC886:
	.ascii	"(no medium)\000"
	.align	2
.LC887:
	.ascii	"removable \000"
	.align	2
.LC888:
	.ascii	"\000"
	.align	2
.LC889:
	.ascii	"read only \000"
	.align	2
.LC890:
	.ascii	"lun\000"
	.align	2
.LC891:
	.ascii	"&common->filesem\000"
	.align	2
.LC892:
	.ascii	"failed to register LUN%d: %d\012\000"
	.align	2
.LC893:
	.ascii	"no file given for LUN%d\012\000"
	.align	2
.LC894:
	.ascii	"controller '%s' not recognized\012\000"
	.align	2
.LC895:
	.ascii	"%-8s%-16s%04x\000"
	.align	2
.LC896:
	.ascii	"SAMSUNG\000"
	.align	2
.LC897:
	.ascii	"&common->fsg_wait\000"
	.align	2
.LC898:
	.ascii	"Mass Storage Function, version: 2009/09/11\012\000"
	.align	2
.LC899:
	.ascii	"Number of LUNs=%d\012\000"
	.align	2
.LC900:
	.ascii	"LUN: %s%s%sfile: %s\012\000"
	.align	2
.LC901:
	.ascii	"CD-ROM \000"
	.align	2
.LC902:
	.ascii	"I/O thread pid: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_init, %function
mass_storage_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r1
	strd	r10, [sp, #24]
	movw	r10, #:lower16:kmalloc_caches
	movt	r10, #:upper16:kmalloc_caches
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r3, [r10, #28]
	.pad #44
	sub	sp, sp, #44
	cmp	r3, #0
	beq	.L10488
	mov	r0, r3
	mov	r2, #100
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L10546
.L10439:
	mov	r2, #1
	mov	r1, #256
	movw	r3, #:lower16:.LC890
	str	r2, [r4]
	movt	r3, #:upper16:.LC890
	strh	r1, [r4, #8]	@ movhi
	strb	r2, [r4, #10]
	ldr	r0, [r10, #36]
	str	r3, [sp, #28]
	ldr	fp, [r6]
	cmp	r0, #0
	beq	.L10490
	mov	r2, #340
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L10442
.L10441:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	movw	r1, #32976
	mov	r0, #128
	orr	r3, r3, #2
	strb	r3, [r5, #144]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5, #68]
	beq	.L10547
	ldr	r3, [r4, #76]
	movw	r1, #32976
	mov	r0, #392
	str	r3, [r5, #172]
	ldr	r3, [r4, #80]
	str	fp, [r5]
	str	r3, [r5, #176]
	ldr	r3, [fp, #4]
	str	r3, [r5, #48]
	ldr	r3, [r6, #4]
	str	r6, [r5, #4]
	str	r3, [r5, #52]
	bl	__kmalloc
	subs	r9, r0, #0
	beq	.L10458
	add	r6, r5, #28
	movw	r1, #:lower16:.LC891
	ldr	r2, .L10554
	mov	r0, r6
	movt	r1, #:upper16:.LC891
	str	r9, [r5, #100]
	bl	__init_rwsem
	ldrb	r3, [r4, #10]	@ zero_extendqisi2
	movw	r0, #:lower16:fsg_lun_release
	add	ip, fp, #32
	ldrb	r2, [r9, #24]	@ zero_extendqisi2
	mov	r1, r6
	movt	r0, #:upper16:fsg_lun_release
	mov	r6, r9
	subs	r3, r3, #0
	movne	r3, #1
	bfi	r2, r3, #3, #1
	strb	r2, [r9, #24]
	ldrb	r2, [r4, #8]	@ zero_extendqisi2
	ldrb	r3, [r9, #24]	@ zero_extendqisi2
	and	r2, r2, #1
	bfi	r3, r2, #1, #1
	bfi	r3, r2, #0, #1
	mov	r2, r3
	strb	r3, [r9, #24]
	ldrb	r3, [r4, #9]	@ zero_extendqisi2
	bfi	r2, r3, #2, #1
	mov	r3, r2
	strb	r2, [r9, #24]
	ldrb	r2, [r4, #11]	@ zero_extendqisi2
	str	r0, [r9, #380]
	bfi	r3, r2, #7, #1
	strb	r3, [r9, #24]
	str	ip, [r6, #48]!
	mov	r0, r6
	bl	dev_set_drvdata
	ldr	r1, [r4, #68]
	mov	r2, #0
	movw	r3, #:lower16:.LC880
	movt	r3, #:upper16:.LC880
	mov	r0, r6
	cmp	r1, r2
	moveq	r1, r3
	bl	dev_set_name
	mov	r0, r6
	bl	device_register
	subs	r3, r0, #0
	bne	.L10548
	ldr	r1, .L10554+4
	mov	r0, r6
	bl	device_create_file
	cmp	r0, #0
	bne	.L10450
	ldr	r1, .L10554+8
	mov	r0, r6
	bl	device_create_file
	cmp	r0, #0
	bne	.L10450
	ldr	r1, .L10554+12
	mov	r0, r6
	bl	device_create_file
	cmp	r0, #0
	bne	.L10450
	mov	r0, r6
	ldr	r1, .L10554+16
	bl	device_create_file
	subs	r6, r0, #0
	movne	r8, r6
	movne	r9, r8
	bne	.L10452
	ldr	r1, [r4, #4]
	cmp	r1, #0
	beq	.L10455
	mov	r0, r9
	bl	fsg_lun_open
	cmp	r0, #0
	bne	.L10450
.L10456:
	ldr	r8, [r5, #68]
	mov	r3, #1
	str	r3, [r5, #92]
	add	r9, r8, #96
.L10457:
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	bl	kmalloc_order_trace
	cmp	r0, #0
	str	r0, [r8]
	beq	.L10458
	cmp	r9, r8
	add	r8, r8, #32
	beq	.L10549
	str	r8, [r8, #-24]
	b	.L10457
.L10455:
	ldrb	r2, [r9, #24]	@ zero_extendqisi2
	ands	r2, r2, #12
	bne	.L10456
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC893
	mvn	r8, #21
	movt	r1, #:upper16:.LC893
	add	r0, r0, #32
	bl	dev_err
	mov	r2, #1
	mov	r3, #7
	add	r0, r5, #336
	str	r2, [r5, #92]
	str	r3, [r5, #112]
	bl	fsg_common_release
.L10446:
	mov	r10, r8
	b	.L10544
.L10488:
	mov	r4, #16
	b	.L10439
.L10490:
	mov	r5, #16
	b	.L10441
.L10450:
	mov	r8, r0
	mov	r9, r0
.L10452:
	mov	r3, #1
	str	r3, [r5, #92]
.L10449:
	mov	r3, #7
	add	r0, r5, #336
	str	r3, [r5, #112]
	bl	fsg_common_release
.L10480:
	cmn	r9, #4096
	bhi	.L10446
	ldr	r3, [r4]
	cmp	r3, #0
	movne	r5, #0
	addne	r6, sp, #28
	movne	r9, #392
	bne	.L10482
	b	.L10485
.L10483:
	ldr	r3, [r4]
	add	r5, r5, #1
	cmp	r3, r5
	bls	.L10485
.L10482:
	ldr	r1, [r8, #100]
	ldr	r0, [r7, #8]
	ldr	r2, [r6, r5, lsl #2]
	mla	r1, r9, r5, r1
	add	r0, r0, #8
	add	r1, r1, #56
	bl	sysfs_create_link
	cmp	r0, #0
	beq	.L10483
	cmp	r5, #0
	mov	r10, r0
	subne	r5, r5, #-1073741823
	addne	r5, r6, r5, lsl #2
	beq	.L10487
.L10486:
	ldr	r0, [r7, #8]
	ldr	r1, [r5]
	add	r0, r0, #8
	bl	sysfs_remove_link
	cmp	r5, r6
	sub	r5, r5, #4
	bne	.L10486
.L10487:
	add	r0, r8, #336
	bl	fsg_common_release
.L10544:
	mov	r0, r4
	bl	kfree
.L10438:
	mov	r0, r10
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10485:
	mov	r10, #0
	str	r8, [r4, #96]
	str	r4, [r7, #4]
	b	.L10438
.L10547:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L10550
.L10442:
	mvn	r10, #11
	b	.L10544
.L10549:
	ldr	r2, [r5, #68]
	movw	r3, #65535
	str	r2, [r9, #8]
	ldrh	r1, [r4, #92]
	cmp	r1, r3
	beq	.L10551
.L10461:
	ldr	r3, [r4, #84]
	movw	r2, #:lower16:.LC881
	add	r0, r5, #180
	ldr	ip, [r4, #88]
	movt	r2, #:upper16:.LC881
	cmp	r3, #0
	moveq	r3, r2
	cmp	ip, #0
	beq	.L10541
	movw	r8, #:lower16:.LC882
	movt	r8, #:upper16:.LC882
.L10464:
	movw	r2, #:lower16:.LC895
	str	ip, [sp]
	movt	r2, #:upper16:.LC895
	str	r1, [sp, #4]
	mov	r1, #29
	bl	snprintf
	mov	r2, #0
	movw	r3, #:lower16:.LC896
	ldr	lr, [r8]
	movt	r3, #:upper16:.LC896
	ldr	ip, [r8, #4]
	ldrd	r0, [r3]
	ldr	r3, [r8, #12]
	strb	r2, [r5, #234]
	ldr	r2, [r8, #8]
	str	r0, [r5, #209]	@ unaligned
	str	r1, [r5, #213]	@ unaligned
	str	lr, [r5, #218]	@ unaligned
	str	ip, [r5, #222]	@ unaligned
	str	r2, [r5, #226]	@ unaligned
	str	r3, [r5, #230]	@ unaligned
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L10465
	ldr	r3, [r5]
	movw	r0, #:lower16:.LC511
	movt	r0, #:upper16:.LC511
	ldr	r1, [r3, #28]
	bl	strcmp
	subs	r3, r0, #0
	movne	r3, #1
.L10465:
	ldrb	lr, [r5, #144]	@ zero_extendqisi2
	mov	fp, #0
	mov	r2, #1
	movw	ip, #:lower16:.LC884
	movw	r0, #:lower16:fsg_main_thread
	str	fp, [r5, #44]
	movt	ip, #:upper16:.LC884
	movt	r0, #:upper16:fsg_main_thread
	str	r2, [r5, #336]
	mov	r1, r5
	mvn	r2, #0
	bfi	lr, r3, #0, #1
	strb	lr, [r5, #144]
	ldr	r3, [r4, #72]
	cmp	r3, fp
	moveq	r3, ip
	bl	kthread_create_on_node
	cmn	r0, #4096
	mov	r8, r0
	str	r0, [r5, #168]
	mov	r9, r0
	bhi	.L10449
	movw	r1, #:lower16:.LC744
	ldr	r2, .L10554+20
	add	r0, r5, #156
	movt	r1, #:upper16:.LC744
	str	fp, [r5, #152]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC897
	ldr	r2, .L10554
	add	r0, r5, #16
	movt	r1, #:upper16:.LC897
	bl	__init_waitqueue_head
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC898
	movt	r1, #:upper16:.LC898
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC899
	movt	r1, #:upper16:.LC899
	ldr	r2, [r5, #92]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r10, #48]
	cmp	r0, fp
	moveq	fp, #16
	beq	.L10467
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	mov	fp, r0
.L10467:
	ldr	r3, [r5, #92]
	ldr	r8, [r5, #100]
	cmp	r3, #0
	str	r3, [sp, #8]
	ble	.L10478
	movw	r3, #:lower16:.LC886
	movw	r2, #:lower16:.LC885
	movw	r9, #:lower16:.LC888
	movt	r3, #:upper16:.LC886
	movt	r2, #:upper16:.LC885
	add	r8, r8, #48
	movt	r9, #:upper16:.LC888
	strd	r2, [sp, #16]
.L10479:
	ldr	r0, [r8, #-48]
	sub	r3, r8, #48
	cmp	r0, #0
	beq	.L10522
.L10553:
	cmp	fp, #0
	mov	r2, #4096
	mov	r1, fp
	add	r0, r0, #8
	beq	.L10473
	str	r3, [sp, #12]
	bl	d_path
	cmn	r0, #4096
	mov	r10, r0
	ldr	r3, [sp, #12]
	bhi	.L10473
.L10471:
	ldrb	ip, [r3, #24]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC887
	movw	r3, #:lower16:.LC889
	movt	r2, #:upper16:.LC887
	movt	r3, #:upper16:.LC889
	movw	lr, #:lower16:.LC901
	movw	r1, #:lower16:.LC900
	movt	lr, #:upper16:.LC901
	mov	r0, r8
	tst	ip, #4
	movt	r1, #:upper16:.LC900
	moveq	r2, r9
	tst	ip, #2
	moveq	r3, r9
	tst	ip, #8
	beq	.L10476
	str	lr, [sp]
	add	r6, r6, #1
	add	r8, r8, #392
	str	r10, [sp, #4]
	bl	_dev_info
	ldr	r3, [sp, #8]
	cmp	r6, r3
	bne	.L10479
.L10478:
	mov	r0, fp
	bl	kfree
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1338
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L10552
.L10470:
	ldr	r0, [r5, #168]
	mov	r9, r5
	mov	r8, r5
	bl	wake_up_process
	b	.L10480
.L10548:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC892
	mov	r2, #0
	movt	r1, #:upper16:.LC892
	mov	r8, r3
	mov	r9, r3
	add	r0, r0, #32
	bl	_dev_info
	mov	r3, #0
	mov	r0, r6
	str	r3, [r5, #92]
	bl	put_device
	b	.L10449
.L10550:
	mov	r0, r5
	mvn	r10, #11
	bl	kfree
	b	.L10544
.L10458:
	mov	r3, #7
	add	r0, r5, #336
	mvn	r8, #11
	str	r3, [r5, #112]
	bl	fsg_common_release
	b	.L10446
.L10551:
	ldr	r8, [fp, #28]
	movw	r0, #:lower16:.LC504
	movt	r0, #:upper16:.LC504
	mov	r1, r8
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #769
	beq	.L10461
	movw	r0, #:lower16:.LC505
	mov	r1, r8
	movt	r0, #:upper16:.LC505
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #770
	beq	.L10461
	movw	r0, #:lower16:.LC506
	mov	r1, r8
	movt	r0, #:upper16:.LC506
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #771
	beq	.L10461
	movw	r0, #:lower16:.LC507
	mov	r1, r8
	movt	r0, #:upper16:.LC507
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #774
	beq	.L10461
	movw	r0, #:lower16:.LC508
	mov	r1, r8
	movt	r0, #:upper16:.LC508
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #776
	beq	.L10461
	movw	r0, #:lower16:.LC509
	mov	r1, r8
	movt	r0, #:upper16:.LC509
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #785
	beq	.L10461
	movw	r0, #:lower16:.LC510
	mov	r1, r8
	movt	r0, #:upper16:.LC510
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #786
	beq	.L10461
	movw	r0, #:lower16:.LC511
	mov	r1, r8
	movt	r0, #:upper16:.LC511
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #787
	beq	.L10461
	movw	r0, #:lower16:.LC512
	mov	r1, r8
	movt	r0, #:upper16:.LC512
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #788
	beq	.L10461
	movw	r0, #:lower16:.LC513
	mov	r1, r8
	movt	r0, #:upper16:.LC513
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #790
	beq	.L10461
	movw	r0, #:lower16:.LC514
	mov	r1, r8
	movt	r0, #:upper16:.LC514
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #792
	beq	.L10461
	movw	r0, #:lower16:.LC515
	mov	r1, r8
	movt	r0, #:upper16:.LC515
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #793
	beq	.L10461
	movw	r0, #:lower16:.LC516
	mov	r1, r8
	movt	r0, #:upper16:.LC516
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #800
	beq	.L10461
	movw	r0, #:lower16:.LC517
	mov	r1, r8
	movt	r0, #:upper16:.LC517
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #801
	beq	.L10461
	movw	r0, #:lower16:.LC518
	mov	r1, r8
	movt	r0, #:upper16:.LC518
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #802
	beq	.L10461
	movw	r0, #:lower16:.LC519
	mov	r1, r8
	movt	r0, #:upper16:.LC519
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #803
	beq	.L10461
	movw	r0, #:lower16:.LC520
	mov	r1, r8
	movt	r0, #:upper16:.LC520
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #804
	beq	.L10461
	movw	r0, #:lower16:.LC521
	mov	r1, r8
	movt	r0, #:upper16:.LC521
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #805
	beq	.L10461
	movw	r0, #:lower16:.LC522
	mov	r1, r8
	movt	r0, #:upper16:.LC522
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #806
	beq	.L10461
	movw	r0, #:lower16:.LC523
	mov	r1, r8
	movt	r0, #:upper16:.LC523
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #807
	beq	.L10461
	movw	r0, #:lower16:.LC524
	mov	r1, r8
	movt	r0, #:upper16:.LC524
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #808
	beq	.L10461
	movw	r0, #:lower16:.LC525
	mov	r1, r8
	movt	r0, #:upper16:.LC525
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #809
	beq	.L10461
	movw	r0, #:lower16:.LC526
	mov	r1, r8
	movt	r0, #:upper16:.LC526
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #816
	beq	.L10461
	movw	r0, #:lower16:.LC527
	mov	r1, r8
	movt	r0, #:upper16:.LC527
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #817
	beq	.L10461
	movw	r0, #:lower16:.LC528
	mov	r1, r8
	movt	r0, #:upper16:.LC528
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #818
	beq	.L10461
	movw	r0, #:lower16:.LC529
	mov	r1, r8
	movt	r0, #:upper16:.LC529
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #819
	beq	.L10461
	movw	r0, #:lower16:.LC530
	mov	r1, r8
	movt	r0, #:upper16:.LC530
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #820
	beq	.L10461
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC894
	mov	r2, r8
	movt	r1, #:upper16:.LC894
	add	r0, r0, #32
	bl	dev_warn
	movw	r1, #921
	b	.L10461
.L10541:
	ldr	r2, [r5, #100]
	ldrb	r2, [r2, #24]	@ zero_extendqisi2
	tst	r2, #8
	bne	.L10519
	movw	ip, #:lower16:.LC883
	movw	r8, #:lower16:.LC882
	movt	ip, #:upper16:.LC883
	movt	r8, #:upper16:.LC882
	b	.L10464
.L10476:
	movw	r1, #:lower16:.LC900
	stm	sp, {r9, r10}
	add	r6, r6, #1
	movt	r1, #:upper16:.LC900
	add	r8, r8, #392
	bl	_dev_info
	ldr	r3, [sp, #8]
	cmp	r3, r6
	beq	.L10478
	ldr	r0, [r8, #-48]
	sub	r3, r8, #48
	cmp	r0, #0
	bne	.L10553
.L10522:
	ldr	r10, [sp, #20]
	b	.L10471
.L10473:
	ldr	r10, [sp, #16]
	b	.L10471
.L10519:
	movw	r8, #:lower16:.LC882
	movt	r8, #:upper16:.LC882
	mov	ip, r8
	b	.L10464
.L10552:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC902
	ldr	r3, [r5, #168]
	movt	r2, #:upper16:.LC902
	ldr	r0, .L10554+24
	add	r1, r1, #32
	ldr	r3, [r3, #592]
	bl	__dynamic_dev_dbg
	b	.L10470
.L10546:
	mvn	r10, #11
	b	.L10438
.L10555:
	.align	2
.L10554:
	.word	.LANCHOR1+3992
	.word	.LANCHOR0+1824
	.word	.LANCHOR0+1840
	.word	.LANCHOR0+1808
	.word	.LANCHOR0+1792
	.word	.LANCHOR1+3968
	.word	.LANCHOR4+1320
	.fnend
	.size	mass_storage_function_init, .-mass_storage_function_init
	.section	.rodata.str1.4
	.align	2
.LC903:
	.ascii	"%s: Queue empty packet for QBI\000"
	.align	2
.LC904:
	.ascii	"%s: %s: Wake up read queue\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_reset_function_queue, %function
mbim_reset_function_queue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #1362
	movt	r5, #:upper16:.LANCHOR4
	mov	r4, r0
	str	r6, [sp, #8]
	ldrh	r3, [r5, r3]
	str	lr, [sp, #12]
	tst	r3, #4
	bne	.L10571
.L10557:
	add	r6, r4, #204
	mov	r0, r6
	bl	_raw_spin_lock
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10558
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L10572
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L10559:
	add	r0, r3, #8
	add	r2, r4, #208
	ldr	r1, [r4, #212]
	bl	__list_add
	mov	r0, r6
	bl	_raw_spin_unlock
	movw	r3, #1386
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10573
.L10561:
	add	r0, r4, #108
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L10558:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L10559
.L10572:
	mvn	r3, #11
	b	.L10559
.L10573:
	ldr	r3, .L10574
	movw	r1, #:lower16:.LC904
	movt	r1, #:upper16:.LC904
	ldr	r0, .L10574+4
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L10561
.L10571:
	movw	r1, #:lower16:.LC903
	ldr	r2, .L10574
	add	r0, r5, #1344
	movt	r1, #:upper16:.LC903
	bl	__dynamic_pr_debug
	b	.L10557
.L10575:
	.align	2
.L10574:
	.word	.LANCHOR5-1564
	.word	.LANCHOR4+1368
	.fnend
	.size	mbim_reset_function_queue, .-mbim_reset_function_queue
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_reset_cmd_complete, %function
fmbim_reset_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1, #32]
	b	mbim_reset_function_queue
	.fnend
	.size	fmbim_reset_cmd_complete, .-fmbim_reset_cmd_complete
	.section	.rodata.str1.4
	.align	2
.LC905:
	.ascii	"%s: notify_count = %d\000"
	.align	2
.LC906:
	.ascii	"<6>%s: ESHUTDOWN/ECONNRESET, connection gone\000"
	.align	2
.LC907:
	.ascii	"<3>%s: Unknown event %02x --> %d\012\000"
	.align	2
.LC908:
	.ascii	"%s: notify_state: %d\000"
	.align	2
.LC909:
	.ascii	"<3>%s: Pending notifications in MBIM_NOTIFY_NONE\012"
	.ascii	"\000"
	.align	2
.LC910:
	.ascii	"%s: No pending notifications\012\000"
	.align	2
.LC911:
	.ascii	"%s: Notification %02x sent\012\000"
	.align	2
.LC912:
	.ascii	"%s: notify_response_avaliable: done\000"
	.align	2
.LC913:
	.ascii	"<3>%s: Queue notify request failed, err: %d\000"
	.align	2
.LC914:
	.ascii	"%s: queue request: notify_count = %d\000"
	.align	2
.LC915:
	.ascii	"<3>%s: usb_ep_queue failed, err: %d\000"
	.align	2
.LC916:
	.ascii	"%s: %s: Exit\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_notify_complete, %function
mbim_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r1]
	ldr	r4, [r1, #32]
	add	r6, r4, #204
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #44]
	cmp	r3, #0
	bne	.L10620
	add	r3, r4, #168
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #1410
	movt	r5, #:upper16:.LANCHOR4
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10621
.L10581:
	movw	r3, #1434
	ldr	r7, [r4, #160]
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10622
.L10582:
	cmp	r7, #0
	beq	.L10584
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	ldr	r2, [r7]
	cmp	r3, #0
	beq	.L10585
	cmp	r3, #3
	beq	.L10586
	mvn	r3, #94
	add	r8, r4, #168
	strb	r3, [r2]
	ldrb	r3, [r4, #196]	@ zero_extendqisi2
	strh	r3, [r2, #4]	@ unaligned
	.syntax divided
@ 45 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r3, [r8]
	add	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #1530
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10623
.L10592:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r1, r7
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	bne	.L10624
.L10584:
	mov	r0, r6
	bl	_raw_spin_unlock
	movw	r3, #1554
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10625
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10620:
	bgt	.L10579
	add	r2, r3, #108
	bics	r2, r2, #4
	beq	.L10626
.L10579:
	movw	r0, #:lower16:.LC907
	ldrb	r2, [r7, #1]	@ zero_extendqisi2
	movw	r5, #:lower16:.LANCHOR4
	ldr	r1, .L10630
	movt	r0, #:upper16:.LC907
	movt	r5, #:upper16:.LANCHOR4
	bl	printk
	b	.L10581
.L10586:
	movw	r3, #1482
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10627
.L10590:
	ldr	r3, [r4, #168]
	cmp	r3, #0
	ble	.L10628
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r1, r7
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	beq	.L10584
	add	r3, r4, #168
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC913
	ldr	r1, .L10630+4
	mov	r2, r7
	movt	r0, #:upper16:.LC913
	bl	printk
	b	.L10584
.L10585:
	ldr	r3, [r4, #168]
	cmp	r3, #0
	bgt	.L10629
	movw	r3, #1458
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L10584
	movw	r1, #:lower16:.LC910
	ldr	r2, .L10630+4
	movt	r1, #:upper16:.LC910
	ldr	r0, .L10630+8
	bl	__dynamic_pr_debug
	b	.L10584
.L10628:
	movw	r3, #1506
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L10584
	movw	r1, #:lower16:.LC912
	ldr	r2, .L10630+4
	movt	r1, #:upper16:.LC912
	ldr	r0, .L10630+12
	bl	__dynamic_pr_debug
	b	.L10584
.L10621:
	movw	r1, #:lower16:.LC905
	ldr	r2, .L10630
	add	r0, r5, #1392
	movt	r1, #:upper16:.LC905
	ldr	r3, [r4, #168]
	bl	__dynamic_pr_debug
	b	.L10581
.L10622:
	movw	r1, #:lower16:.LC908
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	ldr	r2, .L10630+4
	movt	r1, #:upper16:.LC908
	ldr	r0, .L10630+16
	bl	__dynamic_pr_debug
	b	.L10582
.L10625:
	ldr	r3, .L10630
	movw	r1, #:lower16:.LC916
	ldr	r0, .L10630+20
	movt	r1, #:upper16:.LC916
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	mov	r2, r3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__dynamic_pr_debug
.L10624:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC915
	ldr	r1, .L10630+4
	mov	r2, r7
	movt	r0, #:upper16:.LC915
	bl	printk
	b	.L10584
.L10627:
	movw	r1, #:lower16:.LC911
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC911
	ldr	r2, .L10630+4
	ldr	r0, .L10630+24
	bl	__dynamic_pr_debug
	b	.L10590
.L10623:
	movw	r1, #:lower16:.LC914
	ldr	r2, .L10630+4
	movt	r1, #:upper16:.LC914
	ldr	r0, .L10630+28
	ldr	r3, [r4, #168]
	bl	__dynamic_pr_debug
	b	.L10592
.L10626:
	movw	r0, #:lower16:.LC906
	ldr	r1, .L10630
	strb	r2, [r4, #164]
	movt	r0, #:upper16:.LC906
	str	r2, [r4, #168]
	movw	r5, #:lower16:.LANCHOR4
	bl	printk
	mov	r0, r6
	movt	r5, #:upper16:.LANCHOR4
	bl	_raw_spin_unlock
	mov	r0, r4
	bl	mbim_clear_queues
	mov	r0, r4
	bl	mbim_reset_function_queue
	mov	r0, r6
	bl	_raw_spin_lock
	b	.L10581
.L10629:
	movw	r0, #:lower16:.LC909
	ldr	r1, .L10630+4
	movt	r0, #:upper16:.LC909
	bl	printk
	b	.L10584
.L10631:
	.align	2
.L10630:
	.word	.LANCHOR5-1536
	.word	.LANCHOR5-1512
	.word	.LANCHOR4+1440
	.word	.LANCHOR4+1488
	.word	.LANCHOR4+1416
	.word	.LANCHOR4+1536
	.word	.LANCHOR4+1464
	.word	.LANCHOR4+1512
	.fnend
	.size	mbim_notify_complete, .-mbim_notify_complete
	.section	.rodata.str1.4
	.align	2
.LC917:
	.ascii	"<3>%s: unable open bam ch:%d err:%d\012\000"
	.align	2
.LC918:
	.ascii	"<3>%s: rx req allocation failed\012\000"
	.align	2
.LC919:
	.ascii	"<3>%s: tx req allocation failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_connect_work, %function
gbam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r5, r0, #280
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #276
	mov	r0, r5
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	mov	r0, r6
	cmp	r3, #0
	beq	.L10657
	bl	_raw_spin_unlock
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-264]
	tst	r3, #4
	bne	.L10658
.L10632:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10658:
	sub	fp, r4, #284
	movw	r2, #:lower16:gbam_notify
	ldr	r0, [r4, #-260]
	mov	r1, fp
	movt	r2, #:upper16:gbam_notify
	bl	msm_bam_dmux_open
	subs	r3, r0, #0
	bne	.L10659
	sub	r1, r4, #264
	mov	r0, #1
	movw	r7, #:lower16:.LANCHOR4
	bl	_set_bit
	movt	r7, #:upper16:.LANCHOR4
	movw	r3, #1578
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L10660
.L10637:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-272]
	str	r0, [sp, #4]
	cmp	r3, #0
	beq	.L10661
	ldr	r8, [r3, #88]
	movw	r9, #:lower16:.LANCHOR0
	sub	r10, r4, #232
	movt	r9, #:upper16:.LANCHOR0
	movw	r3, #:lower16:gbam_epout_complete
	mov	r1, r10
	movt	r3, #:upper16:gbam_epout_complete
	ldr	r2, [r9, #1856]
	mov	r0, r8
	bl	gbam_alloc_requests.constprop.0
	cmp	r0, #0
	bne	.L10662
	mov	r0, r5
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-272]
	mov	r5, r0
	cmp	r3, #0
	beq	.L10663
	ldr	r8, [r3, #84]
	movw	r3, #:lower16:gbam_epin_complete
	sub	r1, r4, #256
	movt	r3, #:upper16:gbam_epin_complete
	ldr	r2, [r9, #1860]
	mov	r0, r8
	bl	gbam_alloc_requests.constprop.0
	cmp	r0, #0
	bne	.L10664
	mov	r0, r6
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, fp
	bl	gbam_start_rx
.L10639:
	movw	r3, #1602
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L10632
	ldr	r2, .L10665
	movw	r1, #:lower16:.LC374
	ldr	r0, .L10665+4
	movt	r1, #:upper16:.LC374
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_pr_debug
.L10657:
	bl	_raw_spin_unlock
	mov	r1, r7
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L10661:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L10639
.L10663:
	ldr	r0, [r4, #-232]
	cmp	r0, r10
	beq	.L10656
.L10643:
	sub	r9, r0, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r0, r8
	mov	r1, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #-232]
	cmp	r10, r0
	bne	.L10643
.L10656:
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L10639
.L10660:
	movw	r1, #:lower16:.LC599
	ldr	r2, .L10665+8
	mov	r3, fp
	movt	r1, #:upper16:.LC599
	ldr	r0, .L10665+12
	bl	__dynamic_pr_debug
	b	.L10637
.L10662:
	movw	r0, #:lower16:.LC918
	ldr	r1, .L10665+8
	movt	r0, #:upper16:.LC918
	bl	printk
	mov	r0, r5
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	b	.L10639
.L10659:
	ldr	r1, .L10665
	movw	r0, #:lower16:.LC917
	ldr	r2, [r4, #-260]
	movt	r0, #:upper16:.LC917
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L10664:
	movw	r0, #:lower16:.LC919
	ldr	r1, .L10665+8
	movt	r0, #:upper16:.LC919
	bl	printk
.L10645:
	ldr	r0, [r4, #-232]
	cmp	r10, r0
	beq	.L10656
	sub	r9, r0, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10645
.L10666:
	.align	2
.L10665:
	.word	.LANCHOR5-1496
	.word	.LANCHOR4+1584
	.word	.LANCHOR5-1476
	.word	.LANCHOR4+1560
	.fnend
	.size	gbam_connect_work, .-gbam_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_disable, %function
ccid_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r6, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r6, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r4, [r6, #112]
	cmp	r4, #0
	beq	.L10668
	ldr	r5, [r6, #100]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L10668:
	ldr	r3, [r6, #156]
	cmp	r3, #0
	bne	.L10669
	ldr	r4, [r6, #184]
	cmp	r4, #0
	beq	.L10669
	ldr	r5, [r6, #108]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L10669:
	add	r9, r6, #192
	add	r8, r6, #92
	b	.L10670
.L10671:
	bl	list_del
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L10672
	ldr	r5, [r6, #104]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L10670:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r6, #192]
	mov	r5, r0
	cmp	r4, r9
	mov	r0, r4
	sub	r7, r4, #36
	bne	.L10671
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L10672:
	mov	r4, #0
	add	r0, r6, #172
	mov	r3, r4
	mov	r2, #1
	mov	r1, #3
	str	r4, [r6, #96]
	str	r4, [r6, #200]
	bl	__wake_up
	mov	r3, r4
	add	r0, r6, #160
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	mov	r3, r4
	add	r0, r6, #128
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
	.fnend
	.size	ccid_function_disable, .-ccid_function_disable
	.section	.rodata.str1.4
	.align	2
.LC920:
	.ascii	"%s: port:%pK port#%d event:%08x\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_remove, %function
gsdio_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1626
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r3, r2]
	.pad #28
	sub	sp, sp, #28
	str	r0, [sp, #8]
	tst	r3, #4
	bne	.L10725
.L10682:
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	ldr	r7, [r8]
	cmp	r7, #0
	beq	.L10720
	add	r6, r8, #4
	mov	r5, #0
	str	r8, [sp, #12]
.L10696:
	ldr	r3, [sp, #8]
	mov	r2, #9
	ldr	r4, [r6, #20]
	ldr	r1, [r3]
	ldr	r3, [r4, #120]
	ldr	r0, [r3]
	bl	strncmp
	subs	r9, r0, #0
	bne	.L10684
	ldr	r7, [r4, #96]
	mov	r3, #1
	str	r9, [r4, #108]
	str	r9, [r4, #112]
	str	r3, [r4, #116]
	cmp	r7, #0
	beq	.L10724
	ldr	r3, .L10727
	ldrh	r3, [r3]
	tst	r3, #4
	ubfx	r3, r3, #2, #1
	moveq	r0, r7
	streq	r3, [r4, #172]
	bne	.L10726
.L10698:
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L10687
	mov	r1, #0
	blx	r3
.L10687:
	ldr	r0, [r7, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10688
	blx	r3
.L10688:
	ldr	r0, [r7, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10689
	blx	r3
.L10689:
	add	r3, r4, #4
	add	r0, r4, #28
	mov	r8, r3
	add	r9, r4, #12
	str	r3, [sp, #16]
	bl	cancel_work_sync
	add	r0, r4, #60
	bl	cancel_work_sync
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #12]
	str	r0, [sp, #20]
	ldr	r10, [r7, #92]
	cmp	r9, r8
	beq	.L10690
.L10691:
	mov	r0, r8
	sub	fp, r8, #36
	bl	list_del
	ldr	r0, [r8, #-36]
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r1, fp
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r8, [r4, #12]
	cmp	r9, r8
	bne	.L10691
	ldr	r10, [r7, #92]
.L10690:
	ldr	r8, [r4, #20]
	add	r9, r4, #20
	cmp	r9, r8
	beq	.L10695
.L10692:
	mov	r0, r8
	sub	fp, r8, #36
	bl	list_del
	ldr	r0, [r8, #-36]
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r1, fp
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r8, [r4, #20]
	cmp	r9, r8
	bne	.L10692
.L10695:
	ldr	r8, [r4, #52]
	add	r9, r4, #52
	ldr	r7, [r7, #88]
	cmp	r9, r8
	beq	.L10694
.L10693:
	mov	r0, r8
	sub	r10, r8, #36
	bl	list_del
	ldr	r0, [r8, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r8, [r4, #52]
	cmp	r9, r8
	bne	.L10693
.L10694:
	mov	r3, #0
	ldrd	r0, [sp, #16]
	str	r3, [r4, #8]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	bl	_raw_spin_unlock_irqrestore
.L10724:
	ldr	r3, [sp, #12]
	ldr	r7, [r3]
.L10684:
	add	r5, r5, #1
	add	r6, r6, #104
	cmp	r7, r5
	bhi	.L10696
.L10720:
	mov	r0, #0
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10726:
	str	r9, [sp, #4]
	ldr	ip, [r4]
	movw	r1, #:lower16:.LC920
	ldr	r0, .L10727+4
	movt	r1, #:upper16:.LC920
	mov	r3, r4
	ldr	r2, .L10727+8
	str	ip, [sp]
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #96]
	str	r9, [r4, #172]
	cmp	r0, #0
	beq	.L10687
	b	.L10698
.L10725:
	mov	r3, r0
	movw	r1, #:lower16:.LC178
	ldr	r2, .L10727+12
	movt	r1, #:upper16:.LC178
	ldr	r0, .L10727+16
	ldr	r3, [r3]
	bl	__dynamic_pr_debug
	b	.L10682
.L10728:
	.align	2
.L10727:
	.word	.LANCHOR4+1650
	.word	.LANCHOR4+1632
	.word	.LANCHOR5-1444
	.word	.LANCHOR5-1460
	.word	.LANCHOR4+1608
	.fnend
	.size	gsdio_ch_remove, .-gsdio_ch_remove
	.section	.rodata.str1.4
	.align	2
.LC921:
	.ascii	"bulk reset request\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_setup, %function
fsg_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #88]
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldrh	r5, [r1, #6]	@ unaligned
	ldr	r2, [r3, #8]
	ldr	r0, [r3, #52]
	cmp	r2, #0
	beq	.L10730
	ldr	r2, [r3, #56]
	mov	ip, #0
	add	r2, r2, #1
	str	r2, [r3, #56]
	str	ip, [r0, #4]
	str	ip, [r0, #32]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	cmp	r3, #254
	beq	.L10731
	cmp	r3, #255
	bne	.L10742
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #33
	bne	.L10742
	ldrh	r3, [r4, #92]
	cmp	r3, lr
	bne	.L10744
	orrs	r3, r6, r5
	bne	.L10744
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1674
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L10755
.L10734:
	ldr	r5, [r4, #88]
	add	r7, r5, #44
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #112]
	mov	r6, r0
	cmp	r3, #2
	bgt	.L10736
	ldr	r3, [r5, #56]
	mov	r1, #2
	ldr	r2, [r5, #168]
	str	r1, [r5, #112]
	str	r3, [r5, #116]
	cmp	r2, #0
	beq	.L10736
	mov	r0, #10
	bl	send_sig_info
.L10736:
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #88]
	movw	r0, #1255
	movw	r4, #32767
	ldr	r3, [r3, #4]
	cmp	r3, #0
	moveq	r4, r0
	b	.L10729
.L10742:
	mvn	r4, #94
.L10729:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10731:
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #161
	bne	.L10742
	ldrh	r3, [r4, #92]
	cmp	r3, lr
	bne	.L10744
	cmp	r5, #1
	cmpeq	r6, #0
	bne	.L10744
	ldr	r3, [r4, #88]
	mov	r1, #1
	mov	r2, #32
	ldr	ip, [r0]
	ldr	r3, [r3, #92]
	sub	r3, r3, #1
	strb	r3, [ip]
	str	r1, [r0, #4]
	ldr	r5, [r4, #88]
	ldrd	r0, [r5, #48]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r3, [r5, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r4, r0
	str	r5, [r3]
	beq	.L10729
	mov	r3, r0
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC88
	ldr	r2, [r5, #48]
	movt	r1, #:upper16:.LC88
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_warn
	b	.L10729
.L10730:
	ldr	r0, [r3]
	movw	r1, #:lower16:.LC86
	movw	r3, #706
	ldr	r2, .L10756
	movt	r1, #:upper16:.LC86
	mvn	r4, #94
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC87
	movw	r1, #550
	movt	r0, #:upper16:.LC87
	bl	warn_slowpath_null
	b	.L10729
.L10755:
	ldr	r1, [r4, #84]
	movw	r2, #:lower16:.LC921
	movt	r2, #:upper16:.LC921
	ldr	r0, .L10756+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10734
.L10744:
	mvn	r4, #32
	b	.L10729
.L10757:
	.align	2
.L10756:
	.word	.LANCHOR5-1420
	.word	.LANCHOR4+1656
	.fnend
	.size	fsg_setup, .-fsg_setup
	.section	.rodata.str1.4
	.align	2
.LC922:
	.ascii	"%s: Queue empty packet for QTI\000"
	.align	2
.LC923:
	.ascii	"<3>%s: rmnet ctrl file handler %pK is not open\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_queue_notify, %function
rmnet_ctrl_queue_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #1698
	movt	r5, #:upper16:.LANCHOR4
	mov	r4, r0
	strd	r6, [sp, #8]
	ldrh	r3, [r5, r3]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	tst	r3, #4
	bne	.L10774
.L10759:
	add	r7, r4, #52
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #4]	@ zero_extendqisi2
	mov	r6, r0
	cmp	r3, #0
	beq	.L10775
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10761
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L10776
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L10762:
	add	r0, r3, #8
	add	r2, r4, #44
	ldr	r1, [r4, #48]
	bl	__list_add
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #1722
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10777
.L10764:
	add	r0, r4, #32
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L10761:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L10762
.L10776:
	mvn	r3, #11
	b	.L10762
.L10777:
	movw	r1, #:lower16:.LC244
	ldr	r2, .L10778
	movt	r1, #:upper16:.LC244
	ldr	r0, .L10778+4
	bl	__dynamic_pr_debug
	b	.L10764
.L10774:
	movw	r1, #:lower16:.LC922
	ldr	r2, .L10778
	add	r0, r5, #1680
	movt	r1, #:upper16:.LC922
	bl	__dynamic_pr_debug
	b	.L10759
.L10775:
	movw	r0, #:lower16:.LC923
	ldr	r1, .L10778
	mov	r2, r4
	movt	r0, #:upper16:.LC923
	bl	printk
	mov	r1, r6
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L10779:
	.align	2
.L10778:
	.word	.LANCHOR5-1408
	.word	.LANCHOR4+1704
	.fnend
	.size	rmnet_ctrl_queue_notify, .-rmnet_ctrl_queue_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_notify_modem, %function
gqti_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3228]
	str	r2, [r0, #12]
	b	rmnet_ctrl_queue_notify
	.fnend
	.size	gqti_ctrl_notify_modem, .-gqti_ctrl_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_unbind, %function
fsg_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #1746
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r0, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, r3]
	.pad #24
	sub	sp, sp, #24
	ldr	r5, [r1, #88]
	tst	r3, #4
	moveq	r3, r5
	bne	.L10797
.L10782:
	ldr	r2, [r3, #8]
	cmp	r2, r4
	beq	.L10798
.L10784:
	add	r0, r5, #336
	.syntax divided
@ 99 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r0]
	sub	r3, r3, #1
	strex	r2, r3, [r0]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L10791
	bl	fsg_common_release
.L10791:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	mov	r0, r4
	bl	kfree
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10798:
	mov	r2, #0
	str	r2, [r3, #12]
	ldr	r6, [r4, #88]
	add	r8, r6, #44
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #112]
	mov	r7, r0
	cmp	r3, #4
	bgt	.L10786
	ldr	r3, [r6, #56]
	mov	r1, #4
	ldr	r2, [r6, #168]
	str	r1, [r6, #112]
	str	r3, [r6, #116]
	cmp	r2, #0
	beq	.L10786
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L10786:
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #8]
	cmp	r3, r4
	bne	.L10784
	mov	r3, sp
	add	r1, sp, #16
	bic	r2, r3, #8128
	mov	r3, #0
	bic	r2, r2, #63
	add	r6, r5, #16
	ldr	r0, [r2, #12]
	movw	r2, #:lower16:autoremove_wake_function
	str	r3, [sp, #4]
	movt	r2, #:upper16:autoremove_wake_function
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L10790
.L10799:
	bl	schedule
.L10790:
	mov	r2, #2
	add	r1, sp, #4
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r5, #8]
	cmp	r3, r4
	beq	.L10799
	add	r1, sp, #4
	mov	r0, r6
	bl	finish_wait
	b	.L10784
.L10797:
	ldr	r1, [r1, #84]
	movw	r2, #:lower16:.LC766
	add	r0, r0, #1728
	movt	r2, #:upper16:.LC766
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #88]
	b	.L10782
	.fnend
	.size	fsg_unbind, .-fsg_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_close, %function
rndis_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #1770
	movt	r4, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r5, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r4, r3]
	.pad #12
	sub	sp, sp, #12
	tst	r3, #4
	bne	.L10822
.L10801:
	movw	r3, #306
	ldr	r7, [r5, #164]
	ldrh	r3, [r4, r3]
	uxtb	r6, r7
	tst	r3, #4
	bne	.L10823
.L10802:
	movw	r4, #:lower16:.LANCHOR1
	cmp	r6, #0
	ldr	r10, .L10824
	movt	r4, #:upper16:.LANCHOR1
	lsl	r8, r7, #4
	mov	r1, #1
	streq	r6, [r4, #3704]
	streq	r6, [r4, #3708]
	sub	r6, r8, r7
	lsl	r6, r6, #2
	add	r3, r4, r6
	add	r9, r10, r6
	str	r1, [r3, #3712]
	ldr	r3, [r9, #4]
	cmp	r3, #0
	beq	.L10800
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10806
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L10800
	add	r3, r5, #20
.L10805:
	sub	r7, r8, r7
	mov	fp, #20
	str	r3, [r5, #8]
	add	r4, r4, r7, lsl #2
	mov	r7, #0
	add	r2, r6, #52
	str	fp, [r5, #12]
	add	r2, r10, r2
	mov	r0, r5
	str	r7, [r5, #16]
	ldr	r1, [r4, #3752]
	bl	__list_add
	ldr	r3, [r5, #8]
	mov	r2, #12
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, fp}
	str	r2, [r3, #8]
	str	r7, [r3, #12]
	str	r7, [r3, #16]
	ldr	r3, [r9, #44]
	ldr	r0, [r9, #48]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L10806:
	mov	r3, #36
	mov	r5, #16
	b	.L10805
.L10822:
	ldr	r1, [r5, #20]
	movw	r2, #:lower16:.LC80
	ldr	r3, .L10824+4
	movt	r2, #:upper16:.LC80
	ldr	r0, .L10824+8
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10801
.L10823:
	mov	r3, #0
	movw	r1, #:lower16:.LC819
	ldr	r2, .L10824+12
	ldr	r0, .L10824+16
	movt	r1, #:upper16:.LC819
	str	r3, [sp]
	bl	__dynamic_pr_debug
	ldr	r7, [r5, #164]
	b	.L10802
.L10800:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10825:
	.align	2
.L10824:
	.word	.LANCHOR1+3696
	.word	.LANCHOR5-1384
	.word	.LANCHOR4+1752
	.word	.LANCHOR5-1880
	.word	.LANCHOR4+288
	.fnend
	.size	rndis_close, .-rndis_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_close, %function
rndis_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #1794
	movt	r5, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r5, r3]
	.pad #12
	sub	sp, sp, #12
	tst	r3, #4
	bne	.L10848
.L10827:
	movw	r3, #306
	ldr	r7, [r4, #144]
	ldrh	r3, [r5, r3]
	uxtb	r5, r7
	tst	r3, #4
	bne	.L10849
.L10828:
	lsl	r8, r7, #4
	ldr	r10, .L10850
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	sub	r6, r8, r7
	cmp	r5, #0
	lsl	r6, r6, #2
	mov	r1, #1
	streq	r5, [r4, #3704]
	add	r3, r4, r6
	add	r9, r10, r6
	streq	r5, [r4, #3708]
	str	r1, [r3, #3712]
	ldr	r3, [r9, #4]
	cmp	r3, #0
	beq	.L10826
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10832
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L10826
	add	r3, r5, #20
.L10831:
	sub	r7, r8, r7
	mov	fp, #20
	str	r3, [r5, #8]
	add	r4, r4, r7, lsl #2
	mov	r7, #0
	add	r2, r6, #52
	str	fp, [r5, #12]
	add	r2, r10, r2
	mov	r0, r5
	str	r7, [r5, #16]
	ldr	r1, [r4, #3752]
	bl	__list_add
	ldr	r3, [r5, #8]
	mov	r2, #12
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, fp}
	str	r2, [r3, #8]
	str	r7, [r3, #12]
	str	r7, [r3, #16]
	ldr	r3, [r9, #44]
	ldr	r0, [r9, #48]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L10832:
	mov	r3, #36
	mov	r5, #16
	b	.L10831
.L10848:
	ldr	r1, [r4, #20]
	movw	r2, #:lower16:.LC80
	add	r0, r5, #1776
	ldr	r3, .L10850+4
	movt	r2, #:upper16:.LC80
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10827
.L10849:
	mov	r3, #0
	movw	r1, #:lower16:.LC819
	ldr	r2, .L10850+8
	ldr	r0, .L10850+12
	movt	r1, #:upper16:.LC819
	str	r3, [sp]
	bl	__dynamic_pr_debug
	ldr	r7, [r4, #144]
	b	.L10828
.L10826:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10851:
	.align	2
.L10850:
	.word	.LANCHOR1+3696
	.word	.LANCHOR5-1372
	.word	.LANCHOR5-1880
	.word	.LANCHOR4+288
	.fnend
	.size	rndis_qc_close, .-rndis_qc_close
	.section	.rodata.cst4
	.align	2
.LC924:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_send_break, %function
acm_send_break:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC924
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	movt	r3, #:upper16:.LC924
	strd	r6, [sp, #8]
	cmp	r1, #0
	strd	r8, [sp, #16]
	add	r7, r0, #148
	str	lr, [sp, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r2, [r4, #20]
	ldr	r3, [r3]
	str	r3, [sp, #20]
	mov	r3,#0
	ldrh	r3, [r0, #170]
	mov	r0, r7
	bic	r3, r3, #4
	uxth	r3, r3
	orrne	r3, r3, #4
	strh	r3, [r4, #170]	@ movhi
	ldr	r5, [r2, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r6, r0
	cmp	r3, #0
	moveq	r5, r3
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L10866
.L10857:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LC924
	movt	r3, #:upper16:.LC924
	ldr	r2, [r3]
	ldr	r3, [sp, #20]
	eors	r2, r3, r2
	bne	.L10867
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L10866:
	ldr	r0, .L10868
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	ldrh	ip, [r4, #170]
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	beq	.L10855
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC683
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC683
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldrh	ip, [r4, #170]
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
.L10855:
	movw	r0, #:lower16:.LC684
	mov	r2, ip
	mov	r1, r3
	movt	r0, #:upper16:.LC684
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r5, [r4, #152]
	bl	__memzero
	ldr	r8, [r4, #156]
	mov	r2, #0
	mov	r9, #32
	mov	r0, #10
	mvn	r1, #94
	strb	r2, [r4, #147]
	mov	ip, #2
	str	r2, [r4, #156]
	ldr	r3, [r8]
	str	r0, [r8, #4]
	mov	r0, r7
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	r2, [r4, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	r2, [sp, #10]	@ movhi
	ldr	r2, [sp, #10]	@ unaligned
	str	r2, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r2, [sp, #18]	@ unaligned
	strh	r2, [r3, #16]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r5, #8]
	mov	r2, r9
	mov	r0, r5
	mov	r1, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r5, #0
	bge	.L10857
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC685
	mov	r3, r5
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC685
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, r9
	bl	dev_err
	str	r8, [r4, #156]
	b	.L10857
.L10867:
	bl	__stack_chk_fail
.L10869:
	.align	2
.L10868:
	.word	.LANCHOR4-1408
	.fnend
	.size	acm_send_break, .-acm_send_break
	.section	.rodata.cst4
	.align	2
.LC925:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_connect, %function
acm_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC925
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	movt	r3, #:upper16:.LC925
	strd	r6, [sp, #8]
	add	r6, r0, #148
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r2, [r0, #20]
	ldr	r3, [r3]
	str	r3, [sp, #20]
	mov	r3,#0
	ldrh	r3, [r0, #170]
	mov	r0, r6
	orr	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	ldr	r7, [r2, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r5, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L10880
.L10874:
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LC925
	movt	r3, #:upper16:.LC925
	ldr	r2, [r3]
	ldr	r3, [sp, #20]
	eors	r2, r3, r2
	bne	.L10881
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L10880:
	ldr	r0, .L10882
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	ldrh	ip, [r4, #170]
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	beq	.L10872
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC683
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC683
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldrh	ip, [r4, #170]
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
.L10872:
	movw	r0, #:lower16:.LC684
	mov	r2, ip
	mov	r1, r3
	movt	r0, #:upper16:.LC684
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r8, [r4, #152]
	bl	__memzero
	ldr	r7, [r4, #156]
	mov	r2, #0
	mov	r9, #32
	mov	r0, #10
	mvn	r1, #94
	strb	r2, [r4, #147]
	mov	ip, #2
	str	r2, [r4, #156]
	ldr	r3, [r7]
	str	r0, [r7, #4]
	mov	r0, r6
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	r2, [r4, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	r2, [sp, #10]	@ movhi
	ldr	r2, [sp, #10]	@ unaligned
	str	r2, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r2, [sp, #18]	@ unaligned
	strh	r2, [r3, #16]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r8, #8]
	mov	r2, r9
	mov	r0, r8
	mov	r1, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r8, #0
	bge	.L10874
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC685
	mov	r3, r8
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC685
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, r9
	bl	dev_err
	str	r7, [r4, #156]
	b	.L10874
.L10881:
	bl	__stack_chk_fail
.L10883:
	.align	2
.L10882:
	.word	.LANCHOR4-1408
	.fnend
	.size	acm_connect, .-acm_connect
	.section	.rodata.cst4
	.align	2
.LC926:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_disconnect, %function
acm_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC926
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	movt	r3, #:upper16:.LC926
	strd	r6, [sp, #8]
	add	r6, r0, #148
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r2, [r0, #20]
	ldr	r3, [r3]
	str	r3, [sp, #20]
	mov	r3,#0
	ldrh	r3, [r0, #170]
	mov	r0, r6
	bic	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	ldr	r7, [r2, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r5, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L10894
.L10888:
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LC926
	movt	r3, #:upper16:.LC926
	ldr	r2, [r3]
	ldr	r3, [sp, #20]
	eors	r2, r3, r2
	bne	.L10895
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L10894:
	ldr	r0, .L10896
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	ldrh	ip, [r4, #170]
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	beq	.L10886
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC683
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC683
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldrh	ip, [r4, #170]
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
.L10886:
	movw	r0, #:lower16:.LC684
	mov	r2, ip
	mov	r1, r3
	movt	r0, #:upper16:.LC684
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r8, [r4, #152]
	bl	__memzero
	ldr	r7, [r4, #156]
	mov	r2, #0
	mov	r9, #32
	mov	r0, #10
	mvn	r1, #94
	strb	r2, [r4, #147]
	mov	ip, #2
	str	r2, [r4, #156]
	ldr	r3, [r7]
	str	r0, [r7, #4]
	mov	r0, r6
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	r2, [r4, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	r2, [sp, #10]	@ movhi
	ldr	r2, [sp, #10]	@ unaligned
	str	r2, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r2, [sp, #18]	@ unaligned
	strh	r2, [r3, #16]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r8, #8]
	mov	r2, r9
	mov	r0, r8
	mov	r1, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r8, #0
	bge	.L10888
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC685
	mov	r3, r8
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC685
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, r9
	bl	dev_err
	str	r7, [r4, #156]
	b	.L10888
.L10895:
	bl	__stack_chk_fail
.L10897:
	.align	2
.L10896:
	.word	.LANCHOR4-1408
	.fnend
	.size	acm_disconnect, .-acm_disconnect
	.section	.rodata.str1.4
	.align	2
.LC927:
	.ascii	"ccid_bulk_write(%d)\012\000"
	.align	2
.LC928:
	.ascii	"<3>%s: max_buffer_size:%d given_pkt_size:%d\012\000"
	.align	2
.LC929:
	.ascii	"<3> %s dev->error\012\000"
	.align	2
.LC930:
	.ascii	"ccid_bulk_write: xfer error %d\012\000"
	.align	2
.LC931:
	.ascii	"ccid_bulk_write returning %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_write, %function
ccid_bulk_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #1818
	mov	r4, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR4
	mov	r8, r1
	movt	r9, #:upper16:.LANCHOR4
	strd	r10, [sp, #24]
	ldrh	r3, [r9, r3]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r5, [r0, #124]
	tst	r3, #4
	bne	.L10948
.L10899:
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L10949
	cmp	r4, #0
	beq	.L10950
	cmp	r4, #524
	bcs	.L10951
	add	r7, r5, #92
	add	r10, r5, #192
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r5, #192]
	mov	fp, r0
	cmp	r10, r6
	beq	.L10952
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L10905
.L10906:
	ldr	r3, [r5, #148]
	cmp	r3, #0
	bne	.L10953
	mov	r3, sp
	ldr	r0, [r6]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L10954
	mov	r1, r4
	bl	__memzero
.L10915:
	ldr	r3, [r5, #96]
	cmp	r3, #0
	bne	.L10917
	movw	r3, #1866
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L10955
.L10918:
	cmp	r6, #0
	mvneq	r4, #18
	beq	.L10913
	ldr	r5, [r5, #104]
	mvn	r4, #18
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L10913:
	movw	r3, #1938
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L10956
.L10898:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10954:
	mov	r1, r8
	mov	r2, r4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L10915
	str	r4, [r6, #4]
	ldr	r0, [r5, #104]
	mov	r2, #208
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L10913
	movw	r3, #1890
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L10957
.L10920:
	mov	r3, #1
	mov	r0, r7
	str	r3, [r5, #148]
	bl	_raw_spin_lock_irqsave
	mov	r4, r0
	mov	r2, r10
	ldr	r1, [r5, #196]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r4
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #96]
	mov	r6, r0
	cmp	r3, #0
	mvnne	r4, #4
	beq	.L10958
.L10921:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L10913
.L10952:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L10905:
	ldr	r3, [r5, #148]
	cmp	r3, #0
	bne	.L10927
	mov	r2, sp
	str	r3, [sp, #12]
	movw	r1, #:lower16:autoremove_wake_function
	bic	r2, r2, #8128
	movt	r1, #:upper16:autoremove_wake_function
	bic	r2, r2, #63
	add	fp, r5, #172
	ldr	r0, [r2, #12]
	str	r2, [sp, #4]
	add	r2, sp, #24
	str	r0, [sp, #16]
	str	r1, [sp, #20]
	str	r2, [sp, #24]
	str	r2, [sp, #28]
	b	.L10911
.L10907:
	str	r1, [sp]
	bl	list_del
	mov	r0, r7
	ldr	r1, [sp]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L10909
.L10908:
	ldr	r3, [r5, #148]
	cmp	r3, #0
	bne	.L10928
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L10910
	bl	schedule
.L10911:
	add	r1, sp, #12
	mov	r2, #1
	mov	r0, fp
	bl	prepare_to_wait
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	ldr	r0, [r5, #192]
	cmp	r10, r0
	sub	r6, r0, #36
	bne	.L10907
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L10908
.L10927:
	mov	r6, #0
	b	.L10906
.L10917:
	mov	r0, r7
	mvn	r4, #13
	bl	_raw_spin_lock_irqsave
	mov	r2, r10
	ldr	r1, [r5, #196]
	mov	r5, r0
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r5
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L10913
.L10948:
	movw	r1, #:lower16:.LC927
	ldr	r0, .L10960
	movt	r1, #:upper16:.LC927
	bl	__dynamic_pr_debug
	b	.L10899
.L10956:
	movw	r1, #:lower16:.LC931
	mov	r2, r4
	ldr	r0, .L10960+4
	movt	r1, #:upper16:.LC931
	bl	__dynamic_pr_debug
	b	.L10898
.L10928:
	mov	r6, #0
.L10909:
	add	r1, sp, #12
	mov	r0, fp
	bl	finish_wait
	b	.L10906
.L10958:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #1914
	ldrh	r3, [r9, r3]
	tst	r3, #4
	beq	.L10923
	movw	r1, #:lower16:.LC304
	ldr	r2, .L10960+8
	movt	r1, #:upper16:.LC304
	ldr	r0, .L10960+12
	bl	__dynamic_pr_debug
	b	.L10923
.L10924:
	bl	list_del
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	beq	.L10959
	ldr	r8, [r5, #104]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, fp
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L10923:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #192]
	mov	r8, r0
	cmp	r10, r4
	mov	r0, r4
	sub	fp, r4, #36
	bne	.L10924
	mov	r1, r8
	mov	r0, r7
	mvn	r4, #18
	bl	_raw_spin_unlock_irqrestore
	b	.L10921
.L10910:
	add	r1, sp, #12
	mov	r0, fp
	mov	r4, #65024
	movt	r4, 65535
	bl	finish_wait
	b	.L10913
.L10955:
	movw	r1, #:lower16:.LC304
	ldr	r2, .L10960+8
	movt	r1, #:upper16:.LC304
	ldr	r0, .L10960+16
	bl	__dynamic_pr_debug
	b	.L10918
.L10957:
	movw	r1, #:lower16:.LC930
	mov	r2, r0
	ldr	r0, .L10960+20
	movt	r1, #:upper16:.LC930
	bl	__dynamic_pr_debug
	b	.L10920
.L10959:
	mvn	r4, #18
	b	.L10921
.L10949:
	movw	r3, #1842
	ldrh	r3, [r9, r3]
	tst	r3, #4
	mvneq	r4, #18
	beq	.L10898
	movw	r1, #:lower16:.LC304
	ldr	r2, .L10960+8
	mvn	r4, #18
	movt	r1, #:upper16:.LC304
	ldr	r0, .L10960+24
	bl	__dynamic_pr_debug
	b	.L10898
.L10951:
	movw	r0, #:lower16:.LC928
	mov	r3, r4
	ldr	r1, .L10960+8
	movt	r0, #:upper16:.LC928
	movw	r2, #523
	mvn	r4, #11
	bl	printk
	b	.L10898
.L10950:
	movw	r0, #:lower16:.LC330
	ldr	r1, .L10960+8
	mvn	r4, #18
	movt	r0, #:upper16:.LC330
	bl	printk
	b	.L10898
.L10953:
	movw	r0, #:lower16:.LC929
	ldr	r1, .L10960+8
	mvn	r4, #4
	movt	r0, #:upper16:.LC929
	bl	printk
	b	.L10913
.L10961:
	.align	2
.L10960:
	.word	.LANCHOR4+1800
	.word	.LANCHOR4+1920
	.word	.LANCHOR5-1356
	.word	.LANCHOR4+1896
	.word	.LANCHOR4+1848
	.word	.LANCHOR4+1872
	.word	.LANCHOR4+1824
	.fnend
	.size	ccid_bulk_write, .-ccid_bulk_write
	.section	.rodata.str1.4
	.align	2
.LC932:
	.ascii	"<1>DUN : DTR %d\012\000"
	.align	2
.LC933:
	.ascii	"<6>modem_ioctl: Unknown ioctl cmd(0x%x).\012\000"
	.section	.rodata.cst4
	.align	2
.LC934:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_ioctl, %function
modem_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #21249
	movw	r3, #:lower16:.LC934
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r0, 16388
	movt	r3, #:upper16:.LC934
	strd	r6, [sp, #8]
	cmp	r1, r0
	strd	r8, [sp, #16]
	mov	r5, r2
	str	lr, [sp, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r3]
	str	r3, [sp, #20]
	mov	r3,#0
	bne	.L10978
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #3972]
	cmp	r4, #0
	moveq	r0, r4
	beq	.L10962
	ldr	r3, [r4, #20]
	add	r6, r4, #148
	strh	r2, [r4, #170]	@ movhi
	mov	r0, r6
	ldr	r7, [r3, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r5, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L10979
.L10970:
	mov	r0, r6
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L10962:
	movw	r3, #:lower16:.LC934
	movt	r3, #:upper16:.LC934
	ldr	r2, [r3]
	ldr	r3, [sp, #20]
	eors	r2, r3, r2
	bne	.L10980
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L10978:
	movw	r0, #21251
	movt	r0, 16388
	cmp	r1, r0
	beq	.L10981
	movw	r0, #:lower16:.LC933
	movt	r0, #:upper16:.LC933
	bl	printk
	movw	r0, #65021
	movt	r0, 65535
	b	.L10962
.L10980:
	bl	__stack_chk_fail
.L10979:
	ldr	r0, .L10982
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	ldrh	ip, [r4, #170]
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	beq	.L10968
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC683
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC683
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	ldrh	ip, [r4, #170]
.L10968:
	movw	r0, #:lower16:.LC684
	mov	r2, ip
	mov	r1, r3
	movt	r0, #:upper16:.LC684
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r8, [r4, #152]
	bl	__memzero
	ldr	r7, [r4, #156]
	mov	r2, #0
	mov	r9, #32
	mov	r0, #10
	mvn	r1, #94
	strb	r2, [r4, #147]
	mov	ip, #2
	str	r2, [r4, #156]
	ldr	r3, [r7]
	str	r0, [r7, #4]
	mov	r0, r6
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	r2, [r4, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	r2, [sp, #10]	@ movhi
	ldr	r2, [sp, #10]	@ unaligned
	str	r2, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r2, [sp, #18]	@ unaligned
	strh	r2, [r3, #16]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r8, #8]
	mov	r2, r9
	mov	r0, r8
	mov	r1, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r8, #0
	bge	.L10970
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC685
	mov	r3, r8
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC685
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, r9
	bl	dev_err
	str	r7, [r4, #156]
	b	.L10970
.L10981:
	movw	r0, #:lower16:.LC932
	mov	r1, r2
	movt	r0, #:upper16:.LC932
	bl	printk
	movw	ip, #:lower16:.LANCHOR1
	mov	r2, #1
	ldr	r0, .L10982+4
	movt	ip, #:upper16:.LANCHOR1
	mov	r1, r2
	mov	r3, #0
	str	r2, [ip, #2200]
	str	r5, [ip, #3408]
	bl	__wake_up
	mov	r0, #0
	b	.L10962
.L10983:
	.align	2
.L10982:
	.word	.LANCHOR4-1408
	.word	.LANCHOR1+2204
	.fnend
	.size	modem_ioctl, .-modem_ioctl
	.section	.rodata.str1.4
	.align	2
.LC935:
	.ascii	"ccid_bind_config\012\000"
	.align	2
.LC936:
	.ascii	"ccid\000"
	.align	2
.LC937:
	.ascii	"adding '%s'/%pK to config '%s'/%pK\012\000"
	.align	2
.LC938:
	.ascii	"adding '%s'/%pK --> %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_bind_config, %function
ccid_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r2, #1962
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR4
	mov	r5, r1
	str	r8, [sp, #16]
	ldrh	r2, [r6, r2]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldr	r4, [r3, #3400]
	tst	r2, #4
	bne	.L11018
.L10985:
	ldr	r2, .L11023
	movw	r0, #:lower16:ccid_function_bind
	movw	r1, #:lower16:ccid_function_unbind
	movt	r0, #:upper16:ccid_function_bind
	movt	r1, #:upper16:ccid_function_unbind
	ldr	ip, [r5, #24]
	movw	r3, #:lower16:.LC936
	movt	r3, #:upper16:.LC936
	add	lr, r2, #24
	str	r3, [r4]
	str	r2, [r4, #16]
	movw	r2, #:lower16:ccid_function_set_alt
	movt	r2, #:upper16:ccid_function_set_alt
	strd	r0, [r4, #32]
	movw	r0, #1986
	str	lr, [r4, #8]
	movw	r1, #:lower16:ccid_function_setup
	str	r2, [r4, #40]
	ldrh	r0, [r6, r0]
	movw	r2, #:lower16:ccid_function_disable
	movt	r1, #:upper16:ccid_function_setup
	movt	r2, #:upper16:ccid_function_disable
	str	r2, [r4, #48]
	tst	r0, #4
	str	r1, [r4, #52]
	str	ip, [r4, #84]
	bne	.L11019
.L10986:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L10994
	add	r8, r4, #72
	add	r2, r5, #36
	str	r5, [r4, #20]
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L10988
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L11020
.L10988:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L10989
.L11022:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L10989
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L10989:
	tst	r3, #2
	bne	.L10990
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L10990
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L10990:
	tst	r3, #1
	bne	.L10991
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10991
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L10991:
	cmp	r7, #0
	beq	.L10984
	movw	r3, #2010
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L11021
.L10984:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11019:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC937
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC937
	ldr	r0, .L11023+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L10986
.L10994:
	movw	r3, #2010
	mvn	r7, #21
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L10984
	b	.L11021
.L11020:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L10989
	b	.L11022
.L11021:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC938
	movt	r2, #:upper16:.LC938
	ldr	r0, .L11023+8
	ldr	r3, [r4]
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10984
.L11018:
	movw	r1, #:lower16:.LC935
	ldr	r0, .L11023+12
	movt	r1, #:upper16:.LC935
	bl	__dynamic_pr_debug
	b	.L10985
.L11024:
	.align	2
.L11023:
	.word	.LANCHOR0+1864
	.word	.LANCHOR4+1968
	.word	.LANCHOR4+1992
	.word	.LANCHOR4+1944
	.fnend
	.size	ccid_function_bind_config, .-ccid_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC939:
	.ascii	"rmnet_smd_sdio_function_add\012\000"
	.align	2
.LC940:
	.ascii	"rmnet_smd_sdio\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_bind_config, %function
rmnet_smd_sdio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #2480]
	.pad #16
	sub	sp, sp, #16
	cmp	r4, #0
	beq	.L11034
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #2034
	movt	r6, #:upper16:.LANCHOR4
	mov	r5, r1
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L11060
.L11027:
	ldr	r2, .L11065
	movw	r1, #:lower16:rmnet_mux_bind
	movw	r3, #:lower16:.LC940
	movt	r1, #:upper16:rmnet_mux_bind
	movw	r0, #:lower16:rmnet_mux_unbind
	movt	r0, #:upper16:rmnet_mux_unbind
	movt	r3, #:upper16:.LC940
	add	ip, r2, #8
	str	r1, [r4, #32]
	movw	r1, #:lower16:rmnet_mux_set_alt
	str	r2, [r4, #4]
	add	r2, r2, #28
	movt	r1, #:upper16:rmnet_mux_set_alt
	str	r3, [r4]
	str	r2, [r4, #8]
	movw	r2, #1986
	str	ip, [r4, #16]
	str	r0, [r4, #36]
	movw	r0, #:lower16:rmnet_mux_setup
	str	r1, [r4, #40]
	ldrh	ip, [r6, r2]
	movw	r1, #:lower16:rmnet_mux_disable
	movw	r2, #:lower16:rmnet_mux_suspend
	movt	r0, #:upper16:rmnet_mux_setup
	movt	r1, #:upper16:rmnet_mux_disable
	movt	r2, #:upper16:rmnet_mux_suspend
	tst	ip, #4
	str	r1, [r4, #48]
	str	r0, [r4, #52]
	str	r2, [r4, #56]
	bne	.L11061
.L11028:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L11036
	add	r8, r4, #72
	add	r2, r5, #36
	str	r5, [r4, #20]
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L11030
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L11062
.L11030:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L11031
.L11064:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L11031
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L11031:
	tst	r3, #2
	bne	.L11032
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L11032
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L11032:
	tst	r3, #1
	bne	.L11033
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L11033
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L11033:
	cmp	r7, #0
	beq	.L11025
	movw	r3, #2010
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L11063
.L11025:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11061:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC937
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC937
	ldr	r0, .L11065+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L11028
.L11036:
	movw	r3, #2010
	mvn	r7, #21
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L11025
	b	.L11063
.L11062:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L11031
	b	.L11064
.L11063:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC938
	movt	r2, #:upper16:.LC938
	ldr	r0, .L11065+8
	ldr	r3, [r4]
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11025
.L11060:
	movw	r1, #:lower16:.LC939
	add	r0, r6, #2016
	movt	r1, #:upper16:.LC939
	bl	__dynamic_pr_debug
	b	.L11027
.L11034:
	mvn	r7, #18
	b	.L11025
.L11066:
	.align	2
.L11065:
	.word	.LANCHOR0+1912
	.word	.LANCHOR4+1968
	.word	.LANCHOR4+1992
	.fnend
	.size	rmnet_smd_sdio_bind_config, .-rmnet_smd_sdio_bind_config
	.section	.rodata.str1.4
	.align	2
.LC941:
	.ascii	"%s: ep:%pK head:%pK num:%d size:%d cb:%pK\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_requests.constprop.0, %function
gsdio_alloc_requests.constprop.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #2058
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r10, [sp, #24]
	movw	fp, #:lower16:.LANCHOR4
	movt	fp, #:upper16:.LANCHOR4
	strd	r8, [sp, #16]
	mov	r9, r2
	ldrh	r3, [fp, r3]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	tst	r3, #4
	bne	.L11086
.L11068:
	movw	r8, #:lower16:kmalloc_caches
	mov	r5, #0
	movt	r8, #:upper16:kmalloc_caches
	mov	r10, #2048
.L11075:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r2, #2048
	mov	r1, #32
	mov	r3, #16
	beq	.L11087
	str	r10, [r4, #4]
	ldr	r0, [r8, #44]
	cmp	r0, #0
	streq	r3, [r4]
	beq	.L11072
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	beq	.L11088
.L11072:
	add	r0, r4, #36
	add	r5, r5, #1
	str	r9, [r4, #28]
	mov	r1, r7
	ldr	r2, [r7]
	bl	__list_add
	cmp	r5, #8
	bne	.L11075
.L11076:
	mov	r0, #0
.L11067:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11086:
	mov	ip, #2048
	mov	r0, #8
	ldr	r2, .L11090
	movw	r1, #:lower16:.LC941
	mov	r3, r6
	str	r7, [sp]
	movt	r1, #:upper16:.LC941
	stmib	sp, {r0, ip}
	ldr	r0, .L11090+4
	str	r9, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L11068
.L11087:
	movw	r0, #:lower16:.LC689
	ldr	r1, .L11090+8
	movt	r0, #:upper16:.LC689
	bl	printk
.L11070:
	movw	r3, #2082
	ldrh	r3, [fp, r3]
	tst	r3, #4
	bne	.L11089
.L11073:
	ldr	r3, [r7]
	cmp	r7, r3
	mvneq	r0, #11
	bne	.L11076
	b	.L11067
.L11088:
	movw	r0, #:lower16:.LC690
	ldr	r1, .L11090+8
	movt	r0, #:upper16:.LC690
	bl	printk
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L11070
.L11089:
	movw	r1, #:lower16:.LC688
	ldr	r2, .L11090
	mov	r3, r5
	movt	r1, #:upper16:.LC688
	ldr	r0, .L11090+12
	bl	__dynamic_pr_debug
	b	.L11073
.L11091:
	.align	2
.L11090:
	.word	.LANCHOR5-1340
	.word	.LANCHOR4+2040
	.word	.LANCHOR5-1316
	.word	.LANCHOR4+2064
	.fnend
	.size	gsdio_alloc_requests.constprop.0, .-gsdio_alloc_requests.constprop.0
	.section	.rodata.str1.4
	.align	2
.LC942:
	.ascii	"ccid_bulk_read(%d)\012\000"
	.align	2
.LC943:
	.ascii	"<3>%s bulk_dev_error\012\000"
	.align	2
.LC944:
	.ascii	"<3>%s usb ep queue failed\012\000"
	.align	2
.LC945:
	.ascii	"ccid_bulk_read returning %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_read, %function
ccid_bulk_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #2106
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR4
	mov	r9, r1
	movt	r8, #:upper16:.LANCHOR4
	strd	r10, [sp, #24]
	ldrh	r3, [r8, r3]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	tst	r3, #4
	bne	.L11135
.L11093:
	movw	r2, #522
	cmp	r6, r2
	bhi	.L11136
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L11096
	mov	r3, sp
	add	r5, r4, #92
	bic	r7, r3, #8128
	bic	r7, r7, #63
	b	.L11097
.L11101:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L11114
.L11141:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r1, r0
	cmp	r3, #0
	beq	.L11137
	ldr	r2, [r10, #48]
	cmp	r2, #0
	bne	.L11107
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L11097:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r1, r0
	cmp	r3, #0
	beq	.L11138
	ldr	r10, [r4, #184]
	mov	r3, #0
	mov	r0, r5
	str	r6, [r10, #4]
	str	r3, [r4, #188]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #108]
	mov	r1, r10
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L11139
	ldr	r3, [r4, #188]
	cmp	r3, #0
	bne	.L11101
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L11101
	ldr	r2, [r4, #96]
	cmp	r2, #0
	beq	.L11101
	ldr	r0, [r7, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	fp, r4, #160
	str	r3, [sp, #4]
	str	r1, [sp, #16]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #20]
	b	.L11104
.L11140:
	bl	schedule
.L11104:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #188]
	cmp	r3, #0
	bne	.L11102
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L11102
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L11102
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L11140
	mov	r0, fp
	add	r1, sp, #4
	bl	finish_wait
	ldr	r0, [r4, #108]
	mov	r3, #1
	mov	r1, r10
	mov	r6, #65024
	str	r3, [r4, #148]
	movt	r6, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11098
.L11102:
	add	r1, sp, #4
	mov	r0, fp
	bl	finish_wait
	ldr	r3, [r4, #148]
	cmp	r3, #0
	beq	.L11141
.L11114:
	mvn	r6, #4
.L11098:
	movw	r3, #2202
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L11092
	movw	r1, #:lower16:.LC945
	mov	r2, r6
	ldr	r0, .L11144
	movt	r1, #:upper16:.LC945
	bl	__dynamic_pr_debug
	b	.L11092
.L11138:
	movw	r3, #2130
	ldrh	r3, [r8, r3]
	tst	r3, #4
	mvneq	r6, #18
	bne	.L11142
.L11092:
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11137:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2154
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L11106
.L11112:
	mvn	r6, #18
	b	.L11098
.L11107:
	mov	r3, #1
	cmp	r2, r6
	mov	r0, r5
	movcc	r7, r2
	str	r3, [r4, #156]
	movcs	r7, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r7; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L11143
.L11108:
	cmp	r7, #0
	mov	r0, r5
	mvnne	r6, #13
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r2, #0
	mov	r7, r0
	str	r2, [r4, #156]
	cmp	r3, r2
	bne	.L11110
	ldr	r6, [r4, #184]
	cmp	r6, r2
	beq	.L11111
	ldr	r4, [r4, #108]
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L11111:
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2178
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L11112
	movw	r1, #:lower16:.LC304
	ldr	r2, .L11144+4
	mvn	r6, #18
	movt	r1, #:upper16:.LC304
	ldr	r0, .L11144+8
	bl	__dynamic_pr_debug
	b	.L11098
.L11110:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L11098
.L11143:
	mov	r2, r7
	mov	r0, r9
	ldr	r1, [r10]
	bl	__copy_to_user
	mov	r7, r0
	b	.L11108
.L11135:
	movw	r1, #:lower16:.LC942
	ldr	r0, .L11144+12
	movt	r1, #:upper16:.LC942
	bl	__dynamic_pr_debug
	b	.L11093
.L11142:
	movw	r1, #:lower16:.LC304
	ldr	r2, .L11144+4
	mvn	r6, #18
	movt	r1, #:upper16:.LC304
	ldr	r0, .L11144+16
	bl	__dynamic_pr_debug
	b	.L11092
.L11106:
	movw	r1, #:lower16:.LC304
	ldr	r2, .L11144+4
	mvn	r6, #18
	movt	r1, #:upper16:.LC304
	ldr	r0, .L11144+20
	bl	__dynamic_pr_debug
	b	.L11098
.L11136:
	movw	r0, #:lower16:.LC928
	mov	r3, r6
	ldr	r1, .L11144+4
	movt	r0, #:upper16:.LC928
	mvn	r6, #11
	bl	printk
	b	.L11092
.L11096:
	movw	r0, #:lower16:.LC943
	ldr	r1, .L11144+4
	mvn	r6, #4
	movt	r0, #:upper16:.LC943
	bl	printk
	b	.L11098
.L11139:
	movw	r0, #:lower16:.LC944
	ldr	r1, .L11144+4
	mvn	r6, #4
	movt	r0, #:upper16:.LC944
	bl	printk
	mov	r3, #1
	str	r3, [r4, #148]
	b	.L11098
.L11145:
	.align	2
.L11144:
	.word	.LANCHOR4+2184
	.word	.LANCHOR5-1300
	.word	.LANCHOR4+2160
	.word	.LANCHOR4+2088
	.word	.LANCHOR4+2112
	.word	.LANCHOR4+2136
	.fnend
	.size	ccid_bulk_read, .-ccid_bulk_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_open, %function
ncm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2226
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L11168
.L11147:
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r6, [r4, #168]
	movw	r3, #258
	strh	r3, [r4, #172]	@ movhi
	cmp	r6, #0
	beq	.L11149
	ldr	ip, [r4, #20]
	mov	r3, #0
	mov	r2, #16
	ldr	r5, [r6]
	mov	r0, #42
	mov	r1, #8
	ldr	r8, [ip, #24]
	strb	r0, [r5, #1]
	strb	r3, [r5, #2]
	strb	r3, [r5, #3]
	strb	r1, [r5, #6]
	strb	r3, [r5, #7]
	str	r2, [r6, #4]
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L11154
	ldr	r1, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r1, #3
	moveq	r3, r2
.L11150:
	ldr	r2, [r6]
	movw	r9, #:lower16:.LANCHOR2
	movw	r1, #426
	movt	r9, #:upper16:.LANCHOR2
	str	r3, [r2, #8]
	str	r3, [r2, #12]
	ldrh	r3, [r9, r1]
	tst	r3, #4
	bne	.L11169
.L11151:
	mov	r1, #1
	mvn	r2, #94
	mov	r3, #0
	mov	r0, r7
	strb	r1, [r4, #172]
	strb	r2, [r5]
	ldrb	r2, [r4, #148]	@ zero_extendqisi2
	strh	r2, [r5, #4]	@ unaligned
	str	r3, [r4, #168]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #164]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r5, #0
	bge	.L11149
	movw	r3, #450
	str	r6, [r4, #168]
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L11170
.L11149:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L11154:
	mov	r3, #28672
	movt	r3, 148
	b	.L11150
.L11168:
	ldr	r1, [r4, #20]
	movw	r2, #:lower16:.LC80
	add	r0, r3, #2208
	movt	r2, #:upper16:.LC80
	ldr	r3, .L11171
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11147
.L11170:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC26
	mov	r3, r5
	movt	r2, #:upper16:.LC26
	ldr	r0, .L11171+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11149
.L11169:
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #2
	bls	.L11156
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L11152:
	movw	r2, #:lower16:.LC25
	ldr	r0, .L11171+8
	movt	r2, #:upper16:.LC25
	bl	__dynamic_dev_dbg
	b	.L11151
.L11156:
	mov	r3, #28672
	movt	r3, 148
	b	.L11152
.L11172:
	.align	2
.L11171:
	.word	.LANCHOR5-1284
	.word	.LANCHOR2+432
	.word	.LANCHOR2+408
	.fnend
	.size	ncm_open, .-ncm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_close, %function
ncm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2250
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L11195
.L11174:
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r6, [r4, #168]
	mov	r3, #2
	strh	r3, [r4, #172]	@ movhi
	cmp	r6, #0
	beq	.L11176
	ldr	ip, [r4, #20]
	mov	r3, #0
	mov	r2, #16
	ldr	r5, [r6]
	mov	r0, #42
	mov	r1, #8
	ldr	r8, [ip, #24]
	strb	r0, [r5, #1]
	strb	r3, [r5, #2]
	strb	r3, [r5, #3]
	strb	r1, [r5, #6]
	strb	r3, [r5, #7]
	str	r2, [r6, #4]
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L11181
	ldr	r1, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r1, #3
	moveq	r3, r2
.L11177:
	ldr	r2, [r6]
	movw	r9, #:lower16:.LANCHOR2
	movw	r1, #426
	movt	r9, #:upper16:.LANCHOR2
	str	r3, [r2, #8]
	str	r3, [r2, #12]
	ldrh	r3, [r9, r1]
	tst	r3, #4
	bne	.L11196
.L11178:
	mov	r1, #1
	mvn	r2, #94
	mov	r3, #0
	mov	r0, r7
	strb	r1, [r4, #172]
	strb	r2, [r5]
	ldrb	r2, [r4, #148]	@ zero_extendqisi2
	strh	r2, [r5, #4]	@ unaligned
	str	r3, [r4, #168]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #164]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r5, #0
	bge	.L11176
	movw	r3, #450
	str	r6, [r4, #168]
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L11197
.L11176:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L11181:
	mov	r3, #28672
	movt	r3, 148
	b	.L11177
.L11195:
	ldr	r1, [r4, #20]
	movw	r2, #:lower16:.LC80
	ldr	r3, .L11198
	movt	r2, #:upper16:.LC80
	ldr	r0, .L11198+4
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11174
.L11197:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC26
	mov	r3, r5
	movt	r2, #:upper16:.LC26
	ldr	r0, .L11198+8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11176
.L11196:
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #2
	bls	.L11183
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L11179:
	movw	r2, #:lower16:.LC25
	ldr	r0, .L11198+12
	movt	r2, #:upper16:.LC25
	bl	__dynamic_dev_dbg
	b	.L11178
.L11183:
	mov	r3, #28672
	movt	r3, 148
	b	.L11179
.L11199:
	.align	2
.L11198:
	.word	.LANCHOR5-1272
	.word	.LANCHOR4+2232
	.word	.LANCHOR2+432
	.word	.LANCHOR2+408
	.fnend
	.size	ncm_close, .-ncm_close
	.section	.rodata.str1.4
	.align	2
.LC946:
	.ascii	"%s setup response queue error\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_ctrlrequest, %function
accessory_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	ip, [r2]	@ zero_extendqisi2
	ldrb	r0, [r2, #1]	@ zero_extendqisi2
	ldr	r6, [r3, #2488]
	cmp	ip, #64
	beq	.L11236
	cmp	r0, #51
	cmpeq	ip, #192
	bne	.L11226
	ldr	r3, [r5, #4]
	mov	r4, #2
	mov	r1, #256
	add	r0, r6, #101
	ldr	r3, [r3]
	strh	r4, [r3]	@ movhi
	bl	__memzero
	add	r0, r6, #356
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r6, #612
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r6, #868
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r6, #1120
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	add	r0, r6, #1376
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	mov	r3, #0
	str	r3, [r6, #1644]
	str	r3, [r6, #1648]
.L11203:
	ldr	r3, [r5, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r5, #4]
	str	r4, [r3, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L11237
.L11200:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11236:
	cmp	r0, #53
	beq	.L11238
	cmp	r0, #52
	ldrh	r7, [r2, #4]	@ unaligned
	ldrh	r4, [r2, #6]	@ unaligned
	beq	.L11239
	ldrh	r8, [r2, #2]	@ unaligned
	orr	r3, r7, r4
	cmp	r0, #58
	cmpeq	r3, #0
	moveq	r4, #0
	streq	r8, [r6, #1648]
	beq	.L11203
	cmp	r0, #54
	beq	.L11240
	cmp	r0, #55
	beq	.L11241
	cmp	r0, #56
	beq	.L11242
	cmp	r0, #57
	bne	.L11226
	add	r9, r6, #88
	add	r6, r6, #1760
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r6, #4]
	add	r6, r6, #4
	mov	r1, r0
	cmp	r6, r7
	bne	.L11224
	b	.L11222
.L11243:
	ldr	r7, [r7]
	cmp	r6, r7
	beq	.L11222
.L11224:
	ldr	r3, [r7, #16]
	cmp	r8, r3
	bne	.L11243
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L11235
	ldr	r2, [r5, #4]
	movw	r3, #:lower16:acc_complete_send_hid_event
	movt	r3, #:upper16:acc_complete_send_hid_event
	str	r7, [r2, #32]
	ldr	r2, [r5, #4]
	str	r3, [r2, #28]
	b	.L11203
.L11237:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC946
	ldr	r2, .L11247
	movt	r1, #:upper16:.LC946
	add	r0, r0, #32
	bl	dev_err
	b	.L11200
.L11239:
	str	r7, [r6, #1640]
	ldr	r2, [r1]
	movw	r3, #:lower16:acc_complete_set_string
	movt	r3, #:upper16:acc_complete_set_string
	ldr	r2, [r2, #4]
	str	r6, [r2]
	ldr	r2, [r1, #4]
	str	r3, [r2, #28]
	b	.L11203
.L11240:
	mov	r2, r7
	mov	r1, r8
	mov	r0, r6
	bl	acc_register_hid
	subs	r4, r0, #0
	blt	.L11200
	b	.L11203
.L11226:
.L11207:
	mvn	r4, #94
	b	.L11200
.L11238:
	mov	r3, #1
	mov	r0, #200
	mov	r4, #0
	str	r3, [r6, #1644]
	bl	msecs_to_jiffies
	mov	r1, r0
	add	r0, r6, #1696
	add	r0, r0, #4
	bl	schedule_delayed_work
	b	.L11203
.L11241:
	add	r9, r6, #88
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #1764]
	add	r1, r6, #1760
	mov	r7, r0
	add	r1, r1, #4
	cmp	r1, r3
	mov	r4, r3
	bne	.L11211
	b	.L11209
.L11244:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r4, r3
	beq	.L11209
.L11211:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L11244
	cmp	r3, #0
	beq	.L11209
.L11212:
	mov	r0, r4
	bl	__list_del_entry
	add	r1, r6, #1776
	mov	r0, r4
	ldr	r2, [r6, #1780]
	add	r1, r1, #4
	mov	r4, #0
	bl	__list_add
	mov	r0, r9
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	add	r0, r6, #1744
	add	r0, r0, #4
	bl	schedule_work
	b	.L11203
.L11242:
	add	r10, r6, #88
	add	r6, r6, #1760
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r6, #12]
	add	r6, r6, #12
	mov	r1, r0
	cmp	r6, r9
	bne	.L11219
	b	.L11217
.L11245:
	ldr	r9, [r9]
	cmp	r6, r9
	beq	.L11217
.L11219:
	ldr	r3, [r9, #16]
	cmp	r8, r3
	bne	.L11245
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	beq	.L11235
	ldr	r3, [r9, #28]
	cmp	r7, r3
	bne	.L11235
	ldr	r3, [r9, #24]
	add	r7, r4, r7
	cmp	r7, r3
	bgt	.L11235
	ldr	r2, [r5, #4]
	movw	r3, #:lower16:acc_complete_set_hid_report_desc
	movt	r3, #:upper16:acc_complete_set_hid_report_desc
	str	r9, [r2, #32]
	ldr	r2, [r5, #4]
	str	r3, [r2, #28]
	b	.L11203
.L11209:
	ldr	r3, [r6, #1772]
	add	r1, r6, #1760
	add	r1, r1, #12
	cmp	r1, r3
	mov	r4, r3
	bne	.L11215
	b	.L11213
.L11246:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r4, r3
	beq	.L11213
.L11215:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L11246
	cmp	r3, #0
	bne	.L11212
.L11213:
	mov	r1, r7
	mov	r0, r9
	mvn	r4, #21
	bl	_raw_spin_unlock_irqrestore
	b	.L11200
.L11217:
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L11235:
	mvn	r4, #21
	b	.L11200
.L11222:
	mov	r0, r9
	mvn	r4, #21
	bl	_raw_spin_unlock_irqrestore
	b	.L11200
.L11248:
	.align	2
.L11247:
	.word	.LANCHOR5-1260
	.fnend
	.size	accessory_function_ctrlrequest, .-accessory_function_ctrlrequest
	.section	.rodata.str1.4
	.align	2
.LC947:
	.ascii	"Mass Storage Function\000"
	.align	2
.LC948:
	.ascii	"/home/jprim/hlte/lolz/include/linux/kref.h\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_bind_config, %function
mass_storage_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r3, #1960]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r0, [r0, #4]
	cmp	r2, #0
	ldr	r6, [r0, #96]
	bne	.L11250
	ldr	r1, [r1, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L11263
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #1960]
	strb	r2, [r3, #1984]
.L11250:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L11264
	mov	r2, #108
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	mvneq	r6, #11
	bne	.L11252
.L11249:
	mov	r0, r6
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11264:
	mov	r4, #16
.L11252:
	ldr	ip, .L11289
	movw	r0, #:lower16:fsg_bind
	movw	r1, #:lower16:fsg_unbind
	movt	r0, #:upper16:fsg_bind
	movt	r1, #:upper16:fsg_unbind
	movw	r3, #:lower16:.LC947
	movw	r2, #:lower16:fsg_set_alt
	movt	r2, #:upper16:fsg_set_alt
	movt	r3, #:upper16:.LC947
	str	r6, [r4, #88]
	movw	r7, #:lower16:.LANCHOR4
	movt	r7, #:upper16:.LANCHOR4
	strd	r0, [r4, #32]
	movw	r0, #1986
	stm	r4, {r3, ip}
	movw	r1, #:lower16:fsg_setup
	str	r2, [r4, #40]
	ldrh	r0, [r7, r0]
	movw	r2, #:lower16:fsg_disable
	movt	r1, #:upper16:fsg_setup
	movt	r2, #:upper16:fsg_disable
	str	r2, [r4, #48]
	tst	r0, #4
	str	r1, [r4, #52]
	bne	.L11287
.L11253:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L11256
	add	r8, r4, #72
	add	r2, r5, #36
	str	r5, [r4, #20]
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r6, [r4, #32]
	cmp	r6, #0
	beq	.L11257
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	blt	.L11288
.L11257:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L11258
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L11258
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L11258:
	tst	r3, #2
	bne	.L11259
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L11259
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L11259:
	tst	r3, #1
	bne	.L11260
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L11260
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L11260:
	cmp	r6, #0
	beq	.L11261
	movw	r3, #2010
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L11255
.L11254:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC938
	movt	r2, #:upper16:.LC938
	ldr	r0, .L11289+4
	ldr	r3, [r4]
	ldr	r1, [r1]
	stm	sp, {r4, r6}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11255
.L11287:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC937
	add	r0, r7, #1968
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC937
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L11253
.L11256:
	movw	r3, #2010
	mvn	r6, #21
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L11254
.L11255:
	mov	r0, r4
	bl	kfree
	b	.L11249
.L11261:
	ldr	r3, [r4, #88]
	add	r2, r3, #336
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bgt	.L11249
	movw	r4, #:lower16:.LANCHOR6
	movt	r4, #:upper16:.LANCHOR6
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11249
	movw	r0, #:lower16:.LC948
	mov	r1, #47
	movt	r0, #:upper16:.LC948
	bl	warn_slowpath_null
	mov	r3, #1
	strb	r3, [r4]
	b	.L11249
.L11288:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L11257
.L11263:
	mvn	r6, #18
	b	.L11249
.L11290:
	.align	2
.L11289:
	.word	.LANCHOR0+1988
	.word	.LANCHOR4+1992
	.fnend
	.size	mass_storage_function_bind_config, .-mass_storage_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC949:
	.ascii	"mtp_send_event(%d)\012\000"
	.align	2
.LC950:
	.ascii	"ioctl returning %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_ioctl, %function
mtp_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #60
	sub	sp, sp, #60
	add	r5, r4, #112
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L11292
	movw	r3, #19713
	mov	r6, r1
	movt	r3, 16416
	cmp	r1, r3
	bhi	.L11293
	movw	r3, #19711
	movt	r3, 16416
	cmp	r1, r3
	bhi	.L11294
	movw	r3, #19715
	movt	r3, 16392
	cmp	r1, r3
	bne	.L11296
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L11362
	mov	r1, #8
	add	r0, sp, #16
	movw	r6, #:lower16:.LANCHOR4
	mvn	r8, #13
	movt	r6, #:upper16:.LANCHOR4
	bl	__memzero
	b	.L11308
.L11293:
	movw	r3, #19716
	movt	r3, 16416
	cmp	r1, r3
	beq	.L11294
.L11296:
	add	r9, r4, #88
	mvn	r8, #21
.L11307:
	mov	r0, r9
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	mvneq	r8, #124
	beq	.L11328
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #104]
.L11328:
	movw	r6, #:lower16:.LANCHOR4
	mov	r0, r9
	movt	r6, #:upper16:.LANCHOR4
	bl	_raw_spin_unlock_irq
.L11308:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #2298
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L11363
.L11291:
	mov	r0, r8
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11294:
	add	r9, r4, #88
	mov	r0, r9
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L11364
	cmp	r3, #0
	beq	.L11365
	mov	r3, #2
	mov	r0, r9
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #32; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L11366
	mov	r1, #32
	add	r0, sp, #24
	mvn	r8, #13
	bl	__memzero
	b	.L11307
.L11362:
	mov	r1, r7
	mov	r2, #8
	add	r0, sp, #16
	bl	__copy_from_user
	cmp	r0, #0
	movwne	r6, #:lower16:.LANCHOR4
	mvnne	r8, #13
	movtne	r6, #:upper16:.LANCHOR4
	bne	.L11308
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #2274
	ldr	r8, [sp, #16]
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L11367
.L11312:
	cmp	r8, #28
	bhi	.L11332
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L11333
	mov	r0, #1000
	add	r9, r4, #88
	bl	msecs_to_jiffies
	mov	fp, r0
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #124]
	add	r10, r4, #124
	mov	r1, r0
	cmp	r10, r7
	beq	.L11368
	mov	r0, r7
	str	r1, [sp, #4]
	sub	r7, r7, #36
	bl	list_del
	mov	r0, r9
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L11314
.L11315:
	mov	r3, sp
	ldr	r1, [sp, #20]
	bic	r3, r3, #8128
	ldr	r0, [r7]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L11369
	cmp	r8, #0
	bne	.L11370
.L11327:
	str	r8, [r7, #4]
	ldr	r0, [r4, #100]
	mov	r2, #208
	mov	r1, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	beq	.L11308
	mov	r0, r9
.L11361:
	bl	_raw_spin_lock_irqsave
	mov	r2, r10
	mov	r10, r0
	ldr	r1, [r4, #128]
	add	r0, r7, #36
	bl	__list_add
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L11308
.L11365:
	mov	r0, r9
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	mvn	r8, #18
	bl	_raw_spin_unlock_irq
	b	.L11308
.L11363:
	ldr	r1, [r4, #84]
	movw	r2, #:lower16:.LC950
	mov	r3, r8
	movt	r2, #:upper16:.LC950
	ldr	r0, .L11374
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11291
.L11366:
	mov	r1, r7
	mov	r2, #32
	add	r0, sp, #24
	bl	__copy_from_user
	subs	r7, r0, #0
	mvnne	r8, #13
	bne	.L11307
	ldr	r0, [sp, #24]
	bl	fget
	subs	r8, r0, #0
	mvneq	r8, #8
	beq	.L11307
	str	r8, [r4, #216]
	ldrd	r2, [sp, #32]
	strd	r2, [r4, #224]
	ldrd	r2, [sp, #40]
	strd	r2, [r4, #232]
	.syntax divided
@ 1028 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #19716
	movt	r3, 16416
	cmp	r6, r3
	beq	.L11371
	mov	r3, #19712
	movt	r3, 16416
	cmp	r6, r3
	addeq	r1, r4, #184
	addne	r1, r4, #200
	streq	r7, [r4, #240]
.L11305:
	ldr	r0, [r4, #180]
	bl	queue_work
	ldr	r0, [r4, #180]
	bl	flush_workqueue
	mov	r0, r8
	bl	fput
	.syntax divided
@ 1052 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r8, [r4, #252]
	b	.L11307
.L11292:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r8, #15
	b	.L11291
.L11364:
	mov	r3, #1
	mov	r0, r9
	movw	r6, #:lower16:.LANCHOR4
	mvn	r8, #124
	str	r3, [r4, #104]
	movt	r6, #:upper16:.LANCHOR4
	bl	_raw_spin_unlock_irq
	b	.L11308
.L11369:
	mov	r2, r8
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L11327
.L11326:
	mov	r0, r9
	mvn	r8, #13
	b	.L11361
.L11368:
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
.L11314:
	mov	r3, sp
	movw	r2, #:lower16:autoremove_wake_function
	str	fp, [sp, #4]
	bic	r3, r3, #8128
	add	r1, sp, #36
	bic	r3, r3, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r3, #12]
	add	fp, r4, #156
	str	r3, [sp, #8]
	mov	r3, #0
	str	r3, [sp, #24]
	str	r0, [sp, #28]
	str	r2, [sp, #32]
	str	r1, [sp, #36]
	str	r1, [sp, #40]
.L11320:
	add	r1, sp, #24
	mov	r2, #1
	mov	r0, fp
	bl	prepare_to_wait
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #124]
	mov	r1, r0
	cmp	r10, r3
	mov	r0, r3
	sub	r7, r3, #36
	beq	.L11372
	str	r1, [sp, #12]
	bl	list_del
	mov	r0, r9
	ldr	r1, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L11318
.L11317:
	ldmib	sp, {r0, r3}
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L11319
	bl	schedule_timeout
	subs	r3, r0, #0
	str	r3, [sp, #4]
	bne	.L11320
.L11323:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #124]
	mov	r1, r0
	cmp	r10, r7
	beq	.L11373
	mov	r0, r7
	str	r1, [sp, #4]
	sub	r7, r7, #36
	bl	list_del
	mov	r0, r9
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	add	r1, sp, #24
	mov	r0, fp
	bl	finish_wait
	cmp	r7, #0
	bne	.L11315
.L11360:
	mvn	r8, #61
	b	.L11308
.L11371:
	mov	r3, #1
	add	r1, r4, #184
	str	r3, [r4, #240]
	ldrh	r3, [sp, #48]
	strh	r3, [r4, #244]	@ movhi
	ldr	r3, [sp, #52]
	str	r3, [r4, #248]
	b	.L11305
.L11370:
	mov	r1, r8
	bl	__memzero
	b	.L11326
.L11318:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	beq	.L11323
	add	r1, sp, #24
	mov	r0, fp
	bl	finish_wait
	b	.L11315
.L11372:
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L11317
.L11367:
	ldr	r1, [r4, #84]
	movw	r2, #:lower16:.LC949
	mov	r3, r8
	movt	r2, #:upper16:.LC949
	add	r0, r6, #2256
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11312
.L11373:
	mov	r0, r9
	mvn	r8, #61
	bl	_raw_spin_unlock_irqrestore
	add	r1, sp, #24
	mov	r0, fp
	bl	finish_wait
	b	.L11308
.L11333:
	mvn	r8, #18
	b	.L11308
.L11332:
	mvn	r8, #21
	b	.L11308
.L11319:
	add	r1, sp, #24
	mov	r0, fp
	bl	finish_wait
	b	.L11360
.L11375:
	.align	2
.L11374:
	.word	.LANCHOR4+2280
	.fnend
	.size	mtp_ioctl, .-mtp_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_open, %function
ecm_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #2322
	mov	r4, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	str	r8, [sp, #16]
	ldrh	r3, [r6, r3]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	tst	r3, #4
	bne	.L11394
.L11377:
	ldr	r7, [r4, #148]
	movw	r3, #257
	strh	r3, [r4, #152]	@ movhi
	cmp	r7, #0
	beq	.L11376
	ldr	r5, [r7]
	mov	r3, #0
	mov	r1, #8
	ldr	r8, [r2, #24]
	movw	r2, #2346
	strb	r3, [r5, #1]
	ldrb	r0, [r4, #153]	@ zero_extendqisi2
	strh	r0, [r5, #2]	@ unaligned
	strb	r3, [r5, #6]
	strb	r3, [r5, #7]
	str	r1, [r7, #4]
	ldrh	r3, [r6, r2]
	tst	r3, #4
	bne	.L11395
.L11380:
	mov	r1, #2
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	strb	r1, [r4, #152]
	mov	r1, r7
	strb	r0, [r5]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r5, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L11396
.L11376:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11396:
	movw	r3, #2370
	str	r7, [r4, #148]
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L11376
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC26
	mov	r3, r0
	movt	r2, #:upper16:.LC26
	ldr	r0, .L11397
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	r1, r1, #32
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__dynamic_dev_dbg
.L11394:
	ldr	r1, [r2, #24]
	movw	r2, #:lower16:.LC80
	add	r0, r6, #2304
	movt	r2, #:upper16:.LC80
	ldr	r3, .L11397+4
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #20]
	b	.L11377
.L11395:
	ldrb	lr, [r4, #153]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC22
	movw	r3, #:lower16:.LC21
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC22
	movw	r2, #:lower16:.LC24
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC24
	ldr	r0, .L11397+8
	cmp	lr, #0
	moveq	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11380
.L11398:
	.align	2
.L11397:
	.word	.LANCHOR4+2352
	.word	.LANCHOR5-1244
	.word	.LANCHOR4+2328
	.fnend
	.size	ecm_qc_open, .-ecm_qc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_close, %function
ecm_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #2394
	mov	r4, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	str	r8, [sp, #16]
	ldrh	r3, [r6, r3]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	tst	r3, #4
	bne	.L11417
.L11400:
	ldr	r7, [r4, #148]
	mov	r3, #1
	strh	r3, [r4, #152]	@ movhi
	cmp	r7, #0
	beq	.L11399
	ldr	r5, [r7]
	mov	r3, #0
	mov	r1, #8
	ldr	r8, [r2, #24]
	movw	r2, #2346
	strb	r3, [r5, #1]
	ldrb	r0, [r4, #153]	@ zero_extendqisi2
	strh	r0, [r5, #2]	@ unaligned
	strb	r3, [r5, #6]
	strb	r3, [r5, #7]
	str	r1, [r7, #4]
	ldrh	r3, [r6, r2]
	tst	r3, #4
	bne	.L11418
.L11403:
	mov	r1, #2
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	strb	r1, [r4, #152]
	mov	r1, r7
	strb	r0, [r5]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r5, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L11419
.L11399:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11419:
	movw	r3, #2370
	str	r7, [r4, #148]
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L11399
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC26
	mov	r3, r0
	movt	r2, #:upper16:.LC26
	ldr	r0, .L11420
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	r1, r1, #32
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__dynamic_dev_dbg
.L11417:
	ldr	r1, [r2, #24]
	movw	r2, #:lower16:.LC80
	movt	r2, #:upper16:.LC80
	ldr	r3, .L11420+4
	ldr	r0, .L11420+8
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #20]
	b	.L11400
.L11418:
	ldrb	lr, [r4, #153]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC22
	movw	r3, #:lower16:.LC21
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC22
	movw	r2, #:lower16:.LC24
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC24
	ldr	r0, .L11420+12
	cmp	lr, #0
	moveq	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11403
.L11421:
	.align	2
.L11420:
	.word	.LANCHOR4+2352
	.word	.LANCHOR5-1232
	.word	.LANCHOR4+2376
	.word	.LANCHOR4+2328
	.fnend
	.size	ecm_qc_close, .-ecm_qc_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_close, %function
ecm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #2418
	mov	r4, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	str	r8, [sp, #16]
	ldrh	r3, [r6, r3]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	tst	r3, #4
	bne	.L11440
.L11423:
	ldr	r7, [r4, #168]
	mov	r3, #1
	strh	r3, [r4, #172]	@ movhi
	cmp	r7, #0
	beq	.L11422
	ldr	r5, [r7]
	mov	r3, #0
	mov	r1, #8
	ldr	r8, [r2, #24]
	movw	r2, #2442
	strb	r3, [r5, #1]
	ldrb	r0, [r4, #173]	@ zero_extendqisi2
	strh	r0, [r5, #2]	@ unaligned
	strb	r3, [r5, #6]
	strb	r3, [r5, #7]
	str	r1, [r7, #4]
	ldrh	r3, [r6, r2]
	tst	r3, #4
	bne	.L11441
.L11426:
	mov	r1, #2
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	strb	r1, [r4, #172]
	mov	r1, r7
	strb	r0, [r5]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	strh	r0, [r5, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	r3, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L11442
.L11422:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11442:
	movw	r3, #2466
	str	r7, [r4, #168]
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L11422
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC26
	mov	r3, r0
	movt	r2, #:upper16:.LC26
	ldr	r0, .L11443
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	r1, r1, #32
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__dynamic_dev_dbg
.L11440:
	ldr	r1, [r2, #24]
	movw	r2, #:lower16:.LC80
	add	r0, r6, #2400
	movt	r2, #:upper16:.LC80
	ldr	r3, .L11443+4
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #20]
	b	.L11423
.L11441:
	ldrb	lr, [r4, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC22
	movw	r3, #:lower16:.LC21
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC22
	movw	r2, #:lower16:.LC24
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC24
	ldr	r0, .L11443+8
	cmp	lr, #0
	moveq	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11426
.L11444:
	.align	2
.L11443:
	.word	.LANCHOR4+2448
	.word	.LANCHOR5-1216
	.word	.LANCHOR4+2424
	.fnend
	.size	ecm_close, .-ecm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_open, %function
ecm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #2490
	mov	r4, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	str	r8, [sp, #16]
	ldrh	r3, [r6, r3]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	tst	r3, #4
	bne	.L11463
.L11446:
	ldr	r7, [r4, #168]
	movw	r3, #257
	strh	r3, [r4, #172]	@ movhi
	cmp	r7, #0
	beq	.L11445
	ldr	r5, [r7]
	mov	r3, #0
	mov	r1, #8
	ldr	r8, [r2, #24]
	movw	r2, #2442
	strb	r3, [r5, #1]
	ldrb	r0, [r4, #173]	@ zero_extendqisi2
	strh	r0, [r5, #2]	@ unaligned
	strb	r3, [r5, #6]
	strb	r3, [r5, #7]
	str	r1, [r7, #4]
	ldrh	r3, [r6, r2]
	tst	r3, #4
	bne	.L11464
.L11449:
	mov	r1, #2
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	strb	r1, [r4, #172]
	mov	r1, r7
	strb	r0, [r5]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	strh	r0, [r5, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	r3, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L11465
.L11445:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11465:
	movw	r3, #2466
	str	r7, [r4, #168]
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L11445
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC26
	mov	r3, r0
	movt	r2, #:upper16:.LC26
	ldr	r0, .L11466
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	r1, r1, #32
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__dynamic_dev_dbg
.L11463:
	ldr	r1, [r2, #24]
	movw	r2, #:lower16:.LC80
	movt	r2, #:upper16:.LC80
	ldr	r3, .L11466+4
	ldr	r0, .L11466+8
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #20]
	b	.L11446
.L11464:
	ldrb	lr, [r4, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC22
	movw	r3, #:lower16:.LC21
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC22
	movw	r2, #:lower16:.LC24
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC24
	ldr	r0, .L11466+12
	cmp	lr, #0
	moveq	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11449
.L11467:
	.align	2
.L11466:
	.word	.LANCHOR4+2448
	.word	.LANCHOR5-1204
	.word	.LANCHOR4+2472
	.word	.LANCHOR4+2424
	.fnend
	.size	ecm_open, .-ecm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_notify_complete, %function
ecm_qc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	ip, [r1, #44]
	ldr	r1, [r5, #20]
	cmn	ip, #104
	beq	.L11469
	cmp	ip, #0
	beq	.L11470
	cmn	ip, #108
	beq	.L11469
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #2514
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L11510
.L11470:
	cmp	r4, #0
	str	r4, [r5, #148]
	beq	.L11468
	ldrb	r3, [r5, #152]	@ zero_extendqisi2
	ldr	r6, [r4]
	ldr	r7, [r1, #24]
	cmp	r3, #1
	beq	.L11474
	cmp	r3, #2
	beq	.L11475
	cmp	r3, #0
	beq	.L11468
.L11476:
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	mov	r1, r4
	strb	r0, [r6]
	ldrb	r0, [r5, #120]	@ zero_extendqisi2
	strh	r0, [r6, #4]	@ unaligned
	ldr	r0, [r5, #144]
	str	r3, [r5, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L11511
.L11468:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L11511:
	movw	ip, #:lower16:.LANCHOR4
	movw	r3, #2370
	str	r4, [r5, #148]
	movt	ip, #:upper16:.LANCHOR4
	ldrh	r3, [ip, r3]
	tst	r3, #4
	beq	.L11468
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC26
	mov	r3, r0
	movt	r2, #:upper16:.LC26
	add	r0, ip, #2352
	add	r1, r1, #32
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__dynamic_dev_dbg
.L11469:
	mov	r3, #0
	strb	r3, [r5, #152]
	b	.L11470
.L11475:
	mov	r3, #0
	mov	r1, #8
	mov	r2, #16
	mov	r0, #42
	strb	r0, [r6, #1]
	strb	r3, [r6, #2]
	strb	r3, [r6, #3]
	strb	r1, [r6, #6]
	strb	r3, [r6, #7]
	ldr	r1, [r4]
	str	r2, [r4, #4]
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L11484
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L11479:
	movw	r2, #:lower16:.LANCHOR4
	movw	r0, #2538
	str	r3, [r1, #8]
	movt	r2, #:upper16:.LANCHOR4
	str	r3, [r1, #12]
	ldrh	r3, [r2, r0]
	tst	r3, #4
	bne	.L11512
.L11480:
	mov	r3, #0
	strb	r3, [r5, #152]
	b	.L11476
.L11474:
	mov	r2, #0
	mov	r1, #8
	movw	r3, #:lower16:.LANCHOR4
	strb	r2, [r6, #1]
	ldrb	r0, [r5, #153]	@ zero_extendqisi2
	movt	r3, #:upper16:.LANCHOR4
	strb	r2, [r6, #6]
	strb	r2, [r6, #7]
	movw	r2, #2346
	strh	r0, [r6, #2]	@ unaligned
	str	r1, [r4, #4]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L11513
.L11477:
	mov	r3, #2
	strb	r3, [r5, #152]
	b	.L11476
.L11484:
	mov	r3, #28672
	movt	r3, 148
	b	.L11479
.L11510:
	ldr	r1, [r1, #24]
	movw	r2, #:lower16:.LC23
	add	r0, r0, #2496
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC23
	ldr	r1, [r1]
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r1, [r5, #20]
	b	.L11470
.L11513:
	ldrb	lr, [r5, #153]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC22
	movw	r3, #:lower16:.LC21
	ldr	r1, [r7]
	movt	ip, #:upper16:.LC22
	movw	r2, #:lower16:.LC24
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC24
	ldr	r0, .L11514
	cmp	lr, #0
	moveq	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11477
.L11512:
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #2
	bls	.L11486
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L11481:
	movw	r2, #:lower16:.LC25
	ldr	r0, .L11514+4
	movt	r2, #:upper16:.LC25
	bl	__dynamic_dev_dbg
	b	.L11480
.L11486:
	mov	r3, #28672
	movt	r3, 148
	b	.L11481
.L11515:
	.align	2
.L11514:
	.word	.LANCHOR4+2328
	.word	.LANCHOR4+2520
	.fnend
	.size	ecm_qc_notify_complete, .-ecm_qc_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_notify_complete, %function
ecm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	ip, [r1, #44]
	ldr	r1, [r5, #20]
	cmn	ip, #104
	beq	.L11517
	cmp	ip, #0
	beq	.L11518
	cmn	ip, #108
	beq	.L11517
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #2562
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L11564
.L11518:
	cmp	r4, #0
	str	r4, [r5, #168]
	beq	.L11516
	ldrb	r3, [r5, #172]	@ zero_extendqisi2
	ldr	r6, [r4]
	ldr	r7, [r1, #24]
	cmp	r3, #1
	beq	.L11522
	cmp	r3, #2
	beq	.L11523
	cmp	r3, #0
	beq	.L11516
.L11524:
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	mov	r1, r4
	strb	r0, [r6]
	ldrb	r0, [r5, #148]	@ zero_extendqisi2
	strh	r0, [r6, #4]	@ unaligned
	ldr	r0, [r5, #164]
	str	r3, [r5, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L11565
.L11516:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L11565:
	movw	ip, #:lower16:.LANCHOR4
	movw	r3, #2466
	str	r4, [r5, #168]
	movt	ip, #:upper16:.LANCHOR4
	ldrh	r3, [ip, r3]
	tst	r3, #4
	beq	.L11516
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC26
	mov	r3, r0
	movt	r2, #:upper16:.LC26
	add	r0, ip, #2448
	add	r1, r1, #32
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__dynamic_dev_dbg
.L11517:
	mov	r3, #0
	strb	r3, [r5, #172]
	b	.L11518
.L11523:
	mov	r3, #0
	mov	r1, #8
	mov	r2, #16
	mov	r0, #42
	strb	r0, [r6, #1]
	strb	r3, [r6, #2]
	strb	r3, [r6, #3]
	strb	r1, [r6, #6]
	strb	r3, [r6, #7]
	ldr	r1, [r4]
	str	r2, [r4, #4]
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	bhi	.L11566
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bhi	.L11567
.L11528:
	movw	r2, #:lower16:.LANCHOR4
	movw	r0, #2586
	str	r3, [r1, #8]
	movt	r2, #:upper16:.LANCHOR4
	str	r3, [r1, #12]
	ldrh	r3, [r2, r0]
	tst	r3, #4
	bne	.L11568
.L11530:
	mov	r3, #0
	strb	r3, [r5, #172]
	b	.L11524
.L11522:
	mov	r2, #0
	mov	r1, #8
	movw	r3, #:lower16:.LANCHOR4
	strb	r2, [r6, #1]
	ldrb	r0, [r5, #173]	@ zero_extendqisi2
	movt	r3, #:upper16:.LANCHOR4
	strb	r2, [r6, #6]
	strb	r2, [r6, #7]
	movw	r2, #2442
	strh	r0, [r6, #2]	@ unaligned
	str	r1, [r4, #4]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L11569
.L11525:
	mov	r3, #2
	strb	r3, [r5, #172]
	b	.L11524
.L11566:
	ldr	r2, [r3, #16]
	cmp	r2, #5
	beq	.L11570
.L11529:
	mov	r0, #0
	mov	r3, #28672
	movt	r0, 6500
	cmp	r2, #3
	movt	r3, 148
	moveq	r3, r0
	b	.L11528
.L11564:
	ldr	r1, [r1, #24]
	movw	r2, #:lower16:.LC23
	add	r0, r0, #2544
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC23
	ldr	r1, [r1]
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r1, [r5, #20]
	b	.L11518
.L11569:
	ldrb	lr, [r5, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC22
	movw	r3, #:lower16:.LC21
	ldr	r1, [r7]
	movt	ip, #:upper16:.LC22
	movw	r2, #:lower16:.LC24
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC24
	ldr	r0, .L11572
	cmp	lr, #0
	moveq	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11525
.L11567:
	ldr	r2, [r3, #16]
	b	.L11529
.L11570:
	mov	r3, #0
	movt	r3, 13000
	b	.L11528
.L11568:
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #4
	bls	.L11531
	ldr	r0, [r3, #16]
	cmp	r0, #5
	beq	.L11571
.L11533:
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	cmp	r0, #3
	movt	r3, 148
	moveq	r3, r2
.L11532:
	movw	r2, #:lower16:.LC25
	ldr	r0, .L11572+4
	movt	r2, #:upper16:.LC25
	bl	__dynamic_dev_dbg
	b	.L11530
.L11531:
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L11532
	ldr	r0, [r3, #16]
	b	.L11533
.L11571:
	mov	r3, #0
	movt	r3, 13000
	b	.L11532
.L11573:
	.align	2
.L11572:
	.word	.LANCHOR4+2424
	.word	.LANCHOR4+2568
	.fnend
	.size	ecm_notify_complete, .-ecm_notify_complete
	.align	2
	.global	usb_gadget_get_string
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_get_string, %function
usb_gadget_get_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	mov	r3, r0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	beq	.L11587
	ldr	r3, [r0, #4]
	cmp	r3, #0
	bne	.L11577
	b	.L11578
.L11580:
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r0, r1
	beq	.L11579
	adds	r3, r3, #8
	beq	.L11578
.L11577:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	bne	.L11580
.L11578:
	mvn	r0, #21
	b	.L11574
.L11579:
	mov	r0, r4
	bl	strlen
	mov	r2, #126
	mov	r1, r0
	cmp	r0, r2
	add	r3, r5, #2
	movcs	r1, r2
	mov	r0, r4
	str	r2, [sp]
	mov	r2, #1
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L11578
	add	r0, r0, #1
	mov	r2, #3
	lsl	r3, r0, #1
	strb	r2, [r5, #1]
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r5]
.L11574:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L11587:
	mov	r2, #4
	mov	r1, #3
	mov	r0, r2
	strb	r2, [r5]
	strb	r1, [r5, #1]
	ldrh	r2, [r3]
	strb	r2, [r5, #2]
	ldrh	r3, [r3]
	lsr	r3, r3, #8
	strb	r3, [r5, #3]
	b	.L11574
	.fnend
	.size	usb_gadget_get_string, .-usb_gadget_get_string
	.section	.rodata.str1.4
	.align	2
.LC951:
	.ascii	"Config SS device in SS\012\000"
	.align	2
.LC952:
	.ascii	"Config SS device in HS\012\000"
	.align	2
.LC953:
	.ascii	"Config HS device with LPM(L1)\012\000"
	.align	2
.LC954:
	.ascii	"<7>usb: GET_DES\012\000"
	.align	2
.LC955:
	.ascii	"<7>usb: %s failed to change configuration\012\000"
	.align	2
.LC956:
	.ascii	"already in the same config with value %d\012\000"
	.align	2
.LC957:
	.ascii	"%s config #%d: %s\012\000"
	.align	2
.LC958:
	.ascii	"unconfigured\000"
	.align	2
.LC959:
	.ascii	"battery\000"
	.align	2
.LC960:
	.ascii	"<3>%s(): No SS desc for function:%s\012\000"
	.align	2
.LC961:
	.ascii	"<3>%s: fail to get %s psy\012\000"
	.align	2
.LC962:
	.ascii	"interface %d (%s/%pK) alt 0 --> %d\012\000"
	.align	2
.LC963:
	.ascii	"%s: interface %d (%s) requested delayed status\012\000"
	.align	2
.LC964:
	.ascii	"delayed_status count %d\012\000"
	.align	2
.LC965:
	.ascii	"<7>usb: SET_CON\012\000"
	.align	2
.LC966:
	.ascii	"<6>%s sec_qcom_usb_rdrv = %d, disable\012\000"
	.align	2
.LC967:
	.ascii	"<6>Redriver OFF in Mac OS\012\000"
	.align	2
.LC968:
	.ascii	"func_suspend() returned error %d\012\000"
	.align	2
.LC969:
	.ascii	"ep_queue --> %d\012\000"
	.align	2
.LC970:
	.ascii	"%s: Delayed status not supported for w_length != 0\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_setup, %function
composite_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	strd	r8, [sp, #16]
	mov	r9, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	bl	dev_get_drvdata
	ldrh	r7, [r9, #6]	@ unaligned
	ldrh	r8, [r9, #4]	@ unaligned
	ldrh	r10, [r9, #2]	@ unaligned
	ldr	r5, [r0, #4]
	cmp	r7, #4096
	bhi	.L11822
	ldrb	r2, [r5, #26]	@ zero_extendqisi2
	movw	r3, #:lower16:composite_setup_complete
	mov	r1, #0
	movt	r3, #:upper16:composite_setup_complete
	uxtb	fp, r8
	str	r1, [r5, #4]
	mov	r4, r0
	str	r3, [r5, #28]
	bfc	r2, #1, #1
	strb	r2, [r5, #26]
	ldr	r3, [r6, #4]
	str	r0, [r3]
	ldrb	r2, [r9, #1]	@ zero_extendqisi2
	cmp	r2, #11
	ldrls	pc, [pc, r2, asl #2]
	b	.L11591
.L11593:
	.word	.L11599
	.word	.L11598
	.word	.L11591
	.word	.L11598
	.word	.L11591
	.word	.L11591
	.word	.L11597
	.word	.L11591
	.word	.L11596
	.word	.L11595
	.word	.L11594
	.word	.L11592
.L11592:
	ldrb	r3, [r9]	@ zero_extendqisi2
	ldr	r0, [r0, #12]
	cmp	r3, #1
	bne	.L11601
	cmp	fp, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	beq	.L12018
.L11822:
	mvn	r9, #94
.L11588:
	mov	r0, r9
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11598:
	ldr	r2, [r6, #20]
	ldrb	r3, [r9]	@ zero_extendqisi2
	cmp	r2, #4
	bls	.L12013
	cmp	r3, #1
	bne	.L12013
	cmp	r10, #0
	bne	.L11822
	ldr	r2, [r0, #12]
	cmp	fp, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r2, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L11822
	add	fp, fp, #12
	ldr	r0, [r2, fp, lsl #2]
	cmp	r0, #0
	beq	.L11822
	ldr	r3, [r0, #68]
	cmp	r3, #0
	beq	.L12015
	lsr	r1, r8, #8
	blx	r3
	subs	r9, r0, #0
	blt	.L11763
	movw	r8, #32767
	subs	r8, r9, r8
	movne	r8, #1
.L11747:
	cmp	r8, #0
	beq	.L11602
.L12014:
	mov	r10, r9
	b	.L11615
.L11591:
	ldrb	r3, [r9]	@ zero_extendqisi2
.L12013:
	ldr	r0, [r4, #12]
.L11601:
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L11764
	cmp	r3, #2
	bne	.L11824
	mov	r2, r0
	asr	r3, r8, #3
	ldr	r5, [r2, #36]!
	and	r8, r8, #15
	and	r3, r3, #16
	orr	r3, r3, r8
	cmp	r2, r5
	sub	r5, r5, #72
	beq	.L11824
	mov	r8, #1
	lsl	r8, r8, r3
	b	.L11770
.L12019:
	ldr	r5, [r5, #72]
	cmp	r2, r5
	sub	r5, r5, #72
	beq	.L11824
.L11770:
	ldr	r3, [r5, #80]
	ands	r3, r3, r8
	beq	.L12019
	cmp	r5, #0
	beq	.L11766
	ldr	r3, [r5, #52]
	cmp	r3, #0
	beq	.L11766
.L11786:
	mov	r1, r9
	mov	r0, r5
	blx	r3
	mov	r9, r0
.L11771:
	movw	r3, #32767
	cmp	r9, r3
	bne	.L11588
	movw	r8, #:lower16:.LANCHOR4
	movw	r3, #2826
	movt	r8, #:upper16:.LANCHOR4
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L12020
.L11773:
	movw	r2, #2850
	ldr	r3, [r4, #56]
	ldrh	r2, [r8, r2]
	add	r3, r3, #1
	tst	r2, #4
	str	r3, [r4, #56]
	bne	.L11774
.L11777:
	movw	r9, #32767
	b	.L11588
.L11597:
	ldrb	r3, [r9]	@ zero_extendqisi2
	cmp	r3, #128
	bne	.L12013
	lsr	r3, r10, #8
	mov	r9, r3
	sub	r3, r3, #1
	cmp	r3, #14
	ldrls	pc, [pc, r3, asl #2]
	b	.L11791
.L11604:
	.word	.L11609
	.word	.L11608
	.word	.L11607
	.word	.L11791
	.word	.L11791
	.word	.L11606
	.word	.L11605
	.word	.L11791
	.word	.L11791
	.word	.L11791
	.word	.L11791
	.word	.L11791
	.word	.L11791
	.word	.L11791
	.word	.L11603
.L11594:
	ldrb	r3, [r9]	@ zero_extendqisi2
	ldr	r0, [r0, #12]
	cmp	r3, #129
	bne	.L11601
	cmp	fp, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L11822
	add	fp, fp, #12
	ldr	r0, [r0, fp, lsl #2]
	cmp	r0, #0
	beq	.L11822
	ldr	r3, [r0, #44]
	cmp	r3, #0
	beq	.L11756
	mov	r1, r8
	blx	r3
	subs	r9, r0, #0
	blt	.L11588
	uxtb	r3, r9
.L11756:
	ldr	r2, [r5]
	cmp	r7, #1
	movcc	r9, r7
	movcs	r9, #1
	mov	r10, r9
	strb	r3, [r2]
	b	.L11615
.L11599:
	ldr	r1, [r6, #20]
	ldrb	r3, [r9]	@ zero_extendqisi2
	cmp	r1, #4
	bls	.L12013
	cmp	r3, #129
	bne	.L12013
	ldr	r3, [r5]
	mov	r1, #0
	strb	r1, [r3]
	strb	r1, [r3, #1]
	ldr	r1, [r0, #12]
	clz	r3, r1
	lsr	r3, r3, #5
	cmp	fp, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	beq	.L12021
.L11819:
	mov	r10, #2
.L12015:
	mov	r9, r10
.L11615:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	cmp	r7, r9
	str	r10, [r5, #4]
	movle	r9, #0
	movgt	r9, #1
	mov	r2, #32
	mov	r1, r5
	bfi	r3, r9, #1, #1
	strb	r3, [r5, #26]
	ldr	r0, [r6, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r9, r0, #0
	bge	.L11588
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2874
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L12022
.L11776:
	ldr	ip, [r5, #4]
	mov	r3, #0
	ldr	lr, [r5, #48]
	str	r3, [r5, #44]
	cmp	lr, ip
	beq	.L11588
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #18]
	tst	r2, #4
	beq	.L11588
	ldr	r1, [r6, #4]
	movw	r2, #:lower16:.LC5
	movt	r2, #:upper16:.LC5
	ldr	r1, [r1]
	ldr	r1, [r1]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11588
.L11596:
	ldrb	r3, [r9]	@ zero_extendqisi2
	ldr	r0, [r0, #12]
	cmp	r3, #128
	bne	.L11601
	cmp	r0, #0
	beq	.L11748
	bl	get_config_number
	ldr	r3, [r5]
	add	r0, r0, #1
	strb	r0, [r3]
.L11749:
	cmp	r7, #1
	movcc	r9, r7
	movcs	r9, #1
	mov	r10, r9
	b	.L11615
.L11595:
	ldrb	r3, [r9]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L12013
	add	r3, r0, #60
	mov	r0, r3
	str	r3, [sp, #28]
	bl	_raw_spin_lock
	ldr	r2, [r4]
	ldr	r3, [r4, #12]
	str	r2, [sp, #20]
	cmp	r3, #0
	str	r2, [sp, #24]
	beq	.L11699
	ldrb	r2, [r3, #20]	@ zero_extendqisi2
	cmp	r10, r2
	beq	.L12023
	cmp	r10, #0
	beq	.L12024
.L11782:
	mov	r9, r4
	ldr	r8, [r9, #36]!
	sub	r8, r8, #28
	b	.L11703
.L11713:
	ldrb	r3, [r8, #20]	@ zero_extendqisi2
	cmp	r10, r3
	beq	.L11707
	bl	check_config
	cmp	r0, #0
	bne	.L11707
	ldr	r8, [r8, #28]
	sub	r8, r8, #28
.L11703:
	add	r3, r8, #28
	mov	r0, r10
	cmp	r3, r9
	bne	.L11713
	mvn	r9, #21
	b	.L11714
.L11824:
	mov	r5, #0
.L11766:
	cmp	r0, #0
	beq	.L11822
.L11768:
	ldr	r3, [r0, #16]
	cmp	r3, #0
	beq	.L11822
	mov	r1, r9
	blx	r3
	mov	r9, r0
	b	.L11771
.L11764:
	cmp	fp, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L11824
	add	r3, fp, #12
	ldr	r5, [r0, r3, lsl #2]
	cmp	r5, #0
	beq	.L11768
	ldr	r3, [r5, #52]
	cmp	r3, #0
	bne	.L11786
	b	.L11768
.L11748:
	ldr	r3, [r5]
	strb	r0, [r3]
	b	.L11749
.L11791:
	mvn	r9, #94
.L11602:
	movw	r3, #32767
	sub	r3, r9, r3
	clz	r3, r3
	lsr	r3, r3, #5
.L11755:
	cmp	r7, #0
	movne	r7, r3
	moveq	r7, #0
	cmp	r7, #0
	beq	.L11588
	cmp	r4, #0
	beq	.L11777
	movw	r2, #:lower16:.LC970
	movw	r0, #:lower16:.LC583
	ldr	r3, .L12054+28
	movt	r2, #:upper16:.LC970
	movt	r0, #:upper16:.LC583
	movw	r1, #1498
	movw	r9, #32767
	bl	warn_slowpath_fmt
	b	.L11588
.L12018:
	add	r3, fp, #12
	ldr	r3, [r0, r3, lsl #2]
	cmp	r3, #0
	beq	.L11822
	cmp	r10, #0
	bne	.L12025
	ldr	r2, [r3, #44]
	cmp	r2, #0
	beq	.L12015
	ldr	r9, [r3, #40]
.L11751:
	mov	r2, r10
	mov	r0, r3
	str	r3, [sp, #20]
	mov	r1, r8
	blx	r9
	movw	r2, #32767
	mov	r9, r0
	ldr	r3, [sp, #20]
	cmp	r0, r2
	beq	.L11753
	mvn	r8, r0
	lsr	r8, r8, #31
	b	.L11747
.L11605:
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bls	.L11822
	ldr	r3, [r6, #16]
	cmp	r3, #4
	bhi	.L11822
.L11608:
	mov	r0, r7
	bl	set_config_mode
	ldr	r3, [r4]
	ldr	r2, [r3, #16]
	cmp	r2, #5
	str	r2, [sp, #24]
	beq	.L11617
	ldr	r3, [r3, #20]
	cmp	r3, #2
	movls	r3, #0
	strls	r3, [sp, #24]
	bls	.L11617
	cmp	r2, #3
	beq	.L11618
	cmp	r9, #7
	moveq	r3, #3
	movne	r3, #0
	str	r3, [sp, #24]
.L11617:
	uxtb	r0, r10
	bl	set_config_number
	mov	r2, r4
	ldr	r8, [r2, #36]!
	cmp	r2, r8
	sub	r8, r8, #28
	ldrne	r3, [sp, #24]
	bne	.L11619
	b	.L12017
.L12027:
	tst	r1, #1
	beq	.L11622
.L11623:
	cmp	r0, #0
	sub	r0, r0, #1
	beq	.L12026
.L11622:
	ldr	r8, [r8, #28]
	cmp	r2, r8
	sub	r8, r8, #28
	beq	.L12017
.L11619:
	cmp	r3, #3
	ldrb	r1, [r8, #45]	@ zero_extendqisi2
	beq	.L11620
	cmp	r3, #5
	beq	.L12027
	tst	r1, #4
	bne	.L11623
	b	.L11622
.L11606:
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bls	.L11822
	ldr	r3, [r6, #16]
	cmp	r3, #4
	bhi	.L11822
	ldr	r2, [r0, #4]
	mov	r3, #10
	mov	r1, #6
	ldr	r8, [r2]
	strb	r3, [r8]
	strb	r1, [r8, #1]
	ldrh	r3, [r0, #19]	@ unaligned
	strh	r3, [r8, #2]	@ unaligned
	ldrb	r3, [r0, #21]	@ zero_extendqisi2
	strb	r3, [r8, #4]
	ldrb	r3, [r0, #22]	@ zero_extendqisi2
	strb	r3, [r8, #5]
	ldrb	r3, [r0, #23]	@ zero_extendqisi2
	strb	r3, [r8, #6]
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	ldrh	r3, [r3, #20]
	strb	r3, [r8, #7]
	bl	count_configs
	cmp	r7, #10
	mov	r3, #0
	strb	r0, [r8, #8]
	movlt	r9, r7
	movge	r9, #10
	mov	r10, r9
	strb	r3, [r8, #9]
	b	.L11615
.L11607:
	mov	r0, r7
	bl	set_string_mode
	ands	fp, r10, #255
	ldr	r9, [r5]
	beq	.L12028
	ldrb	r3, [r4, #49]	@ zero_extendqisi2
	cmp	fp, r3
	beq	.L12029
	ldrb	r3, [r4, #50]	@ zero_extendqisi2
	cmp	fp, r3
	beq	.L12030
	ldrb	r3, [r4, #51]	@ zero_extendqisi2
	cmp	fp, r3
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	beq	.L11996
.L11674:
	ldr	r3, [r3, #2476]
	ldr	r10, [r3, #16]
	cmp	r10, #0
	beq	.L11678
	ldr	r0, [r10]
	cmp	r0, #0
	bne	.L11680
	b	.L11678
.L11681:
	ldr	r0, [r10, #4]!
	cmp	r0, #0
	beq	.L11678
.L11680:
	ldrh	r3, [r0]
	cmp	r3, r8
	bne	.L11681
	mov	r2, r9
	mov	r1, fp
	bl	usb_gadget_get_string
	cmp	r0, #0
	ble	.L11681
.L11669:
	uxth	r0, r0
	cmp	r0, r7
	movcc	r9, r0
	movcs	r9, r7
	b	.L12014
.L11603:
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bhi	.L11694
	ldrb	r3, [r6, #377]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11822
.L11694:
	ldr	ip, [r4, #4]
	mov	r2, #0
	mov	r3, #5
	mov	r0, #15
	mov	r10, #12
	mov	r1, #1
	mov	r9, #7
	mov	lr, #16
	ldr	r8, [ip]
	mov	ip, #2
	strb	r3, [r8]
	strb	r0, [r8, #1]
	strb	r3, [r8, #2]
	strb	r2, [r8, #3]
	strb	r2, [r8, #4]
	ldr	r3, [r4, #4]
	ldr	r3, [r3]
	strh	r10, [r8, #2]	@ movhi
	strb	r1, [r8, #4]
	strb	r9, [r3, #5]
	strb	lr, [r3, #6]
	strb	ip, [r3, #7]
	strb	r2, [r3, #8]
	strb	r2, [r3, #9]
	strb	r2, [r3, #10]
	strb	r2, [r3, #11]
	ldr	r3, [r4]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L11695
	ldr	lr, [r4, #4]
	movw	r10, #4106
	ldrh	ip, [r8, #2]	@ unaligned
	movt	r10, 3
	ldrb	r3, [r8, #4]	@ zero_extendqisi2
	ldr	lr, [lr]
	add	r9, ip, #10
	add	r3, r3, r1
	strh	r9, [r8, #2]	@ movhi
	add	r9, lr, ip
	strb	r3, [r8, #4]
	str	r10, [lr, ip]	@ unaligned
	strb	r0, [r9, #4]
	strb	r2, [r9, #5]
	strb	r1, [r9, #6]
	ldr	r3, [r4]
	ldr	r3, [r3]
	ldr	r3, [r3, #28]
	cmp	r3, r2
	beq	.L11696
	add	r0, sp, #52
	blx	r3
	ldrb	r1, [sp, #52]	@ zero_extendqisi2
	ldrh	r3, [sp, #54]
.L11697:
	strb	r1, [r9, #7]
	strh	r3, [r9, #8]	@ unaligned
.L11695:
	ldrh	r9, [r8, #2]	@ unaligned
	cmp	r7, r9
	movcc	r9, r7
	mov	r10, r9
	b	.L11615
.L11609:
	mov	r1, #1
	bl	count_configs
	ldr	r1, [r4]
	strb	r0, [r4, #34]
	mov	r2, #2
	ldr	r3, [r1, #4]
	ldrh	r3, [r3, #20]
	strb	r3, [r4, #24]
	str	r2, [r4, #64]
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bls	.L11610
	ldr	r3, [r6, #16]
	cmp	r3, #4
	bls	.L11611
	mov	r3, #0
	mov	r2, #9
	mov	ip, #3
	movw	r0, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LANCHOR4
	strb	r3, [r4, #19]
	movw	r3, #2610
	strb	ip, [r4, #20]
	strb	r2, [r4, #24]
	ldrh	r3, [r0, r3]
	mov	r2, #8
	str	r2, [r4, #64]
	tst	r3, #4
	beq	.L11613
	movw	r2, #:lower16:.LC951
	add	r1, r1, #32
	add	r0, r0, #2592
	movt	r2, #:upper16:.LC951
	bl	__dynamic_dev_dbg
.L11613:
	cmp	r7, #18
	add	r1, r4, #17
	ldr	r0, [r5]
	movcc	r9, r7
	movcs	r9, #18
	mov	r2, r9
	mov	r10, r9
	bl	memcpy
	movw	r0, #:lower16:.LC954
	movt	r0, #:upper16:.LC954
	bl	printk
	b	.L11615
.L11620:
	tst	r1, #2
	bne	.L11623
	b	.L11622
.L12026:
	ldr	r2, [r4, #4]
	mov	r3, #9
	ldr	r2, [r2]
	mov	r1, r2
	str	r2, [sp, #32]
	strb	r3, [r1], #9
	strb	r9, [r2, #1]
	ldrb	r3, [r8, #44]	@ zero_extendqisi2
	mov	r9, r2
	str	r1, [sp, #28]
	strb	r3, [r2, #4]
	bl	get_config_number
	add	r3, r0, #1
	strb	r3, [r9, #5]
	ldrb	r3, [r8, #21]	@ zero_extendqisi2
	strb	r3, [r9, #6]
	ldrb	r3, [r8, #22]	@ zero_extendqisi2
	mvn	r3, r3, lsl #25
	mvn	r3, r3, lsr #25
	strb	r3, [r9, #7]
	ldrb	r3, [r8, #23]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11625
	ldr	r2, [r8, #24]
	mov	r3, #500
	ldr	r2, [r2, #64]
	sdiv	r3, r3, r2
	uxtb	r3, r3
.L11625:
	ldr	r2, [sp, #32]
	strb	r3, [r2, #8]
	ldr	r10, [r8, #8]
	cmp	r10, #0
	beq	.L11626
	ldr	r1, [r10]
	cmp	r1, #0
	moveq	r9, r1
	beq	.L11628
	ldrb	r2, [r1]	@ zero_extendqisi2
	movw	r9, #4087
	ldr	r3, [sp, #28]
	mov	fp, r2
.L11785:
	mov	r0, r3
	mov	r2, fp
	bl	memcpy
	ldr	r1, [r10, #4]!
	sub	r9, r9, fp
	add	r3, r0, fp
	cmp	r1, #0
	beq	.L12031
	ldrb	fp, [r1]	@ zero_extendqisi2
	cmp	fp, r9
	bls	.L11785
.L12017:
	mvn	r9, #21
	b	.L11588
.L12021:
	add	fp, fp, #12
	ldr	r0, [r1, fp, lsl #2]
	cmp	r0, #0
	beq	.L11819
	ldr	r3, [r0, #64]
	cmp	r3, #0
	beq	.L11818
	blx	r3
	cmp	r0, #0
	uxtbge	r2, r0
	ubfxge	r0, r0, #8, #8
	blt	.L11819
.L11759:
	ldr	r3, [r5]
	mov	r10, #2
	mov	r9, r10
	strb	r2, [r3]
	strb	r0, [r3, #1]
	b	.L11615
.L11774:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC964
	movt	r2, #:upper16:.LC964
	ldr	r0, .L12054
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11588
.L12020:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC963
	ldr	ip, [r5]
	movt	r2, #:upper16:.LC963
	ldr	r3, .L12054+28
	ldr	r0, .L12054+4
	add	r1, r1, #32
	stm	sp, {fp, ip}
	bl	__dynamic_dev_dbg
	b	.L11773
.L12025:
	ldr	r9, [r3, #40]
	cmp	r9, #0
	bne	.L11751
	b	.L11822
.L12022:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC969
	mov	r3, r9
	movt	r2, #:upper16:.LC969
	ldr	r0, .L12054+8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11776
.L11678:
	mov	r2, r4
	ldr	r3, [r2, #36]!
	cmp	r2, r3
	sub	r3, r3, #28
	strne	r4, [sp, #28]
	movne	r4, fp
	strne	r5, [sp, #24]
	str	r3, [sp, #20]
	str	r2, [sp, #32]
	beq	.L12017
.L11677:
	ldr	r3, [sp, #20]
	ldr	r5, [r3, #4]
	cmp	r5, #0
	beq	.L11685
	ldr	r0, [r5]
	cmp	r0, #0
	bne	.L11687
	b	.L11685
.L11688:
	ldr	r0, [r5, #4]!
	cmp	r0, #0
	beq	.L11685
.L11687:
	ldrh	r3, [r0]
	cmp	r3, r8
	bne	.L11688
	mov	r2, r9
	mov	r1, r4
	bl	usb_gadget_get_string
	cmp	r0, #0
	ble	.L11688
.L12016:
	ldr	r5, [sp, #24]
	ldr	r4, [sp, #28]
	b	.L11669
.L11685:
	ldr	fp, [sp, #20]
	ldr	r10, [fp, #36]!
	cmp	fp, r10
	sub	r10, r10, #72
	beq	.L11684
.L11683:
	ldr	r5, [r10, #4]
	cmp	r5, #0
	beq	.L11690
	ldr	r0, [r5]
	cmp	r0, #0
	bne	.L11692
	b	.L11690
.L11693:
	ldr	r0, [r5, #4]!
	cmp	r0, #0
	beq	.L11690
.L11692:
	ldrh	r3, [r0]
	cmp	r3, r8
	bne	.L11693
	mov	r2, r9
	mov	r1, r4
	bl	usb_gadget_get_string
	cmp	r0, #0
	ble	.L11693
	b	.L12016
.L11690:
	ldr	r10, [r10, #72]
	cmp	fp, r10
	sub	r10, r10, #72
	bne	.L11683
.L11684:
	ldr	r3, [sp, #20]
	ldr	r2, [sp, #32]
	ldr	r3, [r3, #28]
	cmp	r2, r3
	sub	r3, r3, #28
	str	r3, [sp, #20]
	bne	.L11677
	b	.L12017
.L11753:
	movw	r8, #:lower16:.LANCHOR4
	movw	r2, #2778
	movt	r8, #:upper16:.LANCHOR4
	ldrh	r2, [r8, r2]
	tst	r2, #4
	bne	.L12032
.L11754:
	movw	r2, #2802
	ldr	r3, [r4, #56]
	ldrh	r2, [r8, r2]
	add	r3, r3, #1
	tst	r2, #4
	str	r3, [r4, #56]
	moveq	r3, #1
	beq	.L11755
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC964
	ldr	r0, .L12054+12
	movt	r2, #:upper16:.LC964
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mov	r3, #1
	b	.L11755
.L12028:
	mov	r1, #256
	mov	r0, r9
	bl	__memzero
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #3
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	strb	r2, [r9, #1]
	ldr	ip, [r3, #16]
	cmp	ip, #0
	beq	.L11646
	ldr	r2, [ip]
	add	lr, r9, #2
	cmp	r2, #0
	beq	.L11646
	add	r0, r9, #254
.L11650:
	ldrh	r3, [r9, #2]
	ldrh	r1, [r2]
	mov	r2, lr
	cmp	r3, #0
	beq	.L11647
	cmp	lr, r0
	bcc	.L11649
	b	.L11647
.L12033:
	ldrh	r3, [r2, #2]!
	cmp	r3, #0
	beq	.L11647
	cmp	r2, r0
	bcs	.L11647
.L11649:
	cmp	r1, r3
	bne	.L12033
.L11648:
	ldr	r2, [ip, #4]!
	cmp	r2, #0
	bne	.L11650
.L11646:
	mov	r3, r4
	ldr	r10, [r3, #36]!
	cmp	r3, r10
	mov	r2, r3
	sub	r3, r10, #28
	beq	.L11645
	add	r10, r9, #2
	mov	r8, r3
	str	r5, [sp, #20]
	mov	r3, r6
	add	fp, r9, #254
	str	r7, [sp, #24]
	mov	r6, r9
	mov	r7, r10
	str	r4, [sp, #28]
	mov	r9, r3
	mov	r4, r2
.L11660:
	ldr	lr, [r8, #4]
	cmp	lr, #0
	bne	.L11652
.L11655:
	mov	r5, r8
	ldr	r10, [r5, #36]!
	cmp	r5, r10
	sub	r10, r10, #72
	bne	.L11653
	b	.L11654
.L11662:
	ldr	r10, [r10, #72]
	cmp	r5, r10
	sub	r10, r10, #72
	beq	.L11654
.L11653:
	ldr	r0, [r10]
	bl	is_available_function
	cmp	r0, #0
	beq	.L11662
	ldr	r0, [r10, #4]
	cmp	r0, #0
	beq	.L11662
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L11662
.L11666:
	ldrh	r3, [r6, #2]
	ldrh	r1, [r2]
	mov	r2, r7
	cmp	r3, #0
	beq	.L11663
	cmp	r7, fp
	bcc	.L11665
	b	.L11663
.L12034:
	ldrh	r3, [r2, #2]!
	cmp	r3, #0
	beq	.L11663
	cmp	r2, fp
	bcs	.L11663
.L11665:
	cmp	r1, r3
	bne	.L12034
.L11664:
	ldr	r2, [r0, #4]!
	cmp	r2, #0
	bne	.L11666
	b	.L11662
.L11663:
	strh	r1, [r2]	@ movhi
	ldr	r2, [r0, #4]!
	cmp	r2, #0
	bne	.L11666
	b	.L11662
.L11654:
	ldr	r8, [r8, #28]
	cmp	r4, r8
	sub	r8, r8, #28
	bne	.L11660
	ldr	r5, [sp, #20]
	mov	r3, r9
	mov	r9, r6
	ldr	r7, [sp, #24]
	mov	r6, r3
	ldr	r4, [sp, #28]
.L11645:
	mov	r3, #0
.L11651:
	add	r2, r9, r3, lsl #1
	ldrh	r2, [r2, #2]	@ unaligned
	cmp	r2, #0
	bne	.L11668
	cmp	r3, #0
	beq	.L12017
.L11667:
	add	r3, r3, #1
	lsl	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r9]
	b	.L11669
.L11652:
	ldr	r0, [lr]
	cmp	r0, #0
	beq	.L11655
.L11659:
	ldrh	r3, [r6, #2]
	mov	r2, r7
	ldrh	r1, [r0]
	cmp	r3, #0
	beq	.L11656
	cmp	r7, fp
	bcc	.L11658
	b	.L11656
.L12035:
	ldrh	r3, [r2, #2]!
	cmp	r3, #0
	beq	.L11656
	cmp	r2, fp
	bcs	.L11656
.L11658:
	cmp	r1, r3
	bne	.L12035
.L11657:
	ldr	r0, [lr, #4]!
	cmp	r0, #0
	bne	.L11659
	b	.L11655
.L11656:
	strh	r1, [r2]	@ movhi
	b	.L11657
.L11647:
	strh	r1, [r2]	@ movhi
	b	.L11648
.L11818:
	mov	r0, r2
	b	.L11759
.L12029:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r10, [r3, #3600]
	cmp	r10, #0
	beq	.L12036
.L11671:
	mov	r0, r10
	bl	strlen
	mov	r2, #126
	mov	r1, r0
	cmp	r0, r2
	add	r3, r9, #2
	movcs	r1, r2
	mov	r0, r10
	str	r2, [sp]
	mov	r2, #1
	bl	utf8s_to_utf16s
	subs	r3, r0, #0
	blt	.L12017
	add	r3, r3, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r9, #1]
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r9]
	b	.L11669
.L11626:
	mov	r2, r8
	ldr	r3, [r2, #36]!
	cmp	r2, r3
	sub	r3, r3, #72
	str	r2, [sp, #20]
	beq	.L12037
	movw	r10, #4087
	ldr	fp, [sp, #24]
	str	r6, [sp, #24]
	str	r7, [sp, #40]
	ldr	r7, [sp, #28]
	mov	r6, r3
	str	r5, [sp, #36]
	str	r4, [sp, #44]
.L11640:
	ldr	r0, [r6]
	bl	is_available_function
	cmp	r0, #0
	beq	.L11633
	cmp	fp, #3
	beq	.L11634
	cmp	fp, #5
	bne	.L11635
	ldr	r9, [r6, #12]
.L11636:
	cmp	r9, #0
	beq	.L11633
	ldr	r1, [r9]
	mov	r5, r10
	cmp	r1, #0
	beq	.L11799
	mov	r4, r7
	b	.L11638
.L12039:
	bl	memcpy
	ldr	r1, [r9, #4]!
	cmp	r1, #0
	beq	.L12038
.L11638:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r4
	cmp	r2, r5
	add	r4, r4, r2
	sub	r5, r5, r2
	bls	.L12039
	b	.L12017
.L12038:
	subs	r4, r4, r7
	bmi	.L12040
.L11637:
	mov	r3, r8
	mov	r2, r10
	str	fp, [sp]
	mov	r1, r7
	mov	r0, r6
	bl	change_conf
	cmp	r0, #0
	blt	.L12041
	sub	r10, r10, r4
	add	r7, r7, r4
.L11633:
	ldr	r3, [sp, #20]
	ldr	r6, [r6, #72]
	cmp	r3, r6
	sub	r6, r6, #72
	bne	.L11640
	str	r7, [sp, #28]
	ldr	r6, [sp, #24]
	ldr	r5, [sp, #36]
	ldr	r7, [sp, #40]
	ldr	r4, [sp, #44]
.L11632:
	mov	r0, r8
	ldr	r2, [sp, #28]
	ldr	r8, [sp, #32]
	sub	r9, r2, r8
	mov	r1, r8
	bl	set_interface_count
	cmp	r9, #0
	uxth	r3, r9
	strh	r9, [r8, #2]	@ unaligned
	blt	.L11588
.L11641:
	cmp	r7, r3
	movcc	r9, r7
	movcs	r9, r3
	mov	r10, r9
	b	.L11615
.L11635:
	ldr	r9, [r6, #16]
	b	.L11636
.L11634:
	ldr	r9, [r6, #8]
	b	.L11636
.L12031:
	ldr	r2, [sp, #28]
	subs	r9, r3, r2
	bmi	.L11588
.L11628:
	mov	r2, r8
	ldr	r0, [sp, #28]
	rsb	r1, r9, #4080
	ldr	r3, [r2, #36]!
	add	r1, r1, #7
	add	r0, r0, r9
	cmp	r2, r3
	sub	r3, r3, #72
	str	r2, [sp, #20]
	str	r0, [sp, #28]
	beq	.L11632
	mov	r10, r1
	str	r5, [sp, #36]
	ldr	fp, [sp, #24]
	str	r6, [sp, #24]
	mov	r6, r3
	str	r7, [sp, #40]
	ldr	r7, [sp, #28]
	str	r4, [sp, #44]
	b	.L11640
.L12030:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r10, [r3, #3656]
	cmp	r10, #0
	ldreq	r2, [r3, #2476]
	ldreq	r10, [r2, #4]
	bne	.L11671
.L11673:
	cmp	r10, #0
	beq	.L11674
	b	.L11671
.L11668:
	add	r3, r3, #1
	cmp	r3, #127
	bne	.L11651
	b	.L11667
.L11618:
	cmp	r9, #7
	mov	r3, r2
	moveq	r3, #0
	str	r3, [sp, #24]
	b	.L11617
.L11799:
	mov	r4, r1
	b	.L11637
.L11996:
	ldr	r10, [r3, #3660]
	b	.L11673
.L11696:
	mov	r2, #500
	mov	r3, r2
	strh	r2, [sp, #54]	@ movhi
	b	.L11697
.L11763:
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC968
	mov	r2, r9
	movt	r1, #:upper16:.LC968
	mov	r9, r10
	add	r0, r0, #32
	bl	dev_err
	b	.L11615
.L12036:
	ldr	r2, [r3, #2476]
	ldr	r3, .L12054+16
	ldr	r10, [r2, #8]
	cmp	r10, #0
	moveq	r10, r3
	b	.L11671
.L12032:
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC963
	ldr	r1, [r4]
	movt	r2, #:upper16:.LC963
	ldr	r3, .L12054+28
	ldr	r0, .L12054+20
	stm	sp, {fp, ip}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11754
.L12037:
	mov	r0, r8
	ldr	r8, [sp, #32]
	mov	r1, r8
	bl	set_interface_count
	mov	r2, #9
	mov	r3, r2
	strb	r2, [r8, #2]
	strb	r10, [r8, #3]
	b	.L11641
.L12040:
	mov	r9, r4
	b	.L11588
.L11611:
	mov	r0, #16
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	strb	r0, [r4, #19]
	strb	r2, [r4, #20]
	movw	r2, #2634
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L11613
	movw	r2, #:lower16:.LC952
	add	r1, r1, #32
	ldr	r0, .L12054+24
	movt	r2, #:upper16:.LC952
	bl	__dynamic_dev_dbg
	b	.L11613
.L11610:
	ldrb	r3, [r6, #377]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11613
	mov	ip, #1
	movw	r0, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LANCHOR4
	movw	r3, #2658
	strb	ip, [r4, #19]
	strb	r2, [r4, #20]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L11613
	movw	r2, #:lower16:.LC953
	add	r1, r1, #32
	movt	r2, #:upper16:.LC953
	add	r0, r0, #2640
	bl	__dynamic_dev_dbg
	b	.L11613
.L11707:
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L11706
	movw	r0, #:lower16:.LANCHOR4
	movw	r2, #1314
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L12042
.L11709:
	ldr	r9, [r3, #36]
	mov	fp, #0
	sub	r9, r9, #72
	b	.L11710
.L11712:
	ldr	r3, [r9, #48]
	cmp	r3, #0
	beq	.L11711
	blx	r3
.L11711:
	ldr	r2, [r9, #72]
	str	fp, [r9, #80]
	ldr	r3, [r4, #12]
	sub	r9, r2, #72
.L11710:
	add	r3, r3, #36
	add	r2, r9, #72
	cmp	r2, r3
	mov	r0, r9
	bne	.L11712
	mov	r3, #0
	str	r3, [r4, #12]
	str	r3, [r4, #56]
.L11706:
	ldr	r3, [sp, #20]
	ldr	fp, [r4]
	ldr	r0, [r3, #16]
	bl	usb_speed_string
	cmp	r8, #0
	add	fp, fp, #32
	mov	r2, r0
	beq	.L11781
	movw	r1, #:lower16:.LC959
	ldr	r3, [r8]
	mov	r9, #0
	mov	r0, r1
	movw	r1, #:lower16:.LC957
	movt	r0, #:upper16:.LC959
	movt	r1, #:upper16:.LC957
	str	r3, [sp]
	mov	r3, r10
	str	r0, [sp, #40]
	mov	r0, fp
	bl	_dev_info
	add	r3, r8, #48
	str	r5, [sp, #32]
	mov	r5, r9
	str	r8, [r4, #12]
	str	r3, [sp, #36]
.L11744:
	ldr	r3, [sp, #36]
	ldr	fp, [r3], #4
	cmp	fp, #0
	str	r3, [sp, #36]
	beq	.L11721
	ldr	r3, [sp, #20]
	ldr	r1, [r3, #16]
	cmp	r1, #3
	beq	.L11722
	cmp	r1, #5
	str	r1, [sp, #44]
	bne	.L11723
	ldr	r0, [sp, #40]
	bl	power_supply_get_by_name
	ldr	r9, [fp, #12]
	ldr	r1, [sp, #44]
	cmp	r9, #0
	beq	.L12043
	cmp	r0, #0
	beq	.L12044
	add	r2, sp, #52
	str	r1, [sp, #52]
	mov	r1, #4
	ldr	r3, [r0, #40]
	blx	r3
.L11731:
	ldr	r3, [r9]
	cmp	r3, #0
	beq	.L11734
	add	r1, fp, #80
.L11728:
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L12045
	ldr	r3, [r9, #4]!
	cmp	r3, #0
	bne	.L11728
.L11734:
	mov	r2, #0
	mov	r1, r5
	ldr	r3, [fp, #40]
	mov	r0, fp
	blx	r3
	subs	r9, r0, #0
	blt	.L12046
	movw	r3, #32767
	cmp	r9, r3
	beq	.L12047
.L11741:
	add	r5, r5, #1
	cmp	r5, #16
	bne	.L11744
.L11721:
	ldrb	r3, [r8, #23]	@ zero_extendqisi2
	ldr	r5, [sp, #32]
	cmp	r3, #0
	ldrne	r1, [r4, #64]
	mulne	r1, r1, r3
	moveq	r1, #500
.L11720:
	ldr	r3, [sp, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L11779
	ldr	r0, [sp, #24]
	blx	r3
.L11779:
	ldr	r3, [r4, #56]
	cmp	r3, #0
	bne	.L11808
	ldr	r0, [sp, #28]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC965
	movt	r0, #:upper16:.LC965
	bl	printk
	cmp	r9, #0
	bne	.L11745
.L11778:
	cmp	r10, #0
	bne	.L12048
.L11746:
	ldr	r3, [r6, #16]
	cmp	r3, #5
	beq	.L11784
	mov	r10, #0
	mov	r9, r10
	b	.L11615
.L12045:
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	str	r1, [sp, #44]
	asr	r0, r3, #3
	and	r3, r3, #15
	and	r0, r0, #16
	orr	r0, r0, r3
	bl	_set_bit
	ldr	r3, [r9, #4]!
	ldr	r1, [sp, #44]
	cmp	r3, #0
	bne	.L11728
	b	.L11734
.L12046:
	movw	r8, #:lower16:.LANCHOR4
	movw	r3, #2706
	movt	r8, #:upper16:.LANCHOR4
	mov	r0, r5
	ldr	r5, [sp, #32]
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L12049
.L11735:
	movw	r3, #1314
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L12050
.L11736:
	ldr	r3, [r4, #12]
	mov	r10, #0
	ldr	r8, [r3, #36]
	sub	r8, r8, #72
	b	.L11737
.L12055:
	.align	2
.L12054:
	.word	.LANCHOR4+2832
	.word	.LANCHOR4+2808
	.word	.LANCHOR4+2856
	.word	.LANCHOR4+2784
	.word	.LANCHOR1+3604
	.word	.LANCHOR4+2760
	.word	.LANCHOR4+2616
	.word	.LANCHOR5-1168
	.word	.LANCHOR4+1296
	.word	.LANCHOR4+2730
	.word	.LANCHOR4+2754
	.word	.LANCHOR4+2664
	.word	.LANCHOR5-1192
	.word	.LANCHOR5-1180
.L11739:
	ldr	r3, [r8, #48]
	cmp	r3, #0
	beq	.L11738
	blx	r3
.L11738:
	ldr	r2, [r8, #72]
	str	r10, [r8, #80]
	ldr	r3, [r4, #12]
	sub	r8, r2, #72
.L11737:
	add	r3, r3, #36
	add	r2, r8, #72
	cmp	r2, r3
	mov	r0, r8
	bne	.L11739
	mov	r3, #0
	str	r3, [r4, #12]
	str	r3, [r4, #56]
.L11714:
	ldr	r3, [sp, #20]
	ldr	r3, [r3]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L11725
	mov	r1, #100
	ldr	r0, [sp, #20]
	blx	r3
.L11725:
	ldr	r0, [sp, #28]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC965
	movt	r0, #:upper16:.LC965
	bl	printk
.L11745:
	ldr	r3, [r6, #16]
	mvn	r10, r9
	movw	fp, #32767
	lsr	r10, r10, #31
	cmp	r9, fp
	moveq	r8, #0
	andne	r8, r10, #1
	cmp	r3, #5
	bne	.L11747
	bl	get_host_os_type
	cmp	r0, #0
	bne	.L11747
.L11787:
	movw	r10, #:lower16:sec_qcom_usb_rdrv
	mov	r1, #0
	movt	r10, #:upper16:sec_qcom_usb_rdrv
	ldr	r0, [r10]
	bl	__gpio_set_value
	movw	r0, #:lower16:.LC966
	ldr	r1, .L12054+28
	movt	r0, #:upper16:.LC966
	ldr	r2, [r10]
	bl	printk
	movw	r0, #:lower16:.LC967
	movt	r0, #:upper16:.LC967
	bl	printk
	b	.L11747
.L12049:
	ldr	r1, [r4]
	str	fp, [sp, #4]
	movw	r2, #:lower16:.LC962
	str	r9, [sp, #8]
	mov	r3, r0
	movt	r2, #:upper16:.LC962
	ldr	ip, [fp]
	add	r0, r8, #2688
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L11735
.L12050:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC878
	movt	r2, #:upper16:.LC878
	ldr	r0, .L12054+32
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11736
.L11808:
	movw	r9, #32767
	b	.L11725
.L11723:
	ldr	r9, [fp, #16]
	b	.L11731
.L11722:
	ldr	r9, [fp, #8]
	b	.L11731
.L12047:
	ldr	r0, .L12054+36
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L12051
.L11742:
	ldr	r0, .L12054+40
	ldr	r3, [r4, #56]
	ldrh	r2, [r0]
	add	r3, r3, #1
	str	r3, [r4, #56]
	tst	r2, #4
	beq	.L11741
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC964
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC964
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11741
.L12024:
	movw	r0, #:lower16:.LANCHOR4
	movw	r2, #1314
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L12052
.L11715:
	ldr	r8, [r3, #36]
	mov	r9, #0
	sub	r8, r8, #72
	b	.L11716
.L11718:
	ldr	r3, [r8, #48]
	cmp	r3, #0
	beq	.L11717
	blx	r3
.L11717:
	ldr	r2, [r8, #72]
	str	r9, [r8, #80]
	ldr	r3, [r4, #12]
	sub	r8, r2, #72
.L11716:
	add	r3, r3, #36
	add	r2, r8, #72
	cmp	r2, r3
	mov	r0, r8
	bne	.L11718
	ldr	r2, [r4]
	mov	r3, #0
	str	r3, [r4, #12]
	str	r3, [r4, #56]
	str	r2, [sp, #20]
.L11702:
	ldr	r3, [sp, #24]
	ldr	r0, [r3, #16]
	ldr	r3, [sp, #20]
	add	fp, r3, #32
	bl	usb_speed_string
	mov	r2, r0
.L11781:
	movw	r3, #:lower16:.LC958
	movw	r1, #:lower16:.LC957
	movt	r3, #:upper16:.LC958
	movt	r1, #:upper16:.LC957
	mov	r0, fp
	mov	r9, #0
	str	r3, [sp]
	mov	r3, r10
	bl	_dev_info
	mov	r1, #100
	b	.L11720
.L12051:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC963
	sub	r0, r0, #18
	ldr	ip, [fp]
	movt	r2, #:upper16:.LC963
	ldr	r3, .L12054+52
	add	r1, r1, #32
	stm	sp, {r5, ip}
	bl	__dynamic_dev_dbg
	b	.L11742
.L12042:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC878
	add	r0, r0, #1296
	movt	r2, #:upper16:.LC878
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #12]
	b	.L11709
.L12052:
	ldr	r3, [sp, #24]
	movw	r2, #:lower16:.LC878
	add	r0, r0, #1296
	movt	r2, #:upper16:.LC878
	add	r1, r3, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #12]
	b	.L11715
.L11784:
	bl	get_host_os_type
	subs	r9, r0, #0
	movne	r9, #0
	bne	.L12014
	mov	r8, #1
	b	.L11787
.L12048:
	sub	r0, r10, #1
	bl	set_config_number
	b	.L11746
.L12023:
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2682
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L12053
.L11701:
	ldr	r0, [sp, #28]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC965
	movt	r0, #:upper16:.LC965
	bl	printk
	b	.L11778
.L11699:
	cmp	r10, #0
	beq	.L11702
	b	.L11782
.L12053:
	ldr	r3, [sp, #24]
	movw	r2, #:lower16:.LC956
	movt	r2, #:upper16:.LC956
	ldr	r0, .L12054+44
	add	r1, r3, #32
	mov	r3, r10
	bl	__dynamic_dev_dbg
	b	.L11701
.L12041:
	movw	r0, #:lower16:.LC955
	ldr	r1, .L12054+48
	mvn	r9, #21
	movt	r0, #:upper16:.LC955
	bl	printk
	b	.L11588
.L12044:
	movw	r0, #:lower16:.LC961
	ldr	r1, .L12054+52
	movt	r0, #:upper16:.LC961
	ldr	r2, [sp, #40]
	bl	printk
	b	.L11731
.L12043:
	movw	r0, #:lower16:.LC960
	ldr	r1, .L12054+52
	mvn	r9, #21
	movt	r0, #:upper16:.LC960
	ldr	r2, [fp]
	ldr	r5, [sp, #32]
	bl	printk
	b	.L11725
	.fnend
	.size	composite_setup, .-composite_setup
	.align	2
	.global	usb_find_descriptor_fillbuf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_find_descriptor_fillbuf, %function
usb_find_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L12069
	mov	ip, r1
	ldr	r1, [r2]
	cmp	r1, #0
	beq	.L12070
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.L12060:
	ldrb	lr, [r1, #1]	@ zero_extendqisi2
	cmp	lr, r3
	beq	.L12059
	ldr	r1, [r2, #4]!
	cmp	r1, #0
	bne	.L12060
	mvn	r0, #1
	b	.L12056
.L12059:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	ip, r4
	bcc	.L12062
	mov	r2, r4
	bl	memcpy
	mov	r0, r4
.L12056:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L12070:
	mvn	r0, #1
	bx	lr
.L12062:
	mvn	r0, #21
	b	.L12056
.L12069:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_find_descriptor_fillbuf, .-usb_find_descriptor_fillbuf
	.align	2
	.global	usb_descriptor_fillbuf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_descriptor_fillbuf, %function
usb_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r6, r2, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L12075
	mov	r5, r1
	ldr	r1, [r6]
	cmp	r1, #0
	beq	.L12077
	mov	r7, r0
	mov	r4, r0
	b	.L12076
.L12081:
	bl	memcpy
	ldr	r1, [r6, #4]!
	cmp	r1, #0
	beq	.L12080
.L12076:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r4
	cmp	r5, r2
	add	r4, r4, r2
	sub	r5, r5, r2
	bcs	.L12081
.L12075:
	mvn	r0, #21
.L12071:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12080:
	sub	r0, r4, r7
	b	.L12071
.L12077:
	mov	r0, r1
	b	.L12071
	.fnend
	.size	usb_descriptor_fillbuf, .-usb_descriptor_fillbuf
	.align	2
	.global	usb_gadget_config_buf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_config_buf, %function
usb_gadget_config_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #0
	cmpne	r2, #8
	bls	.L12093
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r3
	sub	r6, r2, #9
	str	r8, [sp, #16]
	add	r8, r4, #9
	str	lr, [sp, #20]
	ldr	r1, [r0]	@ unaligned
	ldr	r3, [r0, #4]	@ unaligned
	str	r1, [r4]	@ unaligned
	str	r3, [r4, #4]	@ unaligned
	ldrb	r3, [r0, #8]	@ zero_extendqisi2
	strb	r3, [r4, #8]
	ldr	r1, [r7]
	cmp	r1, #0
	beq	.L12088
	mov	r5, r8
	b	.L12087
.L12095:
	bl	memcpy
	ldr	r1, [r7, #4]!
	cmp	r1, #0
	beq	.L12094
.L12087:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r5
	cmp	r2, r6
	add	r5, r5, r2
	sub	r6, r6, r2
	bls	.L12095
.L12086:
	mvn	r0, #21
	b	.L12082
.L12094:
	subs	r0, r5, r8
	bmi	.L12082
	add	r0, r0, #9
	cmp	r0, #65536
	bge	.L12086
.L12085:
	ldrb	r3, [r4, #7]	@ zero_extendqisi2
	mov	r1, #9
	mov	r2, #2
	strb	r1, [r4]
	strb	r2, [r4, #1]
	mvn	r3, r3, lsl #25
	strh	r0, [r4, #2]	@ unaligned
	mvn	r3, r3, lsr #25
	strb	r3, [r4, #7]
.L12082:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12088:
	mov	r0, #9
	b	.L12085
.L12093:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_gadget_config_buf, .-usb_gadget_config_buf
	.align	2
	.global	usb_copy_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_copy_descriptors, %function
usb_copy_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L12102
	mov	r1, #0
	mov	ip, r0
	mov	r0, r1
.L12098:
	ldrb	lr, [r2]	@ zero_extendqisi2
	mov	r3, r1
	add	r1, r1, #1
	ldr	r2, [ip, #4]!
	add	r0, r0, lr
	cmp	r2, #0
	bne	.L12098
	add	r3, r3, #2
	lsl	r4, r3, #2
	add	r0, r0, r4
.L12097:
	mov	r1, #208
	bl	__kmalloc
	subs	r6, r0, #0
	beq	.L12096
	ldr	r1, [r5]
	add	r3, r6, r4
	mov	r4, r6
	cmp	r1, #0
	beq	.L12100
.L12101:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r3
	bl	memcpy
	str	r0, [r4], #4
	ldr	r2, [r5]
	ldr	r1, [r5, #4]!
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r1, #0
	add	r3, r0, r2
	bne	.L12101
.L12100:
	mov	r3, #0
	str	r3, [r4]
.L12096:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12102:
	mov	r0, #4
	mov	r4, r0
	b	.L12097
	.fnend
	.size	usb_copy_descriptors, .-usb_copy_descriptors
	.align	2
	.global	usb_assign_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_assign_descriptors, %function
usb_assign_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	subs	r0, r1, #0
	strd	r6, [sp, #8]
	mov	r6, r3
	mov	r5, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r4, #20]
	ldr	r3, [r1, #24]
	ldr	r7, [r3]
	beq	.L12115
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12114
.L12115:
	cmp	r5, #0
	beq	.L12113
	ldr	r3, [r7, #20]
	cmp	r3, #2
	bhi	.L12124
.L12113:
	cmp	r6, #0
	beq	.L12118
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bhi	.L12125
.L12118:
	mov	r0, #0
.L12110:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12124:
	mov	r0, r5
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L12113
.L12123:
	ldr	r0, [r4, #16]
.L12114:
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	mvn	r0, #11
	b	.L12110
.L12125:
	mov	r0, r6
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L12118
	b	.L12123
	.fnend
	.size	usb_assign_descriptors, .-usb_assign_descriptors
	.align	2
	.global	usb_free_all_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_free_all_descriptors, %function
usb_free_all_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #12]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	usb_free_all_descriptors, .-usb_free_all_descriptors
	.section	.rodata.str1.4
	.align	2
.LC971:
	.ascii	"ep-e\000"
	.align	2
.LC972:
	.ascii	"ep-f\000"
	.align	2
.LC973:
	.ascii	"ep3-bulk\000"
	.align	2
.LC974:
	.ascii	"ep2-bulk\000"
	.text
	.align	2
	.global	usb_ep_autoconfig_ss
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_ss, %function
usb_ep_autoconfig_ss:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r0
	str	lr, [sp, #32]
	ldr	r9, [r0, #28]
	.pad #20
	sub	sp, sp, #20
	movw	r0, #:lower16:.LC504
	ldrb	r5, [r1, #3]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC504
	str	r2, [sp, #4]
	mov	r1, r9
	bl	strcmp
	ldr	r8, [r6, #8]!
	cmp	r0, #0
	and	r5, r5, #3
	sub	r4, r8, #12
	mov	fp, r8
	bne	.L12129
	cmp	r5, #3
	beq	.L12237
	movw	r0, #:lower16:.LC507
	mov	r1, r9
	movt	r0, #:upper16:.LC507
	bl	strcmp
	cmp	r0, #0
	beq	.L12141
.L12139:
	cmp	fp, r6
	beq	.L12146
.L12145:
	movw	r3, #:lower16:.LC506
	movw	r9, #:lower16:_ctype
	movt	r3, #:upper16:.LC506
	movw	fp, #:lower16:.LANCHOR1
	movt	r9, #:upper16:_ctype
	movt	fp, #:upper16:.LANCHOR1
	str	r3, [sp, #8]
	b	.L12166
.L12149:
	ldr	r4, [r4, #12]
	cmp	r6, r4
	sub	r4, r4, #12
	beq	.L12146
.L12166:
	ldr	r1, [r4]
	cmp	r1, #0
	bne	.L12149
	ldrb	r5, [r7, #3]	@ zero_extendqisi2
	ands	r5, r5, #3
	beq	.L12149
	ldr	r8, [r4, #4]
	ldrb	r1, [r8]	@ zero_extendqisi2
	cmp	r1, #101
	bne	.L12149
	ldrb	r1, [r8, #2]	@ zero_extendqisi2
	cmp	r1, #45
	beq	.L12150
	mov	r1, #45
	mov	r0, r8
	bl	strrchr
	subs	r3, r0, #0
	beq	.L12151
	cmp	r5, #2
	beq	.L12152
	cmp	r5, #3
	ldrb	r1, [r3, #2]	@ zero_extendqisi2
	bne	.L12153
	cmp	r1, #115
	str	r3, [sp, #12]
	beq	.L12149
	ldr	r0, [sp, #8]
	ldr	r1, [r10, #28]
	bl	strcmp
	cmp	r0, #0
	ldr	r3, [sp, #12]
	beq	.L12238
.L12154:
	ldrb	r1, [r3, #-1]	@ zero_extendqisi2
	ldrb	r0, [r9, r1]	@ zero_extendqisi2
	tst	r0, #4
	beq	.L12169
	ldrh	r1, [r7, #4]	@ unaligned
	cmp	r1, #0
	bne	.L12239
	mov	r8, r1
	b	.L12167
.L12129:
	movw	r0, #:lower16:.LC507
	mov	r1, r9
	movt	r0, #:upper16:.LC507
	bl	strcmp
	cmp	r0, #0
	bne	.L12139
	cmp	r5, #3
	beq	.L12240
.L12141:
	cmp	r5, #2
	bne	.L12139
	ldrsb	r3, [r7, #2]
	cmp	r3, #0
	bge	.L12139
	cmp	r6, r8
	beq	.L12146
	movw	r8, #:lower16:.LC974
	mov	r5, r4
	movt	r8, #:upper16:.LC974
	b	.L12148
.L12241:
	ldr	r5, [r5, #12]
	cmp	r6, r5
	sub	r5, r5, #12
	beq	.L12145
.L12148:
	mov	r1, r8
	ldr	r0, [r5, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L12241
.L12147:
	cmp	r5, #0
	beq	.L12145
	ldr	r3, [r5]
	cmp	r3, #0
	bne	.L12145
	mov	r2, r7
	mov	r1, r5
	ldr	r3, [sp, #4]
	mov	r0, r10
	bl	ep_matches.part.0
	cmp	r0, #0
	bne	.L12176
.L12231:
	ldr	fp, [r10, #8]
	sub	r4, fp, #12
	b	.L12139
.L12151:
	mov	r0, r8
	bl	strlen
	add	r3, r8, r0
.L12155:
	ldrb	r1, [r3, #-1]	@ zero_extendqisi2
	ldrb	r0, [r9, r1]	@ zero_extendqisi2
	tst	r0, #4
	bne	.L12150
.L12169:
	ldrsb	r0, [r7, #2]
	cmp	r0, #0
	blt	.L12242
	cmp	r1, #116
	bne	.L12149
.L12150:
	ldr	r3, [sp, #4]
	sub	r8, r5, #2
	clz	r8, r8
	lsr	r8, r8, #5
	cmp	r3, #0
	movne	r1, r8
	moveq	r1, #0
	cmp	r1, #0
	bne	.L12243
.L12158:
	ldrh	r1, [r7, #4]	@ unaligned
	cmp	r1, #0
	bne	.L12160
.L12167:
	ldrh	r1, [r4, #20]
	strh	r1, [r7, #4]	@ unaligned
.L12160:
	cmp	r5, #1
	ubfx	r0, r1, #0, #11
	beq	.L12161
	cmp	r5, #3
	bne	.L12162
.L12171:
	ldr	ip, [r10, #20]
	cmp	ip, #2
	movls	ip, #1
	movhi	ip, #0
	cmp	r0, #64
	movls	ip, #0
	cmp	ip, #0
	bne	.L12149
.L12161:
	ldrh	ip, [r4, #20]
	cmp	ip, r0
	bcc	.L12149
	ldr	r0, [r10, #20]
	cmp	r0, #2
	bhi	.L12162
	tst	r1, #7168
	bne	.L12149
.L12162:
	ldrb	r1, [r7, #2]	@ zero_extendqisi2
	and	r1, r1, #128
	strb	r1, [r7, #2]
	ldr	r0, [r4, #4]
	ldrb	ip, [r0, #2]	@ zero_extendqisi2
	ldrb	ip, [r9, ip]	@ zero_extendqisi2
	tst	ip, #4
	bne	.L12244
	ldr	r0, [fp, #3584]
	add	r0, r0, #1
	cmp	r0, #15
	str	r0, [fp, #3584]
	bhi	.L12149
	orr	r1, r1, r0
	uxtb	r1, r1
	strb	r1, [r7, #2]
.L12164:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	movne	r8, #0
	cmp	r8, #0
	beq	.L12165
	ldrh	r3, [r4, #20]
	cmp	r3, #64
	movge	r3, #64
	strh	r3, [r7, #4]	@ unaligned
.L12165:
	strb	r1, [r4, #25]
.L12136:
	mov	r3, #0
	str	r3, [r4, #28]
	str	r3, [r4, #32]
.L12128:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12237:
	cmp	r6, r8
	beq	.L12146
	movw	r9, #:lower16:.LC971
	mov	r5, r4
	movt	r9, #:upper16:.LC971
	b	.L12133
.L12245:
	ldr	r5, [r5, #12]
	cmp	r6, r5
	sub	r5, r5, #12
	beq	.L12134
.L12133:
	mov	r1, r9
	ldr	r0, [r5, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L12245
	cmp	r5, #0
	beq	.L12134
	ldr	r3, [r5]
	cmp	r3, #0
	bne	.L12134
	mov	r2, r7
	mov	r1, r5
	ldr	r3, [sp, #4]
	mov	r0, r10
	bl	ep_matches.part.0
	cmp	r0, #0
	bne	.L12176
	ldr	r8, [r10, #8]
	cmp	r6, r8
	sub	r4, r8, #12
	bne	.L12134
.L12146:
	mov	r4, #0
	b	.L12128
.L12243:
	ldr	r0, [r10, #20]
	cmp	r0, #4
	bls	.L12159
	ldrb	r0, [r3, #3]	@ zero_extendqisi2
	ldrh	ip, [r4, #22]
	and	r0, r0, #31
	cmp	ip, r0
	bcc	.L12149
.L12159:
	ldrh	r0, [r7, #4]	@ unaligned
	cmp	r0, #0
	movne	r8, r1
	bne	.L12162
	mov	r8, r1
	b	.L12167
.L12244:
	mov	r1, #0
	add	r0, r0, #2
	mov	r2, #10
	bl	simple_strtoul
	ldrb	r1, [r7, #2]	@ zero_extendqisi2
	orr	r1, r1, r0
	uxtb	r1, r1
	strb	r1, [r7, #2]
	b	.L12164
.L12153:
	cmp	r1, #115
	bne	.L12149
	ldrb	r1, [r3, #-1]	@ zero_extendqisi2
	ldrb	r0, [r9, r1]	@ zero_extendqisi2
	tst	r0, #4
	beq	.L12169
	sub	r8, r5, #2
	clz	r8, r8
	lsr	r8, r8, #5
	b	.L12158
.L12152:
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #98
	bne	.L12149
	b	.L12155
.L12238:
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #105
	bne	.L12154
	b	.L12149
.L12240:
	cmp	r6, r8
	movwne	r8, #:lower16:.LC973
	movne	r5, r4
	movtne	r8, #:upper16:.LC973
	bne	.L12142
	b	.L12146
.L12246:
	ldr	r5, [r5, #12]
	cmp	r6, r5
	sub	r5, r5, #12
	beq	.L12145
.L12142:
	mov	r1, r8
	ldr	r0, [r5, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L12246
	b	.L12147
.L12134:
	movw	r5, #:lower16:.LC972
	movt	r5, #:upper16:.LC972
	b	.L12138
.L12247:
	ldr	r4, [r4, #12]
	cmp	r6, r4
	sub	r4, r4, #12
	beq	.L12140
.L12138:
	mov	r1, r5
	ldr	r0, [r4, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L12247
	cmp	r4, #0
	beq	.L12140
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L12248
.L12140:
	sub	r4, r8, #12
	mov	fp, r8
	b	.L12139
.L12242:
	cmp	r1, #110
	bne	.L12149
	b	.L12150
.L12239:
	ubfx	r0, r1, #0, #11
	mov	r8, #0
	b	.L12171
.L12248:
	mov	r2, r7
	mov	r1, r4
	ldr	r3, [sp, #4]
	mov	r0, r10
	bl	ep_matches.part.0
	cmp	r0, #0
	beq	.L12231
	b	.L12136
.L12176:
	mov	r4, r5
	b	.L12136
	.fnend
	.size	usb_ep_autoconfig_ss, .-usb_ep_autoconfig_ss
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_func_bind_do_descs, %function
__ffs_func_bind_do_descs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bne	.L12266
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r6, r3
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #48]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #0
	beq	.L12252
	mov	r0, #2
	str	r2, [r3, r1, lsl #2]
.L12253:
	cmp	r4, #0
	beq	.L12255
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #5
	bne	.L12255
	ldrb	r7, [r4, #2]	@ zero_extendqisi2
	ldr	r10, [r6, #12]
	and	r7, r7, #15
	sub	r9, r7, #1
	rsb	r9, r9, r9, lsl #3
	lsl	r9, r9, #2
	add	r8, r10, r9
	add	r0, r8, r0, lsl #2
	ldr	r3, [r0, #8]
	cmp	r3, #0
	bne	.L12257
	str	r4, [r0, #8]
	ldr	r5, [r10, r9]
	cmp	r5, #0
	beq	.L12256
	ldr	r3, [r8, #8]
	ldrh	r0, [r4, #4]	@ unaligned
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r0, #0
	strb	r3, [r4, #2]
	beq	.L12267
.L12255:
	mov	r0, #0
.L12249:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12266:
	mov	r0, #0
	bx	lr
.L12252:
	ldr	r3, [r6, #44]
	cmp	r3, #0
	ldreq	r3, [r6, #52]
	movne	r0, #1
	str	r2, [r3, r1, lsl #2]
	b	.L12253
.L12267:
	ldr	r3, [r8, #8]
	ldrh	r3, [r3, #4]	@ unaligned
	strh	r3, [r4, #4]	@ unaligned
	b	.L12249
.L12256:
	mov	r2, r5
	mov	r1, r4
	ldr	r0, [r6, #4]
	bl	usb_ep_autoconfig_ss
	subs	fp, r0, #0
	beq	.L12258
	ldr	r3, [r6, #12]
	mov	r1, #208
	ldr	r2, [fp, #8]
	add	r3, r3, r9
	str	r3, [fp]
	ldr	r3, [r2, #8]
	blx	r3
	subs	r3, r0, #0
	beq	.L12259
	str	fp, [r10, r9]
	mov	r0, r5
	str	r3, [r8, #4]
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	and	r3, r3, #15
	add	r6, r6, r3
	strb	r7, [r6, #16]
	b	.L12249
.L12257:
	mvn	r0, #21
	b	.L12249
.L12258:
	movw	r0, #65012
	movt	r0, 65535
	b	.L12249
.L12259:
	mvn	r0, #11
	b	.L12249
	.fnend
	.size	__ffs_func_bind_do_descs, .-__ffs_func_bind_do_descs
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_bind, %function
diag_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L12286
	add	r1, r3, #12
	add	r2, r3, #1
	str	r4, [r0, r1, lsl #2]
	strb	r2, [r0, #44]
.L12269:
	movw	r6, #:lower16:.LANCHOR0
	ldr	r1, .L12320
	mov	r2, #0
	movt	r6, #:upper16:.LANCHOR0
	strb	r3, [r6, #1998]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12270
	ldr	r1, .L12320+4
	mov	r2, #0
	str	r0, [r4, #88]
	str	r4, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12270
	add	r0, r6, #2032
	str	r3, [r4, #84]
	str	r4, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12287
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12318
.L12272:
	ldr	r7, [r4, #120]
	cmp	r7, #0
	beq	.L12290
	ldrb	r3, [r6, #1998]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L12290
	ldr	ip, [r4, #116]
	ldrb	r1, [ip, #33]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L12317
	ldr	r3, [ip, #44]
	ldr	r3, [r3, #16]
	ldr	r3, [r3]
	ldr	r0, [r3, #4]
	cmp	r0, #0
	bne	.L12279
	b	.L12290
.L12281:
	ldrb	r2, [r0]	@ zero_extendqisi2
	cmp	r2, r1
	beq	.L12319
	adds	r0, r0, #8
	beq	.L12290
.L12279:
	ldr	r5, [r0, #4]
	cmp	r5, #0
	bne	.L12281
.L12268:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12270:
	mvn	r5, #18
.L12271:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12277
.L12285:
	bl	kfree
.L12277:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12282
	bl	kfree
.L12282:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12283
	bl	kfree
.L12283:
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L12268
	mov	r2, #0
	str	r2, [r3]
	b	.L12268
.L12290:
	mov	r5, #0
	b	.L12268
.L12318:
	ldrb	r2, [r6, #2010]	@ zero_extendqisi2
	ldrb	r3, [r6, #2022]	@ zero_extendqisi2
	ldr	r0, .L12320+8
	strb	r2, [r6, #2050]
	strb	r3, [r6, #2062]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12273
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12272
	ldrb	r2, [r6, #2010]	@ zero_extendqisi2
	add	r0, r6, #2112
	ldrb	r3, [r6, #2022]	@ zero_extendqisi2
	strb	r2, [r6, #2090]
	strb	r3, [r6, #2102]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L12272
	mvn	r5, #11
	b	.L12277
.L12319:
	mov	r1, r5
.L12317:
	ldrh	r0, [ip, #27]	@ unaligned
	mov	r5, #0
	blx	r7
	b	.L12268
.L12287:
	mvn	r5, #11
	b	.L12271
.L12286:
	mov	r3, #237
	b	.L12269
.L12273:
	ldr	r0, [r4, #12]
	mvn	r5, #11
	cmp	r0, #0
	bne	.L12285
	b	.L12282
.L12321:
	.align	2
.L12320:
	.word	.LANCHOR0+2008
	.word	.LANCHOR0+2020
	.word	.LANCHOR0+2072
	.fnend
	.size	diag_function_bind, .-diag_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_bind, %function
rmnet_smd_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r0, #24]
	str	r6, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L12325
	movw	r7, #:lower16:.LANCHOR0
	add	r2, r3, #12
	mov	r4, r0
	mov	r5, r1
	ldr	r1, .L12383
	add	r0, r3, #1
	movt	r7, #:upper16:.LANCHOR0
	str	r5, [r4, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r4, #44]
	strb	r3, [r5, #104]
	strb	r3, [r7, #2138]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12325
	mov	r2, #0
	add	r1, r7, #2160
	str	r6, [r3]
	str	r3, [r5, #92]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12325
	ldr	r1, .L12383+4
	mov	r2, #0
	str	r6, [r3]
	str	r3, [r5, #88]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	beq	.L12325
	str	r6, [r8]
	str	r8, [r5, #96]
	ldr	r3, [r4, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12381
.L12326:
	ldr	r3, [r8, #8]
	mov	r1, #208
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L12327
	mov	r2, #8
	movw	r6, #:lower16:kmalloc_caches
	movt	r6, #:upper16:kmalloc_caches
	str	r2, [r4, #4]
	ldr	r0, [r6, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4]
	beq	.L12329
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	bne	.L12329
	ldr	r3, [r8, #8]
	mov	r1, r4
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L12327:
	mvn	r3, #11
	mov	r4, r3
	str	r3, [r5, #100]
	b	.L12322
.L12329:
	cmn	r4, #4096
	str	r4, [r5, #100]
	bhi	.L12322
	movw	r3, #:lower16:rmnet_smd_notify_complete
	mov	r2, #8
	movt	r3, #:upper16:rmnet_smd_notify_complete
	mov	r7, #4
	mov	r8, #16
	str	r3, [r4, #28]
	ldr	r3, [r5, #100]
	str	r5, [r3, #32]
	ldr	r3, [r5, #100]
	str	r2, [r3, #4]
.L12335:
	ldr	r0, [r6, #24]
	mov	r2, #16
	mov	r1, #208
	mov	r4, r2
	cmp	r0, #0
	beq	.L12330
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L12361
.L12330:
	ldr	r0, [r6, #44]
	mov	r2, #2048
	mov	r1, #208
	cmp	r0, #0
	streq	r8, [r4]
	beq	.L12333
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	beq	.L12380
.L12333:
	cmn	r4, #4096
	add	r2, r5, #108
	add	r0, r4, #8
	bhi	.L12334
	ldr	r1, [r5, #112]
	bl	__list_add
	subs	r7, r7, #1
	bne	.L12335
	mov	r7, #8
	mov	r8, #16
.L12340:
	ldr	r0, [r6, #24]
	mov	r2, #16
	mov	r1, #208
	mov	r4, r2
	cmp	r0, #0
	beq	.L12336
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L12361
.L12336:
	ldr	r0, [r6, #44]
	mov	r2, #2048
	mov	r1, #208
	cmp	r0, #0
	streq	r8, [r4]
	beq	.L12339
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	beq	.L12380
.L12339:
	cmn	r4, #4096
	add	r2, r5, #116
	add	r0, r4, #8
	bhi	.L12334
	ldr	r1, [r5, #120]
	bl	__list_add
	subs	r7, r7, #1
	bne	.L12340
	movw	r10, #:lower16:rmnet_smd_complete_epout
	mov	r8, #8
	movt	r10, #:upper16:rmnet_smd_complete_epout
	mov	r9, #2048
.L12344:
	ldr	r7, [r5, #88]
	mov	r1, #208
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L12361
	str	r9, [r4, #4]
	ldr	r0, [r6, #44]
	mov	r3, #16
	mov	r2, #2048
	mov	r1, #208
	cmp	r0, #0
	streq	r3, [r4]
	beq	.L12343
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	bne	.L12343
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mvn	r4, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12334
.L12361:
	mvn	r4, #11
.L12334:
	mov	r0, r5
	bl	rmnet_smd_free_buf
	mov	r3, #0
	str	r3, [r5, #88]
	str	r3, [r5, #92]
	str	r3, [r5, #96]
.L12322:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12380:
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L12334
.L12381:
	ldrb	r1, [r7, #2150]	@ zero_extendqisi2
	ldrb	r2, [r7, #2162]	@ zero_extendqisi2
	ldrb	r3, [r7, #2174]	@ zero_extendqisi2
	strb	r1, [r7, #2186]
	strb	r2, [r7, #2198]
	strb	r3, [r7, #2210]
	b	.L12326
.L12343:
	cmn	r4, #4096
	add	r2, r5, #148
	add	r0, r4, #36
	bhi	.L12334
	str	r9, [r4, #4]
	str	r10, [r4, #28]
	str	r5, [r4, #32]
	ldr	r1, [r5, #152]
	bl	__list_add
	subs	r8, r8, #1
	bne	.L12344
	movw	r9, #:lower16:rmnet_smd_complete_epin
	mov	r4, #8
	movt	r9, #:upper16:rmnet_smd_complete_epin
	mov	r10, #2048
.L12348:
	ldr	r8, [r5, #92]
	mov	r1, #208
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	beq	.L12361
	str	r10, [r7, #4]
	ldr	r0, [r6, #44]
	mov	r3, #16
	mov	r2, #2048
	mov	r1, #208
	cmp	r0, #0
	streq	r3, [r7]
	beq	.L12347
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r7]
	bne	.L12347
	ldr	r3, [r8, #8]
	mov	r1, r7
	mov	r0, r8
	mvn	r4, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12334
.L12347:
	cmn	r7, #4096
	add	r2, r5, #140
	add	r0, r7, #36
	bhi	.L12382
	str	r9, [r7, #28]
	str	r5, [r7, #32]
	ldr	r1, [r5, #144]
	bl	__list_add
	subs	r4, r4, #1
	bne	.L12348
	b	.L12322
.L12325:
	mvn	r4, #18
	b	.L12322
.L12382:
	mov	r4, r7
	b	.L12334
.L12384:
	.align	2
.L12383:
	.word	.LANCHOR0+2148
	.word	.LANCHOR0+2172
	.fnend
	.size	rmnet_smd_bind, .-rmnet_smd_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_bind, %function
rmnet_sdio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0, #24]
	str	r6, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L12392
	movw	r7, #:lower16:.LANCHOR0
	mov	r5, r0
	mov	r4, r1
	add	r2, r3, #12
	ldr	r1, .L12412
	add	r0, r3, #1
	movt	r7, #:upper16:.LANCHOR0
	str	r4, [r5, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r5, #44]
	strb	r3, [r4, #104]
	strb	r3, [r7, #2222]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12388
	ldr	r1, .L12412+4
	mov	r2, #0
	str	r6, [r0]
	str	r0, [r4, #92]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12388
	mov	r2, #0
	add	r1, r7, #2256
	str	r6, [r0]
	str	r0, [r4, #88]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12388
	str	r6, [r0]
	str	r0, [r4, #96]
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L12389
	ldrb	r1, [r7, #2234]	@ zero_extendqisi2
	ldrb	r2, [r7, #2246]	@ zero_extendqisi2
	ldrb	r3, [r7, #2258]	@ zero_extendqisi2
	strb	r1, [r7, #2270]
	strb	r2, [r7, #2282]
	strb	r3, [r7, #2294]
.L12389:
	mov	r2, #0
	add	r1, r4, #252
	ldr	r0, [r4, #200]
	bl	queue_delayed_work
	mov	r0, #0
	b	.L12385
.L12388:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L12392
	mov	r2, #0
	mvn	r0, #18
	str	r2, [r3]
.L12385:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12392:
	mvn	r0, #18
	b	.L12385
.L12413:
	.align	2
.L12412:
	.word	.LANCHOR0+2232
	.word	.LANCHOR0+2244
	.fnend
	.size	rmnet_sdio_bind, .-rmnet_sdio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_bind, %function
audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR0
	movw	ip, #2324
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR0
	mov	r3, #2
	strd	r8, [sp, #16]
	mov	r6, r0
	mov	r5, r1
	strd	r10, [sp, #24]
	mov	r1, #0
	str	lr, [sp, #32]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	lr, .L12436
	movw	r0, #44100
	strh	r0, [r4, ip]	@ movhi
	ldr	ip, [r6, #24]
	cmp	r2, #15
	str	r0, [sp, #4]
	strb	r1, [lr, #2]
	strb	r3, [r4, #2311]
	strb	r3, [r4, #2320]
	bhi	.L12415
	add	r3, r2, #1
	add	r1, r2, #12
	uxtb	r3, r3
	str	r5, [r6, r1, lsl #2]
	cmp	r3, #16
	strb	r2, [r4, #2330]
	strb	r3, [r6, #44]
	beq	.L12415
	add	r0, r2, #2
	add	r2, r3, #12
	add	r1, lr, #40
	str	r5, [r6, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r6, #44]
	strb	r3, [r4, #2342]
	strb	r3, [r4, #2354]
	ldr	r0, [ip]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	beq	.L12415
	str	r8, [r5, #104]
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:audio_data_complete
	str	r5, [r8]
	ldr	r3, [r6, #24]
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:audio_data_complete
	mov	r7, #4
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	ldrbhi	r3, [r4, #2366]	@ zero_extendqisi2
	strbhi	r3, [r4, #2378]
	b	.L12421
.L12435:
	ldr	r0, [r10, #32]
	cmp	r0, #0
	streq	r3, [r4]
	beq	.L12419
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	beq	.L12433
.L12419:
	mov	r3, #256
	add	r6, r5, #108
	mov	r0, r6
	str	r3, [r4, #4]
	str	r9, [r4, #28]
	str	r5, [r4, #32]
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	add	r2, r5, #96
	ldr	r1, [r5, #100]
	add	r0, r4, #36
	bl	__list_add
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	subs	r7, r7, #1
	beq	.L12434
.L12421:
	ldr	r3, [r8, #8]
	mov	r1, #208
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r2, #256
	mov	r1, #208
	mov	r3, #16
	bne	.L12435
.L12417:
	mvn	r0, #11
.L12414:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12433:
	ldr	r3, [r8, #8]
	mov	r1, r4
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12417
.L12415:
.L12420:
	mvn	r0, #18
	b	.L12414
.L12434:
	mov	r0, r7
	b	.L12414
.L12437:
	.align	2
.L12436:
	.word	.LANCHOR0+2324
	.fnend
	.size	audio_bind, .-audio_bind
	.section	.rodata.str1.4
	.align	2
.LC975:
	.ascii	"dual\000"
	.align	2
.LC976:
	.ascii	"full\000"
	.align	2
.LC977:
	.ascii	"CDC Ethernet: %s speed IN/%s OUT/%s NOTIFY/%s\012\000"
	.align	2
.LC978:
	.ascii	"<3>%s: %s: can't bind, err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_bind, %function
ecm_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r7, [r0, #24]
	cmp	r2, #15
	bhi	.L12439
	add	r3, r2, #1
	add	r1, r2, #12
	movw	r5, #:lower16:.LANCHOR0
	mov	r6, r0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r3, [r0, #44]
	strb	r2, [r4, #120]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	strb	r2, [r5, #2390]
	strb	r2, [r5, #2403]
	cmp	r3, #15
	bhi	.L12439
	add	r1, r3, #12
	add	r0, r3, #1
	mov	r2, #0
	str	r4, [r6, r1, lsl #2]
	add	r1, r5, #2432
	strb	r0, [r6, #44]
	strb	r3, [r4, #121]
	strb	r3, [r5, #2404]
	strb	r3, [r5, #2410]
	strb	r3, [r5, #2422]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12439
	ldr	r1, .L12505
	mov	r2, #0
	str	r0, [r4, #88]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12439
	ldr	r1, .L12505+4
	mov	r2, #0
	str	r0, [r4, #92]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12439
	str	r3, [r4, #144]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #148]
	beq	.L12443
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L12442
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L12442:
	str	r0, [r8]
	ldr	r3, [r4, #148]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L12443
	str	r4, [r3, #32]
	ldr	r2, [r4, #148]
	movw	r3, #:lower16:ecm_qc_notify_complete
	movt	r3, #:upper16:ecm_qc_notify_complete
	ldr	r0, .L12505+8
	str	r3, [r2, #28]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12443
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12504
.L12444:
	movw	r2, #:lower16:.LANCHOR4
	movw	r3, #2898
	movt	r2, #:upper16:.LANCHOR4
	movw	r1, #:lower16:ecm_qc_open
	ldrh	r0, [r2, r3]
	movw	r3, #:lower16:ecm_qc_close
	movt	r1, #:upper16:ecm_qc_open
	movt	r3, #:upper16:ecm_qc_close
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	tst	r0, #4
	ubfx	r5, r0, #2, #1
	bne	.L12447
.L12438:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12504:
	ldrb	r1, [r5, #2434]	@ zero_extendqisi2
	ldrb	r2, [r5, #2446]	@ zero_extendqisi2
	ldrb	r3, [r5, #2458]	@ zero_extendqisi2
	ldr	r0, .L12505+12
	strb	r1, [r5, #2510]
	strb	r2, [r5, #2522]
	strb	r3, [r5, #2534]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12445
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12444
	ldrb	r3, [r5, #2458]	@ zero_extendqisi2
	ldrb	r1, [r5, #2434]	@ zero_extendqisi2
	ldrb	r2, [r5, #2446]	@ zero_extendqisi2
	ldr	r0, .L12505+16
	strb	r1, [r5, #2586]
	strb	r2, [r5, #2598]
	strb	r3, [r5, #2610]
	bl	usb_copy_descriptors
	ldr	r3, [r4, #8]
	str	r0, [r4, #12]
	cmp	r3, #0
	bne	.L12444
.L12445:
	ldr	r0, [r4, #12]
	mvn	r5, #11
	cmp	r0, #0
	beq	.L12451
.L12457:
	bl	kfree
.L12450:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12451
	bl	kfree
.L12451:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12452
	bl	kfree
.L12452:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	beq	.L12453
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #144]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L12453:
	ldr	r3, [r4, #144]
	movw	r0, #:lower16:.LC978
	ldr	r1, .L12505+20
	movt	r0, #:upper16:.LC978
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk
	b	.L12438
.L12447:
	ldr	r5, [r6, #24]
	add	r0, r2, #2880
	movw	ip, #:lower16:.LC976
	ldr	r6, [r4, #92]
	movt	ip, #:upper16:.LC976
	movw	r3, #:lower16:.LC975
	ldr	lr, [r4, #144]
	movt	r3, #:upper16:.LC975
	ldr	r1, [r7]
	ldr	r5, [r5]
	ldr	r2, [lr, #4]
	ldr	lr, [r4, #88]
	add	r1, r1, #32
	ldr	r5, [r5, #20]
	str	r2, [sp, #8]
	ldr	r4, [r6, #4]
	movw	r2, #:lower16:.LC977
	movt	r2, #:upper16:.LC977
	cmp	r5, #2
	mov	r5, #0
	movls	r3, ip
	str	r4, [sp, #4]
	ldr	ip, [lr, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L12438
.L12439:
	mvn	r5, #18
.L12441:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L12457
	b	.L12450
.L12443:
	mvn	r5, #11
	b	.L12441
.L12506:
	.align	2
.L12505:
	.word	.LANCHOR0+2444
	.word	.LANCHOR0+2456
	.word	.LANCHOR0+2468
	.word	.LANCHOR0+2544
	.word	.LANCHOR0+2620
	.word	.LANCHOR5-1152
	.fnend
	.size	ecm_qc_bind, .-ecm_qc_bind
	.section	.rodata.str1.4
	.align	2
.LC979:
	.ascii	"<3>%s: usb epin autoconfig failed\012\000"
	.align	2
.LC980:
	.ascii	"<6>%s: usb epin autoconfig succeeded\012\000"
	.align	2
.LC981:
	.ascii	"<3>%s: usb epout autoconfig failed\012\000"
	.align	2
.LC982:
	.ascii	"<6>%s: usb epout autoconfig succeeded\012\000"
	.align	2
.LC983:
	.ascii	"<3>%s: usb notify ep autoconfig failed\012\000"
	.align	2
.LC984:
	.ascii	"<6>%s: usb notify ep autoconfig succeeded\012\000"
	.align	2
.LC985:
	.ascii	"<6>%s: allocated notify ep request & request buffer"
	.ascii	"\012\000"
	.align	2
.LC986:
	.ascii	"<6>%s: failed to allocate notify request\012\000"
	.align	2
.LC987:
	.ascii	"%s: MBIM in configuration %d\000"
	.align	2
.LC988:
	.ascii	"<6>%s: mbim(%d): %s speed IN/%s OUT/%s NOTIFY/%s\012"
	.ascii	"\000"
	.align	2
.LC989:
	.ascii	"<3>%s: %s failed to bind, err %d\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_bind, %function
mbim_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	ldr	fp, .L12570
	mov	r4, r1
	.pad #28
	sub	sp, sp, #28
	ldr	r10, [r0, #24]
	movw	r0, #:lower16:.LC409
	movt	r0, #:upper16:.LC409
	mov	r1, fp
	add	r9, fp, #4
	bl	printk
	str	r10, [r4, #84]
	ldrb	r2, [r5, #44]	@ zero_extendqisi2
	cmp	r2, #15
	bhi	.L12508
	add	r3, r2, #1
	add	r1, r2, #12
	movw	r7, #:lower16:.LANCHOR0
	str	r4, [r5, r1, lsl #2]
	movt	r7, #:upper16:.LANCHOR0
	strb	r3, [r5, #44]
	mov	r6, r7
	strb	r2, [r4, #196]
	ldrb	r3, [r5, #44]	@ zero_extendqisi2
	strb	r2, [r7, #2674]
	strb	r2, [r7, #2682]
	strb	r2, [r7, #2695]
	cmp	r3, #15
	bhi	.L12508
	add	r2, r3, #12
	add	r0, r3, #1
	ldr	r1, .L12570+4
	mov	r8, #0
	str	r4, [r5, r2, lsl #2]
	mov	r2, r8
	strb	r0, [r5, #44]
	str	r10, [r4, #140]
	str	r4, [r4, #144]
	strb	r3, [r4, #197]
	strb	r8, [r4, #198]
	strb	r3, [r7, #2696]
	strb	r3, [r7, #2702]
	strb	r3, [r7, #2714]
	ldr	r0, [r10]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	bne	.L12509
	movw	r0, #:lower16:.LC979
	mov	r1, fp
	movt	r0, #:upper16:.LC979
	mvn	r5, #18
	bl	printk
	b	.L12510
.L12509:
	movw	r0, #:lower16:.LC980
	mov	r1, fp
	str	r3, [sp, #20]
	movt	r0, #:upper16:.LC980
	bl	printk
	ldr	r3, [sp, #20]
	add	r1, r7, #2736
	mov	r2, r8
	str	r10, [r3]
	str	r3, [r4, #148]
	ldr	r0, [r10]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	bne	.L12511
	movw	r0, #:lower16:.LC981
	mov	r1, fp
	movt	r0, #:upper16:.LC981
	mvn	r5, #18
	bl	printk
	b	.L12510
.L12511:
	movw	r0, #:lower16:.LC982
	mov	r1, fp
	movt	r0, #:upper16:.LC982
	bl	printk
	mov	r2, r8
	ldr	r1, .L12570+8
	str	r10, [r7]
	str	r7, [r4, #152]
	ldr	r0, [r10]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	bne	.L12512
	movw	r0, #:lower16:.LC983
	mov	r1, fp
	movt	r0, #:upper16:.LC983
	mvn	r5, #18
	bl	printk
	b	.L12510
.L12512:
	movw	r0, #:lower16:.LC984
	mov	r1, fp
	movt	r0, #:upper16:.LC984
	bl	printk
	str	r8, [r4, #156]
	ldr	r3, [r8, #8]
	mov	r1, #208
	mov	r0, r8
	str	r10, [r8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	streq	r7, [r4, #160]
	beq	.L12514
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r7]
	beq	.L12516
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r10, r0
	str	r0, [r7]
	bne	.L12516
	ldr	r3, [r8, #8]
	mov	r1, r7
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r4, #160]
	b	.L12514
.L12516:
	mov	r3, #16
	movw	r0, #:lower16:.LC985
	sub	r1, r9, #4
	movt	r0, #:upper16:.LC985
	str	r3, [r7, #4]
	str	r7, [r4, #160]
	ldr	r7, .L12570+12
	bl	printk
	ldr	r2, [r4, #160]
	movw	r3, #:lower16:mbim_notify_complete
	movt	r3, #:upper16:mbim_notify_complete
	add	r0, r7, #12
	str	r4, [r2, #32]
	ldr	r2, [r4, #160]
	str	r3, [r2, #28]
	ldr	r3, [r4, #132]
	cmp	r3, #7
	moveq	r3, #2048
	movne	r3, #4064
	strh	r3, [r7, #9]	@ unaligned
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L12569
	b	.L12523
.L12514:
	movw	r0, #:lower16:.LC986
	sub	r1, r9, #4
	movt	r0, #:upper16:.LC986
	mvn	r5, #11
	bl	printk
	b	.L12510
.L12569:
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L12524
	ldrb	r1, [r6, #2726]	@ zero_extendqisi2
	add	r0, r7, #96
	ldrb	r2, [r6, #2738]	@ zero_extendqisi2
	ldrb	r3, [r6, #2750]	@ zero_extendqisi2
	strb	r1, [r6, #2822]
	strb	r2, [r6, #2834]
	strb	r3, [r6, #2846]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L12524
.L12523:
	mvn	r5, #11
	b	.L12510
.L12524:
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12522
	ldrb	r1, [r6, #2726]	@ zero_extendqisi2
	ldrb	r2, [r6, #2738]	@ zero_extendqisi2
	ldrb	r3, [r6, #2750]	@ zero_extendqisi2
	ldr	r0, .L12570+16
	strb	r1, [r6, #2906]
	strb	r2, [r6, #2918]
	strb	r3, [r6, #2930]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L12523
.L12522:
	ldrb	r3, [r5, #20]	@ zero_extendqisi2
	sub	r2, r3, #2
	cmp	r2, #2
	bhi	.L12526
	movw	r2, #:lower16:.LANCHOR4
	movw	r1, #2922
	movt	r2, #:upper16:.LANCHOR4
	ldrh	r2, [r2, r1]
	tst	r2, #4
	beq	.L12527
	movw	r1, #:lower16:.LC987
	ldr	r0, .L12570+20
	sub	r2, r9, #4
	movt	r1, #:upper16:.LC987
	bl	__dynamic_pr_debug
.L12527:
	ldrb	r3, [r5, #20]	@ zero_extendqisi2
	add	r3, r3, #48
	strb	r3, [r6, #234]
.L12526:
	ldr	lr, [r5, #24]
	movw	ip, #:lower16:.LC976
	movw	r3, #:lower16:.LC975
	ldr	r0, [r4, #152]
	movt	ip, #:upper16:.LC976
	movt	r3, #:upper16:.LC975
	ldr	r2, [r4, #156]
	sub	r1, r9, #4
	ldr	r5, [lr]
	ldr	lr, [r4, #148]
	ldr	r6, [r2, #4]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	ldr	r5, [r5, #20]
	str	r6, [sp, #8]
	ldr	r4, [r0, #4]
	movw	r0, #:lower16:.LC988
	movt	r0, #:upper16:.LC988
	cmp	r5, #2
	mov	r5, #0
	movls	r3, ip
	str	r4, [sp, #4]
	ldr	ip, [lr, #4]
	str	ip, [sp]
	bl	printk
	b	.L12507
.L12508:
	mvn	r5, #18
.L12510:
	movw	r0, #:lower16:.LC989
	sub	r1, r9, #4
	ldr	r2, [r4]
	movt	r0, #:upper16:.LC989
	mov	r3, r5
	bl	printk
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12530
	bl	kfree
.L12530:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12531
	bl	kfree
.L12531:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12532
	bl	kfree
.L12532:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L12533
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L12533:
	ldr	r3, [r4, #156]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #152]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #148]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L12507:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L12571:
	.align	2
.L12570:
	.word	.LANCHOR5-1140
	.word	.LANCHOR0+2724
	.word	.LANCHOR0+2748
	.word	.LANCHOR0+2760
	.word	.LANCHOR0+2940
	.word	.LANCHOR4+2904
	.fnend
	.size	mbim_bind, .-mbim_bind
	.section	.rodata.str1.4
	.align	2
.LC990:
	.ascii	"super\000"
	.align	2
.LC991:
	.ascii	"%s: can't bind, err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_bind, %function
ecm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L12573
	add	r1, r3, #12
	add	r2, r3, #1
	mov	r6, r0
	movw	r5, #:lower16:.LANCHOR0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #3002]
	strb	r3, [r5, #3010]
	strb	r3, [r5, #3023]
	cmp	r0, #15
	bhi	.L12573
	add	r2, r0, #12
	add	r3, r0, #1
	ldr	r1, .L12616
	str	r4, [r6, r2, lsl #2]
	mov	r2, #0
	strb	r3, [r6, #44]
	strb	r0, [r4, #149]
	strb	r0, [r5, #3024]
	strb	r0, [r5, #3030]
	strb	r0, [r5, #3042]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12573
	ldr	r1, .L12616+4
	mov	r2, #0
	str	r0, [r4, #88]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12573
	ldr	r1, .L12616+8
	mov	r2, #0
	str	r0, [r4, #92]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12573
	str	r3, [r4, #164]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #168]
	beq	.L12589
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L12580
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L12580:
	str	r0, [r8]
	ldr	r3, [r4, #168]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L12591
	str	r4, [r3, #32]
	ldr	r0, [r4, #168]
	movw	r3, #:lower16:ecm_notify_complete
	movt	r3, #:upper16:ecm_notify_complete
	ldrb	r1, [r5, #3054]	@ zero_extendqisi2
	ldrb	r2, [r5, #3066]	@ zero_extendqisi2
	str	r3, [r0, #28]
	ldr	r0, [r4, #20]
	ldrb	r3, [r5, #3078]	@ zero_extendqisi2
	strb	r1, [r5, #3090]
	strb	r2, [r5, #3102]
	strb	r1, [r5, #3126]
	ldr	r1, [r0, #24]
	ldr	r0, .L12616+12
	strb	r3, [r5, #3114]
	strb	r2, [r5, #3138]
	strb	r3, [r5, #3150]
	ldr	r5, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12583
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L12615
.L12582:
	movw	r3, #:lower16:.LANCHOR4
	movw	r1, #2946
	movt	r3, #:upper16:.LANCHOR4
	movw	r2, #:lower16:ecm_open
	ldrh	r5, [r3, r1]
	movw	r3, #:lower16:ecm_close
	movt	r2, #:upper16:ecm_open
	movt	r3, #:upper16:ecm_close
	strd	r2, [r4, #136]
	tst	r5, #4
	ubfx	r5, r5, #2, #1
	beq	.L12572
	ldr	r3, [r6, #24]
	ldr	r1, [r7]
	ldr	r3, [r3]
	add	r1, r1, #32
	ldr	r2, [r3, #20]
	cmp	r2, #4
	movwhi	r3, #:lower16:.LC990
	movthi	r3, #:upper16:.LC990
	bhi	.L12585
	movw	r0, #:lower16:.LC976
	movw	r3, #:lower16:.LC975
	movt	r0, #:upper16:.LC976
	cmp	r2, #2
	movt	r3, #:upper16:.LC975
	movls	r3, r0
.L12585:
	ldr	ip, [r4, #88]
	movw	r2, #:lower16:.LC977
	mov	r5, #0
	ldr	r0, [r4, #164]
	movt	r2, #:upper16:.LC977
	ldr	lr, [r4, #92]
	ldr	r4, [r0, #4]
	ldr	r0, .L12616+16
	str	r4, [sp, #8]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L12572
.L12573:
	ldr	r3, [r4, #168]
	mvn	r5, #18
.L12575:
	cmp	r3, #0
	beq	.L12579
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L12579:
	ldr	r3, [r4, #164]
	movw	r1, #:lower16:.LC991
	movt	r1, #:upper16:.LC991
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L12572:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12615:
	ldr	r0, .L12616+20
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12583
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L12582
	ldr	r0, .L12616+24
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L12582
.L12583:
	mov	r0, r4
	mvn	r5, #11
	bl	usb_free_all_descriptors
	ldr	r3, [r4, #168]
	b	.L12575
.L12591:
	mvn	r5, #11
	b	.L12575
.L12589:
	mvn	r5, #11
	b	.L12579
.L12617:
	.align	2
.L12616:
	.word	.LANCHOR0+3052
	.word	.LANCHOR0+3064
	.word	.LANCHOR0+3076
	.word	.LANCHOR0+3160
	.word	.LANCHOR4+2928
	.word	.LANCHOR0+3204
	.word	.LANCHOR0+3248
	.fnend
	.size	ecm_bind, .-ecm_bind
	.section	.rodata.str1.4
	.align	2
.LC992:
	.ascii	"%s: Return %d\000"
	.align	2
.LC993:
	.ascii	"<3>%s: %s: failed to allocate desc interface\000"
	.align	2
.LC994:
	.ascii	"<3>%s: %s: failed to allocate alt interface\000"
	.align	2
.LC995:
	.ascii	"<3>%s: %s: failed to autoconfig in endpoint\000"
	.align	2
.LC996:
	.ascii	"<3>%s: %s: failed to autoconfig out endpoint\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_bind, %function
f_audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR4
	mov	r6, r0
	movt	r7, #:upper16:.LANCHOR4
	strd	r8, [sp, #16]
	movw	r9, #2970
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r7, r9]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r1, #136]
	ldr	r8, [r0, #24]
	tst	r2, #4
	movweq	r4, #:lower16:.LANCHOR0
	uxtbeq	r1, r3
	movteq	r4, #:upper16:.LANCHOR0
	strbeq	r1, [r4, #3307]
	bne	.L12649
.L12620:
	movw	r9, #2994
	ldr	r3, [r5, #164]
	strb	r1, [r4, #3316]
	ldrh	r2, [r7, r9]
	tst	r2, #4
	uxtbeq	r1, r3
	strbeq	r1, [r4, #3331]
	bne	.L12650
.L12622:
	movw	r2, #3018
	strb	r1, [r4, #3340]
	ldr	r3, [r5, #140]
	ldrh	r2, [r7, r2]
	tst	r2, #4
	bne	.L12651
.L12623:
	movw	r2, #3042
	ldr	r1, .L12657
	ubfx	r0, r3, #16, #8
	ldrh	r2, [r7, r2]
	movw	ip, #3320
	str	r3, [sp, #4]
	strh	r3, [r4, ip]	@ movhi
	ldr	r3, [r5, #168]
	strb	r0, [r1, #2]
	tst	r2, #4
	bne	.L12652
.L12624:
	ldrb	r2, [r6, #44]	@ zero_extendqisi2
	ubfx	r1, r3, #16, #8
	str	r3, [sp, #4]
	ldr	r7, .L12657+4
	cmp	r2, #15
	strh	r3, [r7]	@ movhi
	strb	r1, [r4, #3346]
	bhi	.L12653
	add	r3, r2, #1
	add	r1, r2, #12
	uxtb	r3, r3
	str	r5, [r6, r1, lsl #2]
	cmp	r3, #16
	strb	r2, [r4, #3350]
	strb	r3, [r6, #44]
	beq	.L12628
	add	r1, r2, #2
	mov	r9, #0
	add	r2, r3, #12
	str	r5, [r6, r2, lsl #2]
	strb	r1, [r6, #44]
	strb	r9, [r5, #248]
	ldrb	r0, [r6, #44]	@ zero_extendqisi2
	strb	r3, [r4, #16]
	strb	r3, [r4, #3362]
	strb	r3, [r4, #3374]
	cmp	r0, #15
	bhi	.L12628
	add	r2, r0, #12
	add	r3, r0, #1
	add	r10, r7, #64
	mov	r1, r10
	str	r5, [r6, r2, lsl #2]
	mov	r2, r9
	strb	r0, [r4, #17]
	strb	r3, [r6, #44]
	strb	r9, [r5, #249]
	strb	r0, [r4, #3386]
	strb	r0, [r4, #3398]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12654
	add	fp, r7, #76
	mov	r2, r9
	str	r0, [r5, #176]
	mov	r1, fp
	str	r8, [r0]
	str	r10, [r0, #28]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L12655
	str	r6, [r5, #172]
	add	r0, r7, #152
	str	r8, [r6]
	ldrb	r2, [r4, #3410]	@ zero_extendqisi2
	str	fp, [r6, #28]
	ldr	r1, [r5, #20]
	ldrb	r3, [r4, #3422]	@ zero_extendqisi2
	and	r2, r2, #127
	ldr	r1, [r1, #24]
	and	r3, r3, #127
	strb	r2, [r4, #3448]
	strb	r3, [r4, #3480]
	ldr	r4, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #16]
	beq	.L12631
	ldr	r3, [r4, #20]
	cmp	r3, #2
	bhi	.L12656
.L12632:
	mov	r0, #0
.L12618:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12656:
	add	r0, r7, #152
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #8]
	ldreq	r0, [r5, #16]
	bne	.L12632
.L12631:
	bl	kfree
	ldr	r0, [r5, #8]
	bl	kfree
	ldr	r0, [r5, #12]
	bl	kfree
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r6]
	b	.L12618
.L12652:
	movw	r1, #:lower16:.LC992
	ldr	r2, .L12657+8
	ldr	r0, .L12657+12
	movt	r1, #:upper16:.LC992
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #168]
	b	.L12624
.L12649:
	ldr	r10, .L12657+16
	movw	r1, #:lower16:.LC992
	movw	r4, #:lower16:.LANCHOR0
	movt	r1, #:upper16:.LC992
	ldr	r0, .L12657+20
	movt	r4, #:upper16:.LANCHOR0
	mov	r2, r10
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #136]
	ldrh	r2, [r7, r9]
	uxtb	r1, r3
	tst	r2, #4
	strb	r1, [r4, #3307]
	beq	.L12620
	movw	r1, #:lower16:.LC992
	ldr	r0, .L12657+20
	mov	r2, r10
	movt	r1, #:upper16:.LC992
	bl	__dynamic_pr_debug
	ldrb	r1, [r5, #136]	@ zero_extendqisi2
	b	.L12620
.L12650:
	ldr	r10, .L12657+24
	movw	r1, #:lower16:.LC992
	movt	r1, #:upper16:.LC992
	ldr	r0, .L12657+28
	mov	r2, r10
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #164]
	ldrh	r2, [r7, r9]
	uxtb	r1, r3
	tst	r2, #4
	strb	r1, [r4, #3331]
	beq	.L12622
	movw	r1, #:lower16:.LC992
	ldr	r0, .L12657+28
	mov	r2, r10
	movt	r1, #:upper16:.LC992
	bl	__dynamic_pr_debug
	ldrb	r1, [r5, #164]	@ zero_extendqisi2
	b	.L12622
.L12651:
	movw	r1, #:lower16:.LC992
	ldr	r2, .L12657+32
	ldr	r0, .L12657+36
	movt	r1, #:upper16:.LC992
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #140]
	b	.L12623
.L12628:
	ldr	r2, .L12657+40
	movw	r0, #:lower16:.LC994
	movt	r0, #:upper16:.LC994
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L12618
.L12655:
	ldr	r2, .L12657+40
	movw	r0, #:lower16:.LC996
	movt	r0, #:upper16:.LC996
	mov	r1, r2
	bl	printk
	mvn	r0, #11
	b	.L12618
.L12653:
	ldr	r2, .L12657+40
	movw	r0, #:lower16:.LC993
	movt	r0, #:upper16:.LC993
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L12618
.L12654:
	ldr	r2, .L12657+40
	movw	r0, #:lower16:.LC995
	movt	r0, #:upper16:.LC995
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L12618
.L12658:
	.align	2
.L12657:
	.word	.LANCHOR0+3320
	.word	.LANCHOR0+3344
	.word	.LANCHOR5-1036
	.word	.LANCHOR4+3024
	.word	.LANCHOR5-1128
	.word	.LANCHOR4+2952
	.word	.LANCHOR5-1096
	.word	.LANCHOR4+2976
	.word	.LANCHOR5-1064
	.word	.LANCHOR4+3000
	.word	.LANCHOR5-1008
	.fnend
	.size	f_audio_bind, .-f_audio_bind
	.section	.rodata.str1.4
	.align	2
.LC997:
	.ascii	"CDC Network: %s speed IN/%s OUT/%s NOTIFY/%s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_bind, %function
ncm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L12660
	add	r1, r3, #12
	add	r2, r3, #1
	mov	r6, r0
	movw	r5, #:lower16:.LANCHOR0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #3574]
	strb	r3, [r5, #3582]
	strb	r3, [r5, #3595]
	cmp	r0, #15
	bhi	.L12660
	add	r2, r0, #12
	add	r3, r0, #1
	ldr	r1, .L12708
	str	r4, [r6, r2, lsl #2]
	mov	r2, #0
	strb	r3, [r6, #44]
	strb	r0, [r4, #149]
	strb	r0, [r5, #3596]
	strb	r0, [r5, #3602]
	strb	r0, [r5, #3614]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12660
	ldr	r1, .L12708+4
	mov	r2, #0
	str	r0, [r4, #88]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12660
	mov	r2, #0
	add	r1, r5, #3648
	str	r0, [r4, #92]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12660
	str	r3, [r4, #164]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #168]
	beq	.L12664
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L12663
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L12663:
	str	r0, [r8]
	ldr	r3, [r4, #168]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L12664
	str	r4, [r3, #32]
	ldr	r2, [r4, #168]
	movw	r3, #:lower16:ncm_notify_complete
	movt	r3, #:upper16:ncm_notify_complete
	ldrb	r0, [r5, #3626]	@ zero_extendqisi2
	ldrb	r1, [r5, #3638]	@ zero_extendqisi2
	str	r3, [r2, #28]
	ldr	r3, [r4, #20]
	ldrb	r2, [r5, #3650]	@ zero_extendqisi2
	strb	r0, [r5, #3662]
	ldr	r0, .L12708+8
	strb	r1, [r5, #3674]
	ldr	r3, [r3, #24]
	strb	r2, [r5, #3686]
	ldr	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12668
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L12707
.L12666:
	movw	r3, #:lower16:.LANCHOR4
	movw	r1, #3066
	movt	r3, #:upper16:.LANCHOR4
	movw	r2, #:lower16:ncm_open
	ldrh	r5, [r3, r1]
	movw	r3, #:lower16:ncm_close
	movt	r2, #:upper16:ncm_open
	movt	r3, #:upper16:ncm_close
	strd	r2, [r4, #136]
	tst	r5, #4
	ubfx	r5, r5, #2, #1
	beq	.L12659
	ldr	lr, [r6, #24]
	movw	r0, #:lower16:.LC976
	movw	r3, #:lower16:.LC975
	ldr	r2, [r4, #92]
	movt	r0, #:upper16:.LC976
	movt	r3, #:upper16:.LC975
	ldr	ip, [r4, #164]
	ldr	r1, [r7]
	ldr	r5, [lr]
	ldr	lr, [ip, #4]
	ldr	ip, [r4, #88]
	add	r1, r1, #32
	ldr	r4, [r5, #20]
	mov	r5, #0
	str	lr, [sp, #8]
	ldr	lr, [r2, #4]
	movw	r2, #:lower16:.LC997
	movt	r2, #:upper16:.LC997
	cmp	r4, #2
	movls	r3, r0
	ldr	r0, .L12708+12
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L12659
.L12660:
	mvn	r5, #18
.L12662:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	cmp	r3, #0
	beq	.L12672
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L12672:
	ldr	r3, [r4, #164]
	movw	r1, #:lower16:.LC991
	movt	r1, #:upper16:.LC991
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L12659:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12707:
	ldr	r0, .L12708+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L12666
.L12668:
	mov	r0, r4
	bl	usb_free_all_descriptors
	b	.L12666
.L12664:
	mvn	r5, #11
	b	.L12662
.L12709:
	.align	2
.L12708:
	.word	.LANCHOR0+3624
	.word	.LANCHOR0+3636
	.word	.LANCHOR0+3696
	.word	.LANCHOR4+3048
	.word	.LANCHOR0+3744
	.fnend
	.size	ncm_bind, .-ncm_bind
	.section	.rodata.str1.4
	.align	2
.LC998:
	.ascii	"unable to autoconfigure all endpoints\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_bind, %function
fsg_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r6, [r3]
	str	r6, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L12719
	add	r2, r3, #12
	mov	r5, r1
	movw	r4, #:lower16:.LANCHOR0
	add	r1, r3, #1
	movt	r4, #:upper16:.LANCHOR0
	str	r5, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r1, [r0, #44]
	add	r1, r4, #3792
	mov	r0, r6
	strh	r3, [r5, #92]	@ movhi
	strb	r3, [r4, #1978]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12713
	ldr	ip, [r5, #88]
	mov	r0, r6
	mov	r2, #0
	ldr	r1, .L12729
	str	ip, [r3]
	str	r3, [r5, #100]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12713
	ldr	r2, [r5, #88]
	mov	r1, #15
	ldr	r0, .L12729+4
	str	r2, [r3]
	ldr	ip, [r5, #20]
	ldrb	r2, [r4, #3794]	@ zero_extendqisi2
	str	r3, [r5, #104]
	ldrb	r3, [r4, #3806]	@ zero_extendqisi2
	strb	r2, [r4, #3818]
	strb	r1, [r4, #3854]
	strb	r1, [r4, #3874]
	ldr	r1, [ip, #24]
	strb	r3, [r4, #3830]
	strb	r2, [r4, #3842]
	strb	r3, [r4, #3862]
	ldr	r4, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #16]
	beq	.L12715
	ldr	r3, [r4, #20]
	cmp	r3, #2
	bhi	.L12728
.L12716:
	mov	r0, #0
.L12710:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12728:
	ldr	r0, .L12729+8
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #8]
	beq	.L12727
	ldr	r3, [r4, #20]
	cmp	r3, #4
	bls	.L12716
	ldr	r0, .L12729+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #12]
	bne	.L12716
.L12727:
	ldr	r0, [r5, #16]
.L12715:
	bl	kfree
	ldr	r0, [r5, #8]
	bl	kfree
	ldr	r0, [r5, #12]
	bl	kfree
.L12713:
	ldr	r0, [r5, #84]
	movw	r1, #:lower16:.LC998
	movt	r1, #:upper16:.LC998
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #65012
	movt	r0, 65535
	b	.L12710
.L12719:
	mvn	r0, #18
	b	.L12710
.L12730:
	.align	2
.L12729:
	.word	.LANCHOR0+3804
	.word	.LANCHOR0+3880
	.word	.LANCHOR0+3896
	.word	.LANCHOR0+3912
	.fnend
	.size	fsg_bind, .-fsg_bind
	.section	.rodata.str1.4
	.align	2
.LC999:
	.ascii	"<3>%s: unable to allocate ifc id, err:%d\000"
	.align	2
.LC1000:
	.ascii	"<3>%s: usb epnotify autoconfig failed\012\000"
	.align	2
.LC1001:
	.ascii	"%s: CCID %s Speed, IN:%s OUT:%s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_bind, %function
ccid_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r0, #24]
	cmp	r3, #15
	bhi	.L12754
	movw	r6, #:lower16:.LANCHOR0
	add	r2, r3, #1
	ldr	r1, .L12759
	add	ip, r3, #12
	movt	r6, #:upper16:.LANCHOR0
	str	r4, [r0, ip, lsl #2]
	strb	r2, [r0, #44]
	mov	r2, #0
	str	r3, [r4, #88]
	strb	r3, [r6, #3938]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12755
	ldr	r1, .L12759+4
	mov	r2, #0
	str	r0, [r4, #100]
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12756
	ldr	r1, .L12759+8
	mov	r2, #0
	str	r0, [r4, #104]
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12757
	ldr	r0, .L12759+12
	str	r3, [r4, #108]
	str	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12738
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12758
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3090
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L12743
.L12753:
	mov	r0, #0
.L12731:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12758:
	ldrb	r1, [r6, #3962]	@ zero_extendqisi2
	add	r0, r6, #1888
	ldrb	r2, [r6, #3974]	@ zero_extendqisi2
	ldrb	r3, [r6, #3950]	@ zero_extendqisi2
	strb	r1, [r6, #3986]
	strb	r2, [r6, #3998]
	strb	r3, [r6, #4010]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12738
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3090
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L12753
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	movwhi	r3, #:lower16:.LC975
	movthi	r3, #:upper16:.LC975
	bls	.L12743
.L12742:
	ldr	ip, [r4, #104]
	movw	r1, #:lower16:.LC1001
	ldr	lr, [r4, #108]
	movt	r1, #:upper16:.LC1001
	ldr	r2, .L12759+16
	ldr	r0, .L12759+20
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L12753
.L12743:
	movw	r3, #:lower16:.LC976
	movt	r3, #:upper16:.LC976
	b	.L12742
.L12757:
	movw	r0, #:lower16:.LC981
	ldr	r1, .L12759+16
	movt	r0, #:upper16:.LC981
	bl	printk
.L12738:
	ldr	r2, [r4, #108]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #108]
.L12736:
	ldr	r2, [r4, #104]
	mov	r3, #0
	mvn	r0, #18
	str	r3, [r2]
	str	r3, [r4, #104]
	b	.L12731
.L12754:
	mvn	r2, #18
	movw	r0, #:lower16:.LC999
	ldr	r1, .L12759+16
	movt	r0, #:upper16:.LC999
	str	r2, [r4, #88]
	bl	printk
	ldr	r0, [r4, #88]
	b	.L12731
.L12756:
	movw	r0, #:lower16:.LC979
	ldr	r1, .L12759+16
	movt	r0, #:upper16:.LC979
	bl	printk
	b	.L12736
.L12755:
	movw	r0, #:lower16:.LC1000
	ldr	r1, .L12759+16
	movt	r0, #:upper16:.LC1000
	bl	printk
	mvn	r0, #18
	b	.L12731
.L12760:
	.align	2
.L12759:
	.word	.LANCHOR0+3948
	.word	.LANCHOR0+3960
	.word	.LANCHOR0+3972
	.word	.LANCHOR0+1864
	.word	.LANCHOR5-992
	.word	.LANCHOR4+3072
	.fnend
	.size	ccid_function_bind, .-ccid_function_bind
	.section	.rodata.str1.4
	.align	2
.LC1002:
	.ascii	"qdss_bind\012\000"
	.align	2
.LC1003:
	.ascii	"<3>qdss_bind: full-speed is not supported\012\000"
	.align	2
.LC1004:
	.ascii	"<3>interface allocation error\012\000"
	.align	2
.LC1005:
	.ascii	"<3>ep_autoconfig error\012\000"
	.align	2
.LC1006:
	.ascii	"<3>usb_copy_descriptors error\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_bind, %function
qdss_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3114
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r5, r0
	str	r8, [sp, #16]
	mov	r4, r1
	str	lr, [sp, #20]
	ldrh	r2, [r3, r2]
	ldr	r3, [r0, #24]
	tst	r2, #4
	ldr	r7, [r3]
	bne	.L12812
.L12762:
	ldr	r3, [r7, #20]
	cmp	r3, #2
	bls	.L12813
	ldrb	r2, [r5, #44]	@ zero_extendqisi2
	cmp	r2, #15
	bhi	.L12766
	add	r3, r2, #1
	add	r1, r2, #12
	movw	r6, #:lower16:.LANCHOR0
	str	r4, [r5, r1, lsl #2]
	movt	r6, #:upper16:.LANCHOR0
	strb	r3, [r5, #44]
	strb	r2, [r4, #89]
	ldrb	r3, [r5, #44]	@ zero_extendqisi2
	strb	r2, [r6, #4022]
	cmp	r3, #15
	bhi	.L12766
	ldr	r2, .L12816
	add	r0, r3, #12
	add	r1, r3, #1
	str	r4, [r5, r0, lsl #2]
	mov	r0, r7
	strb	r1, [r5, #44]
	add	r1, r2, #8
	strb	r3, [r4, #88]
	strb	r3, [r6, #4034]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12769
	add	r2, r6, #4064
	str	r0, [r4, #108]
	add	r1, r2, #8
	str	r4, [r0]
	mov	r0, r7
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12769
	ldr	r2, .L12816+4
	mov	r0, r7
	str	r3, [r4, #104]
	str	r4, [r3]
	add	r1, r2, #8
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12769
	movw	r3, #:lower16:.LANCHOR7
	str	r0, [r4, #100]
	str	r4, [r0]
	ldrb	ip, [r6, #4054]	@ zero_extendqisi2
	movt	r3, #:upper16:.LANCHOR7
	ldrb	r1, [r6, #4074]	@ zero_extendqisi2
	sub	r0, r3, #4032
	ldrb	r2, [r6, #4094]	@ zero_extendqisi2
	sub	r0, r0, #12
	strb	ip, [r3, #-4078]
	strb	r1, [r3, #-4066]
	strb	r2, [r3, #-4054]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12772
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bhi	.L12814
.L12771:
	movw	r0, #:lower16:.LC528
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC528
	bl	strcmp
	subs	r5, r0, #0
	movne	r5, #0
	beq	.L12815
.L12761:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12814:
	ldr	r0, .L12816+8
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L12771
.L12772:
	movw	r0, #:lower16:.LC1006
	movt	r0, #:upper16:.LC1006
	bl	printk
.L12768:
	ldr	r0, .L12816+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L12773
	movw	r1, #:lower16:.LC737
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC737
	bl	__dynamic_pr_debug
.L12773:
	ldr	r3, [r4, #104]
	ldr	r0, .L12816+16
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #108]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L12777
	movw	r1, #:lower16:.LC738
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC738
	bl	__dynamic_pr_debug
.L12777:
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bls	.L12778
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12782
	bl	kfree
	ldr	r3, [r7, #20]
.L12778:
	cmp	r3, #2
	bls	.L12781
.L12782:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12781
	movw	r5, #65012
	movt	r5, 65535
	bl	kfree
	b	.L12761
.L12815:
	mov	r1, #1
	ldr	r0, [r4, #108]
	bl	dwc3_tx_fifo_resize_request
	b	.L12761
.L12812:
	movw	r1, #:lower16:.LC1002
	ldr	r0, .L12816+20
	movt	r1, #:upper16:.LC1002
	bl	__dynamic_pr_debug
	b	.L12762
.L12813:
	movw	r0, #:lower16:.LC1003
	movw	r5, #65012
	movt	r0, #:upper16:.LC1003
	movt	r5, 65535
	bl	printk
	b	.L12761
.L12769:
	movw	r0, #:lower16:.LC1005
	movt	r0, #:upper16:.LC1005
	bl	printk
	b	.L12768
.L12766:
	movw	r0, #:lower16:.LC1004
	mvn	r5, #18
	movt	r0, #:upper16:.LC1004
	bl	printk
	b	.L12761
.L12781:
	movw	r5, #65012
	movt	r5, 65535
	b	.L12761
.L12817:
	.align	2
.L12816:
	.word	.LANCHOR0+4044
	.word	.LANCHOR0+4084
	.word	.LANCHOR7-4020
	.word	.LANCHOR4-628
	.word	.LANCHOR4-604
	.word	.LANCHOR4+3096
	.fnend
	.size	qdss_bind, .-qdss_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_bind, %function
rmnet_mux_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	str	r7, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L12825
	movw	r6, #:lower16:.LANCHOR7
	mov	r5, r0
	mov	r4, r1
	add	r2, r3, #12
	add	r0, r3, #1
	movt	r6, #:upper16:.LANCHOR7
	sub	r1, r6, #3968
	str	r4, [r5, r2, lsl #2]
	mov	r2, #0
	sub	r1, r1, #4
	strb	r3, [r6, #-3982]
	strb	r0, [r5, #44]
	strb	r3, [r4, #356]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12821
	ldr	r1, .L12845
	mov	r2, #0
	str	r7, [r0]
	str	r0, [r4, #92]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12821
	ldr	r1, .L12845+4
	mov	r2, #0
	str	r7, [r0]
	str	r0, [r4, #88]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12821
	str	r7, [r0]
	str	r0, [r4, #96]
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L12822
	ldrb	r1, [r6, #-3970]	@ zero_extendqisi2
	ldrb	r2, [r6, #-3958]	@ zero_extendqisi2
	ldrb	r3, [r6, #-3946]	@ zero_extendqisi2
	strb	r1, [r6, #-3934]
	strb	r2, [r6, #-3922]
	strb	r3, [r6, #-3910]
.L12822:
	mov	r2, #0
	add	r1, r4, #256
	ldr	r0, [r4, #376]
	bl	queue_delayed_work
	mov	r0, #0
	b	.L12818
.L12821:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L12825
	mov	r2, #0
	mvn	r0, #18
	str	r2, [r3]
.L12818:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12825:
	mvn	r0, #18
	b	.L12818
.L12846:
	.align	2
.L12845:
	.word	.LANCHOR7-3960
	.word	.LANCHOR7-3948
	.fnend
	.size	rmnet_mux_bind, .-rmnet_mux_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_bind, %function
f_midi_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 504
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:.LANCHOR7
	mov	r4, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR7
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #24]
	.pad #508
	sub	sp, sp, #508
	strd	r2, [sp, #4]
	ldrb	r3, [r3, #-3900]	@ zero_extendqisi2
	str	r0, [sp, #12]
	cmp	r3, #0
	bne	.L12848
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L12851
	add	r3, r3, #1
	ldr	r2, [sp, #8]
	uxtb	r3, r3
	strb	r3, [r2, #-3900]
	ldr	r2, [sp, #4]
	strb	r3, [r2, #48]
.L12848:
	ldr	r0, [sp, #12]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	cmp	r2, #15
	bhi	.L12851
	add	r3, r2, #1
	ldr	lr, [sp, #8]
	add	r1, r2, #12
	uxtb	r3, r3
	mov	ip, r0
	str	r4, [r0, r1, lsl #2]
	cmp	r3, #16
	strb	r2, [lr, #-3882]
	strb	r3, [r0, #44]
	beq	.L12851
	ldr	r5, .L12884
	add	r0, r2, #2
	add	r1, r3, #12
	ldr	r6, [sp, #4]
	mov	r2, #0
	str	r4, [ip, r1, lsl #2]
	strb	r3, [lr, #-3870]
	sub	r1, r5, #8
	strb	r3, [lr, #-3852]
	strb	r0, [ip, #44]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	str	r0, [r4, #88]
	beq	.L12852
	mov	r2, #0
	add	r1, r5, #4
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	str	r0, [r4, #92]
	beq	.L12864
	movw	r1, #32976
	str	r6, [r0]
	mov	r0, #292
	bl	__kmalloc
	subs	fp, r0, #0
	beq	.L12865
	sub	r1, r5, #44
	sub	r3, r5, #32
	sub	r2, r5, #20
	mov	r0, r5
	stm	fp, {r1, r2, r3}
	add	r1, r5, #16
	ldr	r3, [r4, #320]
	ldr	r2, [r4, #324]
	str	r1, [fp, #12]
	ldr	r7, [r4, #320]
	add	r3, r3, r2
	rsb	r3, r3, r3, lsl #4
	cmp	r7, #0
	add	r3, r3, #7
	strh	r3, [r1, #5]	@ unaligned
	beq	.L12866
	add	lr, r0, #32
	mov	r2, #1
	mov	r1, #0
	movw	r10, #9222
	str	lr, [sp, #16]
	add	lr, r0, #27
	add	r0, fp, #16
	movw	r9, #9225
	mov	r6, r2
	str	r0, [sp]
	add	r0, fp, #20
	mov	r5, r1
	movt	r10, 514
	movt	r9, 259
	str	fp, [sp, #20]
	add	ip, sp, #24
	add	r3, sp, #360
	mov	fp, r0
.L12855:
	ldr	r7, [sp]
	str	r10, [ip]	@ unaligned
	add	r0, r2, #5
	strb	r2, [ip, #4]
	add	r2, r2, #2
	strb	r5, [ip, #5]
	sub	r8, r2, #1
	str	ip, [r7, r1, lsl #3]
	ldrb	r7, [ip, #4]	@ zero_extendqisi2
	add	ip, ip, #6
	str	r9, [r3]	@ unaligned
	strb	r8, [r3, #4]
	strb	r6, [r3, #5]
	strb	r7, [r3, #6]
	strb	r6, [r3, #7]
	strb	r5, [r3, #8]
	str	r3, [fp, r1, lsl #3]
	ldrb	r7, [r3, #4]	@ zero_extendqisi2
	add	r1, r1, #1
	add	r3, r3, #9
	strb	r7, [lr, #1]!
	ldr	r7, [r4, #320]
	cmp	r7, r1
	bhi	.L12855
	lsl	r3, r0, #2
	ldr	fp, [sp, #20]
	add	r9, r3, #4
	add	r8, r3, #8
.L12854:
	ldr	ip, [r4, #324]
	cmp	ip, #0
	beq	.L12867
	ldr	r3, .L12884+4
	mov	ip, #0
	movw	r10, #9222
	movw	r9, #9225
	mov	r6, ip
	movt	r10, 258
	movt	r9, 515
	add	r1, sp, #120
	mov	lr, r3
	add	r3, sp, #216
	sub	r5, lr, #1
	str	lr, [sp, #20]
	sub	lr, fp, #4
	str	lr, [sp]
	mov	lr, #1
.L12857:
	str	r10, [r1]	@ unaligned
	add	ip, ip, #1
	strb	r2, [r1, #4]
	add	r2, r2, #2
	strb	r6, [r1, #5]
	sub	r8, r2, #1
	str	r1, [fp, r0, lsl #2]
	ldrb	r7, [r1, #4]	@ zero_extendqisi2
	add	r0, r0, #2
	str	r9, [r3]	@ unaligned
	add	r1, r1, #6
	strb	r8, [r3, #4]
	strb	lr, [r3, #5]
	strb	r7, [r3, #6]
	ldr	r7, [sp]
	strb	lr, [r3, #7]
	strb	r6, [r3, #8]
	str	r3, [r7, r0, lsl #2]
	ldrb	r7, [r1, #-2]	@ zero_extendqisi2
	add	r3, r3, #9
	strb	r7, [r5, #1]!
	ldr	r7, [r4, #324]
	cmp	r7, ip
	bhi	.L12857
	uxtb	ip, r7
	lsl	r3, r0, #2
	ldr	r7, [r4, #320]
	add	r1, ip, #4
	add	r9, r3, #4
	uxtb	r1, r1
	add	r8, r3, #8
.L12856:
	ldr	r10, [sp, #8]
	uxtb	r7, r7
	ldr	lr, [sp, #16]
	add	r2, r0, #3
	add	r0, r7, #4
	strb	r1, [r10, #-3816]
	add	r1, fp, r2, lsl #2
	strb	ip, [r10, #-3813]
	ldr	ip, .L12884+8
	sub	lr, lr, #8
	strb	r0, [r10, #-3796]
	mov	r0, fp
	strb	r7, [r10, #-3793]
	mov	r7, #0
	sub	r5, ip, #12
	ldr	ip, [sp, #20]
	sub	r6, r5, #12
	str	r5, [fp, r3]
	sub	ip, ip, #4
	str	ip, [fp, r9]
	str	r6, [fp, r8]
	str	lr, [fp, r2, lsl #2]
	str	r7, [r1, #4]
	bl	usb_copy_descriptors
	cmp	r0, r7
	str	r0, [r4, #16]
	beq	.L12858
	ldr	r3, [sp, #12]
	ldr	r3, [r3, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12859
.L12861:
	mov	r0, fp
	mov	r5, #0
	bl	kfree
.L12847:
	mov	r0, r5
	add	sp, sp, #508
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12852:
	ldr	r3, [r4, #92]
	mvn	r5, #18
	cmp	r3, #0
	beq	.L12862
.L12863:
	mov	r2, #0
	str	r2, [r3]
.L12853:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L12862:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC991
	movt	r1, #:upper16:.LC991
	ldr	r2, [r4]
	ldr	r0, [r3]
	mov	r3, r5
	add	r0, r0, #32
	bl	dev_err
	b	.L12847
.L12864:
	mvn	r5, #18
	b	.L12853
.L12859:
	mov	r3, #512
	mov	r0, fp
	strh	r3, [r5, #4]	@ movhi
	strh	r3, [r6, #4]	@ movhi
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L12861
.L12858:
	mov	r0, fp
	mvn	r5, #18
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
.L12850:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L12863
	b	.L12853
.L12851:
	mvn	r5, #18
	b	.L12850
.L12865:
	mvn	r5, #11
	b	.L12850
.L12867:
	ldr	r2, .L12884+4
	mov	r1, #4
	str	r2, [sp, #20]
	b	.L12856
.L12866:
	ldr	r1, .L12884
	mov	r8, #24
	mov	r9, #20
	mov	r3, #16
	mov	r0, #4
	mov	r2, #1
	add	r1, r1, #32
	str	r1, [sp, #16]
	b	.L12854
.L12885:
	.align	2
.L12884:
	.word	.LANCHOR7-3840
	.word	.LANCHOR7-3792
	.word	.LANCHOR7-3824
	.fnend
	.size	f_midi_bind, .-f_midi_bind
	.section	.rodata.str1.4
	.align	2
.LC1007:
	.ascii	"<3>%s: unable to allocate memory for notify req\012"
	.ascii	"\000"
	.align	2
.LC1008:
	.ascii	"<6>%s: RmNet(%d) %s Speed, IN:%s OUT:%s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_bind, %function
frmnet_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L12929
	add	r1, r3, #12
	movw	r5, #:lower16:.LANCHOR7
	add	r2, r3, #1
	movt	r5, #:upper16:.LANCHOR7
	str	r4, [r0, r1, lsl #2]
	sub	r1, r5, #3760
	sub	r1, r1, #4
	strb	r3, [r5, #-3774]
	strb	r2, [r0, #44]
	mov	r2, #0
	str	r3, [r4, #112]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12930
	ldr	r1, .L12934
	mov	r2, #0
	str	r0, [r4, #84]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12931
	ldr	r1, .L12934+4
	mov	r2, #0
	str	r0, [r4, #88]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	beq	.L12932
	str	r8, [r4, #136]
	ldr	r3, [r8, #8]
	mov	r1, #208
	str	r7, [r8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L12894
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r6]
	beq	.L12896
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6]
	bne	.L12896
	ldr	r3, [r8, #8]
	mov	r1, r6
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L12894:
	mvn	r3, #11
	str	r3, [r4, #140]
.L12911:
	movw	r0, #:lower16:.LC1007
	ldr	r1, .L12934+8
	movt	r0, #:upper16:.LC1007
	bl	printk
	ldr	r5, [r4, #136]
	b	.L12898
.L12896:
	mov	r3, #8
	cmn	r6, #4096
	str	r3, [r6, #4]
	str	r6, [r4, #140]
	bhi	.L12911
	movw	r3, #:lower16:frmnet_notify_complete
	ldr	r0, .L12934+12
	movt	r3, #:upper16:frmnet_notify_complete
	str	r3, [r6, #28]
	ldr	r3, [r4, #140]
	str	r4, [r3, #32]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12899
	ldr	r3, [r7]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12933
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC976
	movt	r3, #:upper16:.LC976
.L12903:
	ldr	ip, [r4, #84]
	movw	r0, #:lower16:.LC1008
	ldr	lr, [r4, #88]
	movt	r0, #:upper16:.LC1008
	ldr	r1, .L12934+8
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	printk
	mov	r0, #0
	b	.L12886
.L12933:
	ldrb	r1, [r5, #-3762]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3750]	@ zero_extendqisi2
	ldrb	r3, [r5, #-3738]	@ zero_extendqisi2
	ldr	r0, .L12934+16
	strb	r1, [r5, #-3706]
	strb	r2, [r5, #-3694]
	strb	r3, [r5, #-3682]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12901
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	bls	.L12905
	ldrb	r3, [r5, #-3738]	@ zero_extendqisi2
	ldrb	r1, [r5, #-3762]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3750]	@ zero_extendqisi2
	ldr	r0, .L12934+20
	strb	r1, [r5, #-3650]
	strb	r2, [r5, #-3638]
	strb	r3, [r5, #-3626]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	ldrne	r3, [r7]
	bne	.L12905
.L12906:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12909
	bl	kfree
.L12909:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12910
	bl	kfree
.L12910:
	ldr	r5, [r4, #136]
	ldr	r6, [r4, #140]
	cmp	r6, #0
	beq	.L12898
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #136]
.L12898:
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r5]
	str	r3, [r4, #136]
.L12893:
	ldr	r2, [r4, #88]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #88]
.L12891:
	ldr	r2, [r4, #84]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #84]
.L12886:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12899:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12906
.L12912:
	bl	kfree
	b	.L12906
.L12901:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L12912
	b	.L12909
.L12929:
	mvn	r2, #18
	movw	r0, #:lower16:.LC999
	ldr	r1, .L12934+8
	movt	r0, #:upper16:.LC999
	str	r2, [r4, #112]
	bl	printk
	ldr	r0, [r4, #112]
	b	.L12886
.L12905:
	ldr	r0, [r3, #20]
	movw	r1, #:lower16:.LC976
	movw	r3, #:lower16:.LC975
	movt	r1, #:upper16:.LC976
	movt	r3, #:upper16:.LC975
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	cmp	r0, #2
	movls	r3, r1
	b	.L12903
.L12932:
	movw	r0, #:lower16:.LC1000
	ldr	r1, .L12934+8
	movt	r0, #:upper16:.LC1000
	bl	printk
	mvn	r0, #18
	b	.L12893
.L12931:
	movw	r0, #:lower16:.LC981
	ldr	r1, .L12934+8
	movt	r0, #:upper16:.LC981
	bl	printk
	mvn	r0, #18
	b	.L12891
.L12930:
	movw	r0, #:lower16:.LC979
	ldr	r1, .L12934+8
	movt	r0, #:upper16:.LC979
	bl	printk
	mvn	r0, #18
	b	.L12886
.L12935:
	.align	2
.L12934:
	.word	.LANCHOR7-3752
	.word	.LANCHOR7-3740
	.word	.LANCHOR5-972
	.word	.LANCHOR7-3728
	.word	.LANCHOR7-3672
	.word	.LANCHOR7-3616
	.fnend
	.size	frmnet_bind, .-frmnet_bind
	.section	.rodata.str1.4
	.align	2
.LC1009:
	.ascii	"%s: configNr = %d\012\000"
	.align	2
.LC1010:
	.ascii	"failed\012\000"
	.align	2
.LC1011:
	.ascii	"RNDIS: %s speed IN/%s OUT/%s NOTIFY/%s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind, %function
rndis_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L12937
	add	r1, r3, #12
	add	r2, r3, #1
	mov	r6, r0
	movw	r5, #:lower16:.LANCHOR7
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR7
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-3582]
	strb	r3, [r5, #-3574]
	strb	r3, [r5, #-3561]
	cmp	r0, #15
	bhi	.L12937
	add	r2, r0, #12
	add	r3, r0, #1
	ldr	r1, .L13016
	str	r4, [r6, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r5, #-3560]
	strb	r0, [r5, #-3554]
	strb	r3, [r6, #44]
	strb	r0, [r4, #149]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12937
	ldr	r1, .L13016+4
	mov	r2, #0
	str	r0, [r4, #88]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12937
	mov	r2, #0
	sub	r1, r5, #3520
	str	r0, [r4, #92]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12937
	str	r3, [r4, #168]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #172]
	beq	.L12941
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L12940
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L12940:
	str	r0, [r8]
	ldr	r2, [r4, #172]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L12941
	mov	r1, #8
	movw	r3, #:lower16:rndis_response_complete
	movt	r3, #:upper16:rndis_response_complete
	str	r1, [r2, #4]
	ldr	r0, [r4, #172]
	ldrb	r1, [r5, #-3542]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3530]	@ zero_extendqisi2
	str	r4, [r0, #32]
	ldr	r0, [r4, #172]
	strb	r1, [r5, #-3506]
	strb	r2, [r5, #-3494]
	strb	r1, [r5, #-3470]
	str	r3, [r0, #28]
	ldr	r1, [r4, #20]
	ldrb	r3, [r5, #-3518]	@ zero_extendqisi2
	ldr	r0, .L13016+8
	strb	r2, [r5, #-3458]
	ldr	r2, [r1, #24]
	strb	r3, [r5, #-3482]
	strb	r3, [r5, #-3446]
	ldr	r8, [r2]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12944
	ldr	r3, [r8, #20]
	cmp	r3, #2
	bhi	.L13010
.L12943:
	movw	r8, #:lower16:.LANCHOR1
	movw	r1, #:lower16:rndis_open
	movt	r8, #:upper16:.LANCHOR1
	movw	r2, #:lower16:rndis_close
	ldrb	r3, [r8, #3697]	@ zero_extendqisi2
	movt	r1, #:upper16:rndis_open
	movt	r2, #:upper16:rndis_close
	str	r1, [r4, #136]
	str	r2, [r4, #140]
	cmp	r3, #0
	bne	.L12945
	movw	r10, #:lower16:.LANCHOR4
	movw	r1, #3138
	str	r4, [r8, #3744]
	movt	r10, #:upper16:.LANCHOR4
	movw	r2, #:lower16:rndis_response_available
	ldrh	r0, [r10, r1]
	movt	r2, #:upper16:rndis_response_available
	mov	r1, #1
	add	ip, r8, #3696
	strb	r1, [r8, #3697]
	strh	r1, [ip, #36]	@ movhi
	tst	r0, #4
	str	r2, [r8, #3740]
	bne	.L13011
.L12946:
	movw	r2, #306
	mov	r3, #0
	ldrh	r9, [r10, r2]
	str	r3, [r4, #164]
	tst	r9, #4
	ubfx	r9, r9, #2, #1
	moveq	r3, r9
	bne	.L13012
.L12947:
	movw	r2, #3186
	rsb	r3, r3, r3, lsl #4
	ldrb	r5, [r5, #-3292]	@ zero_extendqisi2
	ldrh	r0, [r10, r2]
	mov	r1, #0
	add	r3, r8, r3, lsl #2
	add	r2, r4, #150
	str	r1, [r8, #3704]
	str	r1, [r8, #3708]
	tst	r0, #4
	str	r2, [r3, #3716]
	bne	.L13013
.L12957:
	ldr	fp, [r4, #160]
	rsb	r9, r9, r9, lsl #4
	add	r9, r8, r9, lsl #2
	cmp	fp, #0
	strb	r5, [r9, #3732]
	beq	.L12948
	ldr	r5, [r4, #156]
	cmp	r5, #0
	bne	.L13014
.L12948:
	movw	r3, #3234
	ldrh	r5, [r10, r3]
	tst	r5, #4
	ubfx	r5, r5, #2, #1
	beq	.L12936
	ldr	r3, [r6, #24]
	ldr	r1, [r7]
	ldr	r3, [r3]
	add	r1, r1, #32
	ldr	r2, [r3, #20]
	cmp	r2, #4
	movwhi	r3, #:lower16:.LC990
	movthi	r3, #:upper16:.LC990
	bhi	.L12951
	movw	r0, #:lower16:.LC976
	movw	r3, #:lower16:.LC975
	movt	r0, #:upper16:.LC976
	cmp	r2, #2
	movt	r3, #:upper16:.LC975
	movls	r3, r0
.L12951:
	ldr	ip, [r4, #88]
	movw	r2, #:lower16:.LC1011
	mov	r5, #0
	ldr	r0, [r4, #168]
	movt	r2, #:upper16:.LC1011
	ldr	lr, [r4, #92]
	ldr	r4, [r0, #4]
	ldr	r0, .L13016+12
	str	r4, [sp, #8]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L12936
.L12937:
	mvn	r5, #18
.L12939:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #172]
	cmp	r3, #0
	beq	.L12952
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L12952:
	ldr	r3, [r4, #168]
	movw	r1, #:lower16:.LC991
	movt	r1, #:upper16:.LC991
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L12936:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13010:
	ldr	r0, .L13016+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12944
	ldr	r3, [r8, #20]
	cmp	r3, #4
	bls	.L12943
	ldr	r0, .L13016+20
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L12943
.L12944:
	mov	r0, r4
	mvn	r5, #11
	bl	usb_free_all_descriptors
	b	.L12939
.L12941:
	mvn	r5, #11
	b	.L12939
.L12945:
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3162
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L12937
	movw	r1, #:lower16:.LC1010
	ldr	r0, .L13016+24
	mvn	r5, #18
	movt	r1, #:upper16:.LC1010
	bl	__dynamic_pr_debug
	b	.L12939
.L13014:
	movw	r3, #3210
	ldrb	r9, [r4, #164]	@ zero_extendqisi2
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L13015
.L12949:
	cmp	r9, #0
	bne	.L12960
	str	r5, [r8, #3728]
	str	fp, [r8, #3736]
	b	.L12948
.L13013:
	movw	r1, #:lower16:.LC285
	ldr	r2, .L13016+28
	movt	r1, #:upper16:.LC285
	ldr	r0, .L13016+32
	bl	__dynamic_pr_debug
	b	.L12957
.L13012:
	movw	r1, #:lower16:.LC819
	ldr	r2, .L13016+36
	str	r3, [sp]
	ldr	r0, .L13016+40
	movt	r1, #:upper16:.LC819
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #164]
	uxtb	r9, r3
	b	.L12947
.L13011:
	movw	r1, #:lower16:.LC1009
	ldr	r2, .L13016+44
	add	r0, r10, #3120
	movt	r1, #:upper16:.LC1009
	bl	__dynamic_pr_debug
	b	.L12946
.L13015:
	movw	r1, #:lower16:.LC285
	ldr	r2, .L13016+48
	movt	r1, #:upper16:.LC285
	ldr	r0, .L13016+52
	bl	__dynamic_pr_debug
	b	.L12949
.L12960:
	mov	r5, #0
	b	.L12939
.L13017:
	.align	2
.L13016:
	.word	.LANCHOR7-3544
	.word	.LANCHOR7-3532
	.word	.LANCHOR7-3436
	.word	.LANCHOR4+3216
	.word	.LANCHOR7-3392
	.word	.LANCHOR7-3348
	.word	.LANCHOR4+3144
	.word	.LANCHOR5-944
	.word	.LANCHOR4+3168
	.word	.LANCHOR5-1880
	.word	.LANCHOR4+288
	.word	.LANCHOR5-960
	.word	.LANCHOR5-920
	.word	.LANCHOR4+3192
	.fnend
	.size	rndis_bind, .-rndis_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind, %function
rndis_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #28
	sub	sp, sp, #28
	ldr	r9, [r0, #24]
	cmp	r3, #15
	bhi	.L13052
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR7
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR7
	strb	r2, [r0, #44]
	strb	r3, [r4, #120]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-3286]
	strb	r3, [r5, #-3278]
	strb	r3, [r5, #-3265]
	cmp	r0, #15
	bhi	.L13084
	add	r1, r0, #12
	add	r3, r0, #1
	mov	r2, #0
	str	r4, [r6, r1, lsl #2]
	sub	r1, r5, #3248
	strb	r0, [r5, #-3264]
	strb	r0, [r5, #-3258]
	strb	r3, [r6, #44]
	strb	r0, [r4, #121]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13084
	ldr	r1, .L13094
	mov	r2, #0
	str	r0, [r4, #88]
	str	r9, [r0]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13084
	ldr	r1, .L13094+4
	mov	r2, #0
	str	r0, [r4, #92]
	str	r9, [r0]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L13084
	str	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r9, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #160]
	beq	.L13085
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L13025
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L13025:
	str	r0, [r7]
	ldr	r2, [r4, #160]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L13085
	mov	r1, #8
	movw	r3, #:lower16:rndis_qc_response_complete
	ldr	r0, .L13094+8
	movt	r3, #:upper16:rndis_qc_response_complete
	str	r1, [r2, #4]
	ldr	r2, [r4, #160]
	str	r4, [r2, #32]
	ldr	r2, [r4, #160]
	str	r3, [r2, #28]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L13085
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L13086
.L13028:
	movw	r5, #:lower16:.LANCHOR1
	movw	r1, #:lower16:rndis_qc_open
	movt	r5, #:upper16:.LANCHOR1
	movw	r2, #:lower16:rndis_qc_close
	ldrb	r3, [r5, #3697]	@ zero_extendqisi2
	movt	r1, #:upper16:rndis_qc_open
	movt	r2, #:upper16:rndis_qc_close
	str	r1, [r4, #112]
	str	r2, [r4, #116]
	cmp	r3, #0
	bne	.L13032
	movw	r10, #:lower16:.LANCHOR4
	movw	r1, #3138
	str	r4, [r5, #3744]
	movt	r10, #:upper16:.LANCHOR4
	movw	r2, #:lower16:rndis_qc_response_available
	ldrh	r0, [r10, r1]
	movt	r2, #:upper16:rndis_qc_response_available
	mov	r1, #1
	add	ip, r5, #3696
	strb	r1, [r5, #3697]
	strh	r1, [ip, #36]	@ movhi
	tst	r0, #4
	str	r2, [r5, #3740]
	bne	.L13087
.L13033:
	movw	r2, #306
	mov	r3, #0
	ldrh	r2, [r10, r2]
	str	r3, [r4, #144]
	tst	r2, #4
	ubfx	r7, r2, #2, #1
	moveq	r3, r7
	bne	.L13088
.L13035:
	movw	r2, #3210
	rsb	r3, r3, r3, lsl #4
	ldr	r8, [r4, #128]
	ldrh	r0, [r10, r2]
	mov	r1, #0
	add	r3, r5, r3, lsl #2
	add	r2, r4, #122
	str	r1, [r5, #3704]
	str	r1, [r5, #3708]
	tst	r0, #4
	str	r2, [r3, #3716]
	ldr	r3, [r4, #140]
	bne	.L13089
.L13051:
	cmp	r3, #0
	moveq	r7, #1
	cmp	r7, #0
	bne	.L13090
	movw	r2, #3186
	ldr	r7, [r4, #144]
	str	r8, [r5, #3728]
	ldrh	r2, [r10, r2]
	str	r3, [r5, #3736]
	ldrb	fp, [r4, #132]	@ zero_extendqisi2
	tst	r2, #4
	moveq	r8, r7
	bne	.L13091
.L13037:
	uxtb	r3, r7
	movw	r2, #3258
	ldrh	r2, [r10, r2]
	rsb	r3, r3, r3, lsl #4
	add	r3, r5, r3, lsl #2
	tst	r2, #4
	strb	fp, [r3, #3732]
	bne	.L13092
.L13038:
	movw	r3, #3282
	uxtb	r8, r8
	ldrh	r0, [r10, r3]
	mov	r3, #2
	rsb	r8, r8, r8, lsl #4
	add	r5, r5, r8, lsl r3
	tst	r0, #4
	ubfx	r0, r0, #2, #1
	strb	r3, [r5, #3733]
	moveq	r5, r0
	bne	.L13093
.L13018:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13086:
	ldrb	r1, [r5, #-3246]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3234]	@ zero_extendqisi2
	ldrb	r3, [r5, #-3222]	@ zero_extendqisi2
	ldr	r0, .L13094+12
	strb	r1, [r5, #-3166]
	strb	r2, [r5, #-3154]
	strb	r3, [r5, #-3142]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L13085
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L13028
	ldrb	r1, [r5, #-3246]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3234]	@ zero_extendqisi2
	ldrb	r3, [r5, #-3222]	@ zero_extendqisi2
	ldr	r0, .L13094+16
	strb	r1, [r5, #-3086]
	strb	r2, [r5, #-3074]
	strb	r3, [r5, #-3062]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L13028
	ldr	r3, [r6, #24]
	mvn	r5, #11
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L13030
.L13031:
	cmp	r3, #2
	bhi	.L13030
.L13044:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L13045
	bl	kfree
.L13045:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L13046
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L13046:
	ldr	r3, [r4, #156]
	movw	r0, #:lower16:.LC978
	ldr	r1, .L13094+20
	movt	r0, #:upper16:.LC978
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk
	b	.L13018
.L13032:
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3162
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L13034
.L13084:
	ldr	r9, [r6, #24]
	mvn	r5, #18
.L13019:
	ldr	r3, [r9]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L13031
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L13030
	bl	kfree
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L13031
.L13034:
	movw	r1, #:lower16:.LC1010
	ldr	r0, .L13094+24
	mvn	r5, #18
	movt	r1, #:upper16:.LC1010
	bl	__dynamic_pr_debug
	ldr	r9, [r6, #24]
	b	.L13019
.L13088:
	movw	r1, #:lower16:.LC819
	ldr	r2, .L13094+28
	str	r3, [sp]
	ldr	r0, .L13094+32
	movt	r1, #:upper16:.LC819
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #144]
	uxtb	r7, r3
	subs	r7, r7, #0
	movne	r7, #1
	b	.L13035
.L13092:
	movw	r1, #:lower16:.LC285
	ldr	r2, .L13094+36
	movt	r1, #:upper16:.LC285
	ldr	r0, .L13094+40
	bl	__dynamic_pr_debug
	b	.L13038
.L13093:
	ldr	r3, [r6, #24]
	ldr	r1, [r9]
	ldr	r3, [r3]
	add	r1, r1, #32
	ldr	r2, [r3, #20]
	cmp	r2, #4
	movwhi	r3, #:lower16:.LC990
	movthi	r3, #:upper16:.LC990
	bhi	.L13040
	movw	r0, #:lower16:.LC976
	movw	r3, #:lower16:.LC975
	movt	r0, #:upper16:.LC976
	cmp	r2, #2
	movt	r3, #:upper16:.LC975
	movls	r3, r0
.L13040:
	ldr	ip, [r4, #88]
	movw	r2, #:lower16:.LC1011
	mov	r5, #0
	ldr	r0, [r4, #156]
	movt	r2, #:upper16:.LC1011
	ldr	lr, [r4, #92]
	ldr	r4, [r0, #4]
	ldr	r0, .L13094+44
	str	r4, [sp, #8]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L13018
.L13089:
	movw	r1, #:lower16:.LC285
	ldr	r2, .L13094+48
	str	r3, [sp, #20]
	ldr	r0, .L13094+52
	movt	r1, #:upper16:.LC285
	bl	__dynamic_pr_debug
	ldr	r3, [sp, #20]
	b	.L13051
.L13091:
	movw	r1, #:lower16:.LC285
	ldr	r2, .L13094+56
	ldr	r0, .L13094+60
	movt	r1, #:upper16:.LC285
	bl	__dynamic_pr_debug
	ldr	r8, [r4, #144]
	b	.L13037
.L13087:
	movw	r1, #:lower16:.LC1009
	ldr	r2, .L13094+64
	add	r0, r10, #3120
	movt	r1, #:upper16:.LC1009
	bl	__dynamic_pr_debug
	b	.L13033
.L13030:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L13044
	bl	kfree
	b	.L13044
.L13052:
	mvn	r5, #18
	b	.L13019
.L13090:
	mov	r5, #0
	ldr	r9, [r6, #24]
	b	.L13019
.L13085:
	mvn	r5, #11
	ldr	r9, [r6, #24]
	b	.L13019
.L13095:
	.align	2
.L13094:
	.word	.LANCHOR7-3236
	.word	.LANCHOR7-3224
	.word	.LANCHOR7-3212
	.word	.LANCHOR7-3132
	.word	.LANCHOR7-3052
	.word	.LANCHOR5-864
	.word	.LANCHOR4+3144
	.word	.LANCHOR5-1880
	.word	.LANCHOR4+288
	.word	.LANCHOR5-896
	.word	.LANCHOR4+3240
	.word	.LANCHOR4+3264
	.word	.LANCHOR5-920
	.word	.LANCHOR4+3192
	.word	.LANCHOR5-944
	.word	.LANCHOR4+3168
	.word	.LANCHOR5-960
	.fnend
	.size	rndis_qc_bind, .-rndis_qc_bind
	.section	.rodata.str1.4
	.align	2
.LC1012:
	.ascii	"acc_function_bind dev: %pK\012\000"
	.align	2
.LC1013:
	.ascii	"android\000"
	.align	2
.LC1014:
	.ascii	"create_bulk_endpoints dev: %pK\012\000"
	.align	2
.LC1015:
	.ascii	"usb_ep_autoconfig for ep_in failed\012\000"
	.align	2
.LC1016:
	.ascii	"usb_ep_autoconfig for ep_in got %s\012\000"
	.align	2
.LC1017:
	.ascii	"usb_ep_autoconfig for ep_out failed\012\000"
	.align	2
.LC1018:
	.ascii	"usb_ep_autoconfig for ep_out got %s\012\000"
	.align	2
.LC1019:
	.ascii	"<3>acc_bind() could not allocate requests\012\000"
	.align	2
.LC1020:
	.ascii	"%s speed %s: IN/%s, OUT/%s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_bind, %function
acc_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #3306
	movt	r5, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r1
	strd	r8, [sp, #16]
	mov	r6, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r5, r3]
	.pad #36
	sub	sp, sp, #36
	ldr	r2, [r0, #24]
	tst	r3, #4
	str	r2, [sp, #28]
	bne	.L13162
.L13097:
	movw	r2, #:lower16:.LC1013
	ldr	r0, .L13172
	mov	r1, #0
	movt	r2, #:upper16:.LC1013
	bl	__hid_register_driver
	subs	r3, r0, #0
	str	r3, [sp, #16]
	bne	.L13096
	str	r3, [r4, #1644]
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L13102
	add	r1, r3, #12
	movw	r2, #3330
	movw	r10, #:lower16:.LANCHOR7
	str	r4, [r6, r1, lsl #2]
	ldrh	r2, [r5, r2]
	movt	r10, #:upper16:.LANCHOR7
	add	r1, r3, #1
	strb	r3, [r10, #-2994]
	strb	r1, [r6, #44]
	ldr	r8, [r4, #84]
	tst	r2, #4
	bne	.L13163
.L13100:
	ldr	r1, .L13172+4
	mov	r2, #0
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L13164
	movw	r3, #3378
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L13165
.L13103:
	ldr	r9, .L13172+8
	mov	r2, #0
	str	r4, [r7]
	str	r7, [r4, #92]
	ldr	r0, [r8]
	sub	r1, r9, #12
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L13166
	movw	r3, #3426
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L13167
.L13105:
	sub	r1, r9, #12
	mov	r2, #0
	str	r4, [r7]
	str	r7, [r4, #96]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L13168
	movw	r3, #3474
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L13169
.L13107:
	add	r9, r4, #1648
	movw	r8, #:lower16:acc_complete_in
	str	r4, [r7]
	mov	r3, #4
	add	r9, r9, #8
	str	r5, [sp, #24]
	movt	r8, #:upper16:acc_complete_in
	add	fp, r4, #88
	str	r6, [sp, #20]
	mov	r5, r3
	str	r7, [r4, #96]
.L13109:
	ldr	r0, [r4, #92]
	bl	adb_request_new.constprop.2
	mov	r7, r0
	mov	r0, fp
	cmp	r7, #0
	beq	.L13108
	str	r8, [r7, #28]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #1660]
	add	r0, r7, #36
	bl	__list_add
	mov	r1, r6
	mov	r0, fp
	bl	_raw_spin_unlock_irqrestore
	subs	r5, r5, #1
	bne	.L13109
	ldr	r0, [r4, #96]
	ldr	r6, [sp, #20]
	ldr	r5, [sp, #24]
	bl	adb_request_new.constprop.2
	subs	r3, r0, #0
	beq	.L13108
	movw	r7, #:lower16:acc_complete_out
	movt	r7, #:upper16:acc_complete_out
	str	r7, [r3, #28]
	ldr	r0, [r4, #96]
	str	r3, [r4, #1688]
	bl	adb_request_new.constprop.2
	cmp	r0, #0
	beq	.L13108
	str	r7, [r0, #28]
	str	r0, [r4, #1692]
	ldr	r2, [r6, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L13111
	ldrb	r1, [r10, #-2982]	@ zero_extendqisi2
	ldrb	r3, [r10, #-2970]	@ zero_extendqisi2
	strb	r1, [r10, #-2958]
	strb	r3, [r10, #-2946]
	ldr	r0, [r2]
	ldr	r0, [r0, #20]
	cmp	r0, #4
	strbhi	r1, [r10, #-2934]
	strbhi	r3, [r10, #-2922]
.L13111:
	movw	r3, #3498
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L13170
.L13096:
	ldr	r0, [sp, #16]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13162:
	mov	r3, r2
	movw	r2, #:lower16:.LC1012
	ldr	r0, .L13172+12
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC1012
	mov	r3, r4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13097
.L13163:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC1014
	mov	r3, r4
	movt	r2, #:upper16:.LC1014
	ldr	r0, .L13172+16
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13100
.L13165:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC1016
	movt	r2, #:upper16:.LC1016
	ldr	r0, .L13172+20
	ldr	r3, [r7, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13103
.L13167:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC1018
	movt	r2, #:upper16:.LC1018
	ldr	r0, .L13172+24
	ldr	r3, [r7, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13105
.L13169:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC1018
	movt	r2, #:upper16:.LC1018
	ldr	r0, .L13172+28
	ldr	r3, [r7, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13107
.L13170:
	ldr	ip, [r4, #96]
	movw	r0, #:lower16:.LC976
	movw	r3, #:lower16:.LC975
	ldr	lr, [r2]
	movt	r0, #:upper16:.LC976
	movt	r3, #:upper16:.LC975
	ldr	r1, [sp, #28]
	ldr	r2, [r4, #92]
	ldr	ip, [ip, #4]
	ldr	lr, [lr, #20]
	ldr	r4, [r4]
	ldr	r1, [r1]
	str	ip, [sp, #8]
	ldr	ip, [r2, #4]
	movw	r2, #:lower16:.LC1020
	cmp	lr, #2
	movt	r2, #:upper16:.LC1020
	movls	r3, r0
	ldr	r0, .L13172+32
	add	r1, r1, #32
	stm	sp, {r4, ip}
	bl	__dynamic_dev_dbg
	b	.L13096
.L13102:
	mvn	r3, #18
	str	r3, [sp, #16]
	b	.L13096
.L13164:
	movw	r3, #3354
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L13102
	ldr	r1, [r8]
	mvn	r3, #18
	movw	r2, #:lower16:.LC1015
	movt	r2, #:upper16:.LC1015
	ldr	r0, .L13172+36
	str	r3, [sp, #16]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13096
.L13168:
	movw	r3, #3450
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L13102
	ldr	r1, [r8]
	mvn	r3, #18
	movw	r2, #:lower16:.LC1017
	movt	r2, #:upper16:.LC1017
	ldr	r0, .L13172+40
	str	r3, [sp, #16]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13096
.L13166:
	movw	r3, #3402
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L13102
	ldr	r1, [r8]
	mvn	r3, #18
	movw	r2, #:lower16:.LC1017
	movt	r2, #:upper16:.LC1017
	ldr	r0, .L13172+44
	str	r3, [sp, #16]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13096
.L13108:
	movw	r0, #:lower16:.LC1019
	movt	r0, #:upper16:.LC1019
	bl	printk
.L13112:
	mov	r0, fp
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #1656]
	mov	r6, r0
	cmp	r9, r5
	bne	.L13171
	mov	r1, r0
	mov	r0, fp
	bl	_raw_spin_unlock_irqrestore
.L13117:
	ldr	r0, [r4, #1688]
	cmp	r0, #0
	beq	.L13115
	ldr	r1, [r4, #96]
	bl	acc_request_free.part.0
.L13115:
	ldr	r0, [r4, #1692]
	cmp	r0, #0
	beq	.L13118
	mvn	r3, #0
	ldr	r1, [r4, #96]
	str	r3, [sp, #16]
	bl	acc_request_free.part.0
	b	.L13096
.L13171:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	mov	r1, r6
	mov	r0, fp
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	beq	.L13117
	mov	r0, r5
	ldr	r1, [r4, #92]
	bl	acc_request_free.part.0
	b	.L13112
.L13118:
	mvn	r3, #0
	str	r3, [sp, #16]
	b	.L13096
.L13173:
	.align	2
.L13172:
	.word	.LANCHOR0+1568
	.word	.LANCHOR7-2984
	.word	.LANCHOR7-2960
	.word	.LANCHOR4+3288
	.word	.LANCHOR4+3312
	.word	.LANCHOR4+3360
	.word	.LANCHOR4+3408
	.word	.LANCHOR4+3456
	.word	.LANCHOR4+3480
	.word	.LANCHOR4+3336
	.word	.LANCHOR4+3432
	.word	.LANCHOR4+3384
	.fnend
	.size	acc_function_bind, .-acc_function_bind
	.section	.rodata.str1.4
	.align	2
.LC1021:
	.ascii	"mtp_function_bind dev: %pK\012\000"
	.align	2
.LC1022:
	.ascii	"usb_ep_autoconfig for mtp ep_out got %s\012\000"
	.align	2
.LC1023:
	.ascii	"usb_ep_autoconfig for ep_intr failed\012\000"
	.align	2
.LC1024:
	.ascii	"usb_ep_autoconfig for mtp ep_intr got %s\012\000"
	.align	2
.LC1025:
	.ascii	"<3>mtp_bind() could not allocate requests\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_bind, %function
mtp_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3522
	mov	r4, r1
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR4
	movt	r7, #:upper16:.LANCHOR4
	strd	r8, [sp, #16]
	ldrh	r3, [r7, r3]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #24]
	.pad #36
	sub	sp, sp, #36
	str	r0, [sp, #16]
	tst	r3, #4
	str	r2, [sp, #28]
	str	r2, [r1, #84]
	bne	.L13254
.L13175:
	ldr	r3, [sp, #16]
	ldrb	r3, [r3, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L13253
	ldr	r0, [sp, #16]
	add	r1, r3, #12
	movw	r2, #3546
	movw	r5, #:lower16:.LANCHOR7
	movt	r5, #:upper16:.LANCHOR7
	str	r4, [r0, r1, lsl #2]
	ldrh	r2, [r7, r2]
	add	r1, r3, #1
	strb	r3, [r5, #-2910]
	strb	r1, [r0, #44]
	ldr	r8, [r4, #84]
	tst	r2, #4
	bne	.L13255
.L13178:
	ldr	r1, .L13266
	mov	r2, #0
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L13256
	movw	r3, #3594
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13257
.L13181:
	ldr	r1, .L13266+4
	mov	r2, #0
	str	r4, [r6]
	str	r6, [r4, #92]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L13258
	movw	r3, #3642
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13259
.L13183:
	ldr	r1, .L13266+8
	mov	r2, #0
	str	r4, [r6]
	str	r6, [r4, #96]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r9, r0, #0
	beq	.L13260
	movw	r3, #3690
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13261
.L13185:
	movw	r6, #:lower16:.LANCHOR0
	str	r4, [r9]
	movt	r6, #:upper16:.LANCHOR0
	str	r9, [r4, #100]
	ldr	r1, [r6, #1788]
	cmp	r1, #16384
	bls	.L13186
	mov	r3, #4
	str	r3, [r5, #-2864]
.L13187:
	movw	r9, #:lower16:mtp_complete_in
	add	r3, r4, #116
	movt	r9, #:upper16:mtp_complete_in
	mov	r10, #0
	add	fp, r4, #88
	str	r3, [sp, #20]
	str	r9, [sp, #24]
	b	.L13196
.L13189:
	ldr	r3, [sp, #24]
	str	r3, [r8, #28]
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	add	r0, r8, #36
	ldr	r2, [sp, #20]
	ldr	r1, [r4, #120]
	bl	__list_add
	mov	r1, r9
	mov	r0, fp
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r5, #-2864]
	cmp	r2, r10
	bls	.L13188
	ldr	r1, [r6, #1788]
.L13196:
	ldr	r0, [r4, #92]
	add	r10, r10, #1
	bl	mtp_request_new
	mov	r8, r0
	mov	r0, fp
	cmp	r8, #0
	bne	.L13189
	ldr	r3, [r6, #1788]
	cmp	r3, #16384
	bls	.L13191
	add	r3, r4, #116
	add	r8, r4, #88
	str	r3, [sp, #20]
	b	.L13192
.L13193:
	bl	list_del
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r10, #0
	beq	.L13194
	ldr	fp, [r4, #92]
	ldr	r0, [r9, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L13192:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #20]
	mov	fp, r0
	ldr	r9, [r4, #116]
	cmp	r9, r3
	mov	r0, r9
	sub	r10, r9, #36
	bne	.L13193
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L13194:
	mov	r3, #16384
	mov	r2, #8
	mov	r1, r3
	str	r2, [r5, #-2864]
	str	r3, [r6, #1788]
.L13186:
	ldr	r3, [r5, #-2864]
	cmp	r3, #0
	bne	.L13187
.L13188:
	ldr	r1, [r6, #624]
	ubfx	r3, r1, #0, #10
	cmp	r3, #0
	bne	.L13262
.L13197:
	ldr	r9, [r4, #96]
	movw	fp, #:lower16:mtp_complete_out
	mov	r8, #16384
	movt	fp, #:upper16:mtp_complete_out
.L13203:
	mov	r0, r9
	bl	mtp_request_new
	subs	r3, r0, #0
	beq	.L13198
	str	fp, [r3, #28]
	ldr	r0, [r4, #96]
	str	r3, [r4, #168]
	ldr	r1, [r6, #624]
	bl	mtp_request_new
	cmp	r0, #0
	beq	.L13199
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:mtp_complete_intr
	str	fp, [r0, #28]
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:mtp_complete_intr
	str	r5, [sp, #20]
	mov	fp, #5
	str	r0, [r4, #172]
.L13200:
	ldr	r8, [r4, #100]
	mov	r1, #208
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	mov	r2, #28
	mov	r1, #208
	mov	r3, #16
	beq	.L13191
	ldr	r0, [r10, #24]
	cmp	r0, #0
	streq	r3, [r6]
	beq	.L13205
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6]
	beq	.L13263
.L13205:
	add	r8, r4, #88
	str	r9, [r6, #28]
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	subs	fp, fp, #1
	bne	.L13200
	ldr	r3, [sp, #16]
	ldr	r5, [sp, #20]
	ldr	r2, [r3, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L13264
.L13206:
	movw	r3, #3714
	ldrh	r0, [r7, r3]
	tst	r0, #4
	ubfx	r0, r0, #2, #1
	bne	.L13265
.L13174:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13264:
	ldrb	r1, [r5, #-2898]	@ zero_extendqisi2
	ldrb	r3, [r5, #-2886]	@ zero_extendqisi2
	strb	r1, [r5, #-2858]
	strb	r3, [r5, #-2846]
	ldr	r0, [r2]
	ldr	r0, [r0, #20]
	cmp	r0, #4
	strbhi	r1, [r5, #-2834]
	strbhi	r3, [r5, #-2822]
	b	.L13206
.L13262:
	mov	r3, #16384
	mov	r1, r3
	str	r3, [r6, #624]
	b	.L13197
.L13263:
	ldr	r3, [r8, #8]
	mov	r1, r6
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L13191:
	movw	r0, #:lower16:.LC1025
	movt	r0, #:upper16:.LC1025
	bl	printk
	mvn	r0, #0
	b	.L13174
.L13254:
	mov	r3, r2
	movw	r2, #:lower16:.LC1021
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC1021
	add	r0, r7, #3504
	mov	r3, r4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13175
.L13255:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC1014
	mov	r3, r4
	movt	r2, #:upper16:.LC1014
	ldr	r0, .L13266+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13178
.L13257:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC1016
	movt	r2, #:upper16:.LC1016
	ldr	r0, .L13266+16
	ldr	r3, [r6, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13181
.L13259:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC1022
	movt	r2, #:upper16:.LC1022
	ldr	r0, .L13266+20
	ldr	r3, [r6, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13183
.L13261:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC1024
	movt	r2, #:upper16:.LC1024
	ldr	r0, .L13266+24
	ldr	r3, [r9, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13185
.L13265:
	ldr	ip, [r4, #96]
	movw	r0, #:lower16:.LC976
	movw	r3, #:lower16:.LC975
	ldr	lr, [r2]
	movt	r0, #:upper16:.LC976
	movt	r3, #:upper16:.LC975
	ldr	r1, [sp, #28]
	ldr	r2, [r4, #92]
	ldr	ip, [ip, #4]
	ldr	lr, [lr, #20]
	ldr	r1, [r1]
	ldr	r4, [r4]
	str	ip, [sp, #8]
	ldr	ip, [r2, #4]
	movw	r2, #:lower16:.LC1020
	cmp	lr, #2
	movt	r2, #:upper16:.LC1020
	movls	r3, r0
	add	r1, r1, #32
	ldr	r0, .L13266+28
	stm	sp, {r4, ip}
	bl	__dynamic_dev_dbg
	mov	r0, #0
	b	.L13174
.L13198:
	ldr	r3, [r6, #624]
	cmp	r3, #16384
	bls	.L13191
.L13252:
	ldr	r9, [r4, #96]
.L13208:
	mov	r1, #16384
	str	r8, [r6, #624]
	b	.L13203
.L13256:
	movw	r3, #3570
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L13253
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC1015
	ldr	r0, .L13266+32
	movt	r2, #:upper16:.LC1015
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L13253:
	mvn	r0, #18
	b	.L13174
.L13199:
	ldr	r3, [r6, #624]
	cmp	r3, #16384
	bls	.L13191
	ldr	r9, [r4, #96]
	ldr	r10, [r4, #172]
	cmp	r10, #0
	beq	.L13208
	ldr	r0, [r10]
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13252
.L13260:
	movw	r3, #3666
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L13253
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC1023
	ldr	r0, .L13266+36
	movt	r2, #:upper16:.LC1023
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mvn	r0, #18
	b	.L13174
.L13258:
	movw	r3, #3618
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L13253
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC1017
	ldr	r0, .L13266+40
	movt	r2, #:upper16:.LC1017
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mvn	r0, #18
	b	.L13174
.L13267:
	.align	2
.L13266:
	.word	.LANCHOR7-2900
	.word	.LANCHOR7-2888
	.word	.LANCHOR7-2876
	.word	.LANCHOR4+3528
	.word	.LANCHOR4+3576
	.word	.LANCHOR4+3624
	.word	.LANCHOR4+3672
	.word	.LANCHOR4+3696
	.word	.LANCHOR4+3552
	.word	.LANCHOR4+3648
	.word	.LANCHOR4+3600
	.fnend
	.size	mtp_function_bind, .-mtp_function_bind
	.section	.rodata.str1.4
	.align	2
.LC1026:
	.ascii	"adb_function_bind dev: %pK\012\000"
	.align	2
.LC1027:
	.ascii	"usb_ep_autoconfig for adb ep_out got %s\012\000"
	.align	2
.LC1028:
	.ascii	"<3>adb_bind() could not allocate requests\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_bind, %function
adb_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3738
	mov	r5, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	mov	r4, r1
	movt	r6, #:upper16:.LANCHOR4
	strd	r8, [sp, #16]
	ldrh	r3, [r6, r3]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #24]
	.pad #36
	sub	sp, sp, #36
	tst	r3, #4
	str	r2, [sp, #28]
	str	r2, [r1, #84]
	bne	.L13314
.L13269:
	ldrb	r3, [r5, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L13313
	add	r1, r3, #12
	movw	r2, #3762
	movw	r8, #:lower16:.LANCHOR7
	str	r4, [r5, r1, lsl #2]
	ldrh	r2, [r6, r2]
	movt	r8, #:upper16:.LANCHOR7
	add	r1, r3, #1
	strb	r3, [r8, #-2810]
	strb	r1, [r5, #44]
	ldr	r9, [r4, #84]
	tst	r2, #4
	bne	.L13315
.L13272:
	ldr	r1, .L13322
	mov	r2, #0
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L13316
	movw	r3, #3810
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L13317
.L13275:
	ldr	r1, .L13322+4
	mov	r2, #0
	str	r4, [r7]
	str	r7, [r4, #92]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L13318
	movw	r3, #3858
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L13319
.L13277:
	mov	r0, r7
	str	r4, [r7]
	str	r7, [r4, #96]
	bl	adb_request_new.constprop.0
	cmp	r0, #0
	beq	.L13278
	movw	r3, #:lower16:adb_complete_out
	movw	r10, #:lower16:adb_complete_in
	str	r5, [sp, #24]
	movt	r3, #:upper16:adb_complete_out
	movt	r10, #:upper16:adb_complete_in
	mov	r9, #4
	add	fp, r4, #88
	str	r3, [r0, #28]
	add	r3, r4, #120
	str	r0, [r4, #152]
	str	r3, [sp, #20]
.L13279:
	ldr	r0, [r4, #92]
	bl	adb_request_new.constprop.0
	mov	r7, r0
	mov	r0, fp
	cmp	r7, #0
	beq	.L13278
	str	r10, [r7, #28]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	add	r0, r7, #36
	ldr	r2, [sp, #20]
	ldr	r1, [r4, #124]
	bl	__list_add
	mov	r1, r5
	mov	r0, fp
	bl	_raw_spin_unlock_irqrestore
	subs	r9, r9, #1
	bne	.L13279
	ldr	r5, [sp, #24]
	ldr	r2, [r5, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L13320
.L13281:
	movw	r3, #3882
	ldrh	r0, [r6, r3]
	tst	r0, #4
	ubfx	r0, r0, #2, #1
	bne	.L13321
.L13268:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13320:
	ldrb	r1, [r8, #-2798]	@ zero_extendqisi2
	ldrb	r3, [r8, #-2786]	@ zero_extendqisi2
	strb	r1, [r8, #-2774]
	strb	r3, [r8, #-2762]
	ldr	r0, [r2]
	ldr	r0, [r0, #20]
	cmp	r0, #4
	strbhi	r1, [r8, #-2750]
	strbhi	r3, [r8, #-2738]
	b	.L13281
.L13314:
	mov	r3, r2
	movw	r2, #:lower16:.LC1026
	ldr	r0, .L13322+8
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC1026
	mov	r3, r4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13269
.L13315:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1014
	mov	r3, r4
	movt	r2, #:upper16:.LC1014
	ldr	r0, .L13322+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13272
.L13317:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1016
	movt	r2, #:upper16:.LC1016
	ldr	r0, .L13322+16
	ldr	r3, [r7, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13275
.L13319:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1027
	movt	r2, #:upper16:.LC1027
	ldr	r0, .L13322+20
	ldr	r3, [r7, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13277
.L13321:
	ldr	ip, [r4, #96]
	movw	r0, #:lower16:.LC976
	movw	r3, #:lower16:.LC975
	ldr	lr, [r2]
	movt	r0, #:upper16:.LC976
	movt	r3, #:upper16:.LC975
	ldr	r1, [sp, #28]
	ldr	r2, [r4, #92]
	ldr	ip, [ip, #4]
	ldr	lr, [lr, #20]
	ldr	r1, [r1]
	ldr	r4, [r4]
	str	ip, [sp, #8]
	ldr	ip, [r2, #4]
	movw	r2, #:lower16:.LC1020
	cmp	lr, #2
	movt	r2, #:upper16:.LC1020
	movls	r3, r0
	add	r1, r1, #32
	ldr	r0, .L13322+24
	stm	sp, {r4, ip}
	bl	__dynamic_dev_dbg
	mov	r0, #0
	b	.L13268
.L13316:
	movw	r3, #3786
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L13313
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1015
	ldr	r0, .L13322+28
	movt	r2, #:upper16:.LC1015
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L13313:
	mvn	r0, #18
	b	.L13268
.L13318:
	movw	r3, #3834
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L13313
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1017
	ldr	r0, .L13322+32
	movt	r2, #:upper16:.LC1017
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mvn	r0, #18
	b	.L13268
.L13278:
	movw	r0, #:lower16:.LC1028
	movt	r0, #:upper16:.LC1028
	bl	printk
	mvn	r0, #0
	b	.L13268
.L13323:
	.align	2
.L13322:
	.word	.LANCHOR7-2800
	.word	.LANCHOR7-2788
	.word	.LANCHOR4+3720
	.word	.LANCHOR4+3744
	.word	.LANCHOR4+3792
	.word	.LANCHOR4+3840
	.word	.LANCHOR4+3864
	.word	.LANCHOR4+3768
	.word	.LANCHOR4+3816
	.fnend
	.size	adb_function_bind, .-adb_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_bind, %function
ffs_func_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #32]
	ldr	r3, [r1, #-32]
	.pad #44
	sub	sp, sp, #44
	ldr	r6, [r1, #-28]
	ldr	r3, [r3, #20]
	ldr	r4, [r6, #164]
	cmp	r3, #2
	bls	.L13423
	ldr	r2, [r6, #168]
	subs	r2, r2, #0
	movne	r2, #1
	cmp	r3, #4
	str	r2, [sp, #12]
	bls	.L13424
	ldr	r3, [r6, #172]
	subs	r3, r3, #0
	movne	r3, #1
	str	r3, [sp, #16]
.L13325:
	ldrh	r5, [r6, #180]
	cmp	r4, #0
	ldr	r2, [sp, #12]
	addne	r9, r4, #1
	moveq	r9, r4
	lsl	r3, r5, #3
	cmp	r2, #0
	sub	r7, r3, r5
	sub	r3, r3, r5
	add	r3, r3, r9
	ldrh	r9, [r6, #178]
	lsl	r7, r7, #2
	lsl	r2, r3, #2
	str	r2, [sp, #24]
	ldrne	r2, [r6, #168]
	lsl	r8, r9, #1
	addne	r2, r2, #1
	addne	r3, r3, r2
	lsl	r2, r3, #2
	str	r2, [sp, #20]
	ldr	r2, [sp, #16]
	cmp	r2, #0
	ldr	r2, [r6, #148]
	add	r0, r2, #3
	str	r2, [sp, #8]
	beq	.L13328
	ldr	r5, [r6, #172]
	add	r5, r5, #1
	add	r5, r5, r3
	add	r9, r9, r5, lsl #1
	lsl	r5, r5, #2
	lsl	r9, r9, #1
	add	r0, r9, r0
	bic	r0, r0, #3
.L13329:
	mov	r1, #208
	bl	__kmalloc
	subs	r3, r0, #0
	mvneq	r5, #11
	str	r3, [sp]
	beq	.L13324
	cmp	r7, #0
	bne	.L13493
.L13331:
	ldr	r3, [sp]
	ldr	r1, [r6, #144]
	ldr	r2, [r6, #152]
	add	r9, r3, r9
	mov	r0, r9
	add	r1, r1, #16
	bl	memcpy
	ldr	r3, [r10, #-28]
	ldr	r3, [r3, #172]
	cmp	r3, #0
	bne	.L13494
.L13332:
	ldr	r3, [sp]
	cmp	r8, #0
	add	r5, r3, r5
	bne	.L13495
.L13333:
	ldrh	r2, [r6, #180]
	cmp	r2, #0
	beq	.L13338
	ldr	r0, [sp]
	rsb	r3, r2, r2, lsl #3
	mvn	r1, #0
	add	r3, r0, r3, lsl #2
.L13337:
	subs	r2, r2, #1
	strb	r1, [r3, #20]
	sub	r3, r3, #28
	bne	.L13337
.L13338:
	ldr	r3, [sp]
	cmp	r4, #0
	str	r3, [r10, #-24]
	str	r5, [r10, #-4]
	beq	.L13336
	add	r3, r3, r7
	ldr	r4, [sp, #8]
	mov	r5, r9
	mov	r7, #0
	str	r6, [sp, #28]
	str	r3, [r10, #16]
	ldr	r3, [r6, #164]
	str	r3, [sp, #4]
	str	r9, [sp, #32]
.L13419:
	ldr	r2, [sp, #4]
	lsl	r1, r7, #2
	ldr	r3, [r10, #12]
	cmp	r2, r7
	moveq	r5, #0
	cmp	r3, #0
	beq	.L13340
	cmp	r5, #0
	mov	r2, #2
	str	r5, [r3, r7, lsl #2]
	beq	.L13496
.L13343:
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	cmp	r3, #5
	bne	.L13347
	ldrb	r8, [r5, #2]	@ zero_extendqisi2
	ldr	fp, [r10, #-24]
	and	r8, r8, #15
	sub	r6, r8, #1
	rsb	r6, r6, r6, lsl #3
	lsl	r3, r6, #2
	add	r9, fp, r3
	add	r2, r9, r2, lsl #2
	ldr	r1, [r2, #8]
	cmp	r1, #0
	bne	.L13429
	str	r5, [r2, #8]
	ldr	r2, [fp, r6, lsl #2]
	cmp	r2, #0
	beq	.L13346
	ldr	r3, [r9, #8]
	ldrh	r2, [r5, #4]	@ unaligned
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r2, #0
	strb	r3, [r5, #2]
	bne	.L13347
	ldr	r3, [r9, #8]
	ldrh	r3, [r3, #4]	@ unaligned
	strh	r3, [r5, #4]	@ unaligned
.L13347:
	cmp	r4, #1
	bls	.L13348
	ldrb	r2, [r5]	@ zero_extendqisi2
	cmp	r4, r2
	bcc	.L13348
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	cmp	r3, #11
	bhi	.L13349
	cmp	r3, #3
	bls	.L13348
	sub	r3, r3, #4
	cmp	r3, #7
	ldrls	pc, [pc, r3, asl #2]
	b	.L13348
.L13351:
	.word	.L13354
	.word	.L13353
	.word	.L13348
	.word	.L13348
	.word	.L13348
	.word	.L13352
	.word	.L13348
	.word	.L13350
.L13353:
	sub	r3, r2, #7
	tst	r3, #253
	bne	.L13348
	ldrb	r3, [r5, #2]	@ zero_extendqisi2
	tst	r3, #15
	bne	.L13356
.L13348:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1962
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L13357
	mvn	r5, #21
.L13324:
	mov	r0, r5
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13349:
	cmp	r3, #48
	bne	.L13348
	cmp	r2, #6
	bne	.L13348
.L13356:
	sub	r4, r4, r2
	add	r5, r5, r2
	add	r7, r7, #1
	b	.L13419
.L13340:
	ldr	r2, [r10, #8]
	cmp	r2, #0
	ldreq	r3, [r10, #16]
	strne	r5, [r2, r1]
	movne	r2, #1
	streq	r5, [r3, r1]
	cmp	r5, #0
	bne	.L13343
.L13496:
	ldr	r3, [sp, #8]
	ldr	r6, [sp, #28]
	ldr	r9, [sp, #32]
	sub	r4, r3, r4
	cmp	r4, #0
	mov	r5, r4
	blt	.L13324
.L13336:
	ldr	r3, [sp, #12]
	sub	r5, r10, #36
	str	r5, [sp, #4]
	cmp	r3, #0
	beq	.L13358
	ldr	r3, [sp]
	add	fp, r9, r4
	ldr	r2, [sp, #24]
	add	r3, r3, r2
	ldr	r2, [sp, #8]
	str	r3, [r10, #8]
	ldr	r8, [r6, #168]
	sub	r7, r2, r4
	cmp	r8, #0
	str	r7, [sp, #24]
	beq	.L13359
	mov	r1, #0
	str	r4, [sp, #28]
	mov	r4, r1
.L13416:
	mov	r3, r5
	mov	r2, fp
	mov	r1, r4
	mov	r0, #0
	bl	__ffs_func_bind_do_descs
	cmp	r0, #0
	blt	.L13497
	cmp	fp, #0
	beq	.L13498
	cmp	r7, #1
	bls	.L13348
	ldrb	r2, [fp]	@ zero_extendqisi2
	cmp	r7, r2
	bcc	.L13348
	ldrb	r3, [fp, #1]	@ zero_extendqisi2
	cmp	r3, #11
	bhi	.L13364
	cmp	r3, #3
	bls	.L13348
	sub	r3, r3, #4
	cmp	r3, #7
	ldrls	pc, [pc, r3, asl #2]
	b	.L13348
.L13366:
	.word	.L13369
	.word	.L13368
	.word	.L13348
	.word	.L13348
	.word	.L13348
	.word	.L13367
	.word	.L13348
	.word	.L13365
.L13364:
	cmp	r3, #48
	bne	.L13348
	cmp	r2, #6
	bne	.L13348
.L13371:
	add	r4, r4, #1
	sub	r7, r7, r2
	cmp	r8, r4
	add	fp, fp, r2
	bne	.L13416
	mov	r2, #0
	mov	r1, r8
	ldr	r3, [sp, #4]
	mov	r0, r2
	ldr	r4, [sp, #28]
	bl	__ffs_func_bind_do_descs
	subs	r5, r0, #0
	bge	.L13418
.L13414:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1842
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L13324
	movw	r1, #:lower16:.LC159
	mov	r2, r8
	movt	r1, #:upper16:.LC159
	mov	r3, r5
	add	r0, r0, #1824
	bl	__dynamic_pr_debug
	b	.L13324
.L13498:
	ldr	r4, [sp, #28]
.L13418:
	ldr	r3, [sp, #24]
	sub	r8, r3, r7
	cmp	r8, #0
	mov	r5, r8
	blt	.L13324
.L13362:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	beq	.L13373
	ldr	r3, [sp, #24]
	add	r4, r4, r8
	sub	r3, r3, r8
	str	r3, [sp, #16]
.L13422:
	ldr	r3, [sp]
	add	r4, r9, r4
	ldr	r2, [sp, #20]
	add	r0, r3, r2
	str	r0, [r10, #12]
	ldr	r8, [r6, #172]
	cmp	r8, #0
	beq	.L13374
	ldr	r5, [sp, #4]
	mov	fp, #0
	ldr	r7, [sp, #16]
.L13413:
	mov	r3, r5
	mov	r2, r4
	mov	r1, fp
	mov	r0, #0
	bl	__ffs_func_bind_do_descs
	cmp	r0, #0
	blt	.L13499
	cmp	r4, #0
	beq	.L13415
	cmp	r7, #1
	bls	.L13348
	ldrb	r2, [r4]	@ zero_extendqisi2
	cmp	r7, r2
	bcc	.L13348
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #11
	bhi	.L13379
	cmp	r3, #3
	bls	.L13348
	sub	r3, r3, #4
	cmp	r3, #7
	ldrls	pc, [pc, r3, asl #2]
	b	.L13348
.L13381:
	.word	.L13384
	.word	.L13383
	.word	.L13348
	.word	.L13348
	.word	.L13348
	.word	.L13382
	.word	.L13348
	.word	.L13380
.L13328:
	add	r9, r9, r3, lsl #1
	ldr	r3, [sp, #12]
	cmp	r4, #0
	movne	r3, #1
	lsl	r9, r9, #1
	cmp	r3, #1
	add	r0, r9, r0
	bic	r0, r0, #3
	bne	.L13427
	ldr	r5, [sp, #20]
	b	.L13329
.L13423:
	mov	r3, #0
	str	r3, [sp, #12]
	str	r3, [sp, #16]
	b	.L13325
.L13350:
	cmp	r2, #8
	bne	.L13348
	sub	r4, r4, r2
	add	r5, r5, r2
	add	r7, r7, #1
	b	.L13419
.L13352:
	cmp	r2, #5
	bne	.L13348
	sub	r4, r4, r2
	add	r5, r5, r2
	add	r7, r7, #1
	b	.L13419
.L13354:
	cmp	r2, #9
	bne	.L13348
	sub	r4, r4, r2
	add	r5, r5, r2
	add	r7, r7, #1
	b	.L13419
.L13365:
	cmp	r2, #8
	beq	.L13371
	b	.L13348
.L13367:
	cmp	r2, #5
	beq	.L13371
	b	.L13348
.L13368:
	sub	r3, r2, #7
	tst	r3, #253
	bne	.L13348
	ldrb	r3, [fp, #2]	@ zero_extendqisi2
	tst	r3, #15
	bne	.L13371
	b	.L13348
.L13369:
	cmp	r2, #9
	beq	.L13371
	b	.L13348
.L13380:
	cmp	r2, #8
	bne	.L13348
.L13386:
	add	fp, fp, #1
	sub	r7, r7, r2
	cmp	r8, fp
	add	r4, r4, r2
	bne	.L13413
	mov	r2, #0
	mov	r1, r8
	ldr	r3, [sp, #4]
	mov	r0, r2
	bl	__ffs_func_bind_do_descs
	subs	r5, r0, #0
	blt	.L13414
.L13415:
	ldr	r3, [sp, #16]
	subs	r5, r3, r7
	bmi	.L13324
.L13377:
	ldr	r3, [sp, #12]
	ldr	ip, [r6, #164]
	cmp	r3, #0
	beq	.L13411
	ldr	r3, [r6, #168]
	add	ip, ip, r3
.L13411:
	ldr	r3, [r6, #172]
	add	ip, ip, r3
.L13412:
	clz	r3, ip
	cmp	r9, #0
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r3, #0
	bne	.L13387
	ldr	lr, [sp, #8]
	cmp	lr, #1
	bls	.L13433
	mov	r0, r3
.L13389:
	ldrb	r1, [r9]	@ zero_extendqisi2
	cmp	lr, r1
	bcc	.L13433
	ldrb	r3, [r9, #1]	@ zero_extendqisi2
	cmp	r3, #11
	bhi	.L13390
	cmp	r3, #3
	bls	.L13433
	sub	r3, r3, #4
	cmp	r3, #7
	ldrls	pc, [pc, r3, asl #2]
	b	.L13433
.L13393:
	.word	.L13396
	.word	.L13395
	.word	.L13433
	.word	.L13433
	.word	.L13433
	.word	.L13394
	.word	.L13433
	.word	.L13392
.L13382:
	cmp	r2, #5
	beq	.L13386
	b	.L13348
.L13383:
	sub	r3, r2, #7
	tst	r3, #253
	bne	.L13348
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	tst	r3, #15
	bne	.L13386
	b	.L13348
.L13384:
	cmp	r2, #9
	beq	.L13386
	b	.L13348
.L13395:
	sub	r3, r1, #7
	tst	r3, #253
	bne	.L13433
	ldrb	r3, [r9, #2]	@ zero_extendqisi2
	tst	r3, #15
	bne	.L13402
.L13433:
	movw	r4, #:lower16:.LANCHOR2
	mvn	r5, #21
	movt	r4, #:upper16:.LANCHOR2
.L13391:
	movw	r3, #1962
	ldrh	r3, [r4, r3]
	tst	r3, #4
	beq	.L13324
	movw	r1, #:lower16:.LC163
	ldr	r2, .L13503
	mov	r3, r5
	movt	r1, #:upper16:.LC163
	ldr	r0, .L13503+4
	bl	__dynamic_pr_debug
	b	.L13324
.L13392:
	cmp	r1, #8
	bne	.L13433
	ldrb	r3, [r9, #7]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L13402
	ldr	r2, [r10, #-28]
	sub	r3, r3, #-536870911
	ldr	r2, [r2, #188]
	ldr	r2, [r2]
	ldr	r2, [r2, #4]
	ldrb	r3, [r2, r3, lsl #3]	@ zero_extendqisi2
	strb	r3, [r9, #7]
	b	.L13402
.L13394:
	cmp	r1, #5
	bne	.L13433
.L13402:
	adds	r9, r9, r1
	add	r0, r0, #1
	moveq	r3, #1
	movne	r3, #0
	cmp	ip, r0
	orreq	r3, r3, #1
	sub	r2, lr, r1
	cmp	r3, #0
	bne	.L13500
	cmp	r2, #1
	bls	.L13433
	mov	lr, r2
	b	.L13389
.L13396:
	cmp	r1, #9
	bne	.L13433
	ldrb	r2, [r9, #2]	@ zero_extendqisi2
	ldr	r3, [r10, #-4]
	lsl	r4, r2, #1
	ldrsh	r3, [r3, r4]
	cmp	r3, #0
	blt	.L13501
.L13398:
	ldrb	r2, [r9, #8]	@ zero_extendqisi2
	strb	r3, [r9, #2]
	cmp	r2, #0
	beq	.L13402
	ldr	r3, [r10, #-28]
	sub	r2, r2, #-536870911
	ldr	r3, [r3, #188]
	ldr	r3, [r3]
	ldr	r3, [r3, #4]
	ldrb	r3, [r3, r2, lsl #3]	@ zero_extendqisi2
	strb	r3, [r9, #8]
	b	.L13402
.L13390:
	cmp	r3, #48
	bne	.L13433
	cmp	r1, #6
	beq	.L13402
	b	.L13433
.L13379:
	cmp	r3, #48
	bne	.L13348
	cmp	r2, #6
	beq	.L13386
	b	.L13348
.L13500:
	ldr	r3, [sp, #8]
	add	r0, r1, r3
	subs	r5, r0, lr
	bmi	.L13324
.L13387:
	add	r4, r6, #116
	add	r5, r6, #100
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #96]
	mov	r7, r0
	ldrh	lr, [r6, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #96]
	cmp	lr, #0
	beq	.L13434
	add	r3, r6, #99
	mov	r0, r5
	add	lr, r3, lr
.L13409:
	ldrb	r2, [r3, #1]!	@ zero_extendqisi2
	mov	r1, r0
	sub	ip, r2, #5
	cmp	ip, #1
	strbls	r2, [r1], #1
	movls	r0, r1
	cmp	r3, lr
	bne	.L13409
	sub	lr, r0, r5
	add	r3, lr, #1
	uxth	lr, lr
	uxth	r3, r3
.L13407:
	add	lr, r6, lr
	strh	r3, [r6, #104]	@ movhi
	mov	r5, #0
	mov	r0, r4
	mov	r2, #1
	mov	r1, #3
	strb	r5, [lr, #100]
	bl	__wake_up_locked
	mov	r1, r7
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L13324
.L13495:
	mov	r2, r8
	mov	r1, #255
	mov	r0, r5
	bl	memset
	b	.L13333
.L13494:
	ldr	r1, [r6, #144]
	ldr	r0, [r6, #152]
	ldr	r3, [r6, #156]
	ldr	r2, [r6, #160]
	add	r0, r9, r0
	add	r1, r1, r3
	bl	memcpy
	b	.L13332
.L13493:
	mov	r1, r7
	bl	__memzero
	b	.L13331
.L13346:
	mov	r1, r5
	ldr	r0, [r10, #-32]
	str	r3, [sp, #36]
	bl	usb_ep_autoconfig_ss
	subs	r2, r0, #0
	beq	.L13430
	ldr	lr, [r10, #-24]
	mov	r1, #208
	ldr	r3, [sp, #36]
	str	r2, [sp, #36]
	ldr	ip, [r2, #8]
	add	r3, lr, r3
	str	r3, [r2]
	ldr	r3, [ip, #8]
	blx	r3
	cmp	r0, #0
	beq	.L13431
	ldr	r2, [sp, #36]
	str	r2, [fp, r6, lsl #2]
	str	r0, [r9, #4]
	ldrb	r3, [r5, #2]	@ zero_extendqisi2
	and	r3, r3, #15
	add	r3, r10, r3
	strb	r8, [r3, #-20]
	b	.L13347
.L13374:
	mov	r2, r8
	mov	r1, r8
	ldr	r3, [sp, #4]
	mov	r0, r8
	bl	__ffs_func_bind_do_descs
	subs	r5, r0, #0
	blt	.L13414
	b	.L13377
.L13427:
	movw	r5, #65012
	movt	r5, 65535
	b	.L13324
.L13501:
	ldr	r5, [r10, #-36]
	ldrb	r3, [r5, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L13502
	add	r2, r3, #1
	add	r7, r3, #12
	str	r10, [r5, r7, lsl #2]
	strb	r2, [r5, #44]
	ldr	r2, [r10, #-4]
	strh	r3, [r2, r4]	@ movhi
	ldr	r3, [r10, #-4]
	ldrsh	r3, [r3, r4]
	b	.L13398
.L13359:
	mov	r3, r5
	mov	r2, r8
	mov	r1, r8
	mov	r0, r8
	bl	__ffs_func_bind_do_descs
	subs	r5, r0, #0
	blt	.L13414
	b	.L13362
.L13429:
	mvn	r5, #21
.L13345:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1842
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L13324
	movw	r1, #:lower16:.LC159
	mov	r2, r7
	movt	r1, #:upper16:.LC159
	mov	r3, r5
	add	r0, r0, #1824
	bl	__dynamic_pr_debug
	b	.L13324
.L13357:
	movw	r1, #:lower16:.LC163
	mvn	r3, #21
	ldr	r2, .L13503
	movt	r1, #:upper16:.LC163
	ldr	r0, .L13503+4
	mov	r5, r3
	bl	__dynamic_pr_debug
	b	.L13324
.L13358:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	beq	.L13421
	ldr	r3, [sp, #8]
	sub	r3, r3, r4
	str	r3, [sp, #16]
	b	.L13422
.L13434:
	mov	r3, #1
	b	.L13407
.L13373:
	ldr	ip, [r6, #164]
	ldr	r3, [r6, #168]
	add	ip, ip, r3
	b	.L13412
.L13430:
	movw	r5, #65012
	movt	r5, 65535
	b	.L13345
.L13502:
	movw	r4, #:lower16:.LANCHOR2
	movw	r3, #1866
	movt	r4, #:upper16:.LANCHOR2
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L13400
.L13487:
	mvn	r5, #18
	b	.L13391
.L13421:
	ldr	ip, [r6, #164]
	b	.L13412
.L13431:
	mvn	r5, #11
	b	.L13345
.L13400:
	movw	r1, #:lower16:.LC160
	mvn	r3, #18
	ldr	r0, .L13503+8
	movt	r1, #:upper16:.LC160
	bl	__dynamic_pr_debug
	b	.L13487
.L13424:
	mov	r3, #0
	str	r3, [sp, #16]
	b	.L13325
.L13499:
	mov	r5, r0
	mov	r8, fp
	b	.L13414
.L13497:
	mov	r5, r0
	mov	r8, r4
	b	.L13414
.L13504:
	.align	2
.L13503:
	.word	.LANCHOR3+976
	.word	.LANCHOR2+1944
	.word	.LANCHOR2+1848
	.fnend
	.size	ffs_func_bind, .-ffs_func_bind
	.align	2
	.global	usb_ep_autoconfig
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig, %function
usb_ep_autoconfig:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r2, #0
	b	usb_ep_autoconfig_ss
	.fnend
	.size	usb_ep_autoconfig, .-usb_ep_autoconfig
	.align	2
	.global	usb_ep_autoconfig_reset
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_reset, %function
usb_ep_autoconfig_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	beq	.L13507
	mov	r1, #0
.L13508:
	ldr	r2, [r3, #12]
	str	r1, [r3]
	cmp	r0, r2
	sub	r3, r2, #12
	bne	.L13508
.L13507:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #3584]
	bx	lr
	.fnend
	.size	usb_ep_autoconfig_reset, .-usb_ep_autoconfig_reset
	.section	.rodata.str1.4
	.align	2
.LC1029:
	.ascii	"ep0 bMaxBurst must be 0\012\000"
	.text
	.align	2
	.global	config_ep_by_speed
	.syntax unified
	.arm
	.fpu softvfp
	.type	config_ep_by_speed, %function
config_ep_by_speed:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	mov	r4, r2
	add	r0, r0, #32
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	cmp	r6, #0
	clz	r3, r4
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r5, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L13517
	ldr	r3, [r5, #16]
	cmp	r3, #3
	beq	.L13513
	cmp	r3, #5
	beq	.L13549
.L13514:
	ldr	ip, [r6, #16]
	mov	r7, #0
.L13516:
	ldr	r3, [ip]
	cmp	r3, #0
	bne	.L13519
	b	.L13517
.L13550:
	ldr	r3, [ip, #4]!
	cmp	r3, #0
	beq	.L13517
.L13519:
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #5
	bne	.L13550
	cmp	ip, #0
	ldrbne	lr, [r4, #25]	@ zero_extendqisi2
	beq	.L13517
	ldrb	r1, [r3, #2]	@ zero_extendqisi2
	cmp	r1, lr
	beq	.L13551
.L13520:
	ldr	r3, [ip, #4]
	add	r1, ip, #4
	cmp	r3, #0
	bne	.L13523
	b	.L13517
.L13552:
	ldr	r3, [r1, #4]!
	cmp	r3, #0
	beq	.L13517
.L13523:
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	cmp	r3, #5
	bne	.L13552
	cmp	r1, #0
	beq	.L13517
	ldr	r3, [r1]
	mov	ip, r1
	ldrb	r1, [r3, #2]	@ zero_extendqisi2
	cmp	r1, lr
	bne	.L13520
.L13551:
	ldrb	r2, [r4, #24]	@ zero_extendqisi2
	mov	lr, #0
	cmp	r7, #0
	ldrh	r1, [r3, #4]	@ unaligned
	bic	r2, r2, #127
	strh	r1, [r4, #20]	@ movhi
	strb	r2, [r4, #24]
	str	r3, [r4, #28]
	str	lr, [r4, #32]
	beq	.L13526
	ldr	r2, [ip, #4]
	cmp	r2, #0
	beq	.L13517
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #48
	bne	.L13517
	str	r2, [r4, #32]
	ldr	r1, [r5, #16]
	cmp	r1, #5
	beq	.L13553
.L13526:
	mov	r0, #0
	b	.L13510
.L13517:
	mvn	r0, #4
.L13510:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13549:
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bhi	.L13554
.L13515:
	cmp	r3, #2
	bls	.L13514
	mov	r7, #0
	ldr	ip, [r6, #8]
	b	.L13516
.L13513:
	ldr	r3, [r5, #20]
	b	.L13515
.L13554:
	mov	r7, #1
	ldr	ip, [r6, #12]
	b	.L13516
.L13553:
	ldrb	r3, [r3, #3]	@ zero_extendqisi2
	and	r3, r3, #3
	cmp	r3, #1
	beq	.L13527
	sub	r3, r3, #2
	cmp	r3, #1
	bhi	.L13555
.L13529:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	mov	r0, #0
	ldrb	r2, [r4, #24]	@ zero_extendqisi2
	add	r3, r3, #1
	bfi	r2, r3, #2, #5
	strb	r2, [r4, #24]
	b	.L13510
.L13527:
	ldrb	r1, [r2, #3]	@ zero_extendqisi2
	ldrb	r3, [r4, #24]	@ zero_extendqisi2
	bfi	r3, r1, #0, #2
	strb	r3, [r4, #24]
	b	.L13529
.L13555:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13556
.L13530:
	ldrb	r3, [r4, #24]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, #0
	bfi	r3, r2, #2, #5
	strb	r3, [r4, #24]
	b	.L13510
.L13556:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC1029
	movt	r1, #:upper16:.LC1029
	add	r0, r0, #32
	bl	dev_err
	b	.L13530
	.fnend
	.size	config_ep_by_speed, .-config_ep_by_speed
	.section	.rodata.str1.4
	.align	2
.LC1030:
	.ascii	"can't enable %s, result %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_set_alt, %function
diag_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #88]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13560
	mov	r1, r4
	ldr	r0, [r5]
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13560
	ldr	r3, [r4, #124]
	cmp	r3, #0
	beq	.L13563
	str	r4, [r3, #20]
	ldr	r3, [r4, #88]
	str	r4, [r3]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13568
	ldr	r3, [r4, #84]
	str	r4, [r3]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13569
	add	r6, r4, #108
	str	r5, [r4, #128]
	mov	r0, r6
	str	r5, [r4, #132]
	str	r5, [r4, #136]
	bl	_raw_spin_lock_irqsave
	mov	r3, #1
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #112]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #124]
	ldr	r3, [r0, #12]
	cmp	r3, #0
	beq	.L13557
	mov	r2, r5
	mov	r1, r5
	ldr	r0, [r0, #16]
	blx	r3
.L13557:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13569:
	ldr	r2, [r4, #84]
	movw	r1, #:lower16:.LC1030
	mov	r3, r5
	ldr	r0, [r4, #116]
	movt	r1, #:upper16:.LC1030
	ldr	r2, [r2, #4]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13557
.L13568:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC1030
	mov	r3, r5
	ldr	r0, [r4, #116]
	movt	r1, #:upper16:.LC1030
	ldr	r2, [r2, #4]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	b	.L13557
.L13560:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L13557
.L13563:
	mvn	r5, #18
	b	.L13557
	.fnend
	.size	diag_function_set_alt, .-diag_function_set_alt
	.section	.rodata.str1.4
	.align	2
.LC1031:
	.ascii	"config_ep_by_speed failed for ep %s, result %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_set_alt, %function
rmnet_smd_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #84]
	ldr	r2, [r0, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13581
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13582
	mov	r1, r5
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13583
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13584
	mov	r1, r5
	ldr	r0, [r6]
	ldr	r2, [r5, #96]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13585
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13586
	add	r1, r5, #392
	ldr	r0, [r5, #388]
	bl	queue_work
	b	.L13570
.L13582:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1030
	mov	r3, r4
	ldr	r2, [r5, #92]
	movt	r1, #:upper16:.LC1030
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
.L13570:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13581:
	ldr	r2, [r5, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1031
	movt	r1, #:upper16:.LC1031
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #92]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13570
.L13583:
	ldr	r2, [r5, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC1031
	movt	r1, #:upper16:.LC1031
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
.L13580:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13570
.L13586:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1030
	mov	r3, r4
	ldr	r2, [r5, #96]
	movt	r1, #:upper16:.LC1030
.L13579:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13570
.L13584:
	movw	r1, #:lower16:.LC1030
	mov	r3, r4
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1030
	ldr	r2, [r5, #88]
	b	.L13580
.L13585:
	ldr	r2, [r5, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1031
	movt	r1, #:upper16:.LC1031
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #96]
	b	.L13579
	.fnend
	.size	rmnet_smd_set_alt, .-rmnet_smd_set_alt
	.section	.rodata.str1.4
	.align	2
.LC1032:
	.ascii	"config_ep_by_speed failes for ep %s, result %d\012\000"
	.align	2
.LC1033:
	.ascii	"<3>%s: unable to allocate memory for notify ep\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_set_alt, %function
rmnet_sdio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #84]
	ldr	r3, [r0, #92]
	str	r0, [r3]
	ldr	r2, [r0, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13607
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13608
	ldr	r3, [r5, #88]
	mov	r1, r5
	str	r5, [r3]
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13609
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13610
	mov	r1, r5
	ldr	r0, [r6]
	ldr	r2, [r5, #96]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13611
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13612
	ldr	r6, [r5, #96]
	mov	r1, #32
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	bne	.L13613
.L13595:
	mvn	r3, #11
	mov	r4, r3
	str	r3, [r5, #100]
.L13598:
	movw	r0, #:lower16:.LC1033
	ldr	r1, .L13614
	movt	r0, #:upper16:.LC1033
	bl	printk
	b	.L13587
.L13608:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1030
	mov	r3, r4
	ldr	r2, [r5, #92]
	movt	r1, #:upper16:.LC1030
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
.L13587:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13607:
	ldr	r2, [r5, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #92]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13587
.L13609:
	ldr	r2, [r5, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
.L13606:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13587
.L13612:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1030
	mov	r3, r4
	ldr	r2, [r5, #96]
	movt	r1, #:upper16:.LC1030
.L13605:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13587
.L13610:
	movw	r1, #:lower16:.LC1030
	mov	r3, r4
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1030
	ldr	r2, [r5, #88]
	b	.L13606
.L13613:
	mov	r2, #8
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r4, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4]
	beq	.L13597
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	bne	.L13597
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13595
.L13597:
	cmn	r4, #4096
	str	r4, [r5, #100]
	bhi	.L13598
	movw	r3, #:lower16:rmnet_sdio_notify_complete
	mov	r1, #8
	movt	r3, #:upper16:rmnet_sdio_notify_complete
	mov	r2, #1
	mov	r0, r5
	str	r3, [r4, #28]
	ldr	r3, [r5, #100]
	str	r5, [r3, #32]
	ldr	r3, [r5, #100]
	str	r1, [r3, #4]
	str	r2, [r5, #192]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rmnet_sdio_start_io
.L13611:
	ldr	r2, [r5, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #96]
	b	.L13605
.L13615:
	.align	2
.L13614:
	.word	.LANCHOR5-848
	.fnend
	.size	rmnet_sdio_set_alt, .-rmnet_sdio_set_alt
	.section	.rodata.str1.4
	.align	2
.LC1034:
	.ascii	"audio_set_alt intf %d, alt %d\012\000"
	.align	2
.LC1035:
	.ascii	"config_ep fail ep %s, result %d\012\000"
	.align	2
.LC1036:
	.ascii	"failedto enable ep%s, result %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_set_alt, %function
audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR4
	movw	r3, #3906
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	ip, #:upper16:.LANCHOR4
	mov	r4, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	ldrh	lr, [ip, r3]
	mov	r5, r1
	str	r8, [sp, #16]
	ldr	r0, [r0, #20]
	mov	r6, r2
	tst	lr, #4
	ldr	r7, [r0, #24]
	bne	.L13629
.L13617:
	movw	r1, #:lower16:.LANCHOR0
	movt	r1, #:upper16:.LANCHOR0
	ldrb	r1, [r1, #2354]	@ zero_extendqisi2
	cmp	r1, r5
	beq	.L13630
.L13623:
	mov	r5, #0
.L13616:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13630:
	cmp	r6, #0
	ldrb	r8, [r4, #152]	@ zero_extendqisi2
	beq	.L13619
	cmp	r8, #0
	bne	.L13623
	mov	r1, r4
	ldr	r0, [r7]
	ldr	r2, [r4, #104]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13631
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	strbeq	r3, [r4, #152]
	beq	.L13616
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1036
	mov	r3, r5
	ldr	r2, [r4, #104]
	movt	r1, #:upper16:.LC1036
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13616
.L13619:
	cmp	r8, #0
	moveq	r5, r6
	beq	.L13616
	ldr	r0, [r4, #104]
	mov	r5, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	strb	r6, [r4, #152]
	b	.L13616
.L13629:
	movw	r1, #:lower16:.LC1034
	mov	r3, r2
	add	r0, ip, #3888
	movt	r1, #:upper16:.LC1034
	mov	r2, r5
	bl	__dynamic_pr_debug
	b	.L13617
.L13631:
	ldr	r2, [r4, #104]
	movw	r1, #:lower16:.LC1035
	mov	r3, r5
	movt	r1, #:upper16:.LC1035
	str	r8, [r2, #28]
	ldr	r0, [r7]
	ldr	r2, [r4, #104]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13616
	.fnend
	.size	audio_set_alt, .-audio_set_alt
	.section	.rodata.str1.4
	.align	2
.LC1037:
	.ascii	"can't configure %s: %d\012\000"
	.align	2
.LC1038:
	.ascii	"can't start %s: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_start_ep, %function
f_midi_start_ep:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r2
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r2]
	ldr	r3, [r1, #20]
	cmp	r2, #0
	ldr	r7, [r3, #24]
	beq	.L13633
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #4]
	blx	r3
.L13633:
	mov	r1, r5
	mov	r2, r4
	ldr	r0, [r6, #84]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13641
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r1, [r4, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	streq	r6, [r4]
	bne	.L13642
.L13632:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13641:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1037
	mov	r3, r5
	movt	r1, #:upper16:.LC1037
	ldr	r2, [r4, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L13632
.L13642:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1038
	mov	r3, r5
	movt	r1, #:upper16:.LC1038
	ldr	r2, [r4, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L13632
	.fnend
	.size	f_midi_start_ep, .-f_midi_start_ep
	.section	.rodata.str1.4
	.align	2
.LC1039:
	.ascii	"%s queue req: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_set_alt, %function
f_midi_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, r0
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #88]
	ldr	r6, [r3, #24]
	bl	f_midi_start_ep
	subs	r5, r0, #0
	beq	.L13658
.L13643:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13658:
	mov	r1, r4
	mov	r0, r4
	ldr	r2, [r4, #92]
	bl	f_midi_start_ep
	subs	r5, r0, #0
	bne	.L13643
	ldr	r2, [r4, #92]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L13645
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #92]
.L13645:
	mov	r1, r4
	ldr	r0, [r4, #84]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13659
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13660
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldr	r3, [r4, #340]
	cmp	r3, #0
	beq	.L13643
	movw	r7, #:lower16:f_midi_complete
	mov	r6, r5
	movt	r7, #:upper16:f_midi_complete
	b	.L13648
.L13649:
	ldr	r3, [r4, #340]
	cmp	r3, r6
	bls	.L13643
.L13648:
	ldr	r0, [r4, #92]
	add	r6, r6, #1
	ldr	r1, [r4, #336]
	bl	midi_alloc_ep_req
	cmp	r0, #0
	mov	r2, #32
	mov	r1, r0
	beq	.L13652
	str	r7, [r0, #28]
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L13649
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC1039
	ldr	r2, [r4, #92]
	movt	r1, #:upper16:.LC1039
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13643
.L13652:
	mvn	r5, #11
	b	.L13643
.L13659:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1037
	mov	r3, r5
	ldr	r2, [r4, #92]
	movt	r1, #:upper16:.LC1037
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13643
.L13660:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1038
	mov	r3, r5
	ldr	r2, [r4, #92]
	movt	r1, #:upper16:.LC1038
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13643
	.fnend
	.size	f_midi_set_alt, .-f_midi_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_stop, %function
eth_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r1, [r0, #576]
	cmp	r1, #0
	beq	.L13678
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L13670:
	add	r7, r5, #1152
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #1156]
	mov	r6, r0
	cmp	r4, #0
	beq	.L13664
	ldr	r3, [r4, #140]
	cmp	r3, #0
	beq	.L13665
	mov	r0, r4
	blx	r3
.L13665:
	ldr	r0, [r4, #88]
	ldr	r2, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r8, [r2, #28]
	ldr	r9, [r0, #28]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #160]
	tst	r3, #4
	beq	.L13679
.L13664:
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L13661:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13679:
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r5, #1164]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13669
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5, #1164]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13669
	ldr	r3, [r4, #88]
	str	r9, [r3, #28]
	ldr	r3, [r4, #92]
	str	r8, [r3, #28]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	b	.L13664
.L13669:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L13661
.L13678:
	movw	r0, #:lower16:.LC101
	movw	r1, #1847
	movt	r0, #:upper16:.LC101
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC102
	movt	r0, #:upper16:.LC102
	bl	printk
	b	.L13670
	.fnend
	.size	eth_stop, .-eth_stop
	.section	.rodata.str1.4
	.align	2
.LC1040:
	.ascii	"acc_function_set_alt intf: %d alt: %d\012\000"
	.align	2
.LC1041:
	.ascii	"failed to enable ep %s, result %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_set_alt, %function
acc_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR4
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	movt	ip, #:upper16:.LANCHOR4
	movw	r3, #3930
	str	lr, [sp, #12]
	ldr	r0, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r3, [ip, r3]
	ldr	r6, [r0, #24]
	tst	r3, #4
	ldr	r0, [r6]
	bne	.L13692
.L13681:
	mov	r1, r5
	ldr	r2, [r5, #92]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13693
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13694
	mov	r1, r5
	ldr	r0, [r6]
	ldr	r2, [r5, #96]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13695
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13696
	ldrb	ip, [r5, #100]	@ zero_extendqisi2
	mov	r2, #1
	add	r0, r5, #1664
	mov	r3, r4
	mov	r1, #3
	orr	ip, ip, r2
	strb	ip, [r5, #100]
	bl	__wake_up
.L13680:
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13694:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1041
	mov	r3, r4
	ldr	r2, [r5, #92]
	movt	r1, #:upper16:.LC1041
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13680
.L13693:
	ldr	r2, [r5, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #92]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13680
.L13695:
	ldr	r2, [r5, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #96]
.L13691:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13680
.L13696:
	movw	r1, #:lower16:.LC1041
	mov	r3, r4
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1041
	ldr	r2, [r5, #96]
	b	.L13691
.L13692:
	mov	ip, r2
	movw	r2, #:lower16:.LC1040
	mov	r3, r1
	movt	r2, #:upper16:.LC1040
	add	r1, r0, #32
	ldr	r0, .L13697
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	b	.L13681
.L13698:
	.align	2
.L13697:
	.word	.LANCHOR4+3912
	.fnend
	.size	acc_function_set_alt, .-acc_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_set_alt, %function
fsg_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #88]
	ldr	r2, [r0, #100]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13699
	ldr	r0, [r5, #100]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L13709
.L13699:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13709:
	ldr	r3, [r5, #100]
	mov	r1, r5
	str	r6, [r3]
	ldrb	r3, [r5, #94]	@ zero_extendqisi2
	ldr	r2, [r5, #104]
	orr	r3, r3, #1
	strb	r3, [r5, #94]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13701
	ldr	r0, [r5, #104]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L13710
.L13701:
	ldr	r0, [r5, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r5, #94]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r5, #94]
	b	.L13699
.L13710:
	ldr	r3, [r5, #104]
	add	r1, r5, #96
	str	r6, [r3]
	ldrb	r3, [r5, #94]	@ zero_extendqisi2
	ldr	r2, [r5, #104]
	orr	r3, r3, #2
	strb	r3, [r5, #94]
	ldr	r3, [r2, #28]
	ldrh	r3, [r3, #4]	@ unaligned
	str	r3, [r6, #108]
	bl	_clear_bit
	ldr	r2, [r5, #88]
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r4, [r3, #3580]
	str	r5, [r2, #12]
	ldr	r5, [r5, #88]
	str	r4, [r3, #3964]
	add	r6, r5, #44
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #112]
	mov	r4, r0
	cmp	r3, #4
	bgt	.L13703
	ldr	r3, [r5, #56]
	mov	r1, #4
	ldr	r2, [r5, #168]
	str	r1, [r5, #112]
	str	r3, [r5, #116]
	cmp	r2, #0
	beq	.L13703
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L13703:
	mov	r1, r4
	mov	r0, r6
	movw	r4, #32767
	bl	_raw_spin_unlock_irqrestore
	b	.L13699
	.fnend
	.size	fsg_set_alt, .-fsg_set_alt
	.section	.rodata.str1.4
	.align	2
.LC1042:
	.ascii	"mtp_function_set_alt intf: %d alt: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_set_alt, %function
mtp_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movw	r3, #3954
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	movw	lr, #:lower16:.LANCHOR4
	ldr	r0, [r0, #20]
	movt	lr, #:upper16:.LANCHOR4
	.pad #8
	sub	sp, sp, #8
	ldrh	r3, [lr, r3]
	ldr	r6, [r0, #24]
	tst	r3, #4
	ldr	r0, [r6]
	bne	.L13724
.L13712:
	mov	r1, r5
	ldr	r2, [r5, #92]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13725
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13726
	mov	r1, r5
	ldr	r0, [r6]
	ldr	r2, [r5, #96]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13727
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13728
	ldr	r2, .L13729
	ldr	r3, [r5, #100]
	str	r2, [r3, #28]
	ldr	r0, [r5, #100]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L13718
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13711
.L13726:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1041
	mov	r3, r4
	ldr	r2, [r5, #92]
	movt	r1, #:upper16:.LC1041
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
.L13711:
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13725:
	ldr	r2, [r5, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #92]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13711
.L13718:
	mov	r2, #1
	add	r0, r5, #132
	mov	r3, r4
	mov	r1, #3
	str	r2, [r5, #104]
	bl	__wake_up
	b	.L13711
.L13727:
	ldr	r2, [r5, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #96]
.L13723:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13711
.L13724:
	mov	ip, r2
	movw	r2, #:lower16:.LC1042
	mov	r3, r1
	movt	r2, #:upper16:.LC1042
	add	r1, r0, #32
	add	r0, lr, #3936
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	b	.L13712
.L13728:
	movw	r1, #:lower16:.LC1041
	mov	r3, r4
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1041
	ldr	r2, [r5, #96]
	b	.L13723
.L13730:
	.align	2
.L13729:
	.word	.LANCHOR7-2876
	.fnend
	.size	mtp_function_set_alt, .-mtp_function_set_alt
	.section	.rodata.str1.4
	.align	2
.LC1043:
	.ascii	"<3>%s: unable to allocate memory for out req\012\000"
	.align	2
.LC1044:
	.ascii	"<3>%s: unable to allocate memory for in req\012\000"
	.align	2
.LC1045:
	.ascii	"<3>%s: config_ep_by_speed failed for ep#%s, err#%d\012"
	.ascii	"\000"
	.align	2
.LC1046:
	.ascii	"<3>%s: usb ep#%s enable failed, err#%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_set_alt, %function
ccid_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r1, #32
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #84]
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r0, #100]
	str	r3, [sp, #4]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L13732
	mov	r2, #4
	movw	r10, #:lower16:kmalloc_caches
	movt	r10, #:upper16:kmalloc_caches
	str	r2, [r4, #4]
	ldr	r0, [r10, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4]
	beq	.L13734
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	bne	.L13734
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L13732:
	mvn	r3, #11
	str	r3, [r5, #112]
.L13759:
	movw	r0, #:lower16:.LC1007
	ldr	r1, .L13781
	movt	r0, #:upper16:.LC1007
	bl	printk
	ldr	r4, [r5, #112]
	b	.L13731
.L13734:
	cmn	r4, #4096
	str	r4, [r5, #112]
	bhi	.L13759
	movw	r3, #:lower16:ccid_notify_complete
	mov	r1, #32
	movt	r3, #:upper16:ccid_notify_complete
	str	r3, [r4, #28]
	ldr	r3, [r5, #112]
	str	r5, [r3, #32]
	ldr	r6, [r5, #108]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L13761
	movw	r2, #522
	str	r2, [r4, #4]
	ldr	r0, [r10, #40]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4]
	beq	.L13738
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	bne	.L13738
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mvn	r4, #11
	ldr	r3, [r3, #12]
	blx	r3
.L13736:
	movw	r0, #:lower16:.LC1043
	ldr	r1, .L13781
	movt	r0, #:upper16:.LC1043
	bl	printk
.L13739:
	ldr	r0, [r5, #112]
	cmp	r0, #0
	beq	.L13731
	ldr	r1, [r5, #100]
	bl	ccid_request_free.part.0
	b	.L13731
.L13738:
	cmn	r4, #4096
	bhi	.L13736
	movw	r3, #:lower16:ccid_bulk_complete_out
	movw	r9, #:lower16:ccid_bulk_complete_in
	str	r5, [r4, #32]
	movt	r3, #:upper16:ccid_bulk_complete_out
	movt	r9, #:upper16:ccid_bulk_complete_in
	mov	r6, #4
	str	r3, [r4, #28]
	str	r4, [r5, #184]
.L13744:
	ldr	r7, [r5, #104]
	mov	r1, #32
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L13762
	movw	r3, #523
	mov	r1, #32
	mov	r2, r3
	str	r3, [r4, #4]
	ldr	r0, [r10, #40]
	mov	r3, #16
	cmp	r0, #0
	streq	r3, [r4]
	beq	.L13742
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	bne	.L13742
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mvn	r4, #11
	ldr	r3, [r3, #12]
	blx	r3
.L13740:
	movw	r0, #:lower16:.LC1044
	ldr	r1, .L13781
	movt	r0, #:upper16:.LC1044
	bl	printk
.L13743:
	ldr	r0, [r5, #184]
	cmp	r0, #0
	beq	.L13739
	ldr	r1, [r5, #108]
	bl	ccid_request_free.part.0
	b	.L13739
.L13742:
	cmn	r4, #4096
	add	r7, r5, #92
	add	r8, r5, #192
	mov	r0, r7
	bhi	.L13740
	str	r9, [r4, #28]
	str	r5, [r4, #32]
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	mov	r2, r8
	ldr	r1, [r5, #196]
	add	r0, r4, #36
	bl	__list_add
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	subs	r6, r6, #1
	bne	.L13744
	ldr	r3, [sp, #4]
	mov	r1, r5
	ldr	r2, [r5, #100]
	ldr	r0, [r3]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13775
	ldr	r0, [r5, #100]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13776
	ldr	r3, [r5, #100]
	mov	r1, r5
	str	r5, [r3]
	ldr	r3, [sp, #4]
	ldr	r2, [r5, #104]
	ldr	r0, [r3]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13777
	ldr	r0, [r5, #104]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13778
	ldr	r3, [sp, #4]
	mov	r1, r5
	ldr	r2, [r5, #108]
	ldr	r0, [r3]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13779
	ldr	r0, [r5, #108]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	moveq	r3, #1
	streq	r3, [r5, #96]
	streq	r3, [r5, #200]
	bne	.L13780
.L13731:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13762:
	mvn	r4, #11
	b	.L13740
.L13761:
	mvn	r4, #11
	b	.L13736
.L13780:
	ldr	r2, [r5, #108]
	movw	r0, #:lower16:.LC1046
	mov	r3, r4
	ldr	r1, .L13781
	movt	r0, #:upper16:.LC1046
	ldr	r2, [r2, #4]
	bl	printk
.L13752:
	ldr	r0, [r5, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L13749:
.L13746:
	ldr	r0, [r5, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #100]
	mov	r2, #0
	str	r2, [r3]
.L13754:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r5, #192]
	mov	r9, r0
	cmp	r8, r6
	beq	.L13755
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L13743
	mov	r0, r6
	ldr	r1, [r5, #104]
	bl	ccid_request_free.part.0
	b	.L13754
.L13779:
	ldr	r2, [r5, #108]
	movw	r0, #:lower16:.LC1045
	mov	r3, r4
	ldr	r1, .L13781
	movt	r0, #:upper16:.LC1045
	str	r6, [r2, #28]
	ldr	r2, [r5, #108]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L13752
.L13778:
	ldr	r2, [r5, #104]
	movw	r0, #:lower16:.LC1046
	mov	r3, r4
	ldr	r1, .L13781
	movt	r0, #:upper16:.LC1046
	ldr	r2, [r2, #4]
	bl	printk
	b	.L13749
.L13755:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L13743
.L13775:
	ldr	r2, [r5, #100]
	movw	r0, #:lower16:.LC1045
	mov	r3, r4
	ldr	r1, .L13781
	movt	r0, #:upper16:.LC1045
	str	r6, [r2, #28]
	ldr	r2, [r5, #100]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L13754
.L13777:
	ldr	r2, [r5, #104]
	movw	r0, #:lower16:.LC1045
	mov	r3, r4
	ldr	r1, .L13781
	movt	r0, #:upper16:.LC1045
	str	r6, [r2, #28]
	ldr	r2, [r5, #104]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L13749
.L13776:
	ldr	r2, [r5, #100]
	movw	r0, #:lower16:.LC1046
	mov	r3, r4
	ldr	r1, .L13781
	movt	r0, #:upper16:.LC1046
	ldr	r2, [r2, #4]
	bl	printk
	b	.L13754
.L13782:
	.align	2
.L13781:
	.word	.LANCHOR5-828
	.fnend
	.size	ccid_function_set_alt, .-ccid_function_set_alt
	.section	.rodata.str1.4
	.align	2
.LC1047:
	.ascii	"adb_function_set_alt intf: %d alt: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_set_alt, %function
adb_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR4
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	movt	ip, #:upper16:.LANCHOR4
	movw	r3, #3978
	str	lr, [sp, #12]
	ldr	r0, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r3, [ip, r3]
	ldr	r6, [r0, #24]
	tst	r3, #4
	ldr	r0, [r6]
	bne	.L13795
.L13784:
	mov	r1, r5
	ldr	r2, [r5, #92]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13796
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13797
	mov	r1, r5
	ldr	r0, [r6]
	ldr	r2, [r5, #96]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13798
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13799
	mov	r2, #1
	add	r0, r5, #128
	mov	r3, r4
	mov	r1, #3
	str	r2, [r5, #100]
	bl	__wake_up
.L13783:
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13797:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1041
	mov	r3, r4
	ldr	r2, [r5, #92]
	movt	r1, #:upper16:.LC1041
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13783
.L13796:
	ldr	r2, [r5, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #92]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13783
.L13798:
	ldr	r2, [r5, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #96]
.L13794:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13783
.L13799:
	movw	r1, #:lower16:.LC1041
	mov	r3, r4
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1041
	ldr	r2, [r5, #96]
	b	.L13794
.L13795:
	mov	ip, r2
	movw	r2, #:lower16:.LC1047
	mov	r3, r1
	movt	r2, #:upper16:.LC1047
	add	r1, r0, #32
	ldr	r0, .L13800
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	b	.L13784
.L13801:
	.align	2
.L13800:
	.word	.LANCHOR4+3960
	.fnend
	.size	adb_function_set_alt, .-adb_function_set_alt
	.section	.rodata.str1.4
	.align	2
.LC1048:
	.ascii	"qdss_set_alt\012\000"
	.align	2
.LC1049:
	.ascii	"<3>qdss_st_alt: qdss supportes HS or SS only\012\000"
	.align	2
.LC1050:
	.ascii	"<3>qdss_set_alt failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_set_alt, %function
qdss_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR4
	mov	r6, r2
	str	r8, [sp, #16]
	mov	r5, r1
	str	lr, [sp, #20]
	ldr	ip, [r0, #20]
	movw	r0, #4002
	ldrh	r0, [r3, r0]
	ldr	r2, [ip, #24]
	tst	r0, #4
	ldr	r7, [r2]
	bne	.L13822
.L13803:
	cmp	r6, #0
	bne	.L13814
	ldr	r3, [r7, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L13823
	ldrb	r3, [r4, #89]	@ zero_extendqisi2
	cmp	r3, r5
	beq	.L13824
	ldrb	r3, [r4, #88]	@ zero_extendqisi2
	cmp	r3, r5
	beq	.L13825
.L13809:
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	and	r3, r3, #7
	cmp	r3, #7
	moveq	r3, #1
	streq	r3, [r4, #92]
	beq	.L13812
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L13812
.L13813:
	mov	r5, #0
.L13802:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13812:
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L13813
	add	r1, r4, #156
	ldr	r0, [r4, #196]
	mov	r5, #0
	bl	queue_work
	b	.L13802
.L13824:
	mov	r0, r7
	mov	r1, r4
	ldr	r2, [r4, #108]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13810
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13804
	ldr	r3, [r4, #108]
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r4, #192]
	b	.L13809
.L13825:
	mov	r1, r4
	mov	r0, r7
	ldr	r2, [r4, #104]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13810
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13804
	ldr	r3, [r4, #104]
	mov	r0, r7
	mov	r1, r4
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	ldr	r2, [r4, #100]
	orr	r3, r3, #2
	strb	r3, [r4, #192]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13810
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13804
	ldr	r3, [r4, #100]
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	orr	r3, r3, #4
	strb	r3, [r4, #192]
	b	.L13809
.L13822:
	movw	r1, #:lower16:.LC1048
	add	r0, r3, #3984
	movt	r1, #:upper16:.LC1048
	bl	__dynamic_pr_debug
	b	.L13803
.L13810:
	mvn	r5, #21
	b	.L13802
.L13823:
	movw	r0, #:lower16:.LC1049
	mvn	r5, #21
	movt	r0, #:upper16:.LC1049
	bl	printk
.L13804:
	movw	r0, #:lower16:.LC1050
	movt	r0, #:upper16:.LC1050
	bl	printk
	mov	r0, r4
	bl	qdss_eps_disable
	b	.L13802
.L13814:
	mov	r5, #0
	b	.L13804
	.fnend
	.size	qdss_set_alt, .-qdss_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_set_alt, %function
rmnet_mux_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0, #84]
	ldr	r7, [r0, #96]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	bne	.L13847
.L13827:
	mvn	r3, #11
	mov	r4, r3
	str	r3, [r5, #100]
.L13826:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13847:
	mov	r2, #8
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r4, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4]
	beq	.L13829
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	bne	.L13829
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13827
.L13829:
	cmn	r4, #4096
	str	r4, [r5, #100]
	bhi	.L13826
	movw	r3, #:lower16:rmnet_mux_notify_complete
	mov	r2, #8
	movt	r3, #:upper16:rmnet_mux_notify_complete
	mov	r1, r5
	str	r3, [r4, #28]
	ldr	r3, [r5, #100]
	str	r5, [r3, #32]
	ldr	r3, [r5, #100]
	str	r2, [r3, #4]
	ldr	r3, [r5, #92]
	str	r5, [r3]
	ldr	r0, [r6]
	ldr	r2, [r5, #92]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13848
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13849
	ldr	r3, [r5, #88]
	mov	r1, r5
	str	r5, [r3]
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13850
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13851
	mov	r1, r5
	ldr	r0, [r6]
	ldr	r2, [r5, #96]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L13852
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L13853
	mov	r3, #1
	str	r4, [r5, #308]
	str	r3, [r5, #368]
	str	r4, [r5, #396]
	str	r4, [r5, #400]
	str	r4, [r5, #404]
	str	r4, [r5, #408]
	str	r4, [r5, #412]
	str	r4, [r5, #416]
	str	r4, [r5, #420]
	b	.L13826
.L13849:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1030
	mov	r3, r4
	ldr	r2, [r5, #92]
	movt	r1, #:upper16:.LC1030
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13826
.L13852:
	ldr	r2, [r5, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #96]
.L13846:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13826
.L13848:
	ldr	r2, [r5, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #92]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13826
.L13851:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1030
	mov	r3, r4
	ldr	r2, [r5, #88]
	movt	r1, #:upper16:.LC1030
.L13845:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13826
.L13850:
	ldr	r2, [r5, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r4
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r5, #88]
	b	.L13845
.L13853:
	movw	r1, #:lower16:.LC1030
	mov	r3, r4
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1030
	ldr	r2, [r5, #96]
	b	.L13846
	.fnend
	.size	rmnet_mux_set_alt, .-rmnet_mux_set_alt
	.align	2
	.global	usb_add_function
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_add_function, %function
usb_add_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #1986
	mov	r4, r1
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR4
	mov	r6, r0
	movt	r7, #:upper16:.LANCHOR4
	str	r8, [sp, #16]
	ldrh	r3, [r7, r3]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	tst	r3, #4
	bne	.L13884
.L13855:
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L13863
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L13863
	add	r8, r4, #72
	add	r2, r6, #36
	str	r6, [r4, #20]
	mov	r0, r8
	ldr	r1, [r6, #40]
	bl	__list_add
	ldr	r5, [r4, #32]
	cmp	r5, #0
	beq	.L13857
	mov	r1, r4
	mov	r0, r6
	blx	r5
	subs	r5, r0, #0
	blt	.L13885
.L13857:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13858
.L13887:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L13858
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L13858:
	tst	r3, #2
	bne	.L13859
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L13859
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L13859:
	tst	r3, #1
	bne	.L13860
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L13860
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L13860:
	cmp	r5, #0
	beq	.L13854
	movw	r3, #2010
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13886
.L13854:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13863:
	movw	r3, #2010
	mvn	r5, #21
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L13854
	b	.L13886
.L13885:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13858
	b	.L13887
.L13886:
	ldr	r1, [r6, #24]
	movw	r2, #:lower16:.LC938
	movt	r2, #:upper16:.LC938
	ldr	r0, .L13888
	ldr	r3, [r4]
	ldr	r1, [r1]
	strd	r4, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13854
.L13884:
	ldr	r3, [r1]
	movw	r2, #:lower16:.LC937
	add	r0, r7, #1968
	ldr	ip, [r6]
	movt	r2, #:upper16:.LC937
	ldr	r1, [r6, #24]
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13855
.L13889:
	.align	2
.L13888:
	.word	.LANCHOR4+1992
	.fnend
	.size	usb_add_function, .-usb_add_function
	.section	.rodata.str1.4
	.align	2
.LC1051:
	.ascii	"<3>%s(#) call conn_gadget_bind_config\012\000"
	.align	2
.LC1052:
	.ascii	"<6>conn_gadget_bind_config\012\000"
	.align	2
.LC1053:
	.ascii	"conn_gadget\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_bind_config, %function
conn_gadget_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC1051
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LC1051
	mov	r5, r1
	ldr	r1, .L13892
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1052
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1052
	ldr	r4, [r3, #2484]
	bl	printk
	movw	r2, #:lower16:.LC1053
	movw	r3, #:lower16:.LANCHOR7
	ldr	lr, [r5, #24]
	movt	r2, #:upper16:.LC1053
	movt	r3, #:upper16:.LANCHOR7
	sub	ip, r3, #2720
	movw	r1, #:lower16:conn_gadget_function_bind
	str	r2, [r4]
	sub	r2, r3, #2704
	sub	r3, r3, #2688
	movt	r1, #:upper16:conn_gadget_function_bind
	sub	ip, ip, #8
	sub	r2, r2, #8
	sub	r3, r3, #8
	mov	r0, r5
	strd	r2, [r4, #8]
	movw	r2, #:lower16:conn_gadget_function_disable
	str	ip, [r4, #16]
	movw	ip, #:lower16:conn_gadget_function_set_alt
	movt	r2, #:upper16:conn_gadget_function_disable
	str	r1, [r4, #32]
	movw	r1, #:lower16:conn_gadget_function_unbind
	movt	ip, #:upper16:conn_gadget_function_set_alt
	movt	r1, #:upper16:conn_gadget_function_unbind
	str	r1, [r4, #36]
	mov	r1, r4
	str	ip, [r4, #40]
	str	r2, [r4, #48]
	str	lr, [r4, #84]
	pop	{r4, r5, r6, lr}
	b	usb_add_function
.L13893:
	.align	2
.L13892:
	.word	.LANCHOR5-804
	.fnend
	.size	conn_gadget_function_bind_config, .-conn_gadget_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC1054:
	.ascii	"<6>adb_bind_config\012\000"
	.align	2
.LC1055:
	.ascii	"adb\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_bind_config, %function
adb_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1054
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1054
	mov	r5, r1
	ldr	r4, [r3, #3404]
	bl	printk
	ldr	r3, .L13897
	movw	r2, #:lower16:.LC1055
	movw	ip, #:lower16:adb_function_unbind
	movt	r2, #:upper16:.LC1055
	ldr	r1, [r5, #24]
	movt	ip, #:upper16:adb_function_unbind
	mov	r0, r5
	str	r2, [r4]
	add	r2, r3, #16
	str	r2, [r4, #8]
	str	r3, [r4, #16]
	str	r1, [r4, #84]
	ldr	r2, [r5, #24]
	movw	r1, #:lower16:adb_function_bind
	movt	r1, #:upper16:adb_function_bind
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r1, [r4, #32]
	mov	r1, r4
	str	ip, [r4, #36]
	cmp	r2, #4
	movw	r2, #:lower16:adb_function_set_alt
	addhi	r3, r3, #32
	movt	r2, #:upper16:adb_function_set_alt
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:adb_function_disable
	movt	r3, #:upper16:adb_function_disable
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	pop	{r4, r5, r6, lr}
	b	usb_add_function
.L13898:
	.align	2
.L13897:
	.word	.LANCHOR7-2672
	.fnend
	.size	adb_function_bind_config, .-adb_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC1056:
	.ascii	"<6>acc_bind_config\012\000"
	.align	2
.LC1057:
	.ascii	"accessory\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_bind_config, %function
accessory_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1056
	movt	r3, #:upper16:.LANCHOR1
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LC1056
	mov	r5, r1
	ldr	r4, [r3, #2488]
	bl	printk
	movw	r2, #:lower16:.LANCHOR7
	movt	r2, #:upper16:.LANCHOR7
	ldrb	r3, [r2, #-2616]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13900
	ldr	r1, [r5, #24]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13901
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #-2988]
	strb	r3, [r2, #-2616]
	strb	r3, [r1, #48]
.L13900:
	ldr	r3, .L13904
	movw	r2, #:lower16:.LC1057
	movw	ip, #:lower16:acc_function_unbind
	movt	r2, #:upper16:.LC1057
	ldr	r0, [r5, #24]
	movt	ip, #:upper16:acc_function_unbind
	str	r2, [r4]
	sub	r1, r3, #8
	add	r2, r3, #16
	str	r1, [r4, #4]
	movw	r1, #:lower16:acc_function_bind
	str	r2, [r4, #8]
	movt	r1, #:upper16:acc_function_bind
	str	r3, [r4, #16]
	str	r0, [r4, #84]
	ldr	r2, [r5, #24]
	mov	r0, r5
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r1, [r4, #32]
	mov	r1, r4
	str	ip, [r4, #36]
	cmp	r2, #4
	movw	r2, #:lower16:acc_function_set_alt
	addhi	r3, r3, #32
	movt	r2, #:upper16:acc_function_set_alt
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:acc_function_disable
	movt	r3, #:upper16:acc_function_disable
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	pop	{r4, r5, r6, lr}
	b	usb_add_function
.L13901:
	mvn	r0, #18
	pop	{r4, r5, r6, pc}
.L13905:
	.align	2
.L13904:
	.word	.LANCHOR7-2592
	.fnend
	.size	accessory_function_bind_config, .-accessory_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC1058:
	.ascii	"<6>mtp_bind_config\012\000"
	.align	2
.LC1059:
	.ascii	"mtp\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_bind_config, %function
mtp_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r0
	movw	r0, #:lower16:.LC1058
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1058
	mov	r6, r1
	ldr	r4, [r3, #2500]
	bl	printk
	movw	r2, #:lower16:.LANCHOR7
	movt	r2, #:upper16:.LANCHOR7
	ldrb	r3, [r2, #-2536]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13907
	ldr	r1, [r5, #24]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13908
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #-2904]
	strb	r3, [r2, #-2536]
	strb	r3, [r1, #48]
.L13907:
	ldr	r3, .L13914
	movw	r2, #:lower16:.LC1059
	cmp	r6, #0
	movt	r2, #:upper16:.LC1059
	ldr	r1, [r5, #24]
	str	r2, [r4]
	sub	r2, r3, #8
	str	r2, [r4, #4]
	str	r1, [r4, #84]
	beq	.L13909
	add	r2, r3, #20
	str	r2, [r4, #8]
	str	r3, [r4, #16]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	addhi	r3, r3, #40
	strhi	r3, [r4, #12]
	b	.L13911
.L13909:
	add	r2, r3, #72
	add	r1, r3, #92
	str	r1, [r4, #8]
	str	r2, [r4, #16]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	addhi	r3, r3, #112
	strhi	r3, [r4, #12]
.L13911:
	movw	r1, #:lower16:mtp_function_bind
	movw	ip, #:lower16:mtp_function_unbind
	movw	r2, #:lower16:mtp_function_set_alt
	movw	r3, #:lower16:mtp_function_disable
	movt	r1, #:upper16:mtp_function_bind
	movt	ip, #:upper16:mtp_function_unbind
	movt	r2, #:upper16:mtp_function_set_alt
	movt	r3, #:upper16:mtp_function_disable
	mov	r0, r5
	str	r1, [r4, #32]
	mov	r1, r4
	str	ip, [r4, #36]
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	pop	{r4, r5, r6, lr}
	b	usb_add_function
.L13908:
	mvn	r0, #18
	pop	{r4, r5, r6, pc}
.L13915:
	.align	2
.L13914:
	.word	.LANCHOR7-2512
	.fnend
	.size	mtp_bind_config, .-mtp_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_bind_config, %function
ptp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	mov	r1, #1
	b	mtp_bind_config
	.fnend
	.size	ptp_function_bind_config, .-ptp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_bind_config, %function
mtp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	mov	r1, #0
	b	mtp_bind_config
	.fnend
	.size	mtp_function_bind_config, .-mtp_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC1060:
	.ascii	"gmidi function\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_bind_config, %function
midi_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #4]
	cmp	r7, #0
	beq	.L13919
	mvn	r3, #0
	str	r3, [r7]
	str	r3, [r7, #4]
.L13919:
	movw	r5, #:lower16:kmalloc_caches
	movt	r5, #:upper16:kmalloc_caches
	ldr	r0, [r5, #36]
	cmp	r0, #0
	beq	.L13927
	mov	r2, #344
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13940
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L13941
.L13938:
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L13942
.L13925:
	mov	r5, #0
	movw	r1, #:lower16:f_midi_in_tasklet
	mov	r2, r4
	movt	r1, #:upper16:f_midi_in_tasklet
	strd	r4, [r3]
	add	r0, r4, #300
	strb	r5, [r3, #8]
	str	r3, [r4, #232]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	str	r3, [r4, #84]
	bl	tasklet_init
	mov	r0, r5
	mov	r1, #208
	bl	kstrdup
	mov	ip, r0
	mov	r3, #1
	mvn	r0, #0
	mov	r1, #1024
	mov	r2, #32
	str	r3, [r4, #320]
	str	r3, [r4, #324]
	str	r0, [r4, #328]
	mov	r0, r4
	str	ip, [r4, #332]
	str	r1, [r4, #336]
	str	r2, [r4, #340]
	bl	f_midi_register_card
	subs	r5, r0, #0
	blt	.L13923
	ldr	lr, .L13943
	movw	r3, #:lower16:.LC1060
	movw	ip, #:lower16:f_midi_bind
	movt	r3, #:upper16:.LC1060
	movw	r1, #:lower16:f_midi_unbind
	movw	r2, #:lower16:f_midi_set_alt
	movt	ip, #:upper16:f_midi_bind
	movt	r1, #:upper16:f_midi_unbind
	movt	r2, #:upper16:f_midi_set_alt
	stm	r4, {r3, lr}
	movw	r3, #:lower16:f_midi_disable
	mov	r0, r6
	movt	r3, #:upper16:f_midi_disable
	str	ip, [r4, #32]
	str	r1, [r4, #36]
	mov	r1, r4
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L13923
	cmp	r7, #0
	beq	.L13918
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r7]
	ldr	r3, [r4, #100]
	ldr	r3, [r3, #12]
	str	r3, [r7, #4]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r7]
	ldr	r3, [r4, #100]
	ldr	r3, [r3, #12]
	str	r3, [r7, #4]
	b	.L13918
.L13923:
	ldr	r0, [r4, #232]
	bl	kfree
.L13922:
	mov	r0, r4
	bl	kfree
.L13918:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13927:
	ldr	r0, [r5, #24]
	mov	r4, #16
	cmp	r0, #0
	bne	.L13938
.L13941:
	mov	r3, #16
	b	.L13925
.L13942:
	mvn	r5, #11
	b	.L13922
.L13940:
	mvn	r5, #11
	b	.L13918
.L13944:
	.align	2
.L13943:
	.word	.LANCHOR7-2368
	.fnend
	.size	midi_function_bind_config, .-midi_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC1061:
	.ascii	"qdss_bind_config\012\000"
	.align	2
.LC1062:
	.ascii	"qdss\000"
	.align	2
.LC1063:
	.ascii	"qdss_bind_config allocating channel\012\000"
	.align	2
.LC1064:
	.ascii	"<3>qdss_bind_config: allocating channel failed\012\000"
	.align	2
.LC1065:
	.ascii	"<3>qdss usb_add_function failed\012\000"
	.align	2
.LC1066:
	.ascii	"<3>%s: qdss: Cannot open channel qdss\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_bind_config, %function
qdss_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #4026
	movt	r4, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r4, r3]
	.pad #8
	sub	sp, sp, #8
	tst	r3, #4
	bne	.L13971
.L13946:
	movw	r2, #:lower16:.LANCHOR7
	movt	r2, #:upper16:.LANCHOR7
	ldrb	r3, [r2, #-2360]	@ zero_extendqisi2
	cmp	r3, #0
	movwne	r8, #:lower16:.LANCHOR0
	movtne	r8, #:upper16:.LANCHOR0
	bne	.L13947
	ldr	r1, [r6, #24]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13950
	add	r3, r3, #1
	movw	r8, #:lower16:.LANCHOR0
	uxtb	r3, r3
	movt	r8, #:upper16:.LANCHOR0
	strb	r3, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r2, #-2360]
	strb	r3, [r8, #4028]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13950
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #-2352]
	strb	r3, [r1, #48]
	strb	r3, [r8, #4040]
.L13947:
	ldr	r0, .L13977
	bl	_raw_spin_lock_irqsave
	ldr	r10, .L13977+4
	mov	r7, r0
	ldr	r5, [r8, #268]
	cmp	r5, r10
	sub	r5, r5, #4
	beq	.L13951
	movw	r9, #:lower16:.LC1062
	movt	r9, #:upper16:.LC1062
	b	.L13953
.L13972:
	ldr	r5, [r5, #4]
	cmp	r5, r10
	sub	r5, r5, #4
	beq	.L13951
.L13953:
	mov	r0, r9
	ldr	r1, [r5]
	bl	strcmp
	cmp	r0, #0
	bne	.L13972
	movw	r9, #:lower16:.LC1062
	sub	r4, r5, #112
	movt	r9, #:upper16:.LC1062
	str	r4, [r5, #20]
.L13959:
	mov	r1, r7
	ldr	r0, .L13977
	mov	r7, #0
	bl	_raw_spin_unlock_irqrestore
	movw	ip, #:lower16:qdss_set_alt
	ldr	r8, .L13977+8
	mov	r0, r6
	movt	ip, #:upper16:qdss_set_alt
	movw	r2, #:lower16:qdss_bind
	ldr	lr, [r6, #24]
	movw	r3, #:lower16:qdss_unbind
	ldr	r6, .L13977+12
	movt	r2, #:upper16:qdss_bind
	movt	r3, #:upper16:qdss_unbind
	movw	r1, #:lower16:qdss_disable
	str	r9, [r4]
	movt	r1, #:upper16:qdss_disable
	str	ip, [r4, #40]
	add	ip, r4, #148
	stmib	r4, {r6, r8}
	add	r6, r4, #140
	strd	r2, [r4, #32]
	movw	r2, #:lower16:usb_qdss_connect_work
	movw	r3, #:lower16:usb_qdss_disconnect_work
	movt	r2, #:upper16:usb_qdss_connect_work
	movt	r3, #:upper16:usb_qdss_disconnect_work
	str	r8, [r4, #16]
	str	r1, [r4, #48]
	mov	r1, #2560
	str	lr, [r4, #84]
	add	lr, r4, #160
	str	ip, [r4, #148]
	str	ip, [r4, #152]
	add	ip, r4, #176
	str	r6, [r4, #140]
	str	r6, [r4, #144]
	str	r1, [r4, #156]
	str	lr, [r4, #160]
	str	lr, [r4, #164]
	str	r2, [r4, #168]
	str	r1, [r4, #172]
	mov	r1, r4
	str	ip, [r4, #176]
	str	ip, [r4, #180]
	str	r3, [r4, #184]
	str	r7, [r4, #188]
	bl	usb_add_function
	subs	r6, r0, #0
	bne	.L13973
.L13945:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13951:
	movw	r3, #4050
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L13974
.L13958:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L13960
	mov	r2, #200
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13975
.L13954:
	ldr	r0, .L13977
	mov	r1, r7
	movw	r9, #:lower16:.LC1062
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	movt	r9, #:upper16:.LC1062
	mov	r0, r9
	mov	r2, #1
	mov	r1, #10
	str	r3, [sp]
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #196]
	beq	.L13976
	ldr	r0, .L13977
	add	r5, r4, #112
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r2, .L13977+4
	add	r0, r4, #116
	str	r9, [r4, #112]
	ldr	r1, [r8, #272]
	bl	__list_add
	b	.L13959
.L13960:
	mov	r4, #16
	b	.L13954
.L13971:
	movw	r1, #:lower16:.LC1061
	ldr	r0, .L13977+16
	movt	r1, #:upper16:.LC1061
	bl	__dynamic_pr_debug
	b	.L13946
.L13950:
	mvn	r6, #18
.L13949:
	movw	r0, #:lower16:.LC1066
	ldr	r1, .L13977+20
	movt	r0, #:upper16:.LC1066
	bl	printk
	b	.L13945
.L13974:
	movw	r1, #:lower16:.LC1063
	ldr	r0, .L13977+24
	movt	r1, #:upper16:.LC1063
	bl	__dynamic_pr_debug
	b	.L13958
.L13976:
	mov	r0, r4
	mvn	r6, #11
	bl	kfree
	b	.L13949
.L13973:
	movw	r0, #:lower16:.LC1065
	movt	r0, #:upper16:.LC1065
	bl	printk
	mov	r0, r4
	str	r7, [r5, #20]
	bl	kfree
	b	.L13949
.L13975:
	movw	r0, #:lower16:.LC1064
	mvn	r6, #11
	movt	r0, #:upper16:.LC1064
	bl	printk
	ldr	r0, .L13977
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L13949
.L13978:
	.align	2
.L13977:
	.word	.LANCHOR1+3332
	.word	.LANCHOR0+268
	.word	.LANCHOR7-4044
	.word	.LANCHOR7-2336
	.word	.LANCHOR4+4008
	.word	.LANCHOR5-768
	.word	.LANCHOR4+4032
	.fnend
	.size	qdss_function_bind_config, .-qdss_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC1067:
	.ascii	"acm%u\000"
	.align	2
.LC1068:
	.ascii	"<3>%s: Could not bind acm%u config\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_bind_config, %function
acm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r10, [r0, #4]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r10]
	cmp	r3, #0
	ble	.L13989
	movw	r5, #:lower16:.LANCHOR7
	movw	r8, #:lower16:kmalloc_caches
	movt	r5, #:upper16:.LANCHOR7
	mov	r7, r1
	sub	r9, r5, #2256
	movt	r8, #:upper16:kmalloc_caches
	mov	r6, #0
	sub	r9, r9, #8
	b	.L13980
.L13998:
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13995
.L13986:
	movw	r2, #:lower16:acm_connect
	movw	r0, #:lower16:acm_disconnect
	strb	fp, [r4, #146]
	movw	r3, #:lower16:acm_send_break
	movt	r2, #:upper16:acm_connect
	movt	r0, #:upper16:acm_disconnect
	movt	r3, #:upper16:acm_send_break
	mov	ip, #0
	movw	r1, #:lower16:.LC1067
	str	r2, [r4, #116]
	movt	r1, #:upper16:.LC1067
	mov	r2, fp
	str	r0, [r4, #120]
	mov	r0, #208
	str	r3, [r4, #124]
	str	ip, [r4, #148]
	bl	kasprintf
	cmp	r0, #0
	str	r0, [r4]
	beq	.L13996
	movw	r1, #:lower16:acm_bind
	movw	r0, #:lower16:acm_unbind
	str	r9, [r4, #4]
	movw	ip, #:lower16:acm_set_alt
	movw	r3, #:lower16:acm_setup
	movw	r2, #:lower16:acm_disable
	movt	r1, #:upper16:acm_bind
	movt	r0, #:upper16:acm_unbind
	movt	ip, #:upper16:acm_set_alt
	movt	r3, #:upper16:acm_setup
	movt	r2, #:upper16:acm_disable
	str	r1, [r4, #32]
	mov	r1, r4
	str	r0, [r4, #36]
	mov	r0, r7
	str	ip, [r4, #40]
	strd	r2, [r4, #48]
	bl	usb_add_function
	subs	fp, r0, #0
	bne	.L13997
	ldr	r3, [r10]
	add	r6, r6, #1
	cmp	r3, r6
	ble	.L13989
.L13980:
	ldrb	r3, [r5, #-2328]	@ zero_extendqisi2
	uxtb	fp, r6
	cmp	r3, #0
	bne	.L13982
	ldr	r2, [r7, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13985
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #-2328]
	strb	r3, [r5, #-2288]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13985
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #-2320]
	strb	r3, [r5, #-2276]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13985
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r5, #-2312]
	strb	r3, [r5, #-2265]
	strb	r3, [r2, #48]
.L13982:
	ldr	r0, [r8, #8]
	cmp	r0, #0
	bne	.L13998
	mov	r4, #16
	b	.L13986
.L13989:
	mov	fp, #0
.L13979:
	mov	r0, fp
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13985:
	mvn	fp, #18
.L13984:
	movw	r0, #:lower16:.LC1068
	ldr	r1, .L13999
	mov	r2, r6
	movt	r0, #:upper16:.LC1068
	bl	printk
	b	.L13979
.L13996:
	mov	r0, r4
	mvn	fp, #11
	bl	kfree
	b	.L13984
.L13995:
	mvn	fp, #11
	b	.L13984
.L13997:
	mov	r0, r4
	bl	kfree
	b	.L13984
.L14000:
	.align	2
.L13999:
	.word	.LANCHOR5-740
	.fnend
	.size	acm_function_bind_config, .-acm_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC1069:
	.ascii	"USB audio source\000"
	.align	2
.LC1070:
	.ascii	"USB gadget audio\000"
	.align	2
.LC1071:
	.ascii	"audio_source\000"
	.align	2
.LC1072:
	.ascii	"USB accessory audio source\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_bind_config, %function
audio_source_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mvn	ip, #0
	mov	r3, #0
	strd	r6, [sp, #8]
	mov	r2, r3
	mov	r6, r1
	str	r8, [sp, #16]
	mov	r1, r3
	str	lr, [sp, #20]
	ldr	r7, [r0, #4]
	.pad #16
	sub	sp, sp, #16
	add	lr, sp, #8
	mov	r0, ip
	str	ip, [r7]
	str	ip, [r7, #4]
	str	lr, [sp]
	bl	snd_card_create
	subs	r4, r0, #0
	beq	.L14009
.L14001:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14009:
	ldr	r3, [r6, #24]
	add	lr, sp, #12
	movw	r1, #:lower16:.LC1069
	ldr	r0, [sp, #8]
	mov	r2, r4
	movt	r1, #:upper16:.LC1069
	movw	r5, #:lower16:.LANCHOR7
	ldr	ip, [r3]
	mov	r3, #1
	add	ip, ip, #32
	str	ip, [r0, #496]
	stm	sp, {r4, lr}
	bl	snd_pcm_new
	subs	r4, r0, #0
	movtne	r5, #:upper16:.LANCHOR7
	bne	.L14005
	ldr	r3, [sp, #12]
	movt	r5, #:upper16:.LANCHOR7
	movw	r1, #:lower16:.LC1070
	sub	r8, r5, #2256
	movt	r1, #:upper16:.LC1070
	mov	r2, #80
	add	r0, r3, #88
	str	r4, [r3, #16]
	str	r8, [r3, #272]
	str	r3, [r5, #-2168]
	bl	strlcpy
	mov	r1, r4
	sub	r2, r5, #2096
	ldr	r0, [sp, #12]
	bl	snd_pcm_set_ops
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC1071
	mov	r2, #16
	movt	r1, #:upper16:.LC1071
	add	r0, r0, #20
	bl	strlcpy
	ldr	r0, [sp, #8]
	mov	r2, #32
	add	r1, r0, #20
	add	r0, r0, #36
	bl	strlcpy
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC1072
	mov	r2, #80
	movt	r1, #:upper16:.LC1072
	add	r0, r0, #68
	bl	strlcpy
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r4, r0, #0
	beq	.L14010
.L14003:
.L14004:
.L14005:
	ldr	r0, [r5, #-2172]
	bl	snd_card_free
	b	.L14001
.L14010:
	mov	r1, r8
	mov	r0, r6
	bl	usb_add_function
	subs	r4, r0, #0
	bne	.L14005
	ldr	r3, [sp, #12]
	ldr	r2, [r3]
	ldr	r2, [r2]
	str	r2, [r7]
	ldr	r2, [r3, #12]
	ldr	r3, [sp, #8]
	str	r2, [r7, #4]
	str	r3, [r5, #-2172]
	b	.L14001
	.fnend
	.size	audio_source_function_bind_config, .-audio_source_function_bind_config
	.align	2
	.global	usb_function_deactivate
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_function_deactivate, %function
usb_function_deactivate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r7, r4, #60
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #52]
	mov	r5, r0
	cmp	r1, #0
	bne	.L14012
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L14014
	blx	r3
	subs	r6, r0, #0
	bne	.L14013
	ldr	r1, [r4, #52]
.L14012:
	add	r1, r1, #1
	mov	r6, #0
	str	r1, [r4, #52]
.L14013:
	mov	r0, r7
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14014:
	mvn	r6, #94
	b	.L14013
	.fnend
	.size	usb_function_deactivate, .-usb_function_deactivate
	.align	2
	.global	usb_function_activate
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_function_activate, %function
usb_function_activate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L14023
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r4, #52]
	bne	.L14024
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L14020
	mov	r1, #1
	blx	r3
	mov	r4, r0
	b	.L14018
.L14024:
	mov	r4, #0
.L14018:
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14023:
	movw	r0, #:lower16:.LC583
	movw	r1, #315
	movt	r0, #:upper16:.LC583
	mvn	r4, #21
	bl	warn_slowpath_null
	b	.L14018
.L14020:
	mvn	r4, #94
	b	.L14018
	.fnend
	.size	usb_function_activate, .-usb_function_activate
	.align	2
	.global	usb_interface_id
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_interface_id, %function
usb_interface_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, r0
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	cmp	r0, #15
	bhi	.L14027
	add	ip, r0, #12
	add	r2, r0, #1
	str	r1, [r3, ip, lsl #2]
	strb	r2, [r3, #44]
	bx	lr
.L14027:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_interface_id, .-usb_interface_id
	.section	.rodata.str1.4
	.align	2
.LC1073:
	.ascii	" super\000"
	.align	2
.LC1074:
	.ascii	" high\000"
	.align	2
.LC1075:
	.ascii	" full\000"
	.align	2
.LC1076:
	.ascii	" full/low\000"
	.align	2
.LC1077:
	.ascii	"adding config #%u '%s'/%pK\012\000"
	.align	2
.LC1078:
	.ascii	"cfg %d/%pK speeds:%s%s%s\012\000"
	.align	2
.LC1079:
	.ascii	"  interface %d = %s/%pK\012\000"
	.align	2
.LC1080:
	.ascii	"added config '%s'/%u --> %d\012\000"
	.text
	.align	2
	.global	usb_add_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_add_config, %function
usb_add_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	ip, #4074
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r1
	str	r8, [sp, #16]
	mov	r5, r0
	mov	r6, r2
	str	lr, [sp, #20]
	ldrh	ip, [r3, ip]
	.pad #16
	sub	sp, sp, #16
	ldrb	r3, [r1, #20]	@ zero_extendqisi2
	tst	ip, #4
	bne	.L14174
.L14029:
	cmp	r6, #0
	cmpne	r3, #0
	beq	.L14059
	mov	r2, r5
	ldr	ip, [r2, #36]!
	cmp	r2, ip
	sub	ip, ip, #28
	bne	.L14032
	b	.L14031
.L14175:
	ldr	ip, [ip, #28]
	cmp	r2, ip
	sub	ip, ip, #28
	beq	.L14031
.L14032:
	ldrb	lr, [ip, #20]	@ zero_extendqisi2
	cmp	lr, r3
	bne	.L14175
	mvn	r6, #15
.L14030:
	ldr	r0, .L14190
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L14176
.L14028:
	mov	r0, r6
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14059:
	mvn	r6, #21
	b	.L14030
.L14031:
	add	r8, r4, #28
	str	r5, [r4, #24]
	ldr	r1, [r5, #40]
	mov	r0, r8
	mov	r7, #0
	bl	__list_add
	add	r3, r4, #36
	mov	r1, #64
	add	r0, r4, #48
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	strb	r7, [r4, #44]
	bl	__memzero
	mov	r0, r4
	blx	r6
	subs	r6, r0, #0
	blt	.L14177
	ldr	r3, .L14190+4
	ldr	r1, [r5]
	ldrh	r3, [r3, #2]
	tst	r3, #4
	bne	.L14178
.L14036:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L14040
	ldr	r0, .L14190+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L14179
.L14040:
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L14041
	ldr	r0, .L14190+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L14180
.L14041:
	ldr	r3, [r4, #56]
	cmp	r3, #0
	beq	.L14042
	ldr	r0, .L14190+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L14181
.L14042:
	ldr	r3, [r4, #60]
	cmp	r3, #0
	beq	.L14043
	ldr	r0, .L14190+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L14182
.L14043:
	ldr	r3, [r4, #64]
	cmp	r3, #0
	beq	.L14044
	ldr	r0, .L14190+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L14183
.L14044:
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L14045
	ldr	r0, .L14190+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L14184
.L14045:
	ldr	r3, [r4, #72]
	cmp	r3, #0
	beq	.L14046
	ldr	r0, .L14190+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L14185
.L14047:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L14048
	ldr	r0, .L14190+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L14186
.L14049:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L14050
	ldr	r0, .L14190+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L14187
.L14051:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L14052
	ldr	r0, .L14190+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L14188
.L14053:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L14054
	ldr	r0, .L14190+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L14189
.L14055:
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L14058
.L14034:
	mov	r0, #0
.L14057:
	ldr	r2, [r3, #12]
	str	r0, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L14057
.L14058:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	cmp	r6, #0
	str	r2, [r3, #3584]
	beq	.L14028
	b	.L14030
.L14185:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, r1, #32
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1079
	mov	r3, #6
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
.L14046:
	ldr	r3, [r4, #76]
	cmp	r3, #0
	beq	.L14047
	ldr	r0, .L14190+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	beq	.L14047
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, r1, #32
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1079
	mov	r3, #7
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L14047
.L14174:
	ldr	ip, [r1]
	movw	r2, #:lower16:.LC1077
	ldr	r1, [r5]
	movt	r2, #:upper16:.LC1077
	ldr	r0, .L14190+12
	str	ip, [sp]
	add	r1, r1, #32
	str	r4, [sp, #4]
	bl	__dynamic_dev_dbg
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	b	.L14029
.L14176:
	ldrb	ip, [r4, #20]	@ zero_extendqisi2
	str	r6, [sp, #4]
	movw	r2, #:lower16:.LC1080
	ldr	r1, [r5]
	movt	r2, #:upper16:.LC1080
	sub	r0, r0, #24
	ldr	r3, [r4]
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14028
.L14177:
	mov	r0, r8
	bl	list_del
	str	r7, [r4, #24]
	ldr	r1, [r5]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	bne	.L14034
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r7, [r3, #3584]
	b	.L14030
.L14189:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, r1, #32
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1079
	mov	r3, #14
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
.L14054:
	ldr	r3, [r4, #108]
	cmp	r3, #0
	beq	.L14055
	ldr	r0, .L14190+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	beq	.L14055
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, r1, #32
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1079
	mov	r3, #15
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L14055
.L14186:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, r1, #32
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1079
	mov	r3, #8
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
.L14048:
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L14049
	ldr	r0, .L14190+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	beq	.L14049
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, r1, #32
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1079
	mov	r3, #9
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L14049
.L14188:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, r1, #32
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1079
	mov	r3, #12
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
.L14052:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L14053
	ldr	r0, .L14190+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	beq	.L14053
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, r1, #32
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1079
	mov	r3, #13
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L14053
.L14187:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, r1, #32
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1079
	mov	r3, #10
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
.L14050:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L14051
	ldr	r0, .L14190+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	beq	.L14051
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, r1, #32
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1079
	mov	r3, #11
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L14051
.L14178:
	ldrb	r0, [r4, #45]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC888
	movw	r7, #:lower16:.LC1073
	movt	r2, #:upper16:.LC888
	movw	ip, #:lower16:.LC1074
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	movt	ip, #:upper16:.LC1074
	movt	r7, #:upper16:.LC1073
	add	r8, r1, #32
	tst	r0, #1
	moveq	r7, r2
	tst	r0, #2
	movne	lr, ip
	moveq	lr, r2
	tst	r0, #4
	moveq	ip, r2
	beq	.L14039
	ldr	r1, [r1, #20]
	movw	r2, #:lower16:.LC1075
	movw	ip, #:lower16:.LC1076
	movt	r2, #:upper16:.LC1075
	movt	ip, #:upper16:.LC1076
	cmp	r1, #2
	movhi	ip, r2
.L14039:
	movw	r2, #:lower16:.LC1078
	mov	r1, r8
	ldr	r0, .L14190+16
	movt	r2, #:upper16:.LC1078
	stm	sp, {r4, r7, lr}
	str	ip, [sp, #12]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L14036
.L14179:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, r1, #32
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1079
	mov	r3, #0
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L14040
.L14180:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, r1, #32
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1079
	mov	r3, #1
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L14041
.L14181:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, r1, #32
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1079
	mov	r3, #2
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L14042
.L14182:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, r1, #32
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1079
	mov	r3, #3
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L14043
.L14183:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, r1, #32
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1079
	mov	r3, #4
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L14044
.L14184:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, r1, #32
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1079
	mov	r3, #5
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L14045
.L14191:
	.align	2
.L14190:
	.word	.LANCHOR8-4032
	.word	.LANCHOR4+4096
	.word	.LANCHOR8-4048
	.word	.LANCHOR4+4056
	.word	.LANCHOR4+4080
	.fnend
	.size	usb_add_config, .-usb_add_config
	.section	.rodata.str1.4
	.align	2
.LC1081:
	.ascii	"<7>usb: %s cdev->config=%pK, config=%pK\012\000"
	.section	.text.unlikely
	.align	2
	.global	usb_remove_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_remove_config, %function
usb_remove_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	mov	r4, r0
	movw	r0, #:lower16:.LC1081
	ldr	r1, .L14216
	mov	r3, r5
	movt	r0, #:upper16:.LC1081
	ldr	r2, [r4, #12]
	add	r8, r4, #60
	bl	printk
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r5, #24]
	mov	r7, r0
	cmp	r6, #0
	beq	.L14214
	ldr	r3, [r4, #12]
	cmp	r3, r5
	bne	.L14201
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #1314
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L14195
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC878
	add	r0, r0, #1296
	movt	r2, #:upper16:.LC878
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L14195:
	ldr	r3, [r4, #12]
	mov	r9, #0
	ldr	r6, [r3, #36]
	sub	r6, r6, #72
.L14196:
	ldr	r3, [r4, #12]
	add	r2, r6, #72
	add	r3, r3, #36
	cmp	r2, r3
	beq	.L14215
	ldr	r3, [r6, #48]
	cmp	r3, #0
	beq	.L14197
	mov	r0, r6
	blx	r3
.L14197:
	ldr	r3, [r6, #72]
	str	r9, [r6, #80]
	sub	r6, r3, #72
	b	.L14196
.L14215:
	mov	r3, #0
	str	r3, [r4, #12]
	str	r3, [r4, #56]
	ldr	r3, [r5, #24]
	cmp	r3, #0
	beq	.L14199
.L14201:
	add	r0, r5, #28
	bl	list_del
.L14199:
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r5
	mov	r0, r4
	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
	b	unbind_config
.L14214:
	movw	r0, #:lower16:.LC583
	mov	r1, #896
	movt	r0, #:upper16:.LC583
	bl	warn_slowpath_null
	mov	r0, r8
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
.L14217:
	.align	2
.L14216:
	.word	.LANCHOR5-712
	.fnend
	.size	usb_remove_config, .-usb_remove_config
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_disable, %function
android_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #8]
	ldr	r1, [r0, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r0, #20]
	bne	.L14218
	mov	r4, r0
	ldr	r0, [r5]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L14220
	blx	r3
	ldr	r0, [r5]
.L14220:
	ldr	r0, [r0, #4]
	ldr	r1, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r3, [r4, #500]!
	cmp	r4, r3
	sub	r3, r3, #120
	bne	.L14228
.L14218:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14228:
	mov	r6, r3
.L14222:
	mov	r1, r6
	mov	r0, r5
	bl	usb_remove_config
	ldr	r3, [r6, #120]
	cmp	r4, r3
	sub	r6, r3, #120
	beq	.L14218
	b	.L14222
	.fnend
	.size	android_disable, .-android_disable
	.section	.rodata.str1.4
	.align	2
.LC1082:
	.ascii	"<6>adb_release\012\000"
	.align	2
.LC1083:
	.ascii	"<3>%s: adb_closed_callback: data->dev is NULL\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_release, %function
adb_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L14252
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r0, .L14252+4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L14248
.L14230:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3404]
	ldrb	r2, [r3, #160]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L14249
.L14231:
	add	r2, r3, #116
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14249:
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldr	r6, [r3, #-2012]
	ldr	r5, [r3, #-1996]
	cmp	r5, #0
	beq	.L14250
.L14232:
	add	r7, r5, #24
	mov	r8, #0
	mov	r0, r7
	bl	mutex_lock
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	strb	r8, [r6]
	cmp	r3, r8
	beq	.L14251
	mov	r0, r5
	bl	android_disable
	str	r8, [r6, #4]
.L14236:
	mov	r0, r7
	bl	mutex_unlock
.L14235:
	ldr	r3, [r4, #3404]
	mov	r2, #1
	strb	r2, [r3, #161]
	b	.L14231
.L14250:
	ldr	r5, [r6, #4]
	cmp	r5, #0
	bne	.L14232
	movw	r0, #:lower16:.LC1083
	ldr	r1, .L14252+8
	movt	r0, #:upper16:.LC1083
	bl	printk
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	strb	r5, [r6]
	cmp	r3, #0
	moveq	r5, r3
	str	r5, [r6, #4]
	b	.L14235
.L14251:
	str	r3, [r6, #4]
	b	.L14236
.L14248:
	movw	r0, #:lower16:.LC1082
	movt	r0, #:upper16:.LC1082
	bl	printk
	b	.L14230
.L14253:
	.align	2
.L14252:
	.word	.LANCHOR5-692
	.word	.LANCHOR7-2040
	.word	.LANCHOR5-680
	.fnend
	.size	adb_release, .-adb_release
	.section	.rodata.str1.4
	.align	2
.LC1084:
	.ascii	"<3>%s: adb_closed_callback: config->dev is NULL\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_data_clear, %function
ffs_data_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r0, #0
	add	r5, r4, #128
	strd	r6, [sp, #8]
	mov	r1, r5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L14287
.L14256:
	ldr	r3, [r4]
	cmp	r3, #0
	bne	.L14288
.L14264:
	ldr	r8, [r4, #208]
	cmp	r8, #0
	beq	.L14265
	ldrh	r6, [r4, #180]
	cmp	r6, #0
	beq	.L14266
	mov	r7, r3
	mov	r5, r8
.L14270:
	ldr	r3, [r5]
	cmp	r3, #1
	bne	.L14267
	ldr	r2, [r5, #24]
	add	r3, r5, #24
	cmp	r2, r3
	bne	.L14267
	ldr	r0, [r5, #44]
	cmp	r0, #0
	beq	.L14269
	bl	d_delete
	ldr	r0, [r5, #44]
	bl	dput
	str	r7, [r5, #44]
.L14269:
	subs	r6, r6, #1
	add	r5, r5, #56
	bne	.L14270
.L14266:
	mov	r0, r8
	bl	kfree
.L14265:
	ldr	r0, [r4, #144]
	bl	kfree
	ldr	r0, [r4, #184]
	bl	kfree
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r4, #188]
	ldrd	r4, [sp]
	add	sp, sp, #24
	b	kfree
.L14267:
	.syntax divided
@ 1521 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1521, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L14287:
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldr	r8, [r3, #-1960]
	ldr	r7, [r3, #-1944]
	cmp	r7, #0
	beq	.L14289
.L14257:
	add	r0, r7, #24
	bl	mutex_lock
	ldrb	r3, [r8, #1]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L14259
.L14260:
	mov	r6, #0
	strb	r6, [r8]
	str	r6, [r8, #4]
	str	r6, [r8, #8]
	ldr	r3, [r4]
	cmp	r3, r6
	beq	.L14290
	ldr	r0, [r3, #4]
	ldr	r1, [r4, #28]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, r4
	str	r6, [r4, #28]
	str	r6, [r3], #84
	.syntax divided
@ 99 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L14291
.L14272:
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit
.L14262:
	cmp	r7, #0
	beq	.L14256
	add	r0, r7, #24
	bl	mutex_unlock
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L14264
.L14288:
	.syntax divided
@ 1394 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1394, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L14259:
	mov	r0, r7
	bl	android_disable
	b	.L14260
.L14289:
	ldr	r7, [r8, #8]
	cmp	r7, #0
	bne	.L14257
	movw	r0, #:lower16:.LC1084
	ldr	r1, .L14292
	movt	r0, #:upper16:.LC1084
	bl	printk
	b	.L14260
.L14290:
	movw	r0, #:lower16:.LC31
	movw	r1, #1475
	movt	r0, #:upper16:.LC31
	bl	warn_slowpath_null
	b	.L14262
.L14291:
	mov	r0, r4
	bl	ffs_data_put.part.0
	b	.L14272
.L14293:
	.align	2
.L14292:
	.word	.LANCHOR5-660
	.fnend
	.size	ffs_data_clear, .-ffs_data_clear
	.section	.rodata.str1.4
	.align	2
.LC1085:
	.ascii	"<6>%s(): freeing\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_data_put.part.0, %function
ffs_data_put.part.0:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC1085
	ldr	r1, .L14298
	movt	r0, #:upper16:.LC1085
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L14295
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	beq	.L14296
.L14295:
	.syntax divided
@ 1345 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1345, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L14296:
	mov	r0, r4
	pop	{r4, lr}
	b	kfree
.L14299:
	.align	2
.L14298:
	.word	.LANCHOR5-632
	.fnend
	.size	ffs_data_put.part.0, .-ffs_data_put.part.0
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_fs_kill_sb, %function
ffs_fs_kill_sb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	kill_litter_super
	ldr	r0, [r4, #488]
	cmp	r0, #0
	beq	.L14300
	add	r3, r0, #84
	.syntax divided
@ 99 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L14305
.L14300:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14305:
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	ffs_data_put.part.0
	.fnend
	.size	ffs_fs_kill_sb, .-ffs_fs_kill_sb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_free, %function
ffs_func_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r4, [r0, #12]
	add	r0, r3, #24
	ldrh	r5, [r3, #180]
	bl	_raw_spin_lock_irqsave
	add	r4, r4, #28
	mov	r8, r0
.L14308:
	ldr	r3, [r4, #-28]
	cmp	r3, #0
	mov	r0, r3
	beq	.L14307
	ldr	r1, [r4, #-24]
	cmp	r1, #0
	beq	.L14307
	ldr	r3, [r3, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L14307:
	subs	r5, r5, #1
	add	r4, r4, #28
	str	r6, [r4, #-56]
	str	r6, [r4, #-52]
	bne	.L14308
	ldr	r0, [r7, #8]
	mov	r1, r8
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r7, #8]
	add	r3, r0, #84
	.syntax divided
@ 99 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L14318
.L14309:
	ldr	r0, [r7, #12]
	bl	kfree
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	kfree
.L14318:
	bl	ffs_data_put.part.0
	b	.L14309
	.fnend
	.size	ffs_func_free, .-ffs_func_free
	.section	.rodata.str1.4
	.align	2
.LC1086:
	.ascii	"Function FS Gadget\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_bind_config, %function
ffs_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r2, [r0, #4]
	.pad #20
	sub	sp, sp, #20
	ldr	r0, [r3, #28]
	ldr	r7, [r1, #24]
	ldr	r6, [r2, #4]
	cmp	r0, #0
	beq	.L14331
	mov	r2, #120
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	mvneq	r6, #11
	bne	.L14320
.L14319:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L14331:
	mov	r4, #16
.L14320:
	movw	r3, #:lower16:.LC1086
	movw	r1, #:lower16:ffs_func_bind
	movt	r3, #:upper16:.LC1086
	movw	r2, #:lower16:ffs_func_set_alt
	movt	r1, #:upper16:ffs_func_bind
	movt	r2, #:upper16:ffs_func_set_alt
	str	r3, [r4, #36]
	movw	r3, #:lower16:ffs_func_unbind
	ldr	ip, [r6, #188]
	movt	r3, #:upper16:ffs_func_unbind
	movw	r0, #:lower16:ffs_func_disable
	str	r5, [r4]
	str	r1, [r4, #68]
	movw	r1, #:lower16:ffs_func_setup
	movt	r0, #:upper16:ffs_func_disable
	str	r2, [r4, #76]
	movw	r2, #:lower16:ffs_func_resume
	movt	r1, #:upper16:ffs_func_setup
	str	r3, [r4, #72]
	movw	r3, #:lower16:ffs_func_suspend
	movt	r2, #:upper16:ffs_func_resume
	movt	r3, #:upper16:ffs_func_suspend
	str	ip, [r4, #40]
	str	r0, [r4, #84]
	str	r1, [r4, #88]
	str	r3, [r4, #92]
	add	r3, r6, #84
	str	r2, [r4, #96]
	ldr	r2, [r7]
	stmib	r4, {r2, r6}
	.syntax divided
@ 45 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #1986
	movt	r7, #:upper16:.LANCHOR4
	add	r8, r4, #36
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L14357
.L14322:
	ldr	r3, [r4, #76]
	cmp	r3, #0
	beq	.L14326
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L14326
	add	r9, r4, #108
	add	r2, r5, #36
	str	r5, [r4, #56]
	mov	r0, r9
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r6, [r4, #68]
	cmp	r6, #0
	beq	.L14327
	mov	r1, r8
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	blt	.L14358
.L14327:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L14328
	ldr	r2, [r4, #52]
	cmp	r2, #0
	beq	.L14328
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L14328:
	tst	r3, #2
	bne	.L14329
	ldr	r2, [r4, #44]
	cmp	r2, #0
	beq	.L14329
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L14329:
	tst	r3, #1
	bne	.L14330
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L14330
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L14330:
	cmp	r6, #0
	beq	.L14319
	movw	r3, #2010
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L14324
.L14325:
	mov	r0, r4
	bl	ffs_func_free
	b	.L14319
.L14326:
	movw	r3, #2010
	mvn	r6, #21
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L14325
.L14324:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC938
	movt	r2, #:upper16:.LC938
	ldr	r0, .L14359
	ldr	r3, [r4, #36]
	ldr	r1, [r1]
	str	r8, [sp]
	str	r6, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14325
.L14358:
	mov	r0, r9
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #56]
	b	.L14327
.L14357:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC937
	add	r0, r7, #1968
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC937
	ldr	r3, [r4, #36]
	ldr	r1, [r1]
	stm	sp, {r8, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14322
.L14360:
	.align	2
.L14359:
	.word	.LANCHOR4+1992
	.fnend
	.size	ffs_function_bind_config, .-ffs_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_unbind, %function
ffs_func_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	sub	r6, r1, #36
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r1, #-28]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #132]
	cmp	r3, r6
	beq	.L14377
.L14362:
	add	r5, r4, #116
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r7, r0
	add	lr, r4, #100
	ldrh	r2, [r4, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r4, #96]
	cmp	r2, #0
	beq	.L14371
	add	r1, r4, #99
	mov	r3, lr
	add	r2, r1, r2
.L14370:
	ldrb	ip, [r1, #1]!	@ zero_extendqisi2
	mov	r0, r3
	sub	r8, ip, #5
	cmp	r8, #1
	strbls	ip, [r0], #1
	movls	r3, r0
	cmp	r2, r1
	bne	.L14370
	sub	r3, r3, lr
	add	r1, r3, #1
	uxth	r3, r3
	uxth	r1, r1
.L14368:
	add	r3, r4, r3
	strh	r1, [r4, #104]	@ movhi
	mov	r2, #1
	mov	r0, r5
	mov	r1, #3
	strb	r2, [r3, #100]
	bl	__wake_up_locked
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	ffs_func_free
.L14377:
	ldr	r7, [r1, #-24]
	add	r0, r4, #24
	mov	r5, r1
	ldrh	fp, [r4, #180]
	mov	r10, #1
	mov	r9, #0
	ldr	r8, [r4, #208]
	bl	_raw_spin_lock_irqsave
	add	r7, r7, #28
	str	r0, [sp, #4]
	b	.L14366
.L14378:
	ldr	r3, [r3, #8]
	add	r7, r7, #28
	add	r8, r8, #56
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r7, #-56]
	subs	fp, fp, #1
	str	r9, [r3]
	str	r9, [r8, #-16]
	beq	.L14365
.L14366:
	str	r10, [r8, #32]
	ldr	r3, [r7, #-28]
	subs	r0, r3, #0
	bne	.L14378
	subs	fp, fp, #1
	add	r7, r7, #28
	str	r3, [r8, #40]
	add	r8, r8, #56
	bne	.L14366
.L14365:
	ldr	r0, [r5, #-28]
	ldr	r1, [sp, #4]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r4, #132]
	b	.L14362
.L14371:
	mov	r3, r2
	mov	r1, #1
	b	.L14368
	.fnend
	.size	ffs_func_unbind, .-ffs_func_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_release, %function
ffs_epfile_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #1
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r3, [r0, #328]
	ldr	r4, [r3, #36]
	str	r2, [r3, #32]
	add	r3, r4, #88
	.syntax divided
@ 99 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #0
	beq	.L14383
.L14380:
	add	r3, r4, #84
	.syntax divided
@ 99 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L14384
.L14381:
	mov	r0, #0
	str	r0, [r6, #124]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14383:
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #92]
	bl	ffs_data_clear
	str	r5, [r4, #92]
	str	r5, [r4, #96]
	strh	r5, [r4, #104]	@ movhi
	str	r5, [r4, #128]
	str	r5, [r4, #144]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	strh	r5, [r4, #180]	@ movhi
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	str	r5, [r4, #208]
	b	.L14380
.L14384:
	mov	r0, r4
	bl	ffs_data_put.part.0
	b	.L14381
	.fnend
	.size	ffs_epfile_release, .-ffs_epfile_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_release, %function
ffs_ep0_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #124]
	add	r3, r4, #88
	.syntax divided
@ 99 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #0
	beq	.L14389
.L14386:
	add	r3, r4, #84
	.syntax divided
@ 99 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L14390
.L14387:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14389:
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #92]
	bl	ffs_data_clear
	str	r5, [r4, #92]
	str	r5, [r4, #96]
	strh	r5, [r4, #104]	@ movhi
	str	r5, [r4, #128]
	str	r5, [r4, #144]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	strh	r5, [r4, #180]	@ movhi
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	str	r5, [r4, #208]
	b	.L14386
.L14390:
	mov	r0, r4
	bl	ffs_data_put.part.0
	b	.L14387
	.fnend
	.size	ffs_ep0_release, .-ffs_ep0_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_android_function_enable, %function
adb_android_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r0, #20]
	str	r0, [sp, #4]
	ldrb	r3, [r2]	@ zero_extendqisi2
	strb	r1, [r2, #1]
	cmp	r3, #0
	beq	.L14400
.L14391:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14400:
	ldr	r5, [r4, #8]
	ldr	r1, [r4, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r4, #20]
	bne	.L14391
	ldr	r0, [r5]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L14393
	blx	r3
	ldr	r0, [r5]
.L14393:
	ldr	r0, [r0, #4]
	ldr	r1, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r3, [r4, #500]!
	cmp	r4, r3
	sub	r3, r3, #120
	beq	.L14391
	mov	r6, r3
.L14394:
	mov	r1, r6
	mov	r0, r5
	bl	usb_remove_config
	ldr	r3, [r6, #120]
	cmp	r4, r3
	sub	r6, r3, #120
	beq	.L14391
	b	.L14394
	.fnend
	.size	adb_android_function_enable, .-adb_android_function_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_enable, %function
ffs_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	ldr	r4, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L14410
.L14401:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14410:
	ldr	r5, [r4, #8]
	ldr	r1, [r4, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r4, #20]
	bne	.L14401
	ldr	r0, [r5]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L14403
	blx	r3
	ldr	r0, [r5]
.L14403:
	ldr	r0, [r0, #4]
	ldr	r1, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r3, [r4, #500]!
	cmp	r4, r3
	sub	r3, r3, #120
	beq	.L14401
	mov	r6, r3
.L14404:
	mov	r1, r6
	mov	r0, r5
	bl	usb_remove_config
	ldr	r3, [r6, #120]
	cmp	r4, r3
	sub	r6, r3, #120
	beq	.L14401
	b	.L14404
	.fnend
	.size	ffs_function_enable, .-ffs_function_enable
	.align	2
	.global	usb_string_id
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_id, %function
usb_string_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	mov	r2, r0
	cmp	r3, #253
	bhi	.L14413
	add	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r2, #48]
	bx	lr
.L14413:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_id, .-usb_string_id
	.align	2
	.global	usb_string_ids_tab
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_ids_tab, %function
usb_string_ids_tab:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r2, [r1, #4]
	mov	lr, r0
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L14427
	cmp	r3, #253
	bgt	.L14416
	add	r1, r1, #8
.L14417:
	ldr	ip, [r1, #4]
	add	r3, r3, #1
	add	r1, r1, #8
	uxtb	r2, r3
	cmp	ip, #0
	strb	r2, [r1, #-16]
	beq	.L14415
	cmp	r3, #254
	bne	.L14417
.L14416:
	mvn	r0, #18
	ldr	pc, [sp], #4
.L14427:
	mov	r2, r3
.L14415:
	mov	r0, #0
	strb	r2, [lr, #48]
	ldr	pc, [sp], #4
	.fnend
	.size	usb_string_ids_tab, .-usb_string_ids_tab
	.align	2
	.global	usb_string_ids_n
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_ids_n, %function
usb_string_ids_n:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #254
	mov	r3, r0
	ldrb	r0, [r0, #48]	@ zero_extendqisi2
	bhi	.L14432
	add	r1, r0, r1
	cmp	r1, #254
	bhi	.L14432
	add	r0, r0, #1
	strb	r1, [r3, #48]
	bx	lr
.L14432:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_ids_n, .-usb_string_ids_n
	.section	.rodata.str1.4
	.align	2
.LC1087:
	.ascii	"composite\000"
	.text
	.align	2
	.global	usb_composite_probe
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_probe, %function
usb_composite_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #0
	beq	.L14438
	ldr	r2, [r3, #12]
	mov	r0, r1
	cmp	r1, #0
	cmpne	r2, #0
	beq	.L14438
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	ip, [r3]
	cmp	ip, #0
	beq	.L14446
.L14435:
	ldr	r2, [r3, #4]
	movw	r4, #:lower16:.LANCHOR1
	movw	r1, #:lower16:composite_bind
	movt	r4, #:upper16:.LANCHOR1
	movt	r1, #:upper16:composite_bind
	str	r3, [r4, #2476]
	cmp	r2, #0
	movw	r2, #:lower16:.LANCHOR0
	str	r0, [r4, #3588]
	movt	r2, #:upper16:.LANCHOR0
	streq	ip, [r3, #4]
	add	r0, r2, #356
	str	ip, [r2, #356]
	ldr	ip, [r3]
	str	ip, [r2, #384]
	ldr	r3, [r3, #20]
	str	r3, [r2, #360]
	bl	usb_gadget_probe_driver
	cmp	r0, #0
	movne	r3, #0
	strne	r3, [r4, #2476]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14446:
	movw	r2, #:lower16:.LC1087
	movt	r2, #:upper16:.LC1087
	mov	ip, r2
	str	r2, [r3]
	b	.L14435
.L14438:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_composite_probe, .-usb_composite_probe
	.section	.rodata.str1.4
	.align	2
.LC1088:
	.ascii	"device tree enabled\012\000"
	.align	2
.LC1089:
	.ascii	"<3>%s: unable to allocate platform data\012\000"
	.align	2
.LC1090:
	.ascii	"qcom,android-usb-swfi-latency\000"
	.align	2
.LC1091:
	.ascii	"qcom,android-usb-cdrom\000"
	.align	2
.LC1092:
	.ascii	"qcom,android-usb-internal-ums\000"
	.align	2
.LC1093:
	.ascii	"qcom,streaming-func\000"
	.align	2
.LC1094:
	.ascii	"<3>%s: Invalid number of functions used.\012\000"
	.align	2
.LC1095:
	.ascii	"%s: name of streaming function:%s\012\000"
	.align	2
.LC1096:
	.ascii	"android_usb\000"
	.align	2
.LC1097:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android_dev"
	.ascii	"\012\000"
	.align	2
.LC1098:
	.ascii	"&android_dev->mutex\000"
	.align	2
.LC1099:
	.ascii	"ioremap failed\012\000"
	.align	2
.LC1100:
	.ascii	"failed to get mem resource\012\000"
	.align	2
.LC1101:
	.ascii	"android%d\000"
	.align	2
.LC1102:
	.ascii	"<3>%s: %s(): android_create_device failed\012\000"
	.align	2
.LC1103:
	.ascii	"<7>usb: %s error pdev(%pK)\012\000"
	.align	2
.LC1104:
	.ascii	"<7>usb: %s failed to create attr\012\000"
	.align	2
.LC1105:
	.ascii	"<3>usb: %s To create terminal_atttrr is failed\012\000"
	.align	2
.LC1106:
	.ascii	"<3>%s: %s(): Failed to register android composite d"
	.ascii	"river\012\000"
	.align	2
.LC1107:
	.ascii	"high\000"
	.align	2
.LC1108:
	.ascii	"<3>DUN register is failed, ret = %d\012\000"
	.align	2
.LC1109:
	.ascii	"<3>usb: %s modem misc register is failed\012\000"
	.align	2
.LC1110:
	.ascii	"&modem_wait_q\000"
	.section	.rodata.cst4
	.align	2
.LC1111:
	.word	__stack_chk_guard
	.section	.devinit.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_probe, %function
android_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC1111
	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LC1111
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r3]
	str	r3, [sp, #28]
	mov	r3,#0
	ldr	r3, [r0, #292]
	mov	r9, r0
	cmp	r3, #0
	beq	.L14448
	ldr	r7, .L14512
	add	r4, r0, #8
	ldrh	r3, [r7, #-14]
	tst	r3, #4
	beq	.L14449
	movw	r2, #:lower16:.LC1088
	mov	r1, r4
	movt	r2, #:upper16:.LC1088
	sub	r0, r7, #32
	bl	__dynamic_dev_dbg
.L14449:
	mov	r0, r4
	mov	r2, #208
	mov	r1, #52
	bl	devm_kzalloc
	subs	r6, r0, #0
	bne	.L14450
	movw	r0, #:lower16:.LC1089
	ldr	r1, .L14512+4
	mvn	r4, #11
	movt	r0, #:upper16:.LC1089
	bl	printk
	b	.L14447
.L14450:
	movw	r1, #:lower16:.LC1090
	mov	r3, #1
	ldr	r0, [r9, #292]
	movt	r1, #:upper16:.LC1090
	add	r2, r6, #4
	bl	of_property_read_u32_array
	movw	r1, #:lower16:.LC1091
	mov	r2, #0
	ldr	r0, [r9, #292]
	movt	r1, #:upper16:.LC1091
	mov	r4, r2
	bl	of_find_property
	subs	r0, r0, r4
	movw	r1, #:lower16:.LC1092
	movne	r0, #1
	movt	r1, #:upper16:.LC1092
	mov	r2, r4
	strb	r0, [r6, #9]
	ldr	r0, [r9, #292]
	bl	of_find_property
	subs	r0, r0, r4
	movw	r1, #:lower16:.LC1093
	movne	r0, #1
	mov	r3, r4
	mov	r2, r4
	movt	r1, #:upper16:.LC1093
	strb	r0, [r6, #11]
	ldr	r0, [r9, #292]
	str	r4, [sp]
	bl	of_property_read_string_helper
	cmp	r0, #3
	mov	r5, r0
	ble	.L14483
	movw	r0, #:lower16:.LC1094
	ldr	r1, .L14512+4
	mvn	r4, #21
	movt	r0, #:upper16:.LC1094
	bl	printk
	b	.L14447
.L14483:
	ldr	r10, .L14512+4
	movw	r8, #:lower16:.LC1093
	movt	r8, #:upper16:.LC1093
.L14452:
	cmp	r4, r5
	bge	.L14510
	mov	ip, #0
	mov	r1, r8
	str	r4, [sp]
	mov	r3, #1
	add	r2, sp, #12
	ldr	r0, [r9, #292]
	str	ip, [sp, #12]
	bl	of_property_read_string_helper
	ldr	r1, [sp, #12]
	cmp	r1, #0
	bne	.L14453
.L14454:
	add	r4, r4, #1
	b	.L14452
.L14453:
	mov	r2, #10
	add	fp, r6, #12
	mla	fp, r2, r4, fp
	mov	r0, fp
	bl	strlcpy
	ldr	r3, .L14512+8
	ldrh	r3, [r3]
	tst	r3, #4
	beq	.L14454
	movw	r1, #:lower16:.LC1095
	mov	r3, fp
	movt	r1, #:upper16:.LC1095
	mov	r2, r10
	sub	r0, r7, #8
	bl	__dynamic_pr_debug
	b	.L14454
.L14510:
	str	r5, [r6, #44]
	b	.L14456
.L14448:
	ldr	r6, [r0, #88]
.L14456:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3564]
	mov	r7, r4
	cmp	r0, #0
	bne	.L14457
	movw	r1, #:lower16:.LC1096
	ldr	r2, .L14512+12
	movt	r1, #:upper16:.LC1096
	bl	__class_create
	cmn	r0, #4096
	str	r0, [r4, #3564]
	movhi	r4, r0
	bhi	.L14447
.L14457:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #40]
	cmp	r0, #0
	beq	.L14484
	mov	r2, #520
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	bne	.L14458
	ldr	r2, .L14512+4
	movw	r0, #:lower16:.LC1097
	mvn	r4, #11
	movt	r0, #:upper16:.LC1097
	mov	r1, r2
	bl	printk
	b	.L14459
.L14484:
	mov	r5, #16
.L14458:
	ldr	r0, .L14512+16
	movw	r3, #:lower16:android_work
	movw	ip, #:lower16:usb_gadget_connect_work
	movt	r3, #:upper16:android_work
	ldr	r8, [r9]
	add	lr, r5, #500
	movt	ip, #:upper16:usb_gadget_connect_work
	mov	r2, #0
	mov	r4, #1
	mov	r1, #2560
	str	r0, [r5, #4]
	add	r0, r5, #180
	str	r3, [r5, #188]
	add	r3, r5, #452
	str	r8, [r5]
	add	r8, r5, #512
	str	r4, [r5, #20]
	str	r1, [r5, #176]
	str	r0, [r5, #180]
	str	r0, [r5, #184]
	add	r0, r5, #464
	str	r1, [r5, #448]
	mov	r1, r2
	str	r3, [r5, #452]
	str	r3, [r5, #456]
	str	ip, [r5, #460]
	str	lr, [r5, #500]
	str	lr, [r5, #504]
	str	r2, [r5, #508]
	bl	init_timer_key
	movw	r3, #:lower16:delayed_work_timer_fn
	add	r0, r5, #448
	ldr	r2, .L14512+12
	movt	r3, #:upper16:delayed_work_timer_fn
	movw	r1, #:lower16:.LC1098
	movt	r1, #:upper16:.LC1098
	str	r3, [r5, #480]
	str	r0, [r5, #484]
	add	r0, r5, #24
	bl	__mutex_init
	ldr	r2, .L14512+20
	mov	r0, r8
	str	r6, [r5, #44]
	ldr	r1, [r7, #3236]
	bl	__list_add
	ldr	r3, [r7, #3396]
	cmp	r6, #0
	mov	r2, #0
	mov	r1, #512
	mov	r0, r9
	add	r3, r3, r4
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	str	r3, [r7, #3396]
	ldrbne	r3, [r6, #8]	@ zero_extendqisi2
	moveq	r3, r6
	strb	r3, [r4, #440]
	bl	platform_get_resource
	subs	r3, r0, #0
	beq	.L14461
	ldm	r3, {r1, r2}
	add	r9, r9, #8
	mov	r0, r9
	add	r2, r2, #1
	sub	r2, r2, r1
	bl	devm_ioremap
	cmp	r0, #0
	str	r0, [r7, #3468]
	bne	.L14463
	movw	r1, #:lower16:.LC1099
	mov	r0, r9
	movt	r1, #:upper16:.LC1099
	mvn	r4, #11
	bl	dev_err
	b	.L14464
.L14461:
	ldr	r0, .L14512+24
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L14463
	movw	r2, #:lower16:.LC1100
	add	r1, r9, #8
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1100
	bl	__dynamic_dev_dbg
.L14463:
	add	r9, sp, #17
	movw	r2, #:lower16:.LC1101
	ldrb	r3, [r4, #440]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1101
	mov	r1, #11
	mov	r0, r9
	bl	snprintf
	mov	r3, #0
	str	r9, [sp]
	ldr	r0, [r7, #3564]
	mov	r2, r3
	mov	r1, r3
	bl	device_create
	cmn	r0, #4096
	mov	r4, r0
	str	r0, [r5, #12]
	bls	.L14466
	cmp	r0, #0
	beq	.L14468
	b	.L14470
.L14466:
	mov	r1, r5
	ldr	r9, .L14512+28
	bl	dev_set_drvdata
.L14469:
	ldr	r1, [r9], #4
	ldr	r0, [r5, #12]
	cmp	r1, #0
	beq	.L14468
	bl	device_create_file
	subs	r4, r0, #0
	beq	.L14469
	ldr	r3, [r5, #12]
	ldr	r0, [r7, #3564]
	ldr	r1, [r3, #288]
	bl	device_destroy
.L14470:
	ldr	r2, .L14512+4
	movw	r0, #:lower16:.LC1102
	movt	r0, #:upper16:.LC1102
	mov	r1, r2
	bl	printk
	b	.L14464
.L14468:
	ldr	r2, [r5, #12]
	cmn	r2, #4096
	bls	.L14473
	movw	r0, #:lower16:.LC1103
	ldr	r1, .L14512+32
	movt	r0, #:upper16:.LC1103
	bl	printk
	ldr	r0, [r5, #12]
	cmp	r0, #0
	movne	r4, r0
	beq	.L14474
	b	.L14475
.L14473:
	ldr	r1, .L14512+36
	mov	r0, r2
	bl	device_create_file
	subs	r4, r0, #0
	beq	.L14474
	movw	r0, #:lower16:.LC1104
	ldr	r1, .L14512+32
	movt	r0, #:upper16:.LC1104
	bl	printk
.L14475:
	movw	r0, #:lower16:.LC1105
	ldr	r1, .L14512+4
	movt	r0, #:upper16:.LC1105
	bl	printk
	b	.L14447
.L14474:
	movw	r1, #:lower16:android_bind
	ldr	r0, .L14512+40
	movt	r1, #:upper16:android_bind
	bl	usb_composite_probe
	subs	r4, r0, #0
	beq	.L14476
	ldr	r2, .L14512+4
	movw	r0, #:lower16:.LC1106
	movt	r0, #:upper16:.LC1106
	mov	r1, r2
	bl	printk
	b	.L14477
.L14476:
	cmp	r6, #0
	beq	.L14478
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L14478
	mvn	r2, #0
	mov	r1, #1
	add	r0, r5, #60
	bl	pm_qos_add_request
.L14478:
	movw	r1, #:lower16:.LC1107
	mov	r2, #5
	movt	r1, #:upper16:.LC1107
	add	r0, r5, #52
	bl	strlcpy
	ldr	r0, .L14512+44
	bl	misc_register
	subs	r4, r0, #0
	beq	.L14479
	movw	r0, #:lower16:.LC1108
	mov	r1, r4
	movt	r0, #:upper16:.LC1108
	bl	printk
	movw	r0, #:lower16:.LC1109
	ldr	r1, .L14512+4
	movt	r0, #:upper16:.LC1109
	bl	printk
	b	.L14477
.L14479:
	movw	r1, #:lower16:.LC1110
	ldr	r2, .L14512+12
	ldr	r0, .L14512+48
	movt	r1, #:upper16:.LC1110
	bl	__init_waitqueue_head
	b	.L14447
.L14477:
	ldr	r6, .L14512+28
.L14480:
	ldr	r1, [r6], #4
	ldr	r0, [r5, #12]
	cmp	r1, #0
	beq	.L14511
	bl	device_remove_file
	b	.L14480
.L14511:
	ldr	r1, [r0, #288]
	ldr	r0, [r7, #3564]
	bl	device_destroy
.L14464:
	mov	r0, r8
	bl	list_del
	ldr	r3, [r7, #3396]
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r7, #3396]
	bl	kfree
.L14459:
	ldr	r3, .L14512+20
	ldr	r2, [r7, #3232]
	cmp	r2, r3
	bne	.L14447
	ldr	r0, [r7, #3564]
	bl	class_destroy
	mov	r3, #0
	str	r3, [r7, #3564]
.L14447:
	movw	r3, #:lower16:.LC1111
	movt	r3, #:upper16:.LC1111
	ldr	r2, [r3]
	ldr	r3, [sp, #28]
	eors	r2, r3, r2
	beq	.L14482
	bl	__stack_chk_fail
.L14482:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L14513:
	.align	2
.L14512:
	.word	.LANCHOR8-4000
	.word	.LANCHOR5-616
	.word	.LANCHOR8-3990
	.word	.LANCHOR1+3992
	.word	.LANCHOR7-1912
	.word	.LANCHOR1+3232
	.word	.LANCHOR8-3952
	.word	.LANCHOR0+1280
	.word	.LANCHOR5-600
	.word	.LANCHOR7-1808
	.word	.LANCHOR0+1356
	.word	.LANCHOR7-1792
	.word	.LANCHOR1+2204
	.fnend
	.size	android_probe, .-android_probe
	.text
	.align	2
	.global	usb_composite_unregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_unregister, %function
usb_composite_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	cmp	r3, r0
	beq	.L14516
	bx	lr
.L14516:
	ldr	r0, .L14517
	b	usb_gadget_unregister_driver
.L14518:
	.align	2
.L14517:
	.word	.LANCHOR0+356
	.fnend
	.size	usb_composite_unregister, .-usb_composite_unregister
	.section	.rodata.str1.4
	.align	2
.LC1112:
	.ascii	"%s: Unexpected call\012\000"
	.align	2
.LC1113:
	.ascii	"%s: Completing delayed status\012\000"
	.text
	.align	2
	.global	usb_composite_setup_continue
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_setup_continue, %function
usb_composite_setup_continue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14544
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r7, [r0, #4]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L14540
.L14520:
	add	r6, r4, #60
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #56]
	mov	r5, r0
	cmp	r3, #0
	bne	.L14521
	cmp	r4, #0
	bne	.L14541
.L14523:
	mov	r1, r5
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L14521:
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r4, #56]
	bne	.L14523
	ldr	r8, .L14544+4
	ldrh	r3, [r8, #-14]
	tst	r3, #4
	bne	.L14542
.L14525:
	mov	r3, #0
	mov	r2, #32
	mov	r1, r7
	str	r3, [r7, #4]
	ldr	r3, [r4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L14523
	ldr	r3, .L14544+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L14543
.L14526:
	ldr	ip, [r7, #4]
	mov	r3, #0
	ldr	lr, [r7, #48]
	str	r3, [r7, #44]
	cmp	lr, ip
	beq	.L14523
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #18]
	tst	r2, #4
	beq	.L14523
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC5
	movt	r2, #:upper16:.LC5
	ldr	r1, [r1, #4]
	ldr	r1, [r1]
	ldr	r1, [r1]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14523
.L14541:
	movw	r2, #:lower16:.LC1112
	movw	r0, #:lower16:.LC583
	ldr	r3, .L14544+12
	movt	r2, #:upper16:.LC1112
	movt	r0, #:upper16:.LC583
	movw	r1, #1845
	bl	warn_slowpath_fmt
	b	.L14523
.L14540:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC80
	sub	r0, r3, #24
	movt	r2, #:upper16:.LC80
	ldr	r3, .L14544+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14520
.L14542:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC1113
	sub	r0, r8, #32
	ldr	r3, .L14544+12
	movt	r2, #:upper16:.LC1113
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14525
.L14543:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC969
	mov	r3, r0
	movt	r2, #:upper16:.LC969
	sub	r0, r8, #8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14526
.L14545:
	.align	2
.L14544:
	.word	.LANCHOR8-3936
	.word	.LANCHOR8-3904
	.word	.LANCHOR8-3888
	.word	.LANCHOR5-572
	.fnend
	.size	usb_composite_setup_continue, .-usb_composite_setup_continue
	.section	.rodata.str1.4
	.align	2
.LC1114:
	.ascii	"Main thread exiting on signal\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	handle_exception, %function
handle_exception:
	.fnstart
	@ args = 0, pretend = 0, frame = 128
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r7, r0, #44
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #128
	sub	sp, sp, #128
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
.L14553:
	movw	r9, #1284
	b	.L14548
.L14620:
	cmp	r5, #10
	bne	.L14619
.L14548:
	ldr	r4, [r10, #12]
	ldr	r0, [r4, #1020]
	add	r0, r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r1, r4, #1024
	mov	r2, sp
	mov	r0, r4
	bl	dequeue_signal
	ldr	r3, [r4, #1020]
	mov	r5, r0
	mov	r1, r8
	add	r0, r3, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L14620
	ldr	r3, [r6, #8]
	cmp	r3, #0
	beq	.L14555
	mov	r8, r5
.L14554:
	ldr	r4, [r6, #68]
	add	r4, r4, r8
	add	r8, r8, #32
	ldr	r3, [r4, #20]
	cmp	r3, #0
	beq	.L14556
	ldr	r3, [r6, #8]
	ldr	r1, [r4, #16]
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L14556:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L14557
	ldr	r3, [r6, #8]
	ldr	r1, [r4, #24]
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L14557:
	cmp	r8, #128
	bne	.L14554
	b	.L14559
.L14621:
	bl	sleep_thread
	cmp	r0, #0
	bne	.L14546
.L14559:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #68]
	mov	r0, r7
	ldr	r4, [r3, #20]
	ldr	r1, [r3, #28]
	ldr	r2, [r3, #52]
	ldr	lr, [r3, #60]
	ldr	ip, [r3, #84]
	add	r4, r4, r1
	ldr	r1, [r3, #92]
	add	r4, r4, r2
	ldr	r2, [r3, #116]
	add	r4, r4, lr
	ldr	r3, [r3, #124]
	add	r4, r4, ip
	add	r4, r4, r1
	add	r4, r4, r2
	add	r4, r4, r3
	bl	_raw_spin_unlock_irq
	cmp	r4, #0
	mov	r0, r6
	bne	.L14621
	ldr	r3, [r6, #8]
	ldrb	r2, [r3, #94]	@ zero_extendqisi2
	tst	r2, #1
	beq	.L14561
	ldr	r0, [r3, #100]
	ldr	r1, [r0, #8]
	ldr	r1, [r1, #36]
	cmp	r1, #0
	beq	.L14561
	blx	r1
	ldr	r3, [r6, #8]
	ldrb	r2, [r3, #94]	@ zero_extendqisi2
.L14561:
	tst	r2, #2
	beq	.L14555
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L14555
	blx	r3
.L14555:
	mov	r0, r7
	mov	r8, #0
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #68]
	str	r8, [r3, #4]
	ldr	r3, [r6, #68]
	str	r8, [r3, #36]
	ldr	r3, [r6, #68]
	str	r8, [r3, #68]
	ldr	r3, [r6, #68]
	str	r8, [r3, #100]
	ldr	r3, [r6, #68]
	ldr	r9, [r6, #112]
	str	r3, [r6, #60]
	cmp	r9, #1
	str	r3, [r6, #64]
	beq	.L14563
	ldr	r3, [r6, #92]
	ldr	r4, [r6, #116]
	cmp	r3, r8
	movne	r1, r8
	movne	r0, r1
	beq	.L14572
.L14564:
	ldr	r3, [r6, #100]
	add	r5, r5, #1
	add	r3, r3, r1
	add	r1, r1, #392
	ldrb	r2, [r3, #24]	@ zero_extendqisi2
	str	r0, [r3, #28]
	str	r0, [r3, #32]
	str	r0, [r3, #36]
	bic	r2, r2, #80
	strb	r2, [r3, #24]
	ldr	r3, [r6, #92]
	cmp	r3, r5
	bhi	.L14564
.L14572:
	mov	r3, #0
	mov	r0, r7
	sub	r9, r9, #2
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	cmp	r9, #5
	ldrls	pc, [pc, r9, asl #2]
	b	.L14546
.L14567:
	.word	.L14569
	.word	.L14546
	.word	.L14568
	.word	.L14546
	.word	.L14566
	.word	.L14566
.L14569:
	ldr	r1, [r6, #8]
	cmp	r1, #0
	beq	.L14573
	add	r1, r1, #96
	mov	r0, #0
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L14575
	ldr	r3, [r6, #8]
	mov	r1, #0
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L14575:
	ldr	r3, [r6, #56]
	cmp	r3, r4
	bne	.L14546
	ldr	r0, [r6, #4]
	cmp	r0, #0
	bne	.L14618
	ldrd	r0, [r6, #48]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r2, [r6, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r3, r0
	str	r6, [r2]
	beq	.L14546
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC88
	ldr	r2, [r6, #48]
	movt	r1, #:upper16:.LC88
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_warn
.L14546:
	add	sp, sp, #128
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14619:
	ldr	r3, [r6, #112]
	cmp	r3, #5
	bgt	.L14549
	ldr	r0, .L14624
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L14622
.L14549:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #112]
	mov	r4, r0
	cmp	r3, #6
	bgt	.L14551
	ldr	r3, [r6, #56]
	mov	r1, #6
	ldr	r2, [r6, #168]
	str	r1, [r6, #112]
	str	r3, [r6, #116]
	cmp	r2, #0
	beq	.L14551
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L14551:
	mov	r1, r4
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L14553
.L14563:
	mvn	r3, #7
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	send_status
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #112]
	cmn	r3, #8
	beq	.L14623
.L14571:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	b	.L14546
.L14566:
	mov	r1, #0
	mov	r0, r6
	bl	do_set_interface
	mov	r0, r7
	bl	_raw_spin_lock_irq
	mov	r3, #7
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	b	.L14546
.L14568:
	mov	r0, r6
	ldr	r1, [r6, #12]
	bl	do_set_interface
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L14546
	ldr	r0, [r6, #4]
.L14618:
	bl	usb_composite_setup_continue
	b	.L14546
.L14622:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1114
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1114
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14549
.L14623:
	str	r8, [r6, #112]
	b	.L14571
.L14573:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC86
	movw	r3, #3112
	ldr	r2, .L14624+4
	movt	r1, #:upper16:.LC86
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC87
	movw	r1, #550
	movt	r0, #:upper16:.LC87
	bl	warn_slowpath_null
	b	.L14546
.L14625:
	.align	2
.L14624:
	.word	.LANCHOR8-3870
	.word	.LANCHOR5-540
	.fnend
	.size	handle_exception, .-handle_exception
	.section	.rodata.str1.4
	.align	2
.LC1115:
	.ascii	"bulk-out\000"
	.align	2
.LC1116:
	.ascii	"invalid CBW: len %u sig 0x%x\012\000"
	.align	2
.LC1117:
	.ascii	"bulk-in set wedge\012\000"
	.align	2
.LC1118:
	.ascii	"usb_ep_set_wedge -> %d\012\000"
	.align	2
.LC1119:
	.ascii	"non-meaningful CBW: lun = %u, flags = 0x%x, cmdlen "
	.ascii	"%u\012\000"
	.align	2
.LC1120:
	.ascii	"INQUIRY\000"
	.align	2
.LC1121:
	.ascii	" Card\000"
	.align	2
.LC1122:
	.ascii	"MODE SELECT(6)\000"
	.align	2
.LC1123:
	.ascii	"MODE SELECT(10)\000"
	.align	2
.LC1124:
	.ascii	"MODE SENSE(6)\000"
	.align	2
.LC1125:
	.ascii	"MODE SENSE(10)\000"
	.align	2
.LC1126:
	.ascii	"PREVENT-ALLOW MEDIUM REMOVAL\000"
	.align	2
.LC1127:
	.ascii	"READ(6)\000"
	.align	2
.LC1128:
	.ascii	"READ(10)\000"
	.align	2
.LC1129:
	.ascii	"READ(12)\000"
	.align	2
.LC1130:
	.ascii	"READ CAPACITY\000"
	.align	2
.LC1131:
	.ascii	"READ HEADER\000"
	.align	2
.LC1132:
	.ascii	"READ TOC\000"
	.align	2
.LC1133:
	.ascii	"READ FORMAT CAPACITIES\000"
	.align	2
.LC1134:
	.ascii	"REQUEST SENSE\000"
	.align	2
.LC1135:
	.ascii	"START-STOP UNIT\000"
	.align	2
.LC1136:
	.ascii	"Load AT\000"
	.align	2
.LC1137:
	.ascii	"unload attempt prevented\012\000"
	.align	2
.LC1138:
	.ascii	"Load User\000"
	.align	2
.LC1139:
	.ascii	"SYNCHRONIZE CACHE\000"
	.align	2
.LC1140:
	.ascii	"TEST UNIT READY\000"
	.align	2
.LC1141:
	.ascii	"VERIFY\000"
	.align	2
.LC1142:
	.ascii	"error in file verify: %d\012\000"
	.align	2
.LC1143:
	.ascii	"partial file verify: %d/%u\012\000"
	.align	2
.LC1144:
	.ascii	"WRITE(6)\000"
	.align	2
.LC1145:
	.ascii	"WRITE(10)\000"
	.align	2
.LC1146:
	.ascii	"WRITE(12)\000"
	.align	2
.LC1147:
	.ascii	"<6>%s called\012\000"
	.align	2
.LC1148:
	.ascii	"time stop\000"
	.align	2
.LC1149:
	.ascii	"time reset\000"
	.align	2
.LC1150:
	.ascii	"READ CD\000"
	.align	2
.LC1151:
	.ascii	"usb: %s : common->version_string[%d]=%s\015\012\000"
	.align	2
.LC1152:
	.ascii	"Unknown x%02x\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_main_thread, %function
fsg_main_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 80
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r0
	mov	r0, #2
	str	lr, [sp, #32]
	.pad #92
	sub	sp, sp, #92
	add	r10, fp, #44
	bl	allow_signal
	mov	r0, #15
	bl	allow_signal
	mov	r0, #9
	bl	allow_signal
	mov	r0, #10
	bl	allow_signal
	bl	set_freezable
	mov	r2, #57344
	mov	r3, sp
	movt	r2, 65535
	mov	r1, #0
	and	r3, r3, r2
	str	r1, [r3, #8]
	ldr	r3, [fp, #112]
	cmp	r3, #7
	beq	.L14832
	movw	r1, #21333
	movw	r0, #22737
	movw	ip, #21250
	mov	lr, sp
	movt	r1, 17218
	movt	r0, 6687
	movt	ip, 5
	and	r9, lr, r2
	str	r1, [sp, #12]
	str	r0, [sp, #16]
	str	ip, [sp, #20]
.L14627:
	cmp	r3, #0
	bgt	.L14630
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r7, [r3]
	ands	r7, r7, #1
	bne	.L14630
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	tst	r3, #32
	beq	.L15046
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r4, [fp, #60]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L14634
	b	.L14638
.L15047:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L14638
.L14634:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	beq	.L15047
.L14632:
	ldr	r3, [fp, #112]
	cmp	r3, #7
	bne	.L14627
.L14832:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [fp, #168]
	bl	_raw_spin_unlock_irq
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L14628
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L14628
	mov	r0, fp
	blx	r3
	cmp	r0, #0
	blt	.L14628
.L14835:
	add	r0, fp, #152
	mov	r1, #0
	bl	complete_and_exit
.L14628:
	ldr	r5, [fp, #92]
	add	r9, fp, #28
	mov	r0, r9
	ldr	r4, [fp, #100]
	bl	down_write
	cmp	r5, #0
	sub	r5, r5, #1
	beq	.L14834
	ldr	r7, .L15094+36
	mov	r6, #14848
	movw	r8, #:lower16:.LC818
	add	r4, r4, #392
	movt	r6, 2
	movt	r8, #:upper16:.LC818
.L14838:
	ldr	r0, [r4, #-392]
	cmp	r0, #0
	beq	.L14836
	ldrh	r3, [r7]
	tst	r3, #4
	bne	.L15048
.L14837:
	bl	fput
	mov	r3, #0
	str	r3, [r4, #-392]
	str	r6, [r4, #-356]
.L14836:
	sub	r5, r5, #1
	add	r4, r4, #392
	cmn	r5, #1
	bne	.L14838
.L14834:
	mov	r0, r9
	bl	up_write
	b	.L14835
.L14630:
	mov	r0, fp
	bl	handle_exception
	ldr	r3, [fp, #112]
	cmp	r3, #7
	bne	.L14627
	b	.L14832
.L14638:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r2, #31
	mov	r0, fp
	str	r2, [r4, #12]
	ldr	r1, [fp, #108]
	udiv	r3, r2, r1
	mul	r3, r1, r3
	subs	r3, r2, r3
	addne	r2, r1, #31
	mov	r1, r4
	subne	r2, r2, r3
	ldr	r3, [r4, #24]
	str	r2, [r3, #4]
	bl	start_out_transfer
	cmp	r0, #0
	bne	.L15019
	b	.L14632
.L14640:
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L14632
.L15019:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	mov	r0, r10
	cmp	r3, #1
	bne	.L14640
	bl	_raw_spin_unlock_irq
	.syntax divided
@ 2858 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r8, [fp, #8]
	cmp	r8, #0
	beq	.L15049
	ldr	r3, [r4, #24]
	ldr	r5, [r8, #88]
	ldr	r6, [r3]
	ldr	r2, [r3, #44]
	cmp	r2, #0
	bne	.L14644
	ldr	r1, [r8, #96]
	tst	r1, #1
	bne	.L14646
	ldr	r3, [r3, #48]
	cmp	r3, #31
	bne	.L14647
	ldr	r2, [r6]
	ldr	r1, [sp, #12]
	cmp	r2, r1
	bne	.L14647
	ldrb	r3, [r6, #13]	@ zero_extendqisi2
	cmp	r3, #7
	bhi	.L14661
	ldrb	r2, [r6, #12]	@ zero_extendqisi2
	tst	r2, #127
	bne	.L14661
	ldrb	r2, [r6, #14]	@ zero_extendqisi2
	sub	r1, r2, #1
	cmp	r1, #15
	bhi	.L14661
	add	r1, r6, #15
	add	r0, r5, #76
	str	r2, [r5, #72]
	bl	memcpy
	ldrsb	r3, [r6, #12]
	mov	r0, r10
	ldr	r2, [r5, #92]
	cmp	r3, #0
	movlt	r3, #2
	movge	r3, #1
	str	r3, [r5, #120]
	ldr	r3, [r6, #8]
	cmp	r3, #0
	str	r3, [r5, #124]
	moveq	r3, #3
	streq	r3, [r5, #120]
	ldrb	r3, [r6, #13]	@ zero_extendqisi2
	cmp	r3, r2
	str	r3, [r5, #96]
	ldrcc	r2, [r5, #100]
	movcc	r1, #392
	movcs	r3, #0
	mlacc	r3, r1, r3, r2
	str	r3, [r5, #104]
	ldr	r3, [r6, #4]
	str	r3, [r5, #132]
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	cmp	r3, #0
	ble	.L15050
.L14671:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r4, [fp, #60]
	str	r4, [fp, #64]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L14672
	b	.L14701
.L15051:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L14701
.L14672:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	beq	.L15051
	b	.L14632
.L15050:
	mvn	r3, #8
	str	r3, [fp, #112]
	b	.L14671
.L15046:
	mov	r0, fp
	bl	sleep_thread
	ldr	r3, [fp, #112]
	cmp	r3, #7
	bne	.L14627
	b	.L14832
.L14701:
	mov	r0, r10
	add	r6, fp, #28
	bl	_raw_spin_unlock_irq
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r0, r6
	bic	r3, r3, #12
	strb	r3, [fp, #144]
	bl	down_read
	ldrb	r2, [fp, #76]	@ zero_extendqisi2
	cmp	r2, #190
	bhi	.L14673
	cmp	r2, #190
	ldrls	pc, [pc, r2, asl #2]
	b	.L14674
.L14676:
	.word	.L14699
	.word	.L14674
	.word	.L14674
	.word	.L14698
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14697
	.word	.L14674
	.word	.L14696
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14695
	.word	.L14674
	.word	.L14674
	.word	.L14694
	.word	.L14693
	.word	.L14692
	.word	.L14674
	.word	.L14674
	.word	.L14691
	.word	.L14690
	.word	.L14674
	.word	.L14674
	.word	.L14689
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14688
	.word	.L14674
	.word	.L14687
	.word	.L14674
	.word	.L14674
	.word	.L14686
	.word	.L14674
	.word	.L14685
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14684
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14683
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14682
	.word	.L14681
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14680
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14679
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14678
	.word	.L14674
	.word	.L14677
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14674
	.word	.L14675
.L14673:
	cmp	r2, #250
	beq	.L15052
.L14674:
	ldr	r7, .L15094
	mov	r5, #0
	movw	r1, #:lower16:.LC1152
	movt	r1, #:upper16:.LC1152
	str	r5, [fp, #128]
	mov	r0, r7
	bl	sprintf
	mov	r2, r5
	mvn	r3, #0
	stm	sp, {r5, r7}
	mov	r0, fp
	ldr	r1, [fp, #72]
	bl	check_command
	subs	r5, r0, #0
	beq	.L15053
.L14702:
	mov	r0, r6
	bl	up_read
	cmn	r5, #4
	beq	.L14632
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L14632
	cmn	r5, #22
	beq	.L14839
	cmp	r5, #0
	bge	.L14798
.L15025:
	ldr	r6, [fp, #120]
.L14799:
	cmp	r6, #1
	beq	.L14801
	cmp	r6, #2
	beq	.L14802
	cmp	r6, #0
	beq	.L15054
.L14803:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	mov	r0, r10
	cmp	r3, #0
	mvnle	r3, #7
	strle	r3, [fp, #112]
	bl	_raw_spin_unlock_irq
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3964]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3, #3964]
	bne	.L14632
	mov	r0, fp
	bl	send_status
	subs	r4, r0, #0
	bne	.L14632
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	mov	r0, r10
	cmp	r3, #0
	strle	r4, [fp, #112]
	bl	_raw_spin_unlock_irq
	b	.L14632
.L14680:
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1123
	mov	r2, #0
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1123
	movw	r3, #386
	mov	r0, fp
	str	r2, [sp]
	mov	r2, #1
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
.L15044:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L14707
.L15031:
	mov	r2, #335872
	mov	r0, r6
	str	r2, [r3, #28]
	bl	up_read
.L14708:
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L14632
.L14839:
	mov	r5, #0
.L14798:
	ldr	r6, [fp, #120]
	cmp	r6, #2
	bne	.L14799
	ldr	r3, [fp, #128]
	mov	r2, #1
	ldr	r1, [r4, #16]
	cmp	r5, r3
	movcs	r5, r3
	str	r5, [r1, #4]
	str	r2, [r4, #4]
	ldr	r6, [fp, #120]
	ldr	r3, [fp, #136]
	sub	r5, r3, r5
	str	r5, [fp, #136]
	b	.L14799
.L15049:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC86
	movw	r3, #2859
	ldr	r2, .L15094+4
	movt	r1, #:upper16:.LC86
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC87
	movw	r1, #550
	movt	r0, #:upper16:.LC87
	bl	warn_slowpath_null
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r0, r10
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L14632
.L15048:
	ldr	r0, .L15094+8
	mov	r2, r8
	sub	r1, r4, #344
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #-392]
	b	.L14837
.L14801:
	ldr	r3, [fp, #136]
	cmp	r3, #0
	beq	.L14803
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	ands	r5, r3, #8
	beq	.L15026
	b	.L15055
.L15056:
	ldr	r3, [fp, #140]
	cmp	r3, #0
	beq	.L14803
	ldr	r6, [fp, #60]
	ldr	r2, [r6, #4]
	cmp	r2, #0
	beq	.L14841
.L14825:
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L14632
.L15026:
	ldr	r3, [fp, #64]
.L14818:
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L15056
	cmp	r2, #1
	bne	.L14819
	.syntax divided
@ 2060 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r1, [r3, #8]
	str	r5, [r3, #4]
	str	r1, [fp, #64]
	ldr	r2, [r3, #24]
	ldr	r3, [r3, #12]
	ldr	r0, [r2, #48]
	cmp	r0, r3
	bcc	.L14820
	ldr	r3, [r2, #44]
	cmp	r3, #0
	bne	.L14820
	mov	r3, r1
	b	.L14818
.L15054:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L14803
	ldr	r2, [fp, #8]
	cmp	r2, #0
	ldreq	r0, [fp]
	movweq	r1, #:lower16:.LC86
	movweq	r3, #2120
	beq	.L15029
	movw	r0, #:lower16:.LANCHOR4
	ldr	lr, [r2, #100]
	movw	r1, #:lower16:.LC1115
	movt	r0, #:upper16:.LANCHOR4
	ldr	r4, [r2, #104]
	movw	r3, #:lower16:.LC767
	ldrh	ip, [r0, #-198]
	movt	r1, #:upper16:.LC1115
	movt	r3, #:upper16:.LC767
	cmp	r4, lr
	movne	r3, r1
	tst	ip, #4
	bne	.L15057
.L14807:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r0, [fp, #8]
	bl	halt_bulk_in_endpoint
.L14808:
	cmp	r0, #0
	bne	.L14632
	b	.L14803
.L14802:
	ldr	r3, [fp, #124]
	cmp	r3, #0
	beq	.L14803
	ldr	r3, [fp, #8]
	cmp	r3, #0
	beq	.L15058
	ldr	r4, [fp, #60]
	ldr	r2, [fp, #136]
	ldr	r3, [r4, #16]
	cmp	r2, #0
	bne	.L14811
	ldrb	ip, [r3, #26]	@ zero_extendqisi2
	mov	r1, r4
	mov	r0, fp
	bfi	ip, r2, #1, #1
	strb	ip, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L14632
	ldr	r3, [r4, #8]
	str	r3, [fp, #60]
	b	.L14803
.L14819:
	ldr	r6, [fp, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L14825
	ldr	r3, [fp, #140]
	cmp	r3, #0
	beq	.L14825
.L14841:
	cmp	r3, #16384
	mov	r1, r6
	movcc	r4, r3
	movcs	r4, #16384
	mov	r0, fp
	str	r4, [r6, #12]
	ldr	r3, [fp, #108]
	udiv	r2, r4, r3
	mls	r2, r3, r2, r4
	cmp	r2, #0
	addne	r3, r4, r3
	moveq	r3, r4
	subne	r3, r3, r2
	ldr	r2, [r6, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer
	cmp	r0, #0
	beq	.L14632
	ldr	r1, [r6, #8]
	ldr	r2, [fp, #140]
	ldr	r3, [fp, #64]
	str	r1, [fp, #60]
	sub	r4, r2, r4
	str	r4, [fp, #140]
	b	.L14818
.L15058:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC86
	movw	r3, #2135
.L15029:
	ldr	r2, .L15094+12
	movt	r1, #:upper16:.LC86
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC87
	movw	r1, #550
	movt	r0, #:upper16:.LC87
	bl	warn_slowpath_null
	b	.L14632
.L14664:
	movw	r0, #:lower16:.LANCHOR4
	ldr	ip, [r8, #100]
	movw	r2, #:lower16:.LC1115
	movt	r0, #:upper16:.LANCHOR4
	ldr	r5, [r8, #104]
	movw	r3, #:lower16:.LC767
	ldrh	r1, [r0, #-198]
	movt	r2, #:upper16:.LC1115
	movt	r3, #:upper16:.LC767
	cmp	r5, ip
	movne	r3, r2
	tst	r1, #4
	bne	.L15059
.L14666:
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	mov	r0, r8
	bl	halt_bulk_in_endpoint
.L14644:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L14632
.L14811:
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	mov	r1, r4
	mov	r0, fp
	orr	r2, r2, #2
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	ldr	r3, [r4, #8]
	beq	.L15060
	tst	r2, #1
	str	r3, [fp, #60]
	beq	.L14803
.L14813:
	ldr	r0, [fp, #8]
	bl	halt_bulk_in_endpoint
	b	.L14808
.L14675:
	ldrb	ip, [fp, #83]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1150
	mov	r1, #1
	ldrb	r0, [fp, #82]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1150
	mov	r3, #956
	ldrb	lr, [fp, #84]	@ zero_extendqisi2
	stm	sp, {r1, r2}
	mov	r2, #2
	mov	r1, #12
	lsl	ip, ip, #8
	orr	ip, ip, r0, lsl #16
	mov	r0, fp
	orr	ip, ip, lr
	lsl	ip, ip, #9
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
	ldrb	r5, [fp, #83]	@ zero_extendqisi2
	ldrb	r2, [fp, #82]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	lsl	r5, r5, #8
	orr	r5, r5, r2, lsl #16
	orrs	r5, r5, r3
	beq	.L14746
	ldr	r8, [fp, #104]
	ldr	r1, [fp, #78]	@ unaligned
	ldrd	r2, [r8, #16]
	rev	r1, r1
	mov	ip, r1
	mov	r1, #0
	cmp	ip, r2
	str	ip, [sp, #60]
	sbcs	r3, r1, r3
	bge	.L15061
	ldrb	r3, [fp, #85]	@ zero_extendqisi2
	and	r3, r3, #248
	cmp	r3, #248
	str	r3, [sp, #72]
	beq	.L15062
	ldr	r2, [sp, #60]
	ldr	r3, [fp, #128]
	lsr	r1, r2, #23
	lsl	r2, r2, #9
	cmp	r3, #0
	str	r2, [sp, #32]
	str	r1, [sp, #36]
	beq	.L15034
	str	r6, [sp, #40]
	str	r4, [sp, #56]
	ldrd	r4, [sp, #32]
	str	r10, [sp, #44]
	mov	r10, r3
.L14775:
	ldr	r1, [r8, #8]
	cmp	r10, #16384
	mov	r3, #0
	ldr	r0, [r8, #12]
	movcc	r2, r10
	movcs	r2, #16384
	subs	r1, r1, r4
	str	r1, [sp, #64]
	sbc	r1, r0, r5
	str	r1, [sp, #68]
	ldrd	r0, [sp, #64]
	cmp	r2, r0
	sbcs	r1, r3, r1
	strdlt	r2, [sp, #64]
.L14778:
	ldrd	r0, [sp, #64]
	ubfx	r3, r4, #0, #12
	cmp	r3, #0
	mov	r6, r0
	beq	.L14779
	rsb	r6, r3, #4096
	cmp	r6, r0
	movcs	r6, r0
.L14779:
	ldr	r7, [fp, #60]
	b	.L14780
.L14782:
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L15013
.L14780:
	ldr	r3, [r7, #4]
	cmp	r3, #0
	bne	.L14782
	cmp	r6, #0
	beq	.L15063
	ldr	r3, [sp, #72]
	strd	r4, [sp, #80]
	mov	r2, r6
	ldr	r1, [r7]
	ldr	r0, [r8]
	cmp	r3, #248
	add	r3, sp, #80
	addeq	r1, r1, #16
	bl	vfs_read
	ldr	r2, [r9, #12]
	mov	r3, r0
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	bne	.L14850
	cmp	r0, #0
	blt	.L15064
	cmp	r6, r0
	bls	.L14789
	ldr	r0, .L15094+16
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L15065
.L14790:
	ldr	r2, [fp, #136]
	bic	r3, r3, #508
	mov	r1, #1
	bic	r3, r3, #3
	adds	r4, r4, r3
	sub	r10, r10, r3
	adc	r5, r5, r3, asr #31
	cmp	r6, r3
	sub	r2, r2, r3
	str	r2, [fp, #136]
	ldr	r2, [r7, #16]
	str	r3, [r2, #4]
	str	r1, [r7, #4]
	bhi	.L15066
.L14791:
	cmp	r10, #0
	beq	.L15014
	mov	r1, r7
	mov	r0, fp
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L14851
	ldr	r3, [r7, #8]
	str	r3, [fp, #60]
	b	.L14775
.L14678:
	ldr	r3, [fp, #82]	@ unaligned
	ldr	r2, [fp, #104]
	rev	r3, r3
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L14717
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L14717:
	mov	r1, #1
	movw	r0, #:lower16:.LC1129
	movt	r0, #:upper16:.LC1129
	movw	r3, #1022
	mov	r2, #2
	str	r1, [sp]
	mov	r1, #12
.L15038:
	str	r0, [sp, #4]
	mov	r0, fp
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
	mov	r0, fp
	bl	do_read
	mov	r5, r0
	b	.L14702
.L14683:
	movw	ip, #:lower16:.LC1139
	mov	r1, #0
	movt	ip, #:upper16:.LC1139
	mov	r7, #1
	mov	r3, #444
	mov	r2, #3
	str	r1, [fp, #128]
	mov	r0, fp
	mov	r1, #10
	stm	sp, {r7, ip}
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
	ldr	r8, [fp, #104]
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L14746
	ldr	r0, [r8]
	cmp	r0, #0
	beq	.L14746
	mov	r1, r7
	bl	vfs_fsync
	cmp	r0, #0
	beq	.L14746
	movw	r3, #3074
	mov	r0, r6
	movt	r3, 3
	str	r3, [r8, #28]
	bl	up_read
.L14704:
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L14798
	b	.L14632
.L14677:
	ldr	r3, [fp, #82]	@ unaligned
	ldr	r2, [fp, #104]
	rev	r3, r3
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L14771
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L14771:
	movw	r0, #:lower16:.LC1146
	mov	r2, #1
	movt	r0, #:upper16:.LC1146
	movw	r3, #1022
	mov	r1, #12
	str	r2, [sp]
.L15041:
	str	r0, [sp, #4]
	mov	r0, fp
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
	mov	r0, fp
	bl	do_write
	mov	r5, r0
	b	.L14702
.L14684:
	movw	ip, #:lower16:.LC1141
	mov	r1, #0
	movt	ip, #:upper16:.LC1141
	mov	r0, #1
	movw	r3, #446
	mov	r2, #3
	str	r1, [fp, #128]
	mov	r1, #10
	stm	sp, {r0, ip}
	mov	r0, fp
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
	ldr	r3, [fp, #60]
	mov	r1, #0
	ldr	r7, [fp, #104]
	ldr	ip, [fp, #78]	@ unaligned
	str	r3, [sp, #40]
	ldrd	r2, [r7, #16]
	rev	ip, ip
	cmp	ip, r2
	sbcs	r3, r1, r3
	bge	.L15067
	ldrb	r5, [fp, #77]	@ zero_extendqisi2
	bics	r5, r5, #16
	bne	.L15032
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	orrs	r1, r3, r1, lsl #8
	beq	.L15034
	ldr	r0, [r7]
	ldr	r2, [r7, #40]
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	cmp	r0, #0
	sub	lr, r2, #32
	lsl	r8, r1, r2
	orr	r1, r5, ip, lsl lr
	ubfx	r3, r3, #1, #1
	moveq	r3, #1
	str	r1, [sp, #28]
	rsb	r1, r2, #32
	cmp	r3, #0
	ldr	lr, [sp, #28]
	lsl	r3, ip, r2
	str	r3, [sp, #24]
	orr	r1, lr, ip, lsr r1
	str	r1, [sp, #28]
	bne	.L14752
	mov	r1, #1
	bl	vfs_fsync
.L14752:
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r1, r3, #1
	bne	.L15027
	ldr	r3, [r7]
	mvn	r2, #0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #32]
	ldr	r0, [r3, #32]
	bl	invalidate_mapping_pages
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L15027
	str	r4, [sp, #44]
	str	r6, [sp, #56]
	str	r10, [sp, #60]
	mov	r10, r7
	ldrd	r6, [sp, #24]
	str	fp, [sp, #72]
	str	r5, [sp, #76]
	ldrd	r4, [sp, #48]
	b	.L14754
.L15095:
	.align	2
.L15094:
	.word	.LANCHOR1+4012
	.word	.LANCHOR5-520
	.word	.LANCHOR4+240
	.word	.LANCHOR5-448
	.word	.LANCHOR8-3678
	.word	.LANCHOR8-3726
	.word	.LANCHOR8-3798
	.word	.LANCHOR8-3846
	.word	.LANCHOR8-3822
	.word	.LANCHOR4+258
	.word	.LANCHOR8-3702
	.word	.LANCHOR1+3992
	.word	.LANCHOR8-3750
.L15073:
	cmp	r0, #0
	blt	.L15068
	cmp	r4, r0
	bls	.L14762
	ldr	r0, .L15094+20
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L15069
.L14763:
	ldr	r2, [r10, #44]
	rsb	r2, r2, #0
	and	r3, r3, r2
.L14762:
	cmp	r3, #0
	beq	.L15070
	adds	r6, r6, r3
	sub	r8, r8, r3
	adc	r7, r7, r3, asr #31
.L14754:
	cmp	r8, #0
	beq	.L15071
	ldr	r1, [r10, #8]
	cmp	r8, #16384
	mov	r3, #0
	ldr	r0, [r10, #12]
	movcc	r2, r8
	movcs	r2, #16384
	subs	r4, r1, r6
	sbc	r5, r0, r7
	cmp	r2, r4
	sbcs	r1, r3, r5
	movlt	r4, r2
	movlt	r5, r3
	cmp	r4, #0
	beq	.L15072
	ldr	r1, [sp, #40]
	add	r3, sp, #80
	mov	r2, r4
	strd	r6, [sp, #80]
	ldr	r0, [r10]
	ldr	r1, [r1]
	bl	vfs_read
	ldr	r2, [r9, #12]
	mov	r3, r0
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L15073
	strd	r6, [sp, #24]
	ldr	r6, [sp, #56]
	strd	r4, [sp, #48]
	mvn	r5, #3
	ldr	r4, [sp, #44]
	ldr	r10, [sp, #60]
	ldr	fp, [sp, #72]
	b	.L14702
.L14685:
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	orr	r3, r3, r1, lsl #8
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L14770
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L14770:
	mov	r2, #1
	movw	r0, #:lower16:.LC1145
	movt	r0, #:upper16:.LC1145
	movw	r3, #446
	mov	r1, #10
	str	r2, [sp]
	b	.L15041
.L14679:
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1125
	mov	r2, #0
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1125
	movw	r3, #390
	mov	r0, fp
	str	r2, [sp]
	mov	r2, #2
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
.L15022:
	mov	r1, r4
	mov	r0, fp
	bl	do_mode_sense
	mov	r5, r0
	b	.L14702
.L14681:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L14674
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L14674
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1131
	mov	r2, #1
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1131
	movw	r3, #446
	mov	r0, fp
	str	r2, [sp]
	mov	r2, #2
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	ldr	r8, [fp, #78]	@ unaligned
	ldr	r7, [r4]
	ldr	ip, [fp, #104]
	tst	r3, #253
	and	lr, r3, #2
	rev	r8, r8
	bne	.L15074
	ldrd	r2, [ip, #16]
	mov	r1, #0
	cmp	r8, r2
	sbcs	r3, r1, r3
	bge	.L15075
	mov	r1, #8
	mov	r0, r7
	str	lr, [sp, #40]
	bl	__memzero
	ldr	lr, [sp, #40]
	mov	r3, #1
	strb	r3, [r7]
	cmp	lr, #0
	beq	.L14722
	lsr	r1, r8, #2
	mov	r2, #75
	strb	r5, [r7, #4]
	mov	r3, #60
	add	r1, r1, #150
	mov	r0, r6
	mov	r5, #8
	udiv	ip, r1, r2
	udiv	lr, ip, r3
	mls	r2, r2, ip, r1
	mls	r3, r3, lr, ip
	strb	lr, [r7, #5]
	strb	r2, [r7, #7]
	strb	r3, [r7, #6]
	bl	up_read
	b	.L14704
.L14682:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L14674
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L14674
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1132
	mov	r8, #1
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1132
	movw	r3, #962
	mov	r2, #2
	mov	r0, fp
	str	r8, [sp]
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	ldrb	r0, [fp, #82]	@ zero_extendqisi2
	ldrb	ip, [fp, #85]	@ zero_extendqisi2
	ldr	r7, [r4]
	and	r1, r3, #253
	and	r3, r3, #2
	ldr	r2, [fp, #104]
	cmp	r0, r8
	cmpls	r1, #0
	lsr	r0, ip, #6
	movne	r1, #1
	moveq	r1, #0
	str	r0, [sp, #40]
	bne	.L15076
	ldr	r0, [sp, #40]
	cmp	r0, #2
	beq	.L15077
	mov	r1, #20
	mov	r0, r7
	strd	r2, [sp, #40]
	bl	__memzero
	ldrd	r2, [sp, #40]
	mov	r1, #18
	strb	r1, [r7, #1]
	strb	r8, [r7, #2]
	cmp	r3, #0
	mov	r3, #22
	strb	r8, [r7, #3]
	strb	r8, [r7, #6]
	strb	r3, [r7, #5]
	beq	.L14727
	mov	r1, #131072
	mov	r0, r6
	strb	r3, [r7, #13]
	mvn	r3, #85
	str	r1, [r7, #8]	@ unaligned
	mov	r1, #75
	strb	r3, [r7, #14]
	ldr	r3, [r2, #16]
	mov	r2, #60
	strb	r5, [r7, #16]
	mov	r5, #20
	lsr	r3, r3, #2
	add	r3, r3, #150
	udiv	ip, r3, r1
	udiv	lr, ip, r2
	mls	r3, r1, ip, r3
	mls	r2, r2, lr, ip
	strb	lr, [r7, #17]
	strb	r3, [r7, #19]
	strb	r2, [r7, #18]
	bl	up_read
	b	.L14704
.L14690:
	movw	r0, #:lower16:.LC1135
	mov	ip, #0
	movt	r0, #:upper16:.LC1135
	mov	r3, #18
	mov	r2, #3
	mov	r1, #6
	str	ip, [sp]
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
	ldr	r7, [fp, #104]
	cmp	r7, #0
	beq	.L14707
	ldrb	r2, [r7, #24]	@ zero_extendqisi2
	tst	r2, #4
	beq	.L15030
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	tst	r3, #254
	bne	.L15032
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	bics	r5, r3, #3
	bne	.L15032
	tst	r3, #1
	and	r3, r3, #2
	beq	.L14734
	cmp	r3, #0
	bne	.L15078
.L14735:
	ldr	r3, [r7]
	cmp	r3, #0
	beq	.L14736
.L14746:
	mov	r0, r6
	bl	up_read
	b	.L14704
.L14694:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1122
	mov	r2, #0
	movt	r0, #:upper16:.LC1122
	mov	r3, #18
	mov	r1, #6
	str	r2, [sp]
	mov	r2, #1
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
	b	.L15044
.L14695:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1120
	mov	r2, #0
	movt	r0, #:upper16:.LC1120
	mov	r3, #16
	mov	r1, #6
	str	r2, [sp]
	mov	r2, #2
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
	ldr	lr, [fp, #104]
	ldr	r7, [r4]
	cmp	lr, #0
	beq	.L15079
	ldrb	r2, [lr, #24]	@ zero_extendqisi2
	mov	ip, #31
	mov	r0, #2
	ldr	r3, .L15094+44
	add	r1, fp, #218
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	str	r1, [sp, #40]
	ands	r2, r2, #8
	movne	r2, #5
	strb	r2, [r7]
	ldrb	r2, [lr, #24]	@ zero_extendqisi2
	strb	r0, [r7, #2]
	strb	ip, [r7, #4]
	strb	r0, [r7, #3]
	mov	r0, r3
	lsl	r2, r2, #5
	strb	r5, [r7, #5]
	strb	r5, [r7, #6]
	bic	ip, r2, #127
	mov	r2, #16
	strb	ip, [r7, #1]
	strb	r5, [r7, #7]
	bl	strncpy
	ldr	r1, [sp, #40]
	strb	r5, [r8, #4008]
	mov	r0, r1
	bl	strlen
	cmp	r0, #11
	ldr	r3, .L15094+44
	bhi	.L14706
	ldr	r2, [fp, #96]
	cmp	r2, #0
	bne	.L15080
.L14706:
	mov	r1, #1
	add	r8, fp, #180
	str	r3, [sp]
	movw	r2, #:lower16:.LC895
	add	r3, fp, #209
	mov	r0, r8
	movt	r2, #:upper16:.LC895
	str	r1, [sp, #4]
	mov	r1, #29
	mov	r5, #36
	bl	snprintf
	ldr	r1, [fp, #180]	@ unaligned
	mov	r0, r6
	ldr	r2, [fp, #184]	@ unaligned
	ldr	r3, [fp, #188]	@ unaligned
	ldr	ip, [fp, #192]	@ unaligned
	str	r1, [r7, #8]	@ unaligned
	str	r2, [r7, #12]	@ unaligned
	str	r3, [r7, #16]	@ unaligned
	str	ip, [r7, #20]	@ unaligned
	ldr	r3, [fp, #204]	@ unaligned
	ldr	r1, [fp, #196]	@ unaligned
	ldr	r2, [fp, #200]	@ unaligned
	str	r1, [r7, #24]	@ unaligned
	str	r2, [r7, #28]	@ unaligned
	str	r3, [r7, #32]	@ unaligned
	ldrb	r3, [fp, #208]	@ zero_extendqisi2
	strb	r3, [r7, #36]
	bl	up_read
	b	.L14704
.L14686:
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	orr	r3, r3, r1, lsl #8
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L14716
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L14716:
	mov	r1, #1
	movw	r0, #:lower16:.LC1128
	movt	r0, #:upper16:.LC1128
	movw	r3, #446
	mov	r2, #2
	str	r1, [sp]
	mov	r1, #10
	b	.L15038
.L14687:
	movw	ip, #:lower16:.LC1130
	mov	r1, #1
	movt	ip, #:upper16:.LC1130
	mov	r7, #8
	mov	r3, #316
	mov	r2, #2
	mov	r0, fp
	str	r7, [fp, #128]
	stm	sp, {r1, ip}
	mov	r1, #10
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r0, [fp, #78]	@ unaligned
	ldr	r2, [r4]
	ldr	r1, [fp, #104]
	cmp	r3, #1
	rev	r0, r0
	bhi	.L14718
	eor	r3, r3, #1
	cmp	r0, #0
	moveq	r3, #0
	andne	r3, r3, #1
	cmp	r3, #0
	bne	.L14718
	ldr	r3, [r1, #16]
	mov	r0, r6
	mov	r5, r7
	sub	r3, r3, #1
	lsr	ip, r3, #16
	lsr	lr, r3, #24
	strb	r3, [r2, #3]
	ubfx	r3, r3, #8, #8
	strb	lr, [r2]
	strb	ip, [r2, #1]
	strb	r3, [r2, #2]
	ldr	r3, [r1, #44]
	lsr	r1, r3, #16
	lsr	ip, r3, #24
	strb	ip, [r2, #4]
	strb	r3, [r2, #7]
	ubfx	r3, r3, #8, #8
	strb	r1, [r2, #5]
	strb	r3, [r2, #6]
	bl	up_read
	b	.L14704
.L14688:
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1133
	mov	r2, #1
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1133
	mov	r3, #384
	mov	r0, fp
	str	r2, [sp]
	mov	r2, #2
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
	ldr	r3, [r4]
	mov	r2, #134217728
	mov	r0, r6
	ldr	r1, [fp, #104]
	mov	ip, #2
	mov	r5, #12
	str	r2, [r3]	@ unaligned
	ldr	r2, [r1, #16]
	lsr	r6, r2, #24
	lsr	lr, r2, #16
	strb	r6, [r3, #4]
	strb	r2, [r3, #7]
	ubfx	r2, r2, #8, #8
	strb	lr, [r3, #5]
	strb	r2, [r3, #6]
	ldr	r2, [r1, #44]
	strb	ip, [r3, #8]
	lsr	r1, r2, #16
	ubfx	ip, r2, #8, #8
	strb	r1, [r3, #9]
	strb	ip, [r3, #10]
	strb	r2, [r3, #11]
	bl	up_read
	b	.L14704
.L14689:
	movw	r0, #:lower16:.LC1126
	mov	ip, #0
	movt	r0, #:upper16:.LC1126
	mov	r3, #16
	mov	r2, #3
	mov	r1, #6
	str	ip, [sp]
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
	ldr	r7, [fp, #104]
	cmp	r7, #0
	beq	.L14707
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L15030
	ldrb	r8, [fp, #80]	@ zero_extendqisi2
	bics	r5, r8, #1
	bne	.L15032
	and	r1, r3, #144
	mvn	r2, r8
	cmp	r1, #16
	movne	r2, #0
	andeq	r2, r2, #1
	cmp	r2, #0
	bne	.L15081
.L14713:
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	mov	r0, r6
	bfi	r3, r8, #4, #1
	strb	r3, [r7, #24]
	bl	up_read
	b	.L14704
.L14696:
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L14769
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L14769:
	mov	r2, #1
	movw	r0, #:lower16:.LC1144
	movt	r0, #:upper16:.LC1144
	mov	r3, #30
	mov	r1, #6
	str	r2, [sp]
	b	.L15041
.L14691:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1124
	mov	r2, #0
	movt	r0, #:upper16:.LC1124
	mov	r3, #22
	mov	r1, #6
	str	r2, [sp]
	mov	r2, #2
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
	b	.L15022
.L14698:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1134
	mov	r8, #0
	movt	r0, #:upper16:.LC1134
	mov	r3, #16
	mov	r2, #2
	mov	r1, #6
	str	r8, [sp]
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14702
	ldr	r1, [fp, #104]
	ldr	r3, [r4]
	cmp	r1, r8
	beq	.L15082
	ldrb	r0, [r1, #24]	@ zero_extendqisi2
	ldr	r2, [r1, #28]
	str	r8, [r1, #28]
	ldr	r7, [r1, #32]
	str	r8, [r1, #32]
	mov	ip, r0
	ubfx	r0, r0, #6, #1
	lsl	r5, r0, #7
	bfi	ip, r8, #6, #1
	strb	ip, [r1, #24]
.L14729:
	mov	r0, r3
	mov	r1, #18
	str	r3, [sp, #40]
	str	r2, [sp, #44]
	orr	r5, r5, #112
	bl	__memzero
	ldr	r3, [sp, #40]
	lsr	r1, r7, #16
	lsr	ip, r7, #24
	ldr	r2, [sp, #44]
	strb	r5, [r3]
	mov	r5, #18
	lsr	lr, r2, #16
	lsr	r0, r2, #8
	strb	r7, [r3, #6]
	ubfx	r7, r7, #8, #8
	strb	lr, [r3, #2]
	strb	r2, [r3, #13]
	mov	r2, #10
	strb	ip, [r3, #3]
	strb	r1, [r3, #4]
	strb	r7, [r3, #5]
	strb	r2, [r3, #7]
	strb	r0, [r3, #12]
	mov	r0, r6
	bl	up_read
	b	.L14704
.L14699:
	movw	ip, #:lower16:.LC1140
	mov	r3, #0
	movt	ip, #:upper16:.LC1140
	mov	r1, #1
	mov	r2, #3
	mov	r0, fp
	str	r3, [fp, #128]
	stm	sp, {r1, ip}
	mov	r1, #6
	bl	check_command
	mov	r5, r0
	b	.L14702
.L14697:
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L14715
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L14715:
	mov	r1, #1
	movw	r0, #:lower16:.LC1127
	movt	r0, #:upper16:.LC1127
	mov	r3, #30
	mov	r2, #2
	str	r1, [sp]
	mov	r1, #6
	b	.L15038
.L15053:
	ldr	r3, [fp, #104]
	b	.L15031
.L15060:
	tst	r2, #1
	str	r3, [fp, #60]
	beq	.L14632
	b	.L14813
.L14661:
	ldr	r0, .L15094+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L15083
.L14663:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	ands	r5, r3, #1
	bne	.L14664
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r0, r10
	str	r5, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L14632
.L14820:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [fp, #112]
	mov	r4, r0
	cmp	r3, #1
	bgt	.L14823
	ldr	r3, [fp, #56]
	mov	r1, #1
	ldr	r2, [fp, #168]
	str	r1, [fp, #112]
	str	r3, [fp, #116]
	cmp	r2, #0
	beq	.L14823
.L15045:
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L14823:
	mov	r1, r4
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	b	.L14632
.L14647:
	ldr	r0, .L15094+28
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L15084
.L14649:
	ldr	r0, .L15094+32
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L15036
	b	.L15085
.L15087:
	blx	r3
.L14652:
	cmp	r0, #0
	beq	.L14655
	cmn	r0, #11
	bne	.L15086
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L14655
.L15036:
	ldr	r0, [r8, #100]
	ldr	r2, [r0, #8]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	bne	.L15087
	mov	r1, #1
	ldr	r3, [r2, #24]
	blx	r3
	b	.L14652
.L15086:
	ldr	r3, [r8, #84]
	movw	r1, #:lower16:.LC1118
	mov	r2, r0
	movt	r1, #:upper16:.LC1118
	add	r0, r3, #32
	bl	dev_warn
.L14655:
	add	r1, r8, #96
	mov	r0, #0
	bl	_set_bit
	b	.L14644
.L14707:
	mov	r0, r6
	bl	up_read
	b	.L14708
.L15057:
	ldr	r1, [r2, #84]
	movw	r2, #:lower16:.LC768
	sub	r0, r0, #216
	movt	r2, #:upper16:.LC768
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14807
.L14646:
	mov	r0, r10
	str	r2, [sp, #40]
	bl	_raw_spin_lock_irq
	ldr	r2, [sp, #40]
	mov	r0, r10
	str	r2, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L14632
.L15013:
	strd	r4, [sp, #32]
	mov	r5, r0
	ldr	r6, [sp, #40]
	ldr	r10, [sp, #44]
	ldr	r4, [sp, #56]
	b	.L14702
.L14734:
	tst	r2, #16
	bne	.L15088
	cmp	r3, #0
	beq	.L14746
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L14740
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L14740
	ldr	r2, [fp, #100]
	mov	r1, r7
	mov	r0, fp
	ldr	ip, [sp, #16]
	sub	r2, r7, r2
	asr	r2, r2, #3
	mul	r2, ip, r2
	blx	r3
	cmp	r0, #0
	blt	.L14847
	bne	.L14746
.L14740:
	mov	r0, r6
	bl	up_read
	mov	r0, r6
	bl	down_write
	ldr	r3, [r7]
	cmp	r3, #0
	beq	.L14741
	ldr	r0, .L15094+36
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L15089
.L14742:
	ldr	r0, [r7]
	bl	fput
	mov	r3, #0
	str	r3, [r7]
.L14741:
	mov	r0, r6
	bl	up_write
	mov	r0, r6
	bl	down_read
	movw	r1, #:lower16:.LC1138
	mov	r0, fp
	movt	r1, #:upper16:.LC1138
	bl	send_message
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L14746
	ldr	r3, [r3, #8]
	cmp	r3, #0
	beq	.L14746
	ldr	r2, [fp, #100]
	mov	r1, r7
	mov	r0, fp
	ldr	ip, [sp, #16]
	sub	r2, r7, r2
	asr	r2, r2, #3
	mul	r2, ip, r2
	blx	r3
	and	r5, r0, r0, asr #31
	b	.L14702
.L15085:
	ldr	r1, [r8, #84]
	movw	r2, #:lower16:.LC1117
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1117
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15036
.L15084:
	ldr	ip, [r6]
	movw	r2, #:lower16:.LC1116
	sub	r0, r0, #18
	ldr	r1, [r8, #84]
	movt	r2, #:upper16:.LC1116
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14649
.L15083:
	ldrb	ip, [r6, #14]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1119
	sub	r0, r0, #18
	ldr	r1, [r8, #84]
	movt	r2, #:upper16:.LC1119
	str	ip, [sp, #4]
	ldrb	ip, [r6, #12]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L14663
.L15082:
	ldrb	r1, [fp, #144]	@ zero_extendqisi2
	mov	r2, #9472
	movt	r2, 5
	orr	r1, r1, #16
	strb	r1, [fp, #144]
	b	.L14729
.L15064:
	ldr	r0, .L15094+40
	strd	r4, [sp, #32]
	mov	r5, r3
	ldr	r6, [sp, #40]
	ldr	r10, [sp, #44]
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L15090
.L14788:
	ldr	r2, [r7, #16]
	mov	r1, #0
	mov	r3, #1
	str	r1, [r2, #4]
	str	r3, [r7, #4]
.L14840:
	ldrd	r4, [sp, #32]
	mov	r1, #4352
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	movt	r1, 3
	str	r1, [r8, #28]
	lsr	r2, r4, #9
	orr	r3, r3, #64
	orr	r2, r2, r5, lsl #23
	strb	r3, [r8, #24]
	str	r2, [r8, #32]
.L14784:
	ldr	r3, [sp, #72]
	cmp	r3, #248
	beq	.L15091
.L15034:
	mov	r0, r6
	bl	up_read
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L15025
	b	.L14632
.L15062:
	ldr	r3, [sp, #60]
	str	r6, [sp, #40]
	str	r10, [sp, #44]
	str	r4, [sp, #56]
	lsr	r2, r3, #21
	lsl	r3, r3, #11
	str	r3, [sp, #32]
	str	r2, [sp, #36]
	mov	r2, #2352
	mov	r10, r2
	ldrd	r4, [sp, #32]
	b	.L14775
.L14722:
	lsr	r3, r8, #16
	lsr	r2, r8, #24
	mov	r0, r6
	mov	r5, #8
	strb	r2, [r7, #4]
	strb	r8, [r7, #7]
	ubfx	r8, r8, #8, #8
	strb	r3, [r7, #5]
	strb	r8, [r7, #6]
	bl	up_read
	b	.L14704
.L14789:
	ldr	r2, [fp, #136]
	mov	r1, #1
	adds	r4, r4, r0
	adc	r5, r5, r0, asr #31
	sub	r10, r10, r0
	sub	r2, r2, r0
	str	r2, [fp, #136]
	ldr	r2, [r7, #16]
	str	r0, [r2, #4]
	str	r1, [r7, #4]
	b	.L14791
.L15080:
	mov	r0, r3
	bl	strlen
	ldr	r3, .L15094+44
	movw	r1, #:lower16:.LC1121
	mov	r2, r0
	movt	r1, #:upper16:.LC1121
	ldr	ip, [r1]
	ldrh	r1, [r1, #4]
	add	r0, r3, r0
	str	ip, [r3, r2]	@ unaligned
	strh	r1, [r0, #4]	@ unaligned
	strb	r5, [r8, #4008]
	b	.L14706
.L15027:
	mov	r0, r6
	bl	up_read
	b	.L14632
.L15069:
	movw	r2, #:lower16:.LC1143
	sub	r0, r0, #18
	str	r4, [sp]
	movt	r2, #:upper16:.LC1143
	add	r1, r10, #48
	str	r3, [sp, #24]
	bl	__dynamic_dev_dbg
	ldr	r3, [sp, #24]
	b	.L14763
.L15081:
	ldr	r0, [r7]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L14713
	mov	r1, #1
	bl	vfs_fsync
	b	.L14713
.L14727:
	mvn	r1, #85
	str	r5, [r7, #8]	@ unaligned
	mov	r0, r6
	strb	r3, [r7, #13]
	mov	r5, #20
	strb	r1, [r7, #14]
	ldr	r3, [r2, #16]
	lsr	r2, r3, #16
	lsr	r1, r3, #24
	strb	r1, [r7, #16]
	strb	r3, [r7, #19]
	ubfx	r3, r3, #8, #8
	strb	r2, [r7, #17]
	strb	r3, [r7, #18]
	bl	up_read
	b	.L14704
.L15078:
	movw	r1, #:lower16:.LC1136
	mov	r0, fp
	movt	r1, #:upper16:.LC1136
	bl	send_message
	b	.L14735
.L15055:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [fp, #112]
	mov	r4, r0
	cmp	r3, #1
	bgt	.L14823
	ldr	r3, [fp, #56]
	str	r6, [fp, #112]
	ldr	r2, [fp, #168]
	str	r3, [fp, #116]
	cmp	r2, #0
	bne	.L15045
	b	.L14823
.L15032:
	mov	r3, #9216
	mov	r0, r6
	movt	r3, 5
	str	r3, [r7, #28]
	bl	up_read
	b	.L14708
.L15068:
	ldr	r0, .L15094+48
	strd	r6, [sp, #24]
	mov	r7, r10
	strd	r4, [sp, #48]
	ldr	r4, [sp, #44]
	ldr	r6, [sp, #56]
	ldr	r10, [sp, #60]
	ldrh	r2, [r0]
	ldr	fp, [sp, #72]
	ldr	r5, [sp, #76]
	tst	r2, #4
	bne	.L15092
.L14761:
	mov	r2, #4352
	ldr	r3, [r7, #40]
	movt	r2, 3
	ldr	r0, [sp, #28]
	str	r2, [r7, #28]
	ldr	r2, [sp, #24]
	subs	r1, r3, #32
	lsr	r2, r2, r3
	rsb	r3, r3, #32
	orr	r2, r2, r0, lsl r3
	movpl	r3, r0
	orrpl	r2, r2, r3, asr r1
.L14766:
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	mov	r0, r6
	str	r2, [r7, #32]
	orr	r3, r3, #64
	strb	r3, [r7, #24]
	bl	up_read
	b	.L14704
.L15072:
	mov	r0, r6
	mov	r1, r7
	ldr	r3, [r10, #40]
	mov	r2, #8448
	mov	r7, r10
	ldr	r6, [sp, #56]
	strd	r0, [sp, #24]
	movt	r2, 5
	ldr	ip, [sp, #28]
	strd	r4, [sp, #48]
	str	r2, [r7, #28]
	subs	r1, r3, #32
	lsr	r2, r0, r3
	rsb	r3, r3, #32
	ldr	r4, [sp, #44]
	ldr	r10, [sp, #60]
	orr	r2, r2, ip, lsl r3
	ldr	fp, [sp, #72]
	movpl	r3, ip
	ldr	r5, [sp, #76]
	orrpl	r2, r2, r3, asr r1
	b	.L14766
.L15071:
	strd	r6, [sp, #24]
	ldr	r6, [sp, #56]
	strd	r4, [sp, #48]
	ldr	r4, [sp, #44]
	ldr	r10, [sp, #60]
	ldr	fp, [sp, #72]
	ldr	r5, [sp, #76]
	b	.L14702
.L15070:
	strd	r6, [sp, #24]
	mov	r7, r10
	ldr	r6, [sp, #56]
	strd	r4, [sp, #48]
	ldr	r4, [sp, #44]
	ldr	r10, [sp, #60]
	ldr	fp, [sp, #72]
	ldr	r5, [sp, #76]
	b	.L14761
.L15079:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r1, #36
	mov	r0, r7
	mov	r5, r1
	orr	r3, r3, #16
	strb	r3, [fp, #144]
	bl	__memzero
	mov	r2, #127
	mov	r3, #31
	mov	r0, r6
	strb	r2, [r7]
	strb	r3, [r7, #4]
	bl	up_read
	b	.L14704
.L15077:
	movw	ip, #257
	mov	lr, #256
	strb	r1, [r7, #30]
	movt	ip, 5121
	movt	lr, 20
	movw	r0, #5121
	mov	r5, #65536
	str	ip, [r7, #2]	@ unaligned
	mov	ip, #40960
	movt	r0, 41472
	cmp	r3, #0
	str	ip, [r7, #6]	@ unaligned
	mov	ip, #256
	str	r5, [r7, #10]	@ unaligned
	str	lr, [r7, #14]	@ unaligned
	mov	lr, #161
	str	lr, [r7, #18]	@ unaligned
	str	ip, [r7, #22]	@ unaligned
	str	r0, [r7, #26]	@ unaligned
	strb	r1, [r7, #31]
	strb	r1, [r7, #32]
	beq	.L14725
	strb	r1, [r7, #33]
	ldr	r3, [r2, #16]
	mov	r2, #75
	mov	lr, #60
	movw	ip, #4500
	ldr	r5, [sp, #40]
	strb	r1, [r7, #39]
	strb	r1, [r7, #41]
	add	r3, r3, #150
	strb	r1, [r7, #42]
	strb	r1, [r7, #43]
	sdiv	r0, r3, r2
	strb	r1, [r7, #44]
	strb	r1, [r7, #45]
	sdiv	ip, r3, ip
	strb	r1, [r7, #47]
	sdiv	r1, r0, lr
	mls	r3, r2, r0, r3
	strb	ip, [r7, #34]
	strb	r5, [r7, #46]
	mov	r5, #20
	strb	r3, [r7, #36]
	strb	r8, [r7, #37]
	strb	r5, [r7, #38]
	strb	r8, [r7, #40]
	mls	r3, lr, r1, r0
	strb	r3, [r7, #35]
.L14726:
	mov	r3, #46
	mov	r2, #0
	mov	r5, #48
	strb	r2, [r7]
	strb	r3, [r7, #1]
	b	.L14702
.L15059:
	ldr	r1, [r8, #84]
	movw	r2, #:lower16:.LC768
	sub	r0, r0, #216
	movt	r2, #:upper16:.LC768
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14666
.L14850:
	strd	r4, [sp, #32]
	mvn	r5, #3
	ldr	r6, [sp, #40]
	ldr	r10, [sp, #44]
	ldr	r4, [sp, #56]
	b	.L14702
.L14725:
	ldr	r2, [r2, #16]
	movw	r1, #5121
	movt	r1, 256
	lsr	r0, r2, #24
	str	r1, [r7, #37]	@ unaligned
	lsr	r1, r2, #16
	strb	r0, [r7, #33]
	strb	r2, [r7, #36]
	ubfx	r2, r2, #8, #8
	strb	r1, [r7, #34]
	strb	r2, [r7, #35]
	str	r3, [r7, #41]	@ unaligned
	strb	r3, [r7, #45]
	strb	r3, [r7, #46]
	strb	r3, [r7, #47]
	b	.L14726
.L15075:
	mov	r3, #8448
	mov	r0, r6
	movt	r3, 5
	str	r3, [ip, #28]
	bl	up_read
	b	.L14708
.L15074:
	mov	r3, #9216
	mov	r0, r6
	movt	r3, 5
	str	r3, [ip, #28]
	bl	up_read
	b	.L14708
.L15063:
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	lsr	r2, r4, #9
	mov	r1, #8448
	movt	r1, 5
	strd	r4, [sp, #32]
	ldr	r10, [sp, #44]
	orr	r2, r2, r5, lsl #23
	mov	ip, r6
	ldr	r6, [sp, #40]
	str	r1, [r8, #28]
	orr	r3, r3, #64
	strb	r3, [r8, #24]
	str	r2, [r8, #32]
	ldr	r3, [r7, #16]
	mov	r2, #1
	str	ip, [r3, #4]
	str	r2, [r7, #4]
	b	.L14784
.L15061:
	mov	r3, #8448
	mov	r0, r6
	movt	r3, 5
	str	r3, [r8, #28]
	bl	up_read
	b	.L14708
.L14718:
	mov	r3, #9216
	mov	r0, r6
	movt	r3, 5
	str	r3, [r1, #28]
	bl	up_read
	b	.L14708
.L15076:
	mov	r3, #9216
	mov	r0, r6
	movt	r3, 5
	str	r3, [r2, #28]
	bl	up_read
	b	.L14708
.L15067:
	mov	r3, #8448
	mov	r0, r6
	movt	r3, 5
	str	r3, [r7, #28]
	bl	up_read
	b	.L14708
.L15092:
	movw	r2, #:lower16:.LC1142
	add	r1, r7, #48
	movt	r2, #:upper16:.LC1142
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L14761
.L14736:
	mov	r3, #14848
	mov	r0, r6
	movt	r3, 2
	str	r3, [r7, #28]
	bl	up_read
	b	.L14708
.L15091:
	ldr	r3, [sp, #60]
	mov	r2, #75
	mvn	ip, #0
	mov	r4, #60
	movw	r0, #4500
	mov	r8, #1
	add	r5, r3, #150
	ldr	r3, [r7]
	mov	r7, #0
	sdiv	lr, r5, r2
	sdiv	r0, r5, r0
	mov	r1, r3
	strb	r7, [r1], #1
	str	ip, [r3, #1]	@ unaligned
	str	ip, [r1, #4]	@ unaligned
	strh	ip, [r1, #8]	@ unaligned
	mov	r1, #288
	strb	r7, [r3, #11]
	sdiv	ip, lr, r4
	mls	r2, r2, lr, r5
	strb	r0, [r3, #12]
	add	r0, r3, #2064
	strb	r8, [r3, #15]
	strb	r2, [r3, #14]
	mls	r2, r4, ip, lr
	strb	r2, [r3, #13]
	bl	__memzero
	b	.L15034
.L15090:
	movw	r2, #:lower16:.LC552
	mov	r3, r5
	movt	r2, #:upper16:.LC552
	add	r1, r8, #48
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L14788
.L14851:
	strd	r4, [sp, #32]
	mvn	r5, #4
	ldr	r6, [sp, #40]
	ldr	r10, [sp, #44]
	ldr	r4, [sp, #56]
	b	.L14702
.L15014:
	strd	r4, [sp, #32]
	ldr	r6, [sp, #40]
	ldr	r10, [sp, #44]
	b	.L14784
.L15066:
	strd	r4, [sp, #32]
	ldr	r6, [sp, #40]
	ldr	r10, [sp, #44]
	b	.L14840
.L15065:
	movw	r2, #:lower16:.LC553
	sub	r0, r0, #18
	str	r6, [sp]
	movt	r2, #:upper16:.LC553
	add	r1, r8, #48
	str	r3, [sp, #32]
	bl	__dynamic_dev_dbg
	ldr	r3, [sp, #32]
	b	.L14790
.L15030:
	mov	r3, #335872
	mov	r0, r6
	str	r3, [r7, #28]
	bl	up_read
	b	.L14708
.L14847:
	mov	r5, r0
	b	.L14702
.L15088:
	ldr	r0, .L15096
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L15093
.L14738:
	ldr	r3, [sp, #20]
	mov	r0, r6
	str	r3, [r7, #28]
	bl	up_read
	b	.L14708
.L15089:
	movw	r2, #:lower16:.LC818
	add	r1, r7, #48
	movt	r2, #:upper16:.LC818
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L14742
.L15093:
	movw	r2, #:lower16:.LC1137
	add	r1, r7, #48
	movt	r2, #:upper16:.LC1137
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L14738
.L14693:
	movw	r0, #:lower16:.LC1147
	ldr	r1, .L15096+4
	mov	r5, #0
	movt	r0, #:upper16:.LC1147
	bl	printk
	movw	r1, #:lower16:.LC1149
	mov	r0, fp
	movt	r1, #:upper16:.LC1149
	bl	send_message
	mov	r0, r6
	bl	up_read
	b	.L14704
.L15052:
	ldrb	r5, [fp, #80]	@ zero_extendqisi2
	add	r8, fp, #235
	movw	r0, #:lower16:.LC1151
	ldr	r1, .L15096+8
	mov	r3, r8
	movt	r0, #:upper16:.LC1151
	mov	r2, r5
	str	r5, [fp, #128]
	ldr	r7, [r4]
	bl	printk
	ldr	r1, [fp, #128]
	cmp	r1, #0
	beq	.L14793
	mov	r0, r7
	bl	__memzero
.L14793:
	cmp	r5, #101
	mov	r1, r8
	movhi	r2, #101
	mov	r0, r7
	movls	r2, r5
	movhi	r5, r2
	bl	memcpy
	b	.L14746
.L14692:
	movw	r0, #:lower16:.LC1147
	ldr	r1, .L15096+12
	mov	r5, #0
	movt	r0, #:upper16:.LC1147
	bl	printk
	movw	r1, #:lower16:.LC1148
	mov	r0, fp
	movt	r1, #:upper16:.LC1148
	bl	send_message
	mov	r0, r6
	bl	up_read
	b	.L14704
.L15097:
	.align	2
.L15096:
	.word	.LANCHOR8-3774
	.word	.LANCHOR5-484
	.word	.LANCHOR5-468
	.word	.LANCHOR5-500
	.fnend
	.size	fsg_main_thread, .-fsg_main_thread
	.align	2
	.global	usb_diag_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_open, %function
usb_diag_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, .L15112
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5]
	mov	r9, r0
	cmp	r5, r4
	beq	.L15099
	sub	r4, r4, #4
	b	.L15101
.L15110:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L15099
.L15101:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L15110
	ldr	r0, .L15112
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
.L15103:
	ldr	r0, .L15112
	str	r6, [r4]
	str	r8, [r4, #12]
	str	r7, [r4, #16]
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:.LANCHOR0
	ldr	r1, [r5, #4]
	mov	r5, r0
	movt	r2, #:upper16:.LANCHOR0
	add	r0, r4, #4
	bl	__list_add
	ldr	r0, .L15112
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
.L15098:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15099:
	ldr	r0, .L15112
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15111
	mov	r2, #24
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L15103
	mvn	r4, #11
	b	.L15098
.L15111:
	mov	r4, #16
	b	.L15103
.L15113:
	.align	2
.L15112:
	.word	.LANCHOR1+3352
	.fnend
	.size	usb_diag_open, .-usb_diag_open
	.align	2
	.global	usb_diag_close
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_close, %function
usb_diag_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	ldr	r0, .L15121
	strd	r6, [sp, #8]
	mov	r6, #0
	movw	r7, #:lower16:.LANCHOR1
	str	r8, [sp, #16]
	movt	r7, #:upper16:.LANCHOR1
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	add	r0, r4, #4
	str	r6, [r4, #12]
	str	r6, [r4, #16]
	bl	list_del
	ldr	r1, .L15121+4
	ldr	r3, [r7, #3448]
	cmp	r3, r1
	sub	r3, r3, #140
	beq	.L15115
.L15118:
	ldr	r2, [r3, #124]
	cmp	r2, r4
	beq	.L15120
	ldr	r3, [r3, #140]
	cmp	r3, r1
	sub	r3, r3, #140
	bne	.L15118
.L15115:
	mov	r0, r4
	bl	kfree
	mov	r1, r5
	ldr	r0, .L15121
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L15120:
	ldr	r2, [r3, #140]
	str	r6, [r3, #124]
	cmp	r2, r1
	sub	r3, r2, #140
	bne	.L15118
	b	.L15115
.L15122:
	.align	2
.L15121:
	.word	.LANCHOR1+3352
	.word	.LANCHOR1+3448
	.fnend
	.size	usb_diag_close, .-usb_diag_close
	.align	2
	.global	usb_diag_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_alloc_req, %function
usb_diag_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L15138
	add	fp, r4, #108
	mov	r5, r4
	mov	r0, fp
	mov	r8, r1
	mov	r10, r2
	bl	_raw_spin_lock_irqsave
	mov	r3, r0
	ldr	r0, [r5, #100]!
	str	r3, [sp, #4]
	cmp	r0, r5
	ldr	r7, [r0]
	beq	.L15125
.L15126:
	sub	r6, r0, #36
	bl	list_del
	ldr	r0, [r4, #88]
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r7
	mov	r0, r7
	ldr	r7, [r7]
	bne	.L15126
.L15125:
	mov	r7, r4
	ldr	r0, [r7, #92]!
	cmp	r0, r7
	ldr	r9, [r0]
	beq	.L15127
.L15128:
	sub	r6, r0, #36
	bl	list_del
	ldr	r0, [r4, #84]
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r9
	mov	r0, r9
	ldr	r9, [r9]
	bne	.L15128
.L15127:
	cmp	r8, #0
	ble	.L15129
	movw	r9, #:lower16:diag_write_complete
	mov	r6, #0
	movt	r9, #:upper16:diag_write_complete
	b	.L15131
.L15152:
	str	r9, [r3, #28]
	ldr	r1, [r4, #104]
	bl	__list_add
	cmp	r8, r6
	beq	.L15129
.L15131:
	ldr	r0, [r4, #88]
	mov	r1, #32
	add	r6, r6, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r5
	add	r0, r3, #36
	bne	.L15152
.L15130:
	ldr	r0, [r4, #100]
	cmp	r0, r5
	ldr	r8, [r0]
	beq	.L15134
.L15135:
	sub	r6, r0, #36
	bl	list_del
	ldr	r0, [r4, #88]
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r8
	mov	r0, r8
	ldr	r8, [r8]
	bne	.L15135
.L15134:
	ldr	r0, [r4, #92]
	cmp	r0, r7
	ldr	r6, [r0]
	beq	.L15136
.L15137:
	sub	r5, r0, #36
	bl	list_del
	ldr	r0, [r4, #84]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r6
	mov	r0, r6
	ldr	r6, [r6]
	bne	.L15137
.L15136:
	mov	r0, fp
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
.L15123:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15129:
	cmp	r10, #0
	ble	.L15132
	movw	r8, #:lower16:diag_read_complete
	mov	r6, #0
	movt	r8, #:upper16:diag_read_complete
	b	.L15133
.L15153:
	str	r8, [r3, #28]
	ldr	r1, [r4, #96]
	bl	__list_add
	cmp	r10, r6
	beq	.L15132
.L15133:
	ldr	r0, [r4, #84]
	mov	r1, #32
	add	r6, r6, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	bne	.L15153
	b	.L15130
.L15132:
	mov	r0, fp
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L15123
.L15138:
	mvn	r0, #18
	b	.L15123
	.fnend
	.size	usb_diag_alloc_req, .-usb_diag_alloc_req
	.section	.rodata.str1.4
	.align	2
.LC1153:
	.ascii	"%s: no requests available\012\000"
	.align	2
.LC1154:
	.ascii	"%s: cannot queue read request\012\000"
	.text
	.align	2
	.global	usb_diag_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_read, %function
usb_diag_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L15158
	add	r8, r4, #108
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r7, r0
	cmp	r3, #0
	beq	.L15164
	ldr	r5, [r4, #92]
	add	r10, r4, #92
	cmp	r10, r5
	beq	.L15165
	mov	r0, r5
	sub	r9, r5, #36
	bl	list_del
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r9
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L15166
.L15154:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15158:
	mvn	r0, #18
	b	.L15154
.L15164:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L15154
.L15166:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r10
	ldr	r1, [r4, #96]
	mov	r0, r5
	bl	__list_add
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, .L15167
	ldr	r0, .L15167+4
	bl	___ratelimit
	cmp	r0, #0
	mvneq	r0, #4
	beq	.L15154
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC1154
	ldr	r2, .L15167
	movt	r1, #:upper16:.LC1154
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #4
	b	.L15154
.L15165:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC1153
	ldr	r2, .L15167
	movt	r1, #:upper16:.LC1153
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #10
	b	.L15154
.L15168:
	.align	2
.L15167:
	.word	.LANCHOR5-432
	.word	.LANCHOR7-1756
	.fnend
	.size	usb_diag_read, .-usb_diag_read
	.align	2
	.global	usb_diag_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_write, %function
usb_diag_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L15175
	add	r8, r4, #108
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r7, r0
	cmp	r3, #0
	beq	.L15180
	ldr	r5, [r4, #100]
	add	r10, r4, #100
	cmp	r10, r5
	beq	.L15181
	mov	r0, r5
	sub	r9, r5, #36
	bl	list_del
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r9
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L15182
	ldr	r2, [r4, #128]
	ldr	r3, [r4, #136]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #128]
	str	r3, [r4, #136]
.L15169:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15175:
	mvn	r0, #18
	b	.L15169
.L15180:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L15169
.L15182:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r3, r0
	mov	r2, r10
	ldr	r1, [r4, #104]
	mov	r0, r5
	mov	r5, r3
	bl	__list_add
	ldr	r1, .L15184
	ldr	r0, .L15184+4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L15183
.L15174:
	mov	r0, r8
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L15169
.L15181:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC1153
	ldr	r2, .L15184
	movt	r1, #:upper16:.LC1153
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #10
	b	.L15169
.L15183:
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC1154
	ldr	r2, .L15184
	movt	r1, #:upper16:.LC1154
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L15174
.L15185:
	.align	2
.L15184:
	.word	.LANCHOR5-416
	.word	.LANCHOR7-1732
	.fnend
	.size	usb_diag_write, .-usb_diag_write
	.section	.rodata.str1.4
	.align	2
.LC1155:
	.ascii	"diag_function_add\012\000"
	.align	2
.LC1156:
	.ascii	"usb_add_function failed\012\000"
	.align	2
.LC1157:
	.ascii	"unable to get diag usb channel\012\000"
	.text
	.align	2
	.global	diag_function_add
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_add, %function
diag_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15210
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r1
	str	r8, [sp, #16]
	mov	r8, r2
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L15205
.L15187:
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	ldr	r4, [r5]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L15190
	b	.L15188
.L15206:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L15188
.L15190:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L15206
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15207
	mov	r2, #148
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L15208
.L15192:
	movw	r3, #:lower16:.LANCHOR1
	add	r6, r5, #140
	ldr	r2, .L15210+4
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r6
	ldr	r1, [r3, #3452]
	bl	__list_add
	ldr	r3, .L15210+8
	str	r8, [r5, #120]
	movw	ip, #:lower16:diag_function_bind
	str	r4, [r5, #124]
	ldr	r2, [r7, #24]
	movt	ip, #:upper16:diag_function_bind
	movw	r1, #:lower16:diag_function_unbind
	movw	r0, #:lower16:diag_function_set_alt
	movt	r1, #:upper16:diag_function_unbind
	movt	r0, #:upper16:diag_function_set_alt
	mov	lr, #0
	str	r2, [r5, #116]
	ldr	r4, [r4]
	movw	r2, #:lower16:diag_function_disable
	movt	r2, #:upper16:diag_function_disable
	str	r3, [r5, #16]
	add	r3, r3, #40
	str	r4, [r5]
	str	r3, [r5, #8]
	add	r3, r5, #100
	str	ip, [r5, #32]
	add	ip, r5, #92
	str	r1, [r5, #36]
	mov	r1, r5
	str	r0, [r5, #40]
	mov	r0, r7
	str	r2, [r5, #48]
	str	ip, [r5, #92]
	str	ip, [r5, #96]
	str	r3, [r5, #100]
	str	r3, [r5, #104]
	str	lr, [r5, #108]
	bl	usb_add_function
	subs	r4, r0, #0
	bne	.L15209
.L15186:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15207:
	mov	r5, #16
	b	.L15192
.L15209:
	ldr	r3, [r7, #24]
	movw	r1, #:lower16:.LC1156
	movt	r1, #:upper16:.LC1156
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	mov	r0, r6
	bl	list_del
	mov	r0, r5
	bl	kfree
	b	.L15186
.L15205:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC1155
	sub	r0, r3, #24
	movt	r2, #:upper16:.LC1155
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15187
.L15188:
	ldr	r3, [r7, #24]
	movw	r1, #:lower16:.LC1157
	mvn	r4, #18
	movt	r1, #:upper16:.LC1157
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L15186
.L15208:
	mvn	r4, #11
	b	.L15186
.L15211:
	.align	2
.L15210:
	.word	.LANCHOR8-3648
	.word	.LANCHOR1+3448
	.word	.LANCHOR0+2032
	.fnend
	.size	diag_function_add, .-diag_function_add
	.section	.rodata.str1.4
	.align	2
.LC1158:
	.ascii	"<3>%s: diag: Cannot open channel '%s'\000"
	.section	.rodata.cst4
	.align	2
.LC1159:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_bind_config, %function
diag_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:.LC1159
	movt	r2, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LC1159
	strd	r8, [sp, #16]
	mov	r9, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r2, #3232]!
	.pad #44
	sub	sp, sp, #44
	ldr	r3, [r3]
	str	r3, [sp, #36]
	mov	r3,#0
	ldr	r1, [r1, #24]
	cmp	r4, r2
	sub	r4, r4, #512
	bne	.L15214
	b	.L15213
.L15232:
	ldr	r4, [r4, #512]
	cmp	r4, r2
	sub	r4, r4, #512
	beq	.L15213
.L15214:
	ldr	r3, [r4, #8]
	cmp	r1, r3
	bne	.L15232
.L15213:
	ldr	r1, .L15236
	mov	r2, #32
	add	r0, sp, #4
	bl	strlcpy
	add	r0, sp, #4
	bl	strim
	cmp	r0, #0
	str	r0, [sp]
	beq	.L15220
	movw	r8, #:lower16:.LC485
	movw	r10, #:lower16:usb_diag_update_pid_and_serial_num
	ldr	fp, .L15236+4
	movt	r8, #:upper16:.LC485
	movt	r10, #:upper16:usb_diag_update_pid_and_serial_num
	mov	r6, #0
	mvn	r7, #0
	b	.L15218
.L15234:
	ldr	r2, [r3]
	cmp	r2, #0
	moveq	r2, r10
.L15216:
	cmp	r5, #0
	beq	.L15217
	mov	r1, r5
	mov	r0, r9
	bl	diag_function_add
	subs	r7, r0, #0
	bne	.L15233
.L15217:
	ldr	r3, [sp]
	add	r6, r6, #1
	cmp	r3, #0
	beq	.L15212
.L15218:
	mov	r1, r8
	mov	r0, sp
	bl	strsep
	cmp	r6, #0
	mov	r5, r0
	movne	r2, #0
	bne	.L15216
	ldr	r3, [r4, #44]
	cmp	r3, #0
	bne	.L15234
	movw	r2, #:lower16:usb_diag_update_pid_and_serial_num
	movt	r2, #:upper16:usb_diag_update_pid_and_serial_num
	b	.L15216
.L15220:
	mvn	r7, #0
.L15212:
	movw	r3, #:lower16:.LC1159
	movt	r3, #:upper16:.LC1159
	ldr	r2, [r3]
	ldr	r3, [sp, #36]
	eors	r2, r3, r2
	bne	.L15235
	mov	r0, r7
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15235:
	bl	__stack_chk_fail
.L15233:
	movw	r0, #:lower16:.LC1158
	mov	r2, r5
	mov	r1, fp
	movt	r0, #:upper16:.LC1158
	bl	printk
	b	.L15217
.L15237:
	.align	2
.L15236:
	.word	.LANCHOR1+3472
	.word	.LANCHOR5-400
	.fnend
	.size	diag_function_bind_config, .-diag_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC1160:
	.ascii	"send_sps_req\012\000"
	.align	2
.LC1161:
	.ascii	"<3>usb_ep_alloc_request failed\012\000"
	.align	2
.LC1162:
	.ascii	"<3>send_sps_req: usb_ep_queue error\012\000"
	.text
	.align	2
	.global	send_sps_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_sps_req, %function
send_sps_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15254
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldrh	r1, [r3, #-14]
	ldr	r2, [r6, #84]
	tst	r1, #4
	ldr	r7, [r2]
	bne	.L15251
.L15239:
	ldr	r3, [r4, #8]
	mov	r1, #32
	mov	r0, r4
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L15252
	movw	r0, #:lower16:.LC528
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC528
	bl	strcmp
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	moveq	r2, #32768
	ldr	r3, [r3, #4028]
	orreq	r3, r3, #1312
	beq	.L15243
	bic	r3, r3, #65536
	mov	r2, #0
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
.L15243:
	str	r2, [r5, #4]
	mov	r1, r5
	mov	r0, r4
	str	r3, [r5, #52]
	mov	r2, #32
	str	r5, [r6, #96]
	ldr	r3, [r4, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L15253
.L15238:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15251:
	movw	r1, #:lower16:.LC1160
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1160
	bl	__dynamic_pr_debug
	b	.L15239
.L15252:
	movw	r0, #:lower16:.LC1161
	movt	r0, #:upper16:.LC1161
	bl	printk
	mvn	r0, #11
	b	.L15238
.L15253:
	movw	r0, #:lower16:.LC1162
	movt	r0, #:upper16:.LC1162
	bl	printk
	mvn	r0, #4
	b	.L15238
.L15255:
	.align	2
.L15254:
	.word	.LANCHOR8-3616
	.fnend
	.size	send_sps_req, .-send_sps_req
	.section	.rodata.str1.4
	.align	2
.LC1163:
	.ascii	"usb_qdss_connect_work\012\000"
	.align	2
.LC1164:
	.ascii	"init_data\012\000"
	.align	2
.LC1165:
	.ascii	"<3>msm_ep_config failed\012\000"
	.align	2
.LC1166:
	.ascii	"<3>init_data error\000"
	.align	2
.LC1167:
	.ascii	"QDSS is used with non DWC3 core\012\000"
	.align	2
.LC1168:
	.ascii	"set_qdss_data_connection\012\000"
	.align	2
.LC1169:
	.ascii	"<3>qdss_data_connection: memory alloc failed\012\000"
	.align	2
.LC1170:
	.ascii	"<3>set_qdss_data_connection error\000"
	.align	2
.LC1171:
	.ascii	"<3>send_sps_req error\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_connect_work, %function
usb_qdss_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15296
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L15288
.L15257:
	ldr	r5, [r4, #-48]
	ldr	r6, .L15296+4
	ldr	r3, [r5]
	ldrh	r2, [r6, #-14]
	ldr	r3, [r3, #84]
	tst	r2, #4
	ldr	r7, [r3]
	bne	.L15289
.L15258:
	movw	r0, #:lower16:.LC528
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC528
	bl	strcmp
	cmp	r0, #0
	beq	.L15290
	ldr	r3, .L15296+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L15291
.L15261:
	ldr	r0, .L15296+12
	ldr	r2, [r4, #-72]
	ldr	r9, [r4, #-48]
	ldrh	r3, [r0, #-14]
	ldr	r8, [r2]
	tst	r3, #4
	bne	.L15292
.L15263:
	mov	r2, #1
	mov	r3, #0
	ldr	r0, [r8, #28]
	mov	r1, r2
	movw	r5, #:lower16:.LANCHOR1
	bl	usb_bam_get_connection_idx
	uxtb	r6, r0
	ldr	r1, .L15296+16
	movt	r5, #:upper16:.LANCHOR1
	mov	r0, r6
	bl	usb_bam_connect
	movw	r3, #:lower16:kmalloc_caches
	mov	r7, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #4040]
	beq	.L15265
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5, #4040]
	beq	.L15293
.L15265:
	ldr	r0, [r8, #28]
	bl	usb_bam_set_qdss_core
	ldr	r3, .L15296+20
	mov	r2, #0
	mov	r0, r6
	ldr	ip, [r5, #4040]
	add	r1, r3, #4
	stm	sp, {r2, ip}
	sub	r2, r3, #4
	bl	get_bam2bam_connection_info
	movw	r0, #:lower16:.LC528
	ldr	r1, [r8, #28]
	movt	r0, #:upper16:.LC528
	bl	strcmp
	cmp	r0, #0
	beq	.L15294
.L15267:
	cmp	r7, #0
	bne	.L15266
	ldr	r5, [r4, #-32]
	cmp	r5, #0
	beq	.L15269
	sub	r3, r4, #44
	mov	r2, r7
	ldr	r0, [r4, #-28]
	mov	r1, r7
	blx	r5
.L15269:
	ldr	r0, [r4, #-48]
	bl	send_sps_req
	cmp	r0, #0
	bne	.L15295
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L15290:
	mov	r0, r5
	bl	msm_ep_config
	cmp	r0, #0
	beq	.L15261
	movw	r0, #:lower16:.LC1165
	movt	r0, #:upper16:.LC1165
	bl	printk
	movw	r0, #:lower16:.LC1166
	movt	r0, #:upper16:.LC1166
.L15287:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L15294:
	ldr	r2, [r5, #4040]
	mov	r0, r9
	ldrb	r3, [r5, #4028]	@ zero_extendqisi2
	ldmib	r2, {r1, r2}
	bl	msm_data_fifo_config
	b	.L15267
.L15292:
	movw	r1, #:lower16:.LC1168
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1168
	bl	__dynamic_pr_debug
	b	.L15263
.L15288:
	movw	r1, #:lower16:.LC1163
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1163
	bl	__dynamic_pr_debug
	b	.L15257
.L15289:
	movw	r1, #:lower16:.LC1164
	sub	r0, r6, #32
	movt	r1, #:upper16:.LC1164
	bl	__dynamic_pr_debug
	b	.L15258
.L15291:
	movw	r1, #:lower16:.LC1167
	sub	r0, r6, #8
	movt	r1, #:upper16:.LC1167
	bl	__dynamic_pr_debug
	b	.L15261
.L15295:
	movw	r0, #:lower16:.LC1171
	movt	r0, #:upper16:.LC1171
	b	.L15287
.L15293:
	movw	r0, #:lower16:.LC1169
	movt	r0, #:upper16:.LC1169
	bl	printk
.L15266:
	movw	r0, #:lower16:.LC1170
	movt	r0, #:upper16:.LC1170
	b	.L15287
.L15297:
	.align	2
.L15296:
	.word	.LANCHOR8-3600
	.word	.LANCHOR8-3568
	.word	.LANCHOR8-3552
	.word	.LANCHOR8-3520
	.word	.LANCHOR1+4028
	.word	.LANCHOR1+4032
	.fnend
	.size	usb_qdss_connect_work, .-usb_qdss_connect_work
	.align	2
	.global	init_data
	.syntax unified
	.arm
	.fpu softvfp
	.type	init_data, %function
init_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L15313
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0]
	ldrh	r2, [r5, #-14]
	ldr	r3, [r3, #84]
	tst	r2, #4
	ldr	r6, [r3]
	bne	.L15310
.L15299:
	movw	r0, #:lower16:.LC528
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC528
	bl	strcmp
	cmp	r0, #0
	beq	.L15311
	ldr	r3, .L15313+4
	ldrh	r0, [r3, #-6]
	tst	r0, #4
	ubfx	r4, r0, #2, #1
	bne	.L15312
.L15298:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15311:
	mov	r0, r4
	bl	msm_ep_config
	subs	r4, r0, #0
	beq	.L15298
	movw	r0, #:lower16:.LC1165
	movt	r0, #:upper16:.LC1165
	bl	printk
	b	.L15298
.L15310:
	movw	r1, #:lower16:.LC1164
	sub	r0, r5, #32
	movt	r1, #:upper16:.LC1164
	bl	__dynamic_pr_debug
	b	.L15299
.L15312:
	movw	r1, #:lower16:.LC1167
	sub	r0, r5, #8
	movt	r1, #:upper16:.LC1167
	mov	r4, #0
	bl	__dynamic_pr_debug
	b	.L15298
.L15314:
	.align	2
.L15313:
	.word	.LANCHOR8-3568
	.word	.LANCHOR8-3552
	.fnend
	.size	init_data, .-init_data
	.section	.rodata.str1.4
	.align	2
.LC1172:
	.ascii	"<3>uninit_data\012\000"
	.align	2
.LC1173:
	.ascii	"<3>msm_ep_unconfig failed\012\000"
	.section	.text.unlikely
	.align	2
	.global	uninit_data
	.syntax unified
	.arm
	.fpu softvfp
	.type	uninit_data, %function
uninit_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r3, [r4]
	movw	r0, #:lower16:.LC1172
	movt	r0, #:upper16:.LC1172
	ldr	r3, [r3, #84]
	ldr	r5, [r3]
	bl	printk
	movw	r0, #:lower16:.LC528
	movt	r0, #:upper16:.LC528
	ldr	r1, [r5, #28]
	bl	strcmp
	cmp	r0, #0
	movne	r4, #0
	bne	.L15315
	mov	r0, r4
	bl	msm_ep_unconfig
	subs	r4, r0, #0
	beq	.L15315
	movw	r0, #:lower16:.LC1173
	movt	r0, #:upper16:.LC1173
	bl	printk
.L15315:
	mov	r0, r4
	pop	{r4, r5, r6, pc}
	.fnend
	.size	uninit_data, .-uninit_data
	.section	.rodata.str1.4
	.align	2
.LC1174:
	.ascii	"usb_qdss_disconnect_work\012\000"
	.align	2
.LC1175:
	.ascii	"<3>%s: uninit_data error\012\000"
	.align	2
.LC1176:
	.ascii	"<3>usb_bam_disconnection error\012\000"
	.align	2
.LC1177:
	.ascii	"<3>qdss_disconnect error\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_disconnect_work, %function
usb_qdss_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15342
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	beq	.L15323
	movw	r1, #:lower16:.LC1174
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1174
	bl	__dynamic_pr_debug
.L15323:
	ldr	r0, [r4, #-64]
	bl	uninit_data
	cmp	r0, #0
	beq	.L15324
	movw	r0, #:lower16:.LC1175
	ldr	r1, .L15342+4
	movt	r0, #:upper16:.LC1175
	bl	printk
.L15324:
	ldr	r5, [r4, #-48]
	cmp	r5, #0
	beq	.L15322
	mov	r3, #0
	mov	r1, #1
	ldr	r0, [r4, #-44]
	mov	r2, r3
	blx	r5
	ldr	r0, .L15342+8
	ldr	r2, [r4, #-88]
	ldrh	r3, [r0, #-14]
	ldr	r4, [r2]
	tst	r3, #4
	beq	.L15327
	movw	r1, #:lower16:.LC1168
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1168
	bl	__dynamic_pr_debug
.L15327:
	mov	r2, #1
	mov	r3, #0
	ldr	r0, [r4, #28]
	mov	r1, r2
	bl	usb_bam_get_connection_idx
	movw	r3, #:lower16:.LANCHOR1
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #4040]
	bl	kfree
	uxtb	r0, r4
	bl	usb_bam_disconnect_pipe
	cmp	r0, #0
	beq	.L15322
	movw	r0, #:lower16:.LC1176
	movt	r0, #:upper16:.LC1176
	bl	printk
	movw	r0, #:lower16:.LC1177
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC1177
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L15322:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15343:
	.align	2
.L15342:
	.word	.LANCHOR8-3504
	.word	.LANCHOR5-372
	.word	.LANCHOR8-3520
	.fnend
	.size	usb_qdss_disconnect_work, .-usb_qdss_disconnect_work
	.section	.rodata.str1.4
	.align	2
.LC1178:
	.ascii	"usb_qdss_free_req\012\000"
	.align	2
.LC1179:
	.ascii	"<3>usb_qdss_free_req: qdss ctx is NULL\012\000"
	.text
	.align	2
	.global	usb_qdss_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_free_req, %function
usb_qdss_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15359
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L15357
.L15345:
	ldr	r6, [r4, #20]
	cmp	r6, #0
	beq	.L15358
	mov	r7, r6
	ldr	r0, [r7, #148]!
	cmp	r0, r7
	ldr	r5, [r0]
	beq	.L15347
.L15348:
	sub	r4, r0, #36
	bl	list_del
	ldr	r0, [r6, #104]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	mov	r0, r5
	ldr	r5, [r5]
	bne	.L15348
.L15347:
	mov	r7, r6
	ldr	r0, [r7, #140]!
	cmp	r0, r7
	ldr	r5, [r0]
	beq	.L15344
.L15350:
	sub	r4, r0, #36
	bl	list_del
	ldr	r0, [r6, #100]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	mov	r0, r5
	ldr	r5, [r5]
	bne	.L15350
.L15344:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15357:
	movw	r1, #:lower16:.LC1178
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1178
	bl	__dynamic_pr_debug
	b	.L15345
.L15358:
	movw	r0, #:lower16:.LC1179
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC1179
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L15360:
	.align	2
.L15359:
	.word	.LANCHOR8-3472
	.fnend
	.size	usb_qdss_free_req, .-usb_qdss_free_req
	.section	.rodata.str1.4
	.align	2
.LC1180:
	.ascii	"usb_qdss_alloc_req\012\000"
	.align	2
.LC1181:
	.ascii	"<3>usb_qdss_alloc_req: missing params\012\000"
	.align	2
.LC1182:
	.ascii	"<3>usb_qdss_alloc_req: ctrl_in allocation err\012\000"
	.align	2
.LC1183:
	.ascii	"<3>usb_qdss_alloc_req:ctrl_out allocation err\012\000"
	.text
	.align	2
	.global	usb_qdss_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_alloc_req, %function
usb_qdss_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15380
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-6]
	ldr	r4, [r0, #20]
	tst	r2, #4
	bne	.L15376
.L15362:
	cmp	r6, #0
	cmpgt	r7, #0
	movle	r5, #1
	movgt	r5, #0
	cmp	r4, #0
	moveq	r5, #1
	cmp	r5, #0
	movweq	r9, #:lower16:qdss_ctrl_write_complete
	addeq	r10, r4, #148
	movteq	r9, #:upper16:qdss_ctrl_write_complete
	bne	.L15377
.L15363:
	ldr	r0, [r4, #104]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r10
	add	r0, r3, #36
	beq	.L15378
	str	r9, [r3, #28]
	ldr	r1, [r4, #152]
	bl	__list_add
	cmp	r7, r5
	bgt	.L15363
	movw	r7, #:lower16:qdss_ctrl_read_complete
	mov	r5, #0
	movt	r7, #:upper16:qdss_ctrl_read_complete
	add	r9, r4, #140
.L15368:
	ldr	r0, [r4, #100]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r9
	add	r0, r3, #36
	beq	.L15379
	str	r7, [r3, #28]
	ldr	r1, [r4, #144]
	bl	__list_add
	cmp	r6, r5
	bgt	.L15368
	mov	r0, #0
.L15361:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15376:
	movw	r1, #:lower16:.LC1180
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1180
	bl	__dynamic_pr_debug
	b	.L15362
.L15377:
	movw	r0, #:lower16:.LC1181
	movt	r0, #:upper16:.LC1181
	bl	printk
	mvn	r0, #18
	b	.L15361
.L15379:
	movw	r0, #:lower16:.LC1183
	movt	r0, #:upper16:.LC1183
	bl	printk
.L15366:
	mov	r0, r8
	bl	usb_qdss_free_req
	mvn	r0, #11
	b	.L15361
.L15378:
	movw	r0, #:lower16:.LC1182
	movt	r0, #:upper16:.LC1182
	bl	printk
	b	.L15366
.L15381:
	.align	2
.L15380:
	.word	.LANCHOR8-3456
	.fnend
	.size	usb_qdss_alloc_req, .-usb_qdss_alloc_req
	.section	.rodata.str1.4
	.align	2
.LC1184:
	.ascii	"usb_qdss_ctrl_read\012\000"
	.align	2
.LC1185:
	.ascii	"<3>error: usb_qdss_ctrl_read list is empty\012\000"
	.align	2
.LC1186:
	.ascii	"<3>qdss usb_ep_queue failed\012\000"
	.text
	.align	2
	.global	usb_qdss_ctrl_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_ctrl_read, %function
usb_qdss_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15399
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-14]
	ldr	r4, [r0, #20]
	tst	r2, #4
	bne	.L15395
.L15383:
	cmp	r4, #0
	beq	.L15387
	add	r8, r4, #188
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	mov	r7, r0
	cmp	r3, #0
	beq	.L15396
	ldr	r5, [r4, #140]
	add	r9, r4, #140
	cmp	r9, r5
	beq	.L15397
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r10
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L15398
.L15382:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15395:
	movw	r1, #:lower16:.LC1184
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1184
	bl	__dynamic_pr_debug
	b	.L15383
.L15387:
	mvn	r0, #18
	b	.L15382
.L15396:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L15382
.L15398:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r2, r9
	ldr	r1, [r4, #144]
	mov	r4, r0
	mov	r0, r5
	bl	__list_add
	mov	r1, r4
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1186
	movt	r0, #:upper16:.LC1186
	bl	printk
	mvn	r0, #4
	b	.L15382
.L15397:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1185
	movt	r0, #:upper16:.LC1185
	bl	printk
	mvn	r0, #10
	b	.L15382
.L15400:
	.align	2
.L15399:
	.word	.LANCHOR8-3424
	.fnend
	.size	usb_qdss_ctrl_read, .-usb_qdss_ctrl_read
	.section	.rodata.str1.4
	.align	2
.LC1187:
	.ascii	"usb_qdss_ctrl_write\012\000"
	.align	2
.LC1188:
	.ascii	"<3>error: usb_qdss_ctrl_write list is empty\012\000"
	.text
	.align	2
	.global	usb_qdss_ctrl_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_ctrl_write, %function
usb_qdss_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15418
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-6]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r0, #20]
	tst	r2, #4
	bne	.L15414
.L15402:
	cmp	r4, #0
	beq	.L15406
	add	r8, r4, #188
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	mov	r7, r0
	cmp	r3, #0
	beq	.L15415
	ldr	r5, [r4, #148]
	add	r9, r4, #148
	cmp	r9, r5
	beq	.L15416
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r10
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L15417
.L15401:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15414:
	movw	r1, #:lower16:.LC1187
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1187
	bl	__dynamic_pr_debug
	b	.L15402
.L15406:
	mvn	r0, #18
	b	.L15401
.L15415:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L15401
.L15417:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	ldr	r1, [r4, #152]
	mov	r2, r9
	ldr	r4, [sp, #4]
	mov	r0, r5
	bl	__list_add
	mov	r0, r8
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1186
	movt	r0, #:upper16:.LC1186
	bl	printk
	mvn	r0, #4
	b	.L15401
.L15416:
	movw	r0, #:lower16:.LC1188
	movt	r0, #:upper16:.LC1188
	bl	printk
	mov	r0, r8
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #10
	b	.L15401
.L15419:
	.align	2
.L15418:
	.word	.LANCHOR8-3408
	.fnend
	.size	usb_qdss_ctrl_write, .-usb_qdss_ctrl_write
	.section	.rodata.str1.4
	.align	2
.LC1189:
	.ascii	"usb_qdss_open\012\000"
	.align	2
.LC1190:
	.ascii	"<3>usb_qdss_open: notification func is missing\012\000"
	.align	2
.LC1191:
	.ascii	"usb_qdss_open: allocation qdss ctx\012\000"
	.align	2
.LC1192:
	.ascii	"usb_qdss_open: qdss ctx found\012\000"
	.text
	.align	2
	.global	usb_qdss_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_open, %function
usb_qdss_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	ldr	fp, .L15448
	mov	r10, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [fp, #-14]
	tst	r3, #4
	bne	.L15440
.L15421:
	cmp	r8, #0
	beq	.L15441
	movw	r9, #:lower16:.LANCHOR0
	ldr	r0, .L15448+4
	movt	r9, #:upper16:.LANCHOR0
	mov	r6, r9
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r6, #268]!
	mov	r7, r0
	cmp	r4, r6
	sub	r4, r4, #4
	bne	.L15426
	b	.L15424
.L15442:
	ldr	r4, [r4, #4]
	cmp	r4, r6
	sub	r4, r4, #4
	beq	.L15424
.L15426:
	mov	r0, r5
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L15442
	ldr	r0, .L15448+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15443
.L15433:
	sub	r6, r4, #112
	str	r6, [r4, #20]
.L15429:
	mov	r3, #1
	ldr	r0, .L15448+4
	mov	r1, r7
	str	r5, [r4]
	str	r8, [r4, #12]
	str	r10, [r4, #16]
	str	r3, [r4, #24]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6, #92]
	cmp	r3, #1
	beq	.L15444
.L15420:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15424:
	ldr	r3, .L15448+12
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L15445
.L15431:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L15434
	mov	r2, #200
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L15446
.L15427:
	ldr	r0, .L15448+4
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	mov	r2, #1
	mov	r1, #10
	mov	r0, r5
	str	r3, [sp]
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r6, #196]
	beq	.L15447
	ldr	r0, .L15448+4
	add	r4, r6, #112
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r2, .L15448+16
	add	r0, r6, #116
	ldr	r1, [r9, #272]
	bl	__list_add
	b	.L15429
.L15434:
	mov	r6, #16
	b	.L15427
.L15445:
	movw	r1, #:lower16:.LC1191
	sub	r0, fp, #8
	movt	r1, #:upper16:.LC1191
	bl	__dynamic_pr_debug
	b	.L15431
.L15443:
	movw	r1, #:lower16:.LC1192
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1192
	bl	__dynamic_pr_debug
	b	.L15433
.L15444:
	add	r1, r6, #156
	ldr	r0, [r6, #196]
	bl	queue_work
	b	.L15420
.L15440:
	movw	r1, #:lower16:.LC1189
	sub	r0, fp, #32
	movt	r1, #:upper16:.LC1189
	bl	__dynamic_pr_debug
	b	.L15421
.L15447:
	mov	r0, r6
	mvn	r4, #11
	bl	kfree
	b	.L15420
.L15446:
	ldr	r0, .L15448+4
	mov	r1, r7
	mvn	r4, #11
	bl	_raw_spin_unlock_irqrestore
	b	.L15420
.L15441:
	movw	r0, #:lower16:.LC1190
	mov	r4, r8
	movt	r0, #:upper16:.LC1190
	bl	printk
	b	.L15420
.L15449:
	.align	2
.L15448:
	.word	.LANCHOR8-3376
	.word	.LANCHOR1+3332
	.word	.LANCHOR8-3328
	.word	.LANCHOR8-3360
	.word	.LANCHOR0+268
	.fnend
	.size	usb_qdss_open, .-usb_qdss_open
	.section	.rodata.str1.4
	.align	2
.LC1193:
	.ascii	"usb_qdss_close\012\000"
	.text
	.align	2
	.global	usb_qdss_close
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_close, %function
usb_qdss_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15459
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #20]
	ldrh	r1, [r3, #-6]
	ldr	r2, [r4, #84]
	tst	r1, #4
	ldr	r7, [r2]
	bne	.L15457
.L15451:
	ldr	r0, .L15459+4
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r1, [r4, #96]
	ldr	r3, [r4, #108]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #20]
	blx	r3
	ldr	r1, [r4, #96]
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, #0
	ldr	r0, .L15459+4
	mov	r1, r6
	str	r3, [r4, #96]
	str	r3, [r5, #24]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC528
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC528
	bl	strcmp
	cmp	r0, #0
	beq	.L15458
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15458:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	msm_dwc3_restart_usb_session
.L15457:
	movw	r1, #:lower16:.LC1193
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1193
	bl	__dynamic_pr_debug
	b	.L15451
.L15460:
	.align	2
.L15459:
	.word	.LANCHOR8-3312
	.word	.LANCHOR1+3332
	.fnend
	.size	usb_qdss_close, .-usb_qdss_close
	.section	.rodata.str1.4
	.align	2
.LC1194:
	.ascii	"k_rmnet_work\000"
	.align	2
.LC1195:
	.ascii	"&dev->smd_ctl.wait\000"
	.align	2
.LC1196:
	.ascii	"&dev->smd_data.wait\000"
	.align	2
.LC1197:
	.ascii	"rmnet\000"
	.align	2
.LC1198:
	.ascii	"usb_rmnet_smd\000"
	.text
	.align	2
	.global	rmnet_smd_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_bind_config, %function
rmnet_smd_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L15469
	mov	r2, #456
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15476
.L15462:
	mov	r5, #0
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC1194
	mov	r3, r5
	movt	r0, #:upper16:.LC1194
	str	r5, [sp]
	mov	r2, #1
	mov	r1, #10
	str	r4, [r6, #3316]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #388]
	beq	.L15471
	add	r1, r4, #396
	movw	r2, #:lower16:rmnet_smd_connect_work
	str	r5, [r4, #164]
	movw	r3, #:lower16:rmnet_smd_disconnect_work
	mov	ip, #2560
	str	r5, [r4, #168]
	movt	r3, #:upper16:rmnet_smd_disconnect_work
	add	r0, r4, #412
	str	r5, [r4, #172]
	movt	r2, #:upper16:rmnet_smd_connect_work
	str	r1, [r4, #396]
	add	r8, r4, #116
	str	r1, [r4, #400]
	movw	r1, #:lower16:rmnet_control_rx_tlet
	movt	r1, #:upper16:rmnet_control_rx_tlet
	str	r5, [r4, #308]
	str	r5, [r4, #372]
	str	ip, [r4, #392]
	str	r2, [r4, #404]
	mov	r2, r4
	str	ip, [r4, #408]
	str	r0, [r4, #412]
	str	r0, [r4, #416]
	add	r0, r4, #284
	str	r3, [r4, #420]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_control_tx_tlet
	mov	r2, r4
	movt	r1, #:upper16:rmnet_control_tx_tlet
	add	r0, r4, #264
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_rx_tlet
	mov	r2, r4
	movt	r1, #:upper16:rmnet_data_rx_tlet
	add	r0, r4, #348
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_tx_tlet
	mov	r2, r4
	movt	r1, #:upper16:rmnet_data_tx_tlet
	add	r0, r4, #328
	bl	tasklet_init
	movw	r1, #:lower16:.LC1195
	ldr	r2, .L15478
	add	r0, r4, #312
	movt	r1, #:upper16:.LC1195
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC1196
	ldr	r2, .L15478
	add	r0, r4, #376
	movt	r1, #:upper16:.LC1196
	bl	__init_waitqueue_head
	movw	lr, #:lower16:rmnet_smd_ch_probe
	ldr	r3, .L15478+4
	movw	ip, #:lower16:.LC1197
	movt	lr, #:upper16:rmnet_smd_ch_probe
	movw	r1, #:lower16:rmnet_smd_bind
	movt	ip, #:upper16:.LC1197
	movt	r1, #:upper16:rmnet_smd_bind
	mov	r0, r7
	movw	r2, #:lower16:.LC888
	str	lr, [r4, #176]
	movw	lr, #:lower16:rmnet_smd_unbind
	add	r7, r3, #8
	movt	lr, #:upper16:rmnet_smd_unbind
	str	ip, [r4]
	movw	ip, #:lower16:rmnet_smd_set_alt
	movt	ip, #:upper16:rmnet_smd_set_alt
	str	r3, [r4, #4]
	add	r3, r3, #28
	str	r1, [r4, #32]
	movw	r1, #:lower16:rmnet_smd_disable
	movt	r2, #:upper16:.LC888
	movt	r1, #:upper16:rmnet_smd_disable
	str	r3, [r4, #8]
	add	r3, r4, #156
	str	lr, [r4, #36]
	add	lr, r4, #108
	str	r5, [r4, #204]
	movw	r5, #:lower16:rmnet_smd_setup
	movt	r5, #:upper16:rmnet_smd_setup
	str	r7, [r4, #16]
	add	r7, r4, #124
	str	ip, [r4, #40]
	add	ip, r4, #148
	str	r1, [r4, #48]
	add	r1, r4, #132
	str	r5, [r4, #52]
	str	lr, [r4, #108]
	str	lr, [r4, #112]
	add	lr, r4, #140
	str	r8, [r4, #116]
	str	r8, [r4, #120]
	str	r7, [r4, #124]
	str	r7, [r4, #128]
	str	r1, [r4, #132]
	str	r1, [r4, #136]
	mov	r1, r4
	str	lr, [r4, #140]
	str	lr, [r4, #144]
	str	ip, [r4, #148]
	str	ip, [r4, #152]
	str	r3, [r4, #156]
	str	r3, [r4, #160]
	str	r2, [r4, #196]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L15477
	movw	r0, #:lower16:.LC1198
	mov	r1, r5
	movt	r0, #:upper16:.LC1198
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #3336]
	beq	.L15461
	cmn	r0, #4096
	bhi	.L15461
	ldr	ip, .L15478+8
	movw	r0, #:lower16:.LC268
	mov	r3, r4
	movt	r0, #:upper16:.LC268
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L15468
	cmn	r0, #4096
	bhi	.L15468
.L15461:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15477:
	ldr	r0, [r4, #388]
	bl	destroy_workqueue
.L15464:
	mov	r0, r4
	bl	kfree
	b	.L15461
.L15469:
	mov	r4, #16
	b	.L15462
.L15471:
	mvn	r5, #11
	b	.L15464
.L15468:
	ldr	r0, [r6, #3336]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r6, #3336]
	b	.L15461
.L15476:
	mvn	r5, #11
	b	.L15461
.L15479:
	.align	2
.L15478:
	.word	.LANCHOR1+4044
	.word	.LANCHOR7-1708
	.word	.LANCHOR5-344
	.fnend
	.size	rmnet_smd_bind_config, .-rmnet_smd_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_function_bind_config, %function
rmnet_smd_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	rmnet_smd_bind_config
	.fnend
	.size	rmnet_smd_function_bind_config, .-rmnet_smd_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC1199:
	.ascii	"rmnet_sdio\000"
	.align	2
.LC1200:
	.ascii	"usb_rmnet_sdio\000"
	.text
	.align	2
	.global	rmnet_sdio_function_add
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_function_add, %function
rmnet_sdio_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L15486
	mov	r2, #372
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15490
.L15482:
	mov	r5, #0
	movw	r0, #:lower16:.LC1194
	mov	r3, r5
	movt	r0, #:upper16:.LC1194
	mov	r2, #1
	mov	r1, #10
	str	r5, [sp]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #200]
	beq	.L15488
	movw	ip, #:lower16:rmnet_sdio_disconnect_work
	movw	r0, #:lower16:rmnet_sdio_control_rx_work
	str	r5, [r4, #188]
	movw	r2, #:lower16:rmnet_sdio_data_rx_work
	movt	ip, #:upper16:rmnet_sdio_disconnect_work
	str	r5, [r4, #192]
	movt	r0, #:upper16:rmnet_sdio_control_rx_work
	movt	r2, #:upper16:rmnet_sdio_data_rx_work
	str	r5, [r4, #196]
	movw	r3, #:lower16:rmnet_sdio_set_modem_cbits_w
	movw	r1, #:lower16:rmnet_open_sdio_work
	str	ip, [r4, #216]
	mov	r6, #2560
	add	lr, r4, #224
	add	ip, r4, #240
	movt	r3, #:upper16:rmnet_sdio_set_modem_cbits_w
	add	r8, r4, #208
	movt	r1, #:upper16:rmnet_open_sdio_work
	str	r6, [r4, #204]
	str	r0, [r4, #232]
	add	r0, r4, #336
	str	r2, [r4, #248]
	add	r2, r4, #256
	str	r8, [r4, #208]
	str	r8, [r4, #212]
	movw	r8, #:lower16:rmnet_sdio_bind
	str	r6, [r4, #220]
	movt	r8, #:upper16:rmnet_sdio_bind
	str	lr, [r4, #224]
	str	lr, [r4, #228]
	str	r6, [r4, #236]
	str	ip, [r4, #240]
	str	ip, [r4, #244]
	str	r6, [r4, #252]
	str	r2, [r4, #256]
	str	r2, [r4, #260]
	mov	r2, r5
	str	r1, [r4, #264]
	mov	r1, r5
	str	r6, [r4, #332]
	str	r0, [r4, #336]
	str	r0, [r4, #340]
	add	r0, r4, #268
	str	r3, [r4, #344]
	bl	init_timer_key
	ldr	r3, .L15492
	movw	r1, #:lower16:.LC1199
	movw	lr, #:lower16:rmnet_sdio_unbind
	movt	r1, #:upper16:.LC1199
	movt	lr, #:upper16:rmnet_sdio_unbind
	mov	r0, r7
	movw	r7, #:lower16:rmnet_sdio_set_alt
	movt	r7, #:upper16:rmnet_sdio_set_alt
	movw	ip, #:lower16:delayed_work_timer_fn
	stm	r4, {r1, r3}
	movw	r1, #:lower16:rmnet_sdio_setup
	movw	r2, #:lower16:rmnet_close_sdio_work
	movt	r1, #:upper16:rmnet_sdio_setup
	str	r8, [r4, #32]
	add	r8, r3, #8
	add	r3, r3, #28
	movt	ip, #:upper16:delayed_work_timer_fn
	str	lr, [r4, #36]
	movw	lr, #:lower16:rmnet_sdio_disable
	movt	r2, #:upper16:rmnet_close_sdio_work
	str	r1, [r4, #52]
	movw	r1, #:lower16:rmnet_sdio_suspend
	movt	lr, #:upper16:rmnet_sdio_disable
	movt	r1, #:upper16:rmnet_sdio_suspend
	str	r3, [r4, #8]
	add	r3, r4, #108
	str	r8, [r4, #16]
	str	r7, [r4, #40]
	add	r7, r4, #252
	str	r1, [r4, #56]
	add	r1, r4, #120
	str	r3, [r4, #108]
	str	r3, [r4, #112]
	add	r3, r4, #160
	str	lr, [r4, #48]
	add	lr, r4, #304
	str	r1, [r4, #120]
	str	r1, [r4, #124]
	add	r1, r4, #132
	str	r1, [r4, #132]
	str	r1, [r4, #136]
	add	r1, r4, #144
	str	r3, [r4, #160]
	str	r3, [r4, #164]
	add	r3, r4, #172
	str	r1, [r4, #144]
	str	r1, [r4, #148]
	mov	r1, r4
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r3, [r4, #172]
	str	r3, [r4, #176]
	str	r5, [r4, #180]
	str	r5, [r4, #184]
	str	ip, [r4, #284]
	str	r7, [r4, #288]
	str	r6, [r4, #300]
	str	lr, [r4, #304]
	str	lr, [r4, #308]
	str	r2, [r4, #312]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L15491
	movw	r0, #:lower16:.LC1200
	mov	r1, r5
	movt	r0, #:upper16:.LC1200
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	str	r0, [r4, #348]
	bhi	.L15481
	ldr	ip, .L15492+4
	movw	r0, #:lower16:.LC268
	mov	r3, r4
	movt	r0, #:upper16:.LC268
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
.L15481:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15491:
	ldr	r0, [r4, #200]
	bl	destroy_workqueue
.L15484:
	mov	r0, r4
	bl	kfree
	b	.L15481
.L15486:
	mov	r4, #16
	b	.L15482
.L15488:
	mvn	r5, #11
	b	.L15484
.L15490:
	mvn	r5, #11
	b	.L15481
.L15493:
	.align	2
.L15492:
	.word	.LANCHOR7-1660
	.word	.LANCHOR5-236
	.fnend
	.size	rmnet_sdio_function_add, .-rmnet_sdio_function_add
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_function_bind_config, %function
rmnet_sdio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	rmnet_sdio_function_add
	.fnend
	.size	rmnet_sdio_function_bind_config, .-rmnet_sdio_function_bind_config
	.align	2
	.global	frmnet_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_free_req, %function
frmnet_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	frmnet_free_req, .-frmnet_free_req
	.align	2
	.global	audio_source_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_bind_config, %function
audio_source_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	mvn	ip, #0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r3, #0
	mov	r7, r0
	str	r8, [sp, #16]
	mov	r2, r3
	mov	r0, ip
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	str	ip, [r1]
	add	r1, sp, #8
	str	r1, [sp]
	mov	r1, r3
	str	ip, [r5, #4]
	bl	snd_card_create
	subs	r4, r0, #0
	beq	.L15505
.L15497:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15505:
	ldr	r3, [r7, #24]
	add	lr, sp, #12
	movw	r1, #:lower16:.LC1069
	ldr	r0, [sp, #8]
	mov	r2, r4
	movt	r1, #:upper16:.LC1069
	movw	r6, #:lower16:.LANCHOR7
	ldr	ip, [r3]
	mov	r3, #1
	add	ip, ip, #32
	str	ip, [r0, #496]
	stm	sp, {r4, lr}
	bl	snd_pcm_new
	subs	r4, r0, #0
	movtne	r6, #:upper16:.LANCHOR7
	bne	.L15501
	ldr	r3, [sp, #12]
	movt	r6, #:upper16:.LANCHOR7
	movw	r1, #:lower16:.LC1070
	sub	r8, r6, #2256
	movt	r1, #:upper16:.LC1070
	mov	r2, #80
	add	r0, r3, #88
	str	r4, [r3, #16]
	str	r8, [r3, #272]
	str	r3, [r6, #-2168]
	bl	strlcpy
	mov	r1, r4
	sub	r2, r6, #2096
	ldr	r0, [sp, #12]
	bl	snd_pcm_set_ops
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC1071
	mov	r2, #16
	movt	r1, #:upper16:.LC1071
	add	r0, r0, #20
	bl	strlcpy
	ldr	r0, [sp, #8]
	mov	r2, #32
	add	r1, r0, #20
	add	r0, r0, #36
	bl	strlcpy
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC1072
	mov	r2, #80
	movt	r1, #:upper16:.LC1072
	add	r0, r0, #68
	bl	strlcpy
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r4, r0, #0
	beq	.L15506
.L15499:
.L15500:
.L15501:
	ldr	r0, [r6, #-2172]
	bl	snd_card_free
	b	.L15497
.L15506:
	mov	r1, r8
	mov	r0, r7
	bl	usb_add_function
	subs	r4, r0, #0
	bne	.L15501
	ldrd	r2, [sp, #8]
	ldr	r1, [r3]
	ldr	r1, [r1]
	str	r1, [r5]
	ldr	r3, [r3, #12]
	str	r3, [r5, #4]
	str	r2, [r6, #-2172]
	b	.L15497
	.fnend
	.size	audio_source_bind_config, .-audio_source_bind_config
	.align	2
	.global	gs_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_alloc_req, %function
gs_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L15507
	mov	r1, r5
	mov	r0, r6
	str	r6, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L15513
.L15507:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15513:
	ldr	r2, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L15507
	.fnend
	.size	gs_alloc_req, .-gs_alloc_req
	.section	.rodata.str1.4
	.align	2
.LC1201:
	.ascii	"<3>usb:[%s] port_usb or port_tty is NULL!! started("
	.ascii	"%d)\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_io, %function
gs_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	adds	r3, r0, #44
	add	r5, r0, #32
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r0
	str	lr, [sp, #32]
	ldr	r2, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	ldr	r4, [r2, #92]
	beq	.L15547
	ldr	r6, [r0, #44]
	rsb	r6, r6, #8
	cmp	r6, #0
	movwgt	r8, #:lower16:gs_read_complete
	movgt	r7, #0
	movtgt	r8, #:upper16:gs_read_complete
	bgt	.L15516
	b	.L15517
.L15520:
	str	r8, [r3, #28]
	ldr	r1, [fp, #36]
	bl	__list_add
	ldr	r3, [fp, #44]
	cmp	r6, r7
	add	r3, r3, #1
	str	r3, [fp, #44]
	ble	.L15519
.L15516:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r4
	add	r7, r7, #1
	bl	gs_alloc_req
	subs	r3, r0, #0
	mov	r2, r5
	add	r0, r3, #36
	bne	.L15520
	ldr	r2, [fp, #32]
	cmp	r5, r2
	beq	.L15534
.L15519:
	ldr	r2, [fp, #4]
.L15517:
	adds	r3, fp, #88
	add	r7, fp, #76
	ldr	r8, [r2, #88]
	str	r3, [sp, #4]
	beq	.L15549
	ldr	r9, [fp, #88]
	rsb	r9, r9, #8
	cmp	r9, #0
	movwgt	r10, #:lower16:gs_write_complete
	movgt	r6, #0
	movtgt	r10, #:upper16:gs_write_complete
	bgt	.L15524
	b	.L15525
.L15528:
	str	r10, [r3, #28]
	ldr	r1, [fp, #80]
	bl	__list_add
	ldr	r3, [fp, #88]
	cmp	r9, r6
	add	r3, r3, #1
	str	r3, [fp, #88]
	ble	.L15525
.L15524:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r8
	add	r6, r6, #1
	bl	gs_alloc_req
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	bne	.L15528
.L15526:
	ldr	r2, [fp, #76]
	cmp	r7, r2
	beq	.L15575
.L15525:
	mov	r6, #0
	mov	r0, fp
	str	r6, [fp, #56]
	bl	gs_start_rx
	ldr	r1, [fp, #4]
	mov	r2, r0
	cmp	r1, r6
	beq	.L15535
	ldr	r0, [fp, #8]
	cmp	r0, r6
	beq	.L15535
	cmp	r2, #0
	beq	.L15572
	bl	tty_wakeup
	mov	r0, r6
.L15514:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15575:
	ldr	r7, [sp]
.L15529:
	cmp	r7, #0
	ldr	r6, [fp, #32]
	bne	.L15530
	cmp	r5, r6
	beq	.L15534
.L15532:
	mov	r0, r6
	sub	r7, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r7
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [fp, #32]
	cmp	r5, r6
	bne	.L15532
.L15534:
	mvn	r0, #11
	b	.L15514
.L15547:
	movw	r7, #:lower16:gs_read_complete
	adds	r6, r0, #44
	movt	r7, #:upper16:gs_read_complete
	b	.L15515
.L15576:
	str	r7, [r3, #28]
	ldr	r1, [fp, #36]
	bl	__list_add
	cmp	r6, #8
	beq	.L15519
.L15515:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r4
	add	r6, r6, #1
	bl	gs_alloc_req
	subs	r3, r0, #0
	mov	r2, r5
	add	r0, r3, #36
	bne	.L15576
	ldr	r2, [fp, #32]
	cmp	r5, r2
	bne	.L15519
	b	.L15534
.L15549:
	movw	r9, #:lower16:gs_write_complete
	adds	r6, fp, #88
	movt	r9, #:upper16:gs_write_complete
	b	.L15523
.L15577:
	str	r9, [r3, #28]
	ldr	r1, [fp, #80]
	bl	__list_add
	cmp	r6, #8
	beq	.L15525
.L15523:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r8
	add	r6, r6, #1
	bl	gs_alloc_req
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	bne	.L15577
	b	.L15526
.L15530:
	cmp	r5, r6
	mov	r0, r6
	sub	r8, r6, #36
	beq	.L15534
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r8
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [fp, #44]
	sub	r3, r3, #1
	str	r3, [fp, #44]
	b	.L15529
.L15572:
	ldr	r8, [sp]
.L15537:
	cmp	r8, #0
	ldr	r6, [fp, #32]
	bne	.L15538
	cmp	r5, r6
	beq	.L15539
.L15540:
	mov	r0, r6
	sub	r8, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r8
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [fp, #32]
	cmp	r5, r6
	bne	.L15540
.L15539:
	ldr	r2, [fp, #4]
	ldr	r6, [sp, #4]
	ldr	r5, [r2, #88]
.L15542:
	cmp	r6, #0
	ldr	r4, [fp, #76]
	bne	.L15543
	cmp	r7, r4
	beq	.L15544
.L15545:
	mov	r0, r4
	sub	r6, r4, #36
	bl	list_del
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [fp, #76]
	cmp	r7, r4
	bne	.L15545
.L15544:
	mvn	r0, #4
	b	.L15514
.L15543:
	cmp	r7, r4
	mov	r0, r4
	sub	r8, r4, #36
	beq	.L15544
	bl	list_del
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r8
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [fp, #88]
	sub	r3, r3, #1
	str	r3, [fp, #88]
	b	.L15542
.L15538:
	cmp	r5, r6
	mov	r0, r6
	sub	r9, r6, #36
	beq	.L15539
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r9
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [fp, #44]
	sub	r3, r3, #1
	str	r3, [fp, #44]
	b	.L15537
.L15535:
	movw	r0, #:lower16:.LC1201
	ldr	r1, .L15578
	movt	r0, #:upper16:.LC1201
	bl	printk
	mvn	r0, #4
	b	.L15514
.L15579:
	.align	2
.L15578:
	.word	.LANCHOR5-128
	.fnend
	.size	gs_start_io, .-gs_start_io
	.section	.rodata.str1.4
	.align	2
.LC1202:
	.ascii	"gs_open: ttyGS%d (%pK,%pK) no buffer\012\000"
	.align	2
.LC1203:
	.ascii	"gs_open: start ttyGS%d\012\000"
	.align	2
.LC1204:
	.ascii	"gs_open: ttyGS%d (%pK,%pK)\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_open, %function
gs_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L15614
	movw	r2, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r2, #:upper16:.LANCHOR1
	mov	r6, r0
	str	r8, [sp, #16]
	mov	r7, r1
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	add	r3, r3, r3, lsl #1
	lsl	r3, r3, #3
	add	r5, r5, r3
	add	r8, r2, r3
.L15587:
	mov	r0, r5
	bl	mutex_lock
	ldr	r4, [r8, #3792]
	subs	r0, r4, #0
	beq	.L15608
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L15583
	add	r3, r3, #1
	mov	r0, r4
	mov	r6, #0
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	mutex_unlock
.L15580:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15608:
	mov	r0, r5
	mvn	r6, #18
	bl	mutex_unlock
	b	.L15580
.L15583:
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r4
	cmp	r3, #0
	bne	.L15584
	mov	r3, #1
	strb	r3, [r4, #16]
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	mutex_unlock
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L15609
.L15586:
	str	r4, [r6, #272]
	ldr	r5, [r4, #4]
	mov	r3, #0
	mov	r2, #1
	str	r6, [r4, #8]
	str	r2, [r4, #12]
	cmp	r5, r3
	strb	r3, [r4, #16]
	beq	.L15594
	ldr	r0, .L15614+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L15610
.L15595:
	mov	r0, r4
	bl	gs_start_io
	ldr	r3, [r5, #116]
	cmp	r3, #0
	beq	.L15594
	mov	r0, r5
	blx	r3
.L15594:
	ldr	r0, .L15614+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	ubfx	r3, r3, #2, #1
	moveq	r6, r3
	bne	.L15611
.L15592:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	b	.L15580
.L15584:
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	mutex_unlock
	mov	r0, #1
	bl	msleep
	b	.L15587
.L15609:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #52]
	cmp	r0, #0
	beq	.L15612
	mov	r2, #8192
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4, #96]
	beq	.L15590
.L15589:
	mov	r2, #8192
	mov	r0, r4
	str	r2, [r4, #92]
	str	r3, [r4, #100]
	str	r3, [r4, #104]
	bl	_raw_spin_lock_irq
	b	.L15586
.L15611:
	movw	r1, #:lower16:.LC1204
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	mov	r3, r6
	movt	r1, #:upper16:.LC1204
	sub	r0, r0, #32
	str	r7, [sp]
	mov	r6, #0
	bl	__dynamic_pr_debug
	b	.L15592
.L15612:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r4, #96]
	b	.L15589
.L15610:
	movw	r1, #:lower16:.LC1203
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1203
	bl	__dynamic_pr_debug
	b	.L15595
.L15590:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r0, .L15614+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15613
.L15591:
	mov	r3, #0
	mvn	r6, #11
	strb	r3, [r4, #16]
	b	.L15592
.L15613:
	movw	r1, #:lower16:.LC1202
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	mov	r3, r6
	movt	r1, #:upper16:.LC1202
	sub	r0, r0, #32
	str	r7, [sp]
	bl	__dynamic_pr_debug
	b	.L15591
.L15615:
	.align	2
.L15614:
	.word	.LANCHOR1+3772
	.word	.LANCHOR8-3264
	.word	.LANCHOR8-3232
	.word	.LANCHOR8-3280
	.fnend
	.size	gs_open, .-gs_open
	.align	2
	.global	gs_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_free_req, %function
gs_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gs_free_req, .-gs_free_req
	.section	.rodata.str1.4
	.align	2
.LC1205:
	.ascii	"s\000"
	.align	2
.LC1206:
	.ascii	"g_serial\000"
	.align	2
.LC1207:
	.ascii	"ttyGS\000"
	.align	2
.LC1208:
	.ascii	"k_gserial\000"
	.align	2
.LC1209:
	.ascii	"&ports[i].lock\000"
	.align	2
.LC1210:
	.ascii	"&port->close_wait\000"
	.align	2
.LC1211:
	.ascii	"&port->drain_wait\000"
	.align	2
.LC1212:
	.ascii	"<3>%s: cannot register, err %d\012\000"
	.align	2
.LC1213:
	.ascii	"<4>%s: no classdev for port %d, err %ld\012\000"
	.align	2
.LC1214:
	.ascii	"usb_serial%d\000"
	.align	2
.LC1215:
	.ascii	"readstatus\000"
	.align	2
.LC1216:
	.ascii	"reset\000"
	.align	2
.LC1217:
	.ascii	"%s: registered %d ttyGS* device%s\012\000"
	.section	.rodata.cst4
	.align	2
.LC1218:
	.word	__stack_chk_guard
	.text
	.align	2
	.global	gserial_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_setup, %function
gserial_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 88
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC1218
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LC1218
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #100
	sub	sp, sp, #100
	ldr	r3, [r3]
	str	r3, [sp, #92]
	mov	r3,#0
	sub	r3, r1, #1
	cmp	r3, #7
	str	r1, [sp, #12]
	str	r3, [sp, #24]
	str	r0, [sp, #32]
	bhi	.L15637
	mov	r0, r1
	mov	r1, #0
	bl	__alloc_tty_driver
	movw	r10, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r10, #:upper16:.LANCHOR1
	str	r10, [sp, #20]
	str	r0, [r10, #3768]
	beq	.L15638
	movw	r2, #:lower16:.LC1206
	movw	r3, #:lower16:tty_std_termios
	ldr	r1, .L15664
	movt	r3, #:upper16:tty_std_termios
	movt	r2, #:upper16:.LC1206
	ldrd	r4, [r3]
	mov	lr, #3
	str	r2, [r0, #72]
	movw	r2, #:lower16:.LC1207
	ldrd	r6, [r3, #8]
	movt	r2, #:upper16:.LC1207
	ldrd	r8, [r3, #32]
	movt	lr, 1
	str	r2, [r0, #76]
	str	lr, [r0, #96]
	mov	lr, #14
	strd	r4, [r0, #100]
	ldrd	r4, [r3, #16]
	ldrd	r2, [r3, #24]
	strd	r6, [r0, #108]
	strd	r4, [r0, #116]
	movw	r5, #3261
	mov	r4, #0
	strd	r8, [r0, #132]
	strd	r2, [r0, #124]
	mov	r3, #9600
	str	r5, [r0, #108]
	str	r3, [r0, #136]
	str	r3, [r0, #140]
	str	lr, [r0, #144]
	bl	tty_set_operations
	movw	r0, #:lower16:.LC1208
	mov	r3, r4
	str	r4, [sp]
	movt	r0, #:upper16:.LC1208
	mov	r2, #1
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, r4
	str	r0, [r10, #3320]
	beq	.L15639
	ldr	r3, .L15664+4
	movw	r2, #:lower16:kmalloc_caches
	movw	r9, #:lower16:.LC1209
	movt	r2, #:upper16:kmalloc_caches
	movw	r10, #:lower16:.LC1210
	movt	r9, #:upper16:.LC1209
	movt	r10, #:upper16:.LC1210
	str	r2, [sp, #16]
	add	r8, r3, #272
	mov	r7, r3
	str	r3, [sp, #28]
	str	r3, [sp, #36]
	b	.L15623
.L15659:
	mov	r2, #144
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L15657
.L15621:
	mov	r0, r6
	mov	fp, #0
	mov	r2, r8
	mov	r1, r10
	str	fp, [r0], #20
	add	r5, r4, #1
	add	r7, r7, #24
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC1211
	mov	r2, r8
	movt	r1, #:upper16:.LC1211
	add	r0, r6, #108
	bl	__init_waitqueue_head
	ldr	r3, [sp, #12]
	movw	ip, #:lower16:gs_rx_push
	mov	r1, #2560
	movt	ip, #:upper16:gs_rx_push
	add	r2, r6, #64
	strb	r4, [r6, #17]
	add	r0, r6, #32
	mov	lr, #9600
	cmp	r3, r5
	add	r3, r6, #76
	str	ip, [r6, #72]
	mov	ip, #8
	str	r1, [r6, #60]
	add	r1, r6, #48
	str	r0, [r6, #32]
	str	r0, [r6, #36]
	str	r1, [r6, #48]
	str	r1, [r6, #52]
	str	r2, [r6, #64]
	str	r2, [r6, #68]
	str	r3, [r6, #76]
	str	r3, [r6, #80]
	str	lr, [r6, #120]
	strh	ip, [r6, #124]	@ movhi
	strb	fp, [r6, #126]
	str	r6, [r7, #-4]
	beq	.L15658
	mov	r4, r5
.L15623:
	mov	r0, r7
	mov	r2, r8
	mov	r1, r9
	bl	__mutex_init
	ldr	r3, [sp, #16]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	bne	.L15659
	mov	r6, #16
	b	.L15621
.L15658:
	ldr	r2, [sp, #12]
	ldr	r3, [sp, #20]
	ldr	r0, [r3, #3768]
	str	r2, [r3, #3760]
	bl	tty_register_driver
	subs	r9, r0, #0
	bne	.L15660
	ldr	r10, .L15664+8
	movw	r8, #:lower16:.LC1213
	mov	r6, r9
	ldr	r3, [sp, #32]
	movt	r8, #:upper16:.LC1213
	ldr	fp, [sp, #20]
	add	r7, r3, #32
.L15626:
	mov	r2, r7
	mov	r1, r6
	ldr	r0, [fp, #3768]
	bl	tty_register_device
	cmn	r0, #4096
	bhi	.L15661
.L15625:
	cmp	r4, r6
	add	r6, r6, #1
	bne	.L15626
	ldr	r10, .L15664+12
	str	r5, [sp, #12]
	movw	r8, #:lower16:.LC1214
	str	r9, [sp, #16]
	ldr	r9, [sp, #20]
	mov	r6, #0
	ldr	r5, [sp, #36]
	movt	r8, #:upper16:.LC1214
	add	fp, r10, #108
.L15630:
	mov	r2, r8
	mov	r3, r6
	ldr	r7, [r5, #20]
	mov	r1, #48
	add	r0, sp, #44
	bl	snprintf
	add	r0, sp, #44
	mov	r1, #0
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r9, #3764]
	beq	.L15629
	cmn	r0, #4096
	bhi	.L15629
	movw	r0, #:lower16:.LC1215
	mov	r3, r7
	str	r10, [sp]
	mov	r1, #292
	movt	r0, #:upper16:.LC1215
	bl	debugfs_create_file
	movw	r0, #:lower16:.LC1216
	mov	r3, r7
	str	fp, [sp]
	movt	r0, #:upper16:.LC1216
	mov	r1, #420
	ldr	r2, [r9, #3764]
	bl	debugfs_create_file
.L15629:
	cmp	r4, r6
	add	r5, r5, #24
	add	r6, r6, #1
	bne	.L15630
	ldr	r0, .L15664+16
	ldr	r5, [sp, #12]
	ldr	r9, [sp, #16]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L15662
.L15618:
	movw	r3, #:lower16:.LC1218
	movt	r3, #:upper16:.LC1218
	ldr	r2, [r3]
	ldr	r3, [sp, #92]
	eors	r2, r3, r2
	bne	.L15663
	mov	r0, r9
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15657:
.L15622:
	sub	r3, r4, #1
	cmp	r4, #0
	mvn	r9, #11
	str	r3, [sp, #24]
	beq	.L15633
.L15634:
	ldr	r3, [sp, #24]
	ldr	r5, .L15664+4
	add	r4, r3, r3, lsl #1
	ldr	r3, [sp, #28]
	add	r4, r3, r4, lsl #3
.L15632:
	ldr	r0, [r4, #20]
	bl	kfree
	cmp	r5, r4
	sub	r4, r4, #24
	bne	.L15632
.L15633:
	ldr	r3, [sp, #20]
	ldr	r0, [r3, #3320]
	cmp	r0, #0
	beq	.L15635
	bl	destroy_workqueue
.L15635:
	ldr	r4, [sp, #20]
	ldr	r0, [r4, #3768]
	bl	put_tty_driver
	mov	r3, #0
	str	r3, [r4, #3768]
	b	.L15618
.L15639:
	ldr	r3, .L15664+4
	mvn	r9, #11
	str	r3, [sp, #28]
	b	.L15634
.L15662:
	movw	r3, #:lower16:.LC888
	cmp	r5, #1
	ldr	r2, .L15664+8
	movt	r3, #:upper16:.LC888
	movw	ip, #:lower16:.LC1205
	movt	ip, #:upper16:.LC1205
	moveq	ip, r3
	movw	r1, #:lower16:.LC1217
	mov	r3, r5
	movt	r1, #:upper16:.LC1217
	sub	r0, r0, #24
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L15618
.L15637:
	mvn	r9, #21
	b	.L15618
.L15638:
	mvn	r9, #11
	b	.L15618
.L15663:
	bl	__stack_chk_fail
.L15660:
	movw	r0, #:lower16:.LC1212
	ldr	r1, .L15664+8
	mov	r2, r9
	movt	r0, #:upper16:.LC1212
	bl	printk
	b	.L15634
.L15661:
	mov	r3, r0
	mov	r2, r6
	mov	r1, r10
	mov	r0, r8
	bl	printk
	b	.L15625
.L15665:
	.align	2
.L15664:
	.word	.LANCHOR5-116
	.word	.LANCHOR1+3772
	.word	.LANCHOR5+8
	.word	.LANCHOR5+24
	.word	.LANCHOR8-3216
	.fnend
	.size	gserial_setup, .-gserial_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_init, %function
acm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #12]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	moveq	r3, #16
	streq	r3, [r0, #4]
	beq	.L15668
	mov	r0, r3
	mov	r2, #4
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L15669
.L15668:
	mov	r1, #4
	ldr	r0, [r5]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	gserial_setup
.L15669:
	ldrd	r4, [sp]
	mvn	r0, #11
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	acm_function_init, .-acm_function_init
	.align	2
	.global	gserial_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_cleanup, %function
gserial_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3768]
	cmp	r3, #0
	beq	.L15671
	b	gserial_cleanup.part.0
.L15671:
	bx	lr
	.fnend
	.size	gserial_cleanup, .-gserial_cleanup
	.section	.rodata.str1.4
	.align	2
.LC1219:
	.ascii	"gserial_connect: start ttyGS%d\012\000"
	.text
	.align	2
	.global	gserial_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_connect, %function
gserial_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #3768]
	cmp	r2, #0
	beq	.L15682
	ldr	r2, [r3, #3760]
	cmp	r1, r2
	bcs	.L15682
	mov	r4, r0
	ldr	r0, [r0, #88]
	add	r1, r1, r1, lsl #1
	add	r3, r3, r1, lsl #3
	ldr	r2, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r6, [r3, #3792]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	blt	.L15673
	ldr	r3, [r4, #88]
	str	r6, [r3]
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	blt	.L15691
	ldr	r3, [r4, #92]
	mov	r0, r6
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	str	r6, [r4, #84]
	ldr	r2, [r6, #120]
	mov	r7, r0
	str	r4, [r6, #4]
	str	r2, [r4, #96]
	ldrh	r2, [r6, #124]
	strh	r2, [r4, #100]	@ movhi
	ldrb	r2, [r6, #126]	@ zero_extendqisi2
	strb	r2, [r4, #102]
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L15676
	ldr	r0, .L15693
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15692
.L15677:
	mov	r0, r6
	bl	gs_start_io
	ldr	r3, [r4, #116]
	cmp	r3, #0
	beq	.L15679
.L15690:
	mov	r0, r4
	blx	r3
.L15679:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L15673:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15691:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	mov	r2, #0
	str	r2, [r3]
	b	.L15673
.L15676:
	ldr	r3, [r4, #120]
	cmp	r3, #0
	bne	.L15690
	b	.L15679
.L15692:
	movw	r1, #:lower16:.LC1219
	ldrb	r2, [r6, #17]	@ zero_extendqisi2
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1219
	bl	__dynamic_pr_debug
	b	.L15677
.L15682:
	mvn	r5, #5
	b	.L15673
.L15694:
	.align	2
.L15693:
	.word	.LANCHOR8-3184
	.fnend
	.size	gserial_connect, .-gserial_connect
	.align	2
	.global	gserial_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_disconnect, %function
gserial_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #84]
	cmp	r4, #0
	beq	.L15695
	mov	r5, r0
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r5, #96]
	mov	r2, #0
	mov	r6, r0
	str	r1, [r4, #120]
	ldrh	r1, [r5, #100]
	strh	r1, [r4, #124]	@ movhi
	ldrb	r1, [r5, #102]	@ zero_extendqisi2
	str	r2, [r4, #4]
	strb	r1, [r4, #126]
	str	r2, [r5, #84]
	ldr	r3, [r4, #12]
	cmp	r3, r2
	bne	.L15697
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L15698
.L15697:
	mov	r2, #1
	add	r0, r4, #108
	mov	r3, #0
	mov	r1, r2
	bl	__wake_up
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L15698
	bl	tty_hangup
.L15698:
	mov	r1, r6
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #92]
	mov	r6, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #92]
	str	r6, [r3]
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #88]
	mov	r0, r4
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r8, r0
	cmp	r3, r6
	bne	.L15700
	ldrb	r6, [r4, #16]	@ zero_extendqisi2
	cmp	r6, #0
	beq	.L15716
.L15700:
	ldr	r6, [r4, #32]
	add	r9, r4, #32
	ldr	r7, [r5, #92]
	cmp	r9, r6
	beq	.L15701
.L15702:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #32]
	cmp	r9, r6
	bne	.L15702
	ldr	r7, [r5, #92]
.L15701:
	ldr	r6, [r4, #48]
	add	r9, r4, #48
	cmp	r9, r6
	beq	.L15706
.L15703:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #48]
	cmp	r9, r6
	bne	.L15703
.L15706:
	ldr	r6, [r4, #76]
	add	r7, r4, #76
	ldr	r5, [r5, #88]
	cmp	r7, r6
	beq	.L15705
.L15704:
	mov	r0, r6
	sub	r9, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r9
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #76]
	cmp	r7, r6
	bne	.L15704
.L15705:
	mov	r3, #0
	mov	r1, r8
	mov	r0, r4
	str	r3, [r4, #40]
	str	r3, [r4, #44]
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	str	r3, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L15695:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15716:
	ldr	r0, [r4, #96]
	bl	kfree
	str	r6, [r4, #96]
	b	.L15700
	.fnend
	.size	gserial_disconnect, .-gserial_disconnect
	.section	.rodata.str1.4
	.align	2
.LC1220:
	.ascii	"acm ttyGS%d deactivated\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_disable, %function
acm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15724
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L15723
.L15718:
	mov	r0, r4
	bl	gserial_disconnect
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #152]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15723:
	ldr	r1, [r4, #20]
	movw	r2, #:lower16:.LC1220
	sub	r0, r3, #24
	movt	r2, #:upper16:.LC1220
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15718
.L15725:
	.align	2
.L15724:
	.word	.LANCHOR8-3168
	.fnend
	.size	acm_disable, .-acm_disable
	.section	.rodata.str1.4
	.align	2
.LC1221:
	.ascii	"reset acm ttyGS%d\012\000"
	.align	2
.LC1222:
	.ascii	"activate acm ttyGS%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_set_alt, %function
acm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #144]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L15756
	ldrb	r3, [r0, #145]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L15731
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15732
	ldr	r0, .L15759
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15757
.L15733:
	mov	r0, r4
	bl	gserial_disconnect
	ldr	r2, [r4, #88]
.L15732:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L15734
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L15734
.L15735:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15739
	mov	r1, r4
	ldr	r0, [r5]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15739
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	mov	r0, r4
	bl	gserial_connect
.L15726:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15734:
	ldr	ip, .L15759+4
	ldr	r0, [r5]
	ldrh	r3, [ip, #-6]
	tst	r3, #4
	bne	.L15758
.L15736:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15739
	mov	r1, r4
	ldr	r0, [r5]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15739
	ldr	r2, [r4, #88]
	b	.L15735
.L15756:
	ldr	r2, [r0, #152]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15728
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #152]
.L15728:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15731
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #152]
	str	r4, [r3]
	b	.L15726
.L15757:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1221
	sub	r0, r0, #32
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1221
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15733
.L15739:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L15726
.L15758:
	movw	r2, #:lower16:.LC1222
	add	r1, r0, #32
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1222
	sub	r0, ip, #24
	bl	__dynamic_dev_dbg
	ldr	r0, [r5]
	ldr	r2, [r4, #88]
	b	.L15736
.L15731:
	mvn	r5, #21
	b	.L15726
.L15760:
	.align	2
.L15759:
	.word	.LANCHOR8-3136
	.word	.LANCHOR8-3120
	.fnend
	.size	acm_set_alt, .-acm_set_alt
	.align	2
	.global	gsdio_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_free_req, %function
gsdio_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gsdio_free_req, .-gsdio_free_req
	.align	2
	.global	gsdio_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_req, %function
gsdio_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	mov	r1, r2
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L15767
	mov	r0, r5
	mov	r1, r6
	str	r5, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4]
	beq	.L15768
.L15763:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15767:
	movw	r0, #:lower16:.LC689
	ldr	r1, .L15769
	movt	r0, #:upper16:.LC689
	bl	printk
	b	.L15763
.L15768:
	movw	r0, #:lower16:.LC690
	ldr	r1, .L15769
	movt	r0, #:upper16:.LC690
	bl	printk
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15763
.L15770:
	.align	2
.L15769:
	.word	.LANCHOR5-1316
	.fnend
	.size	gsdio_alloc_req, .-gsdio_alloc_req
	.align	2
	.global	gsdio_free_requests
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_free_requests, %function
gsdio_free_requests:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1]
	cmp	r1, r4
	beq	.L15771
	mov	r5, r1
	mov	r6, r0
.L15773:
	mov	r0, r4
	sub	r7, r4, #36
	bl	list_del
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5]
	cmp	r5, r4
	bne	.L15773
.L15771:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_free_requests, .-gsdio_free_requests
	.set	gsmd_free_requests,gsdio_free_requests
	.section	.rodata.str1.4
	.align	2
.LC1223:
	.ascii	"%s: Event data\012\000"
	.align	2
.LC1224:
	.ascii	"%s: Event Open\012\000"
	.align	2
.LC1225:
	.ascii	"%s: port: %pK\012\000"
	.align	2
.LC1226:
	.ascii	"<3>%s: unable to allocate out requests\012\000"
	.align	2
.LC1227:
	.ascii	"%s: Event Close\012\000"
	.align	2
.LC1228:
	.ascii	"<3>%s: unable to allocate IN requests\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_notify, %function
gsmd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r1, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r5, [r0, #72]
	cmp	r1, #3
	ldrls	pc, [pc, r1, asl #2]
	b	.L15776
.L15779:
	.word	.L15782
	.word	.L15781
	.word	.L15780
	.word	.L15778
.L15778:
	ldr	r0, [r5]
	bl	smd_tiocmget
	ands	r3, r0, #128
	movne	r1, #9
	moveq	r1, #1
	movne	r3, #8
	tst	r0, #64
	moveq	r1, r3
	tst	r0, #256
	ldr	r0, [r4, #68]
	orrne	r1, r1, #2
	str	r1, [r4, #160]
	cmp	r0, #0
	beq	.L15776
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L15776
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3
.L15780:
	ldr	r0, .L15891
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L15878
.L15802:
	add	r1, r5, #8
	mov	r0, #0
	add	r8, r4, #4
	bl	_clear_bit
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #68]
	mov	r1, r0
	cmp	r3, #0
	beq	.L15879
	ldr	r7, [r3, #88]
	mov	r0, r8
	ldr	r6, [r3, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L15804
	mov	r0, r7
	blx	r3
.L15804:
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L15805
	mov	r0, r6
	blx	r3
.L15805:
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r0, [r4, #68]
	cmp	r0, #0
	beq	.L15806
	ldr	r5, [r4, #12]
	add	r9, r4, #12
	cmp	r5, r9
	beq	.L15810
.L15807:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #12]
	cmp	r9, r5
	bne	.L15807
.L15810:
	ldr	r5, [r4, #20]
	add	r9, r4, #20
	cmp	r5, r9
	beq	.L15809
.L15808:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #20]
	cmp	r9, r5
	bne	.L15808
.L15809:
	ldr	r5, [r4, #44]
	add	r9, r4, #44
	cmp	r5, r9
	beq	.L15812
.L15811:
	mov	r0, r5
	sub	r6, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #44]
	cmp	r9, r5
	bne	.L15811
.L15812:
	ldr	r0, [r4, #68]
	mov	r3, #0
	str	r3, [r4, #8]
	str	r3, [r4, #160]
.L15806:
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L15813
	ldr	r1, [r4, #160]
	blx	r3
.L15813:
	mov	r0, r8
.L15877:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock
.L15781:
	ldr	r0, .L15891+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L15880
.L15786:
	ldr	fp, .L15891+8
	add	r1, r5, #8
	mov	r0, #0
	bl	_set_bit
	ldrh	r3, [fp, #-14]
	tst	r3, #4
	bne	.L15881
.L15787:
	add	r10, r4, #4
	mov	r0, r10
	bl	_raw_spin_lock
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L15795
	ldr	r3, [r4, #72]
	add	r7, r4, #12
	ldr	r1, [r4, #156]
	ldr	r9, .L15891+12
	ldr	r0, [r3]
	mvn	r2, r1
	bl	smd_tiocmset_from_cb
	ldrh	r2, [r9, #-6]
	ldr	r3, [r4, #68]
	tst	r2, #4
	ldr	r8, [r3, #92]
	bne	.L15882
.L15789:
	movw	r6, #:lower16:gsmd_read_complete
	mov	r5, #0
	movt	r6, #:upper16:gsmd_read_complete
.L15796:
	mov	r1, #2048
	mov	r0, r8
	bl	gsmd_alloc_req.constprop.0
	subs	r3, r0, #0
	mov	r1, r7
	add	r0, r3, #36
	beq	.L15883
	add	r5, r5, #1
	str	r6, [r3, #28]
	ldr	r2, [r4, #12]
	bl	__list_add
	cmp	r5, #8
	bne	.L15796
.L15797:
	ldrh	r2, [r9, #-6]
	add	r8, r4, #44
	ldr	r3, [r4, #68]
	tst	r2, #4
	ldr	r9, [r3, #88]
	bne	.L15884
.L15794:
	movw	r6, #:lower16:gsmd_write_complete
	mov	r5, #0
	movt	r6, #:upper16:gsmd_write_complete
.L15801:
	mov	r1, #2048
	mov	r0, r9
	bl	gsmd_alloc_req.constprop.0
	subs	r3, r0, #0
	mov	r1, r8
	add	r0, r3, #36
	beq	.L15885
	add	r5, r5, #1
	str	r6, [r3, #28]
	ldr	r2, [r4, #44]
	bl	__list_add
	cmp	r5, #8
	bne	.L15801
.L15876:
	mov	r0, r10
	bl	_raw_spin_unlock
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx
.L15782:
	ldr	r0, .L15891+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15886
.L15783:
	ldr	r0, [r5]
	bl	smd_read_avail
	cmp	r0, #0
	bne	.L15887
.L15784:
	ldr	r0, [r5]
	bl	smd_write_avail
	cmp	r0, #0
	bne	.L15888
.L15776:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15887:
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #52
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3328]
	bl	queue_work
	b	.L15784
.L15888:
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #28
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3328]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work
.L15883:
	ldr	r0, .L15891+20
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15889
.L15791:
	ldr	r3, [r4, #12]
	cmp	r7, r3
	bne	.L15797
	movw	r0, #:lower16:.LC1226
	ldr	r1, .L15891+24
	movt	r0, #:upper16:.LC1226
	bl	printk
.L15795:
	mov	r0, r10
	b	.L15877
.L15885:
	ldr	r0, .L15891+20
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15890
.L15799:
	ldr	r3, [r4, #44]
	cmp	r8, r3
	bne	.L15876
	ldr	r3, [r4, #68]
	mov	r1, r7
	ldr	r0, [r3, #92]
	bl	gsmd_free_requests
	movw	r0, #:lower16:.LC1228
	ldr	r1, .L15891+24
	movt	r0, #:upper16:.LC1228
	bl	printk
	b	.L15795
.L15879:
	mov	r0, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L15880:
	movw	r1, #:lower16:.LC1224
	ldr	r2, .L15891+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1224
	bl	__dynamic_pr_debug
	b	.L15786
.L15886:
	movw	r1, #:lower16:.LC1223
	ldr	r2, .L15891+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1223
	bl	__dynamic_pr_debug
	b	.L15783
.L15878:
	movw	r1, #:lower16:.LC1227
	ldr	r2, .L15891+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1227
	bl	__dynamic_pr_debug
	b	.L15802
.L15881:
	movw	r1, #:lower16:.LC1225
	ldr	r2, .L15891+24
	mov	r3, r4
	movt	r1, #:upper16:.LC1225
	sub	r0, fp, #32
	bl	__dynamic_pr_debug
	b	.L15787
.L15884:
	mov	r1, #2048
	movw	ip, #:lower16:gsmd_write_complete
	ldr	r2, .L15891+32
	movt	ip, #:upper16:gsmd_write_complete
	mov	r3, #8
	str	r8, [sp]
	sub	r0, fp, #8
	str	r1, [sp, #8]
	movw	r1, #:lower16:.LC941
	movt	r1, #:upper16:.LC941
	str	r3, [sp, #4]
	mov	r3, r9
	str	ip, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L15794
.L15882:
	movw	ip, #:lower16:gsmd_read_complete
	mov	r3, #2048
	ldr	r2, .L15891+32
	movt	ip, #:upper16:gsmd_read_complete
	mov	r0, #8
	str	r7, [sp]
	movw	r1, #:lower16:.LC941
	movt	r1, #:upper16:.LC941
	stmib	sp, {r0, r3, ip}
	mov	r3, r8
	sub	r0, fp, #8
	bl	__dynamic_pr_debug
	b	.L15789
.L15889:
	movw	r1, #:lower16:.LC688
	ldr	r2, .L15891+32
	mov	r3, r5
	movt	r1, #:upper16:.LC688
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L15791
.L15890:
	movw	r1, #:lower16:.LC688
	ldr	r2, .L15891+32
	mov	r3, r5
	movt	r1, #:upper16:.LC688
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L15799
.L15892:
	.align	2
.L15891:
	.word	.LANCHOR8-2976
	.word	.LANCHOR8-3072
	.word	.LANCHOR8-3040
	.word	.LANCHOR8-3024
	.word	.LANCHOR8-3088
	.word	.LANCHOR8-2992
	.word	.LANCHOR5+252
	.word	.LANCHOR5+240
	.word	.LANCHOR5+268
	.fnend
	.size	gsmd_notify, .-gsmd_notify
	.align	2
	.global	gsdio_alloc_requests
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_requests, %function
gsdio_alloc_requests:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	ip, #2058
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r3
	strd	r10, [sp, #24]
	movw	fp, #:lower16:.LANCHOR4
	movt	fp, #:upper16:.LANCHOR4
	strd	r8, [sp, #16]
	mov	r8, r1
	ldrh	ip, [fp, ip]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	mov	r9, r2
	ldr	r10, [sp, #56]
	tst	ip, #4
	bne	.L15911
.L15894:
	cmp	r9, #0
	movgt	r5, #0
	ble	.L15901
.L15902:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	mov	r4, r0
	mov	r1, #32
	cmp	r4, #0
	mov	r0, r7
	beq	.L15912
	str	r7, [r4, #4]
	bl	__kmalloc
	mov	r3, r0
	mov	r1, r8
	cmp	r3, #0
	add	r0, r4, #36
	str	r3, [r4]
	beq	.L15913
	add	r5, r5, #1
	str	r10, [r4, #28]
	ldr	r2, [r8]
	bl	__list_add
	cmp	r9, r5
	bne	.L15902
.L15901:
	mov	r0, #0
.L15893:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15911:
	movw	r1, #:lower16:.LC941
	mov	r3, r0
	ldr	r2, .L15915
	movt	r1, #:upper16:.LC941
	ldr	r0, .L15915+4
	strd	r8, [sp]
	str	r7, [sp, #8]
	str	r10, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L15894
.L15912:
	movw	r0, #:lower16:.LC689
	ldr	r1, .L15915+8
	movt	r0, #:upper16:.LC689
	bl	printk
.L15898:
	movw	r3, #2082
	ldrh	r3, [fp, r3]
	tst	r3, #4
	bne	.L15914
.L15900:
	ldr	r3, [r8]
	cmp	r8, r3
	mvneq	r0, #11
	bne	.L15901
	b	.L15893
.L15913:
	movw	r0, #:lower16:.LC690
	ldr	r1, .L15915+8
	movt	r0, #:upper16:.LC690
	bl	printk
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15898
.L15914:
	movw	r1, #:lower16:.LC688
	ldr	r2, .L15915
	mov	r3, r5
	movt	r1, #:upper16:.LC688
	ldr	r0, .L15915+12
	bl	__dynamic_pr_debug
	b	.L15900
.L15916:
	.align	2
.L15915:
	.word	.LANCHOR5-1340
	.word	.LANCHOR4+2040
	.word	.LANCHOR5-1316
	.word	.LANCHOR4+2064
	.fnend
	.size	gsdio_alloc_requests, .-gsdio_alloc_requests
	.section	.rodata.str1.4
	.align	2
.LC1229:
	.ascii	"%s: sdio is not open\012\000"
	.text
	.align	2
	.global	gsdio_start_rx
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_start_rx, %function
gsdio_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	beq	.L15939
	ldr	r5, .L15945
	ldrh	r3, [r5, #-14]
	tst	r3, #4
	bne	.L15940
.L15919:
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L15941
	ldr	r2, [r4, #108]
	cmp	r2, #0
	beq	.L15942
	add	r9, r4, #12
	mov	r10, #2048
	ldr	r8, [r3, #92]
	b	.L15925
.L15927:
	bl	list_del
	str	r10, [r5, #-32]
	ldr	r3, [r4, #44]
	mov	r0, r7
	sub	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r8, #8]
	mov	r1, r6
	mov	r2, #32
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irq
	cmp	r6, #0
	bne	.L15943
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L15944
.L15925:
	ldr	r5, [r4, #12]
	cmp	r9, r5
	mov	r0, r5
	sub	r6, r5, #36
	bne	.L15927
.L15922:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L15942:
	ldr	r0, .L15945+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L15922
	movw	r1, #:lower16:.LC1229
	ldr	r2, .L15945+8
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1229
	bl	__dynamic_pr_debug
	b	.L15922
.L15944:
	ldr	r0, .L15945+12
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L15922
	movw	r1, #:lower16:.LC229
	ldr	r2, .L15945+8
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC229
	bl	__dynamic_pr_debug
	b	.L15922
.L15941:
	ldr	r3, .L15945+16
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L15922
	movw	r1, #:lower16:.LC229
	ldr	r2, .L15945+8
	sub	r0, r5, #8
	movt	r1, #:upper16:.LC229
	bl	__dynamic_pr_debug
	b	.L15922
.L15940:
	ldr	ip, [r4]
	movw	r1, #:lower16:.LC232
	mov	r3, r4
	ldr	r2, .L15945+8
	movt	r1, #:upper16:.LC232
	sub	r0, r5, #32
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L15919
.L15943:
	movw	r0, #:lower16:.LC107
	ldr	r1, .L15945+8
	mov	r2, r4
	movt	r0, #:upper16:.LC107
	ldr	r3, [r4]
	bl	printk
	mov	r2, r9
	mov	r0, r5
	ldr	r1, [r4, #16]
	bl	__list_add
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
	b	.L15922
.L15939:
	ldr	r1, .L15945+8
	movw	r0, #:lower16:.LC105
	movt	r0, #:upper16:.LC105
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L15946:
	.align	2
.L15945:
	.word	.LANCHOR8-2944
	.word	.LANCHOR8-2896
	.word	.LANCHOR5+288
	.word	.LANCHOR8-2880
	.word	.LANCHOR8-2928
	.fnend
	.size	gsdio_start_rx, .-gsdio_start_rx
	.section	.rodata.str1.4
	.align	2
.LC1230:
	.ascii	"%s: port:%pK port#%d read_queue:%pK\000"
	.align	2
.LC1231:
	.ascii	"%s: usb cable is disconencted\012\000"
	.align	2
.LC1232:
	.ascii	"%s: req status shutdown portno#%d port:%pK\000"
	.align	2
.LC1233:
	.ascii	"<3>%s: sio channel is not open\012\000"
	.align	2
.LC1234:
	.ascii	"<3>%s: usb request is null port#%d\012\000"
	.align	2
.LC1235:
	.ascii	"%s: port:%pK port#%d req:%pK actual:%d n_read:%d\012"
	.ascii	"\000"
	.align	2
.LC1236:
	.ascii	"%s: SDIO IO is not supported\012\000"
	.align	2
.LC1237:
	.ascii	"%s: sdio_write_avail:%d\000"
	.align	2
.LC1238:
	.ascii	"%s: req->actual is already zero,update bytes read\012"
	.ascii	"\000"
	.align	2
.LC1239:
	.ascii	"<3>%s: port#%d sdio write failed err:%d\000"
	.text
	.align	2
	.global	gsdio_rx_push
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_rx_push, %function
gsdio_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r5, .L16004
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #28
	strd	r8, [sp, #16]
	sub	r9, r0, #8
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r5, #-14]
	.pad #16
	sub	sp, sp, #16
	tst	r3, #4
	bne	.L15992
.L15948:
	sub	r8, r4, #24
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L15993
	ldr	r5, [r4, #-8]
	ldr	r10, [r3, #92]
	cmp	r9, r5
	beq	.L15951
	ldr	r3, [r5, #8]
	sub	r6, r5, #36
	cmn	r3, #108
	beq	.L15952
	cmp	r3, #0
	bne	.L15994
.L15953:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L15995
	mov	r0, r5
	bl	list_del
	ldr	r3, [r4, #20]
	cmp	r7, #0
	sub	r3, r3, #1
	str	r3, [r4, #20]
	beq	.L15996
	cmp	r6, #0
	beq	.L15997
	ldr	r0, .L16004+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L15998
.L15959:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L15999
	ldr	r0, .L16004+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L16000
.L15961:
	ldr	r3, [r5, #12]
	cmp	r3, #0
	bne	.L15962
	ldr	r0, .L16004+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L16001
.L15963:
	mov	r3, #0
	str	r3, [r4, #-20]
.L15957:
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L16002
.L15964:
	mov	r1, r9
	mov	r0, r5
	ldr	r2, [r4, #-8]
	bl	__list_add
	ldr	r3, [r4, #20]
	add	r3, r3, #1
	str	r3, [r4, #20]
.L15951:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gsdio_start_rx
.L15999:
	ldr	r0, .L16004+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L15957
	movw	r1, #:lower16:.LC1236
	ldr	r2, .L16004+20
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1236
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #68]
	cmp	r3, #0
	bne	.L15964
.L16002:
	str	r3, [r4, #-20]
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r1, r6
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15991
.L15998:
	ldr	lr, [r4, #-28]
	movw	r1, #:lower16:.LC1235
	mov	r3, r7
	ldr	ip, [r4, #-20]
	movt	r1, #:upper16:.LC1235
	sub	r0, r0, #24
	ldr	r2, .L16004+20
	str	ip, [sp, #12]
	ldr	ip, [r5, #12]
	str	lr, [sp]
	stmib	sp, {r6, ip}
	bl	__dynamic_pr_debug
	b	.L15959
.L16001:
	movw	r1, #:lower16:.LC1238
	ldr	r2, .L16004+20
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1238
	bl	__dynamic_pr_debug
	b	.L15963
.L16000:
	movw	r1, #:lower16:.LC1237
	ldr	r2, .L16004+20
	mvn	r3, #18
	movt	r1, #:upper16:.LC1237
	sub	r0, r0, #24
	bl	__dynamic_pr_debug
	b	.L15961
.L15993:
	ldr	r3, .L16004+24
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L16003
.L15991:
	mov	r0, r8
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L15952:
	ldr	r0, .L16004+28
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L15951
	movw	r1, #:lower16:.LC1232
	ldr	r2, .L16004+32
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1232
	str	r7, [sp]
	ldr	r3, [r4, #-28]
	bl	__dynamic_pr_debug
	b	.L15951
.L15992:
	ldr	ip, [r4, #-28]
	movw	r1, #:lower16:.LC1230
	mov	r3, r7
	ldr	r2, .L16004+32
	movt	r1, #:upper16:.LC1230
	sub	r0, r5, #32
	str	ip, [sp]
	str	r9, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L15948
.L16003:
	movw	r1, #:lower16:.LC1231
	ldr	r2, .L16004+32
	sub	r0, r5, #8
	movt	r1, #:upper16:.LC1231
	bl	__dynamic_pr_debug
	b	.L15991
.L15962:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
	mov	r0, r8
	bl	_raw_spin_lock_irq
	movw	r0, #:lower16:.LC1239
	ldr	r1, .L16004+20
	mvn	r3, #18
	movt	r0, #:upper16:.LC1239
	ldr	r2, [r4, #-28]
	bl	printk
	b	.L15957
.L15997:
	movw	r0, #:lower16:.LC1234
	ldr	r1, .L16004+20
	movt	r0, #:upper16:.LC1234
	ldr	r2, [r4, #-28]
	bl	printk
	b	.L15957
.L15995:
	movw	r0, #:lower16:.LC1233
	ldr	r1, .L16004+32
	movt	r0, #:upper16:.LC1233
	bl	printk
	mov	r0, r5
	bl	__list_del_entry
	mov	r0, r5
	sub	r1, r4, #16
	ldr	r2, [r4, #-16]
	bl	__list_add
	ldrd	r2, [r4, #16]
	add	r2, r2, #1
	sub	r3, r3, #1
	strd	r2, [r4, #16]
	b	.L15951
.L15994:
	movw	r0, #:lower16:.LC355
	ldr	r1, .L16004+32
	mov	r2, r7
	movt	r0, #:upper16:.LC355
	str	r3, [sp]
	ldr	r3, [r4, #-28]
	bl	printk
	b	.L15953
.L15996:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L16004+20
	movt	r0, #:upper16:.LC105
	bl	printk
	b	.L15957
.L16005:
	.align	2
.L16004:
	.word	.LANCHOR8-2848
	.word	.LANCHOR8-2784
	.word	.LANCHOR8-2736
	.word	.LANCHOR8-2704
	.word	.LANCHOR8-2752
	.word	.LANCHOR5+320
	.word	.LANCHOR8-2832
	.word	.LANCHOR8-2800
	.word	.LANCHOR5+304
	.fnend
	.size	gsdio_rx_push, .-gsdio_rx_push
	.align	2
	.global	gsdio_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write, %function
gsdio_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	subs	r5, r0, #0
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	beq	.L16028
	cmp	r1, #0
	mov	r4, r1
	beq	.L16029
	ldr	r0, .L16034
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L16030
.L16010:
	ldr	r3, [r5, #108]
	cmp	r3, #0
	beq	.L16031
	ldr	r0, .L16034+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L16032
.L16012:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	bne	.L16013
	ldr	r0, .L16034+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L16033
.L16014:
	mov	r3, #0
	str	r3, [r5, #8]
.L16008:
	mvn	r0, #18
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L16031:
	ldr	r0, .L16034+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L16008
	movw	r1, #:lower16:.LC1236
	ldr	r2, .L16034+16
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1236
	bl	__dynamic_pr_debug
	b	.L16008
.L16030:
	ldr	lr, [r5]
	movw	r1, #:lower16:.LC1235
	mov	r3, r5
	ldr	r2, [r5, #8]
	str	r4, [sp, #4]
	movt	r1, #:upper16:.LC1235
	ldr	ip, [r4, #48]
	sub	r0, r0, #24
	str	lr, [sp]
	str	ip, [sp, #8]
	str	r2, [sp, #12]
	ldr	r2, .L16034+16
	bl	__dynamic_pr_debug
	b	.L16010
.L16033:
	movw	r1, #:lower16:.LC1238
	ldr	r2, .L16034+16
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1238
	bl	__dynamic_pr_debug
	b	.L16014
.L16032:
	movw	r1, #:lower16:.LC1237
	ldr	r2, .L16034+16
	mvn	r3, #18
	movt	r1, #:upper16:.LC1237
	sub	r0, r0, #24
	bl	__dynamic_pr_debug
	b	.L16012
.L16013:
	add	r4, r5, #4
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	_raw_spin_lock_irq
	movw	r0, #:lower16:.LC1239
	ldr	r1, .L16034+16
	mvn	r3, #18
	movt	r0, #:upper16:.LC1239
	ldr	r2, [r5]
	bl	printk
	b	.L16008
.L16029:
	movw	r0, #:lower16:.LC1234
	ldr	r1, .L16034+16
	movt	r0, #:upper16:.LC1234
	ldr	r2, [r5]
	bl	printk
	b	.L16008
.L16028:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L16034+16
	movt	r0, #:upper16:.LC105
	bl	printk
	b	.L16008
.L16035:
	.align	2
.L16034:
	.word	.LANCHOR8-2784
	.word	.LANCHOR8-2736
	.word	.LANCHOR8-2704
	.word	.LANCHOR8-2752
	.word	.LANCHOR5+320
	.fnend
	.size	gsdio_write, .-gsdio_write
	.section	.rodata.str1.4
	.align	2
.LC1240:
	.ascii	"%s: flushed out %d bytes\012\000"
	.text
	.align	2
	.global	gsdio_read_pending
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_read_pending, %function
gsdio_read_pending:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L16047
	ldr	r3, [r0, #120]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L16049
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r5, #-6]
	tst	r3, #4
	bne	.L16048
.L16043:
	b	.L16043
.L16048:
	ldr	r6, .L16049+4
	movw	r4, #:lower16:.LC1240
	sub	r7, r5, #24
	movt	r4, #:upper16:.LC1240
.L16040:
	mvn	r3, #18
	mov	r2, r6
	mov	r1, r4
	mov	r0, r7
	bl	__dynamic_pr_debug
	ldrh	r3, [r5, #-6]
	tst	r3, #4
	bne	.L16040
	b	.L16043
.L16047:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L16049+4
	movt	r0, #:upper16:.LC105
	b	printk
.L16050:
	.align	2
.L16049:
	.word	.LANCHOR8-2688
	.word	.LANCHOR5+332
	.fnend
	.size	gsdio_read_pending, .-gsdio_read_pending
	.section	.rodata.str1.4
	.align	2
.LC1241:
	.ascii	"<3>%s: usb disconnected\012\000"
	.align	2
.LC1242:
	.ascii	"%s: SDIO channel is not open\012\000"
	.align	2
.LC1243:
	.ascii	"<3>%s: port:%pK port#%d sdio read failed err:%d\000"
	.text
	.align	2
	.global	gsdio_tx_pull
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_tx_pull, %function
gsdio_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	ldr	r7, .L16068
	strd	r8, [sp, #16]
	sub	r9, r0, #60
	sub	r8, r0, #8
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	ldrh	r3, [r7, #-14]
	tst	r3, #4
	bne	.L16064
.L16052:
	ldr	r3, [r4, #36]
	cmp	r3, #0
	beq	.L16065
	sub	r5, r4, #56
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r6, [r4, #-8]
	cmp	r8, r6
	beq	.L16054
	ldr	r3, [r4, #48]
	cmp	r3, #0
	bne	.L16055
	ldr	r3, .L16068+4
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L16066
.L16054:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L16064:
	ldr	ip, [r4, #-60]
	movw	r1, #:lower16:.LC228
	mov	r3, r9
	ldr	r2, .L16068+8
	movt	r1, #:upper16:.LC228
	sub	r0, r7, #32
	str	ip, [sp]
	str	r8, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L16052
.L16066:
	movw	r1, #:lower16:.LC1242
	ldr	r2, .L16068+8
	sub	r0, r7, #8
	movt	r1, #:upper16:.LC1242
	bl	__dynamic_pr_debug
	b	.L16054
.L16055:
	ldr	r3, [r4, #36]
	mov	r0, r6
	sub	r10, r6, #36
	ldr	r7, [r3, #88]
	bl	list_del
	ldr	r3, [r4, #16]
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #16]
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	mvn	r3, #18
	movw	r0, #:lower16:.LC1243
	ldr	r1, .L16068+8
	mov	r2, r9
	movt	r0, #:upper16:.LC1243
	str	r3, [sp]
	ldr	r3, [r4, #-60]
	bl	printk
	ldr	r3, [r4, #36]
	cmp	r3, #0
	beq	.L16067
	mov	r1, r8
	mov	r0, r6
	ldr	r2, [r4, #-8]
	bl	__list_add
	ldr	r3, [r4, #16]
	add	r3, r3, #1
	str	r3, [r4, #16]
	b	.L16054
.L16067:
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L16054
.L16065:
	ldr	r1, .L16068+8
	movw	r0, #:lower16:.LC1241
	movt	r0, #:upper16:.LC1241
	bl	printk
	mov	r0, r9
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gsdio_read_pending
.L16069:
	.align	2
.L16068:
	.word	.LANCHOR8-2656
	.word	.LANCHOR8-2640
	.word	.LANCHOR5+352
	.fnend
	.size	gsdio_tx_pull, .-gsdio_tx_pull
	.section	.rodata.str1.4
	.align	2
.LC1244:
	.ascii	"<3>%s: unable to allocate out reqs\012\000"
	.align	2
.LC1245:
	.ascii	"<3>%s: unable to allocate in reqs\012\000"
	.text
	.align	2
	.global	gsdio_start_io
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_start_io, %function
gsdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16084
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L16080
.L16071:
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r6, r0
	cmp	r3, #0
	beq	.L16081
	add	r8, r4, #12
	movw	r2, #:lower16:gsdio_read_complete
	ldr	r0, [r3, #92]
	mov	r1, r8
	movt	r2, #:upper16:gsdio_read_complete
	bl	gsdio_alloc_requests.constprop.0
	subs	r5, r0, #0
	bne	.L16082
	ldr	r3, [r4, #96]
	mov	r9, #8
	movw	r2, #:lower16:gsdio_write_complete
	movt	r2, #:upper16:gsdio_write_complete
	add	r1, r4, #52
	str	r9, [r4, #44]
	ldr	r0, [r3, #88]
	bl	gsdio_alloc_requests.constprop.0
	subs	r5, r0, #0
	bne	.L16083
	mov	r1, r6
	mov	r0, r7
	str	r9, [r4, #76]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	bl	gsdio_start_rx
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3324]
	bl	queue_work
.L16070:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16080:
	movw	r1, #:lower16:.LC285
	ldr	r2, .L16084+4
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC285
	bl	__dynamic_pr_debug
	b	.L16071
.L16081:
	mov	r1, r0
	mov	r0, r7
	mvn	r5, #18
	bl	_raw_spin_unlock_irqrestore
	b	.L16070
.L16083:
	ldr	r3, [r4, #96]
	mov	r1, r8
	ldr	r0, [r3, #92]
	bl	gsdio_free_requests
	mov	r3, #0
	mov	r1, r6
	mov	r0, r7
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1245
	ldr	r1, .L16084+4
	movt	r0, #:upper16:.LC1245
	bl	printk
	b	.L16070
.L16082:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1244
	ldr	r1, .L16084+4
	movt	r0, #:upper16:.LC1244
	bl	printk
	b	.L16070
.L16085:
	.align	2
.L16084:
	.word	.LANCHOR8-2608
	.word	.LANCHOR5+368
	.fnend
	.size	gsdio_start_io, .-gsdio_start_io
	.align	2
	.global	gsdio_port_free
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_port_free, %function
gsdio_port_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, #104
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR1
	mov	r2, r0
	str	lr, [sp, #4]
	mul	r1, r1, r0
	add	r0, r3, r1
	ldr	r4, [r0, #24]
	cmp	r4, #0
	beq	.L16089
	add	r0, r0, #28
	bl	platform_driver_unregister
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L16089:
	movw	r0, #:lower16:.LC174
	ldr	r1, .L16090
	movt	r0, #:upper16:.LC174
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L16091:
	.align	2
.L16090:
	.word	.LANCHOR5+384
	.fnend
	.size	gsdio_port_free, .-gsdio_port_free
	.align	2
	.global	gsdio_ctrl_modem_status
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_modem_status, %function
gsdio_ctrl_modem_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1650
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #8]
	mov	r4, r0
	ldrh	r2, [r3, r2]
	mov	r5, r1
	.pad #12
	sub	sp, sp, #12
	tst	r2, #4
	bne	.L16115
.L16093:
	ands	r1, r4, #128
	moveq	r3, #1
	streq	r1, [r5, #172]
	beq	.L16095
	mov	r2, #8
	mov	r3, #9
	mov	r1, r2
	str	r2, [r5, #172]
.L16095:
	tst	r4, #64
	ldr	r0, [r5, #96]
	movne	r1, r3
	strne	r3, [r5, #172]
	tst	r4, #256
	orrne	r1, r1, #2
	strne	r1, [r5, #172]
	cmp	r0, #0
	beq	.L16092
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L16092
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	bx	r3
.L16092:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L16115:
	ldr	ip, [r5]
	movw	r1, #:lower16:.LC920
	add	r0, r3, #1632
	ldr	r2, .L16116
	movt	r1, #:upper16:.LC920
	mov	r3, r5
	str	ip, [sp]
	str	r4, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L16093
.L16117:
	.align	2
.L16116:
	.word	.LANCHOR5-1444
	.fnend
	.size	gsdio_ctrl_modem_status, .-gsdio_ctrl_modem_status
	.section	.rodata.str1.4
	.align	2
.LC1246:
	.ascii	"READ AVAIL\000"
	.align	2
.LC1247:
	.ascii	"WRITE_AVAIL\000"
	.align	2
.LC1248:
	.ascii	"%s: port:%pK port#%d event:%s\012\000"
	.text
	.align	2
	.global	gsdio_ch_notify
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_notify, %function
gsdio_ch_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L16131
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [ip, #-6]
	tst	r2, #4
	bne	.L16129
.L16119:
	cmp	r4, #2
	movweq	r3, #:lower16:.LANCHOR1
	addeq	r1, r5, #28
	beq	.L16128
	cmp	r4, #1
	beq	.L16130
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16130:
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r5, #60
.L16128:
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3324]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
.L16129:
	movw	r3, #:lower16:.LC1246
	ldr	r6, [r5]
	cmp	r1, #1
	movt	r3, #:upper16:.LC1246
	movw	lr, #:lower16:.LC1247
	ldr	r2, .L16131+4
	movt	lr, #:upper16:.LC1247
	moveq	lr, r3
	movw	r1, #:lower16:.LC1248
	sub	r0, ip, #24
	movt	r1, #:upper16:.LC1248
	mov	r3, r5
	stm	sp, {r6, lr}
	bl	__dynamic_pr_debug
	b	.L16119
.L16132:
	.align	2
.L16131:
	.word	.LANCHOR8-2592
	.word	.LANCHOR5+400
	.fnend
	.size	gsdio_ch_notify, .-gsdio_ch_notify
	.section	.rodata.str1.4
	.align	2
.LC1249:
	.ascii	"<3>%s: port allocation failed\012\000"
	.align	2
.LC1250:
	.ascii	"%s: port:%pK port#%d sdio_name: %s\012\000"
	.text
	.align	2
	.global	gsdio_port_alloc
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_port_alloc, %function
gsdio_port_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	ip, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r7, r2
	mov	r9, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	ip, [ip, #8]
	.pad #8
	sub	sp, sp, #8
	cmp	ip, #0
	beq	.L16137
	mov	r0, ip
	mov	r2, #188
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16143
.L16134:
	mov	r8, #0
	str	r9, [r4]
	add	r2, r4, #20
	movw	r5, #:lower16:gsdio_rx_push
	add	r1, r4, #12
	str	r8, [r4, #4]
	ldr	r3, [r6]	@ unaligned
	movt	r5, #:upper16:gsdio_rx_push
	movw	lr, #:lower16:gsdio_tx_pull
	movw	r0, #:lower16:gsdio_ctrl_wq
	movw	ip, #:lower16:gsdio_open_work
	movt	lr, #:upper16:gsdio_tx_pull
	movt	ip, #:upper16:gsdio_open_work
	movt	r0, #:upper16:gsdio_ctrl_wq
	str	r3, [r4, #100]
	ldrh	r3, [r6, #4]	@ unaligned
	strh	r3, [r4, #104]	@ movhi
	mov	r3, #2560
	ldrb	r6, [r6, #6]	@ zero_extendqisi2
	str	r1, [r4, #12]
	str	r2, [r4, #20]
	str	r5, [r4, #40]
	add	r5, r4, #128
	strd	r2, [r4, #24]
	add	r2, r4, #32
	str	r1, [r4, #16]
	add	r1, r4, #64
	str	r2, [r4, #32]
	str	r2, [r4, #36]
	add	r2, r4, #52
	str	r2, [r4, #52]
	str	r2, [r4, #56]
	add	r2, r4, #84
	str	r5, [r4, #128]
	str	r5, [r4, #132]
	mov	r5, #104
	str	r3, [r4, #60]
	str	r1, [r4, #64]
	mul	r5, r5, r9
	str	r1, [r4, #68]
	mov	r1, r8
	str	lr, [r4, #72]
	str	r3, [r4, #80]
	str	r2, [r4, #84]
	str	r2, [r4, #88]
	mov	r2, r8
	str	r0, [r4, #92]
	add	r0, r4, #140
	strb	r6, [r4, #106]
	ldr	r6, .L16146
	str	r3, [r4, #124]
	str	ip, [r4, #136]
	bl	init_timer_key
	movw	r0, #:lower16:delayed_work_timer_fn
	movw	r3, #:lower16:.LANCHOR1
	ldrh	lr, [r6, #-14]
	movt	r0, #:upper16:delayed_work_timer_fn
	movt	r3, #:upper16:.LANCHOR1
	movw	r1, #:lower16:gsdio_ch_probe
	movw	r2, #:lower16:gsdio_ch_remove
	add	ip, r3, r5
	movt	r1, #:upper16:gsdio_ch_probe
	str	r0, [r4, #156]
	movt	r2, #:upper16:gsdio_ch_remove
	add	r0, r4, #124
	tst	lr, #4
	add	r5, ip, #28
	str	r0, [r4, #160]
	str	r4, [ip, #24]
	str	r7, [r4, #120]
	str	r1, [ip, #28]
	str	r2, [ip, #32]
	ldr	r3, [r7]
	str	r3, [ip, #48]
	str	r8, [ip, #56]
	bne	.L16144
.L16136:
	mov	r0, r5
	bl	platform_driver_register
	ldr	r3, .L16146+4
	ldrh	r0, [r3, #-6]
	tst	r0, #4
	ubfx	r0, r0, #2, #1
	bne	.L16145
.L16133:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16137:
	mov	r4, #16
	b	.L16134
.L16145:
	ldr	ip, [r4]
	movw	r1, #:lower16:.LC232
	sub	r0, r6, #8
	ldr	r2, .L16146+8
	mov	r3, r4
	movt	r1, #:upper16:.LC232
	str	ip, [sp]
	bl	__dynamic_pr_debug
	mov	r0, #0
	b	.L16133
.L16144:
	ldr	ip, [r7]
	movw	r1, #:lower16:.LC1250
	mov	r3, r4
	ldr	r2, .L16146+8
	movt	r1, #:upper16:.LC1250
	sub	r0, r6, #32
	str	ip, [sp, #4]
	ldr	ip, [r4]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L16136
.L16143:
	movw	r0, #:lower16:.LC1249
	ldr	r1, .L16146+8
	movt	r0, #:upper16:.LC1249
	bl	printk
	mvn	r0, #11
	b	.L16133
.L16147:
	.align	2
.L16146:
	.word	.LANCHOR8-2560
	.word	.LANCHOR8-2544
	.word	.LANCHOR5+416
	.fnend
	.size	gsdio_port_alloc, .-gsdio_port_alloc
	.section	.rodata.str1.4
	.align	2
.LC1251:
	.ascii	"<3>%s: failed to enable in ep w/ err:%d\012\000"
	.align	2
.LC1252:
	.ascii	"%s: sdio is already open, start io\012\000"
	.text
	.align	2
	.global	gsdio_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_connect, %function
gsdio_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r2, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r2]
	cmp	r1, r3
	bcs	.L16164
	cmp	r0, #0
	mov	r4, r0
	beq	.L16165
	mov	r3, #104
	mla	r1, r3, r1, r2
	ldr	r6, [r1, #24]
	add	r5, r6, #4
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:gsdio_ctrl_notify_modem
	mov	r1, r0
	str	r4, [r6, #96]
	movt	r3, #:upper16:gsdio_ctrl_notify_modem
	mov	r0, r5
	str	r3, [r4, #140]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L16166
	ldr	r3, [r4, #88]
	str	r6, [r3]
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L16167
	ldr	r3, [r4, #92]
	str	r6, [r3]
	ldr	r3, [r6, #108]
	cmp	r3, #0
	beq	.L16148
	ldr	r0, .L16169
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L16168
.L16155:
	mov	r0, r6
	bl	gsdio_start_io
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L16148
	mov	r0, r4
	ldr	r1, [r6, #172]
	blx	r3
.L16148:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16168:
	movw	r1, #:lower16:.LC1252
	ldr	r2, .L16169+4
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1252
	bl	__dynamic_pr_debug
	b	.L16155
.L16164:
	movw	r0, #:lower16:.LC174
	mov	r2, r1
	ldr	r1, .L16169+4
	movt	r0, #:upper16:.LC174
	mvn	r5, #21
	bl	printk
	b	.L16148
.L16167:
	movw	r0, #:lower16:.LC1251
	mov	r2, r5
	ldr	r1, .L16169+4
	movt	r0, #:upper16:.LC1251
	bl	printk
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	str	r3, [r6, #96]
	ldr	r2, [r4, #88]
	str	r3, [r2]
	b	.L16148
.L16166:
	movw	r0, #:lower16:.LC1251
	ldr	r1, .L16169+4
	mov	r2, r5
	movt	r0, #:upper16:.LC1251
	bl	printk
	mov	r3, #0
	str	r3, [r6, #96]
	b	.L16148
.L16165:
	movw	r0, #:lower16:.LC175
	ldr	r1, .L16169+4
	mvn	r5, #21
	movt	r0, #:upper16:.LC175
	bl	printk
	b	.L16148
.L16170:
	.align	2
.L16169:
	.word	.LANCHOR8-2512
	.word	.LANCHOR5+436
	.fnend
	.size	gsdio_connect, .-gsdio_connect
	.align	2
	.global	gsdio_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_disconnect, %function
gsdio_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2]
	cmp	r1, r3
	bcs	.L16187
	cmp	r0, #0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	beq	.L16188
	mov	r3, #104
	mov	r6, #0
	ldr	r0, [r2, #3324]
	mla	r1, r3, r1, r2
	ldr	r4, [r1, #24]
	add	r1, r4, #80
	add	r8, r4, #4
	str	r6, [r4, #176]
	bl	queue_work
	mov	r0, r8
	add	r10, r4, #12
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r8
	str	r6, [r4, #96]
	str	r6, [r4, #180]
	str	r6, [r4, #184]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #92]
	str	r6, [r3]
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #88]
	mov	r0, r8
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #12]
	mov	r9, r0
	ldr	r7, [r5, #92]
	cmp	r10, r6
	beq	.L16174
.L16175:
	mov	r0, r6
	sub	fp, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, fp
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #12]
	cmp	r10, r6
	bne	.L16175
	ldr	r7, [r5, #92]
.L16174:
	ldr	r6, [r4, #20]
	add	r10, r4, #20
	cmp	r10, r6
	beq	.L16179
.L16176:
	mov	r0, r6
	sub	fp, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, fp
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #20]
	cmp	r10, r6
	bne	.L16176
.L16179:
	ldr	r6, [r4, #52]
	add	r7, r4, #52
	ldr	r5, [r5, #88]
	cmp	r7, r6
	beq	.L16178
.L16177:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r10
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #52]
	cmp	r7, r6
	bne	.L16177
.L16178:
	mov	r3, #0
	mov	r1, r9
	mov	r0, r8
	str	r3, [r4, #8]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L16187:
	movw	r0, #:lower16:.LC174
	mov	r2, r1
	ldr	r1, .L16189
	movt	r0, #:upper16:.LC174
	b	printk
.L16188:
	ldr	r1, .L16189
	movw	r0, #:lower16:.LC175
	movt	r0, #:upper16:.LC175
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L16190:
	.align	2
.L16189:
	.word	.LANCHOR5+452
	.fnend
	.size	gsdio_disconnect, .-gsdio_disconnect
	.section	.rodata.str1.4
	.align	2
.LC1253:
	.ascii	"%s: gadget:(%pK) count:%d\012\000"
	.align	2
.LC1254:
	.ascii	"<3>%s: invalid number of ports count:%d max_ports:%"
	.ascii	"d\012\000"
	.align	2
.LC1255:
	.ascii	"<3>%s: unable to create workqueue gsdio_wq\012\000"
	.align	2
.LC1256:
	.ascii	"&sdio_ports[i].lock\000"
	.align	2
.LC1257:
	.ascii	"<3>%s: sdio logical port allocation failed\012\000"
	.align	2
.LC1258:
	.ascii	"usb_gsdio\000"
	.text
	.align	2
	.global	gsdio_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_setup, %function
gsdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L16212
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	.pad #16
	sub	sp, sp, #16
	ldrh	r3, [ip, #-6]
	tst	r3, #4
	bne	.L16207
.L16192:
	sub	r3, r6, #1
	cmp	r3, #1
	bhi	.L16208
	mov	r5, #0
	mvn	r2, #127
	mov	r1, #37
	mov	ip, #8
	movw	r0, #:lower16:.LC1208
	mov	r3, r5
	str	r5, [sp]
	movt	r0, #:upper16:.LC1208
	strb	r2, [sp, #9]
	mov	r2, #1
	strb	r1, [sp, #10]
	mov	r1, #10
	movw	r4, #:lower16:.LANCHOR1
	strb	r5, [sp, #11]
	movt	r4, #:upper16:.LANCHOR1
	strb	r5, [sp, #12]
	strb	ip, [sp, #13]
	strb	r5, [sp, #14]
	strb	r5, [sp, #15]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #3324]
	beq	.L16209
	movw	r1, #:lower16:.LC1256
	ldr	r2, .L16212+4
	add	r0, r4, #4
	movt	r1, #:upper16:.LC1256
	bl	__mutex_init
	add	r1, sp, #9
	ldr	r2, .L16212+8
	mov	r0, r5
	bl	gsdio_port_alloc
	ldr	r3, [r4]
	subs	r5, r0, #0
	add	r2, r3, #1
	str	r2, [r4]
	bne	.L16196
	cmp	r6, #2
	bne	.L16197
	movw	r1, #:lower16:.LC1256
	ldr	r2, .L16212+4
	add	r0, r4, #108
	movt	r1, #:upper16:.LC1256
	bl	__mutex_init
	add	r1, sp, #9
	ldr	r2, .L16212+12
	mov	r0, #1
	bl	gsdio_port_alloc
	ldr	r3, [r4]
	cmp	r0, #0
	add	r2, r3, #1
	str	r2, [r4]
	bne	.L16210
.L16197:
	movw	r0, #:lower16:.LC1258
	mov	r1, #0
	movt	r0, #:upper16:.LC1258
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L16191
	ldr	ip, .L16212+16
	movw	r0, #:lower16:.LC268
	mov	r3, #0
	movt	r0, #:upper16:.LC268
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
.L16191:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16207:
	movw	r1, #:lower16:.LC1253
	mov	r3, r0
	ldr	r2, .L16212+20
	sub	r0, ip, #24
	movt	r1, #:upper16:.LC1253
	str	r6, [sp]
	bl	__dynamic_pr_debug
	b	.L16192
.L16208:
	movw	r0, #:lower16:.LC1254
	ldr	r1, .L16212+20
	mov	r2, r6
	movt	r0, #:upper16:.LC1254
	mov	r3, #2
	mvn	r5, #21
	bl	printk
	b	.L16191
.L16210:
	mov	r5, r0
.L16196:
	movw	r0, #:lower16:.LC1257
	ldr	r1, .L16212+20
	mov	r6, #0
	movt	r0, #:upper16:.LC1257
	str	r3, [r4]
	bl	printk
.L16198:
	ldr	r3, [r4]
	cmp	r3, r6
	bls	.L16211
	mov	r0, r6
	add	r6, r6, #1
	bl	gsdio_port_free
	b	.L16198
.L16209:
	movw	r0, #:lower16:.LC1255
	ldr	r1, .L16212+20
	mvn	r5, #11
	movt	r0, #:upper16:.LC1255
	bl	printk
	b	.L16191
.L16211:
	ldr	r0, [r4, #3324]
	bl	destroy_workqueue
	b	.L16191
.L16213:
	.align	2
.L16212:
	.word	.LANCHOR8-2496
	.word	.LANCHOR1+4044
	.word	.LANCHOR7-1612
	.word	.LANCHOR7-1600
	.word	.LANCHOR5+484
	.word	.LANCHOR5+472
	.fnend
	.size	gsdio_setup, .-gsdio_setup
	.section	.rodata.str1.4
	.align	2
.LC1259:
	.ascii	"%s: gserial:%pK portno:%u\012\000"
	.align	2
.LC1260:
	.ascii	"<3>%s: Invalid port no#%d\000"
	.text
	.align	2
	.global	gsmd_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_connect, %function
gsmd_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L16230
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r5, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r3, [r2, #-14]
	tst	r3, #4
	bne	.L16225
.L16215:
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	ldr	r3, [r8, #212]
	cmp	r5, r3
	bcs	.L16226
	cmp	r4, #0
	beq	.L16227
	mov	r1, #104
	mov	r7, #0
	mla	r5, r1, r5, r8
	ldr	r6, [r5, #236]
	add	r5, r6, #4
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:gsmd_notify_modem
	mov	r1, r0
	str	r4, [r6, #68]
	movt	r3, #:upper16:gsmd_notify_modem
	mov	r0, r5
	str	r3, [r4, #140]
	str	r7, [r6, #164]
	str	r7, [r6, #168]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L16228
	ldr	r3, [r4, #88]
	str	r6, [r3]
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L16229
	ldr	r3, [r4, #92]
	ldr	r4, [r8, #3328]
	str	r6, [r3]
	bl	msecs_to_jiffies
	mov	r2, r0
	add	r1, r6, #76
	mov	r0, r4
	bl	queue_delayed_work
.L16214:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16225:
	movw	r1, #:lower16:.LC1259
	sub	r0, r2, #32
	ldr	r2, .L16230+4
	movt	r1, #:upper16:.LC1259
	mov	r3, r4
	str	r5, [sp]
	bl	__dynamic_pr_debug
	b	.L16215
.L16226:
	movw	r0, #:lower16:.LC1260
	mov	r2, r5
	ldr	r1, .L16230+4
	movt	r0, #:upper16:.LC1260
	mvn	r5, #21
	bl	printk
	b	.L16214
.L16229:
	movw	r0, #:lower16:.LC386
	ldr	r1, .L16230+4
	movt	r0, #:upper16:.LC386
	ldr	r2, [r4, #92]
	bl	printk
	str	r7, [r6, #68]
	ldr	r3, [r4, #88]
	str	r7, [r3]
	b	.L16214
.L16228:
	movw	r0, #:lower16:.LC385
	ldr	r1, .L16230+4
	movt	r0, #:upper16:.LC385
	ldr	r2, [r4, #88]
	bl	printk
	str	r7, [r6, #68]
	b	.L16214
.L16227:
	movw	r0, #:lower16:.LC175
	ldr	r1, .L16230+4
	mvn	r5, #21
	movt	r0, #:upper16:.LC175
	bl	printk
	b	.L16214
.L16231:
	.align	2
.L16230:
	.word	.LANCHOR8-2464
	.word	.LANCHOR5+592
	.fnend
	.size	gsmd_connect, .-gsmd_connect
	.align	2
	.global	gsmd_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_disconnect, %function
gsmd_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L16258
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r4, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r2, #-6]
	.pad #20
	sub	sp, sp, #20
	tst	r3, #4
	bne	.L16254
.L16233:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #212]
	cmp	r4, r3
	bcs	.L16255
	cmp	r5, #0
	beq	.L16256
	mov	r1, #104
	mov	r6, #0
	mla	r4, r1, r4, r7
	ldr	r4, [r4, #236]
	add	r8, r4, #4
	add	fp, r4, #12
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r8
	str	r6, [r4, #68]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #92]
	str	r6, [r3]
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #88]
	mov	r0, r8
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #12]
	mov	r9, r0
	ldr	r10, [r5, #92]
	cmp	fp, r6
	beq	.L16236
.L16237:
	sub	r1, r6, #36
	mov	r0, r6
	str	r1, [sp, #12]
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r1, [sp, #12]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #12]
	cmp	fp, r6
	bne	.L16237
	ldr	r10, [r5, #92]
.L16236:
	ldr	r6, [r4, #20]
	add	fp, r4, #20
	cmp	fp, r6
	beq	.L16241
.L16238:
	sub	r1, r6, #36
	mov	r0, r6
	str	r1, [sp, #12]
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r1, [sp, #12]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #20]
	cmp	fp, r6
	bne	.L16238
.L16241:
	ldr	r6, [r4, #44]
	add	r10, r4, #44
	ldr	r5, [r5, #88]
	cmp	r10, r6
	beq	.L16240
.L16239:
	mov	r0, r6
	sub	fp, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, fp
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #44]
	cmp	r10, r6
	bne	.L16239
.L16240:
	mov	r5, #0
	mov	r1, r9
	mov	r0, r8
	str	r5, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #72]
	mov	r0, r5
	add	r1, r1, #8
	bl	_test_and_clear_bit
	cmp	r0, r5
	bne	.L16257
.L16243:
	ldr	r3, [r4, #72]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L16232
	ldr	r0, [r7, #3328]
	add	r1, r4, #124
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work
.L16232:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16257:
	ldr	r3, [r4, #72]
	mov	r1, r5
	mvn	r2, #0
	str	r5, [r4, #156]
	ldr	r0, [r3]
	bl	smd_tiocmset
	b	.L16243
.L16254:
	movw	r1, #:lower16:.LC1259
	sub	r0, r2, #24
	ldr	r2, .L16258+4
	movt	r1, #:upper16:.LC1259
	mov	r3, r5
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L16233
.L16255:
	ldr	r1, .L16258+4
	movw	r0, #:lower16:.LC174
	mov	r2, r4
	movt	r0, #:upper16:.LC174
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L16256:
	ldr	r1, .L16258+4
	movw	r0, #:lower16:.LC175
	movt	r0, #:upper16:.LC175
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L16259:
	.align	2
.L16258:
	.word	.LANCHOR8-2448
	.word	.LANCHOR5+608
	.fnend
	.size	gsmd_disconnect, .-gsmd_disconnect
	.section	.rodata.str1.4
	.align	2
.LC1261:
	.ascii	"%s: g:%pK count: %d\012\000"
	.align	2
.LC1262:
	.ascii	"<3>%s: Invalid num of ports count:%d gadget:%pK\012"
	.ascii	"\000"
	.align	2
.LC1263:
	.ascii	"k_gsmd\000"
	.align	2
.LC1264:
	.ascii	"<3>%s: Unable to create workqueue gsmd_wq\012\000"
	.align	2
.LC1265:
	.ascii	"&smd_ports[i].lock\000"
	.align	2
.LC1266:
	.ascii	"<3>%s: Unable to alloc port:%d\012\000"
	.align	2
.LC1267:
	.ascii	"%s: port:%pK portno:%d\012\000"
	.align	2
.LC1268:
	.ascii	"usb_gsmd\000"
	.text
	.align	2
	.global	gsmd_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_setup, %function
gsmd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16287
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r3, #-14]
	.pad #28
	sub	sp, sp, #28
	str	r1, [sp, #8]
	tst	r3, #4
	bne	.L16281
.L16261:
	ldr	r3, [sp, #8]
	sub	r3, r3, #1
	cmp	r3, #1
	bhi	.L16282
	mov	r6, #0
	movw	r0, #:lower16:.LC1263
	mov	r3, r6
	movt	r0, #:upper16:.LC1263
	mov	r2, #1
	mov	r1, #10
	str	r6, [sp]
	bl	__alloc_workqueue_key
	movw	r9, #:lower16:.LANCHOR1
	cmp	r0, r6
	movt	r9, #:upper16:.LANCHOR1
	str	r0, [r9, #3328]
	beq	.L16283
	ldr	r10, .L16287+4
	movw	fp, #:lower16:kmalloc_caches
	movw	r3, #:lower16:.LC1265
	movw	r2, #:lower16:gsmd_rx_push
	add	r5, r9, #216
	movt	r3, #:upper16:.LC1265
	movt	r2, #:upper16:gsmd_rx_push
	movt	fp, #:upper16:kmalloc_caches
	str	r3, [sp, #12]
	str	r2, [sp, #16]
	str	r5, [sp, #20]
.L16268:
	ldr	r2, .L16287+8
	mov	r0, r5
	mov	r7, #0
	ldr	r1, [sp, #12]
	mov	r8, #2560
	mov	r4, #16
	bl	__mutex_init
	ldr	r0, [fp, #8]
	mov	r2, #172
	movw	r1, #32976
	ldr	r3, [r9, #212]
	cmp	r0, r7
	add	r3, r3, #1
	str	r3, [r9, #212]
	beq	.L16265
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16284
.L16265:
	ldr	ip, [sp, #16]
	add	r2, r4, #12
	add	r0, r4, #20
	movw	r1, #:lower16:gsmd_tx_pull
	movw	r3, #:lower16:gsmd_connect_work
	str	r6, [r4]
	add	lr, r4, #32
	movt	r3, #:upper16:gsmd_connect_work
	str	r7, [r4, #4]
	movt	r1, #:upper16:gsmd_tx_pull
	str	r2, [r4, #12]
	str	r2, [r4, #16]
	add	r2, r4, #56
	str	r0, [r4, #20]
	str	r0, [r4, #24]
	add	r0, r4, #80
	str	r8, [r4, #28]
	str	ip, [r4, #40]
	add	ip, r4, #44
	str	lr, [r4, #32]
	str	lr, [r4, #36]
	str	ip, [r4, #44]
	str	ip, [r4, #48]
	str	r8, [r4, #52]
	str	r2, [r4, #56]
	str	r2, [r4, #60]
	mov	r2, r7
	str	r1, [r4, #64]
	mov	r1, r7
	str	r10, [r4, #72]
	add	r10, r10, #12
	str	r8, [r4, #76]
	str	r0, [r4, #80]
	str	r0, [r4, #84]
	add	r0, r4, #92
	str	r3, [r4, #88]
	bl	init_timer_key
	movw	r1, #:lower16:delayed_work_timer_fn
	movw	r0, #:lower16:gsmd_disconnect_work
	str	r8, [r4, #124]
	movt	r1, #:upper16:delayed_work_timer_fn
	movw	r2, #:lower16:gsmd_ch_probe
	movw	r3, #:lower16:gsmd_ch_remove
	movt	r0, #:upper16:gsmd_disconnect_work
	movt	r2, #:upper16:gsmd_ch_probe
	movt	r3, #:upper16:gsmd_ch_remove
	str	r1, [r4, #108]
	add	ip, r4, #76
	add	r1, r4, #128
	str	ip, [r4, #112]
	str	r1, [r4, #128]
	str	r1, [r4, #132]
	str	r0, [r4, #136]
	add	r0, r5, #24
	str	r4, [r5, #20]
	strd	r2, [r5, #24]
	ldr	r3, [r4, #72]
	add	r5, r5, #104
	ldr	r3, [r3, #4]
	str	r3, [r5, #-60]
	str	r7, [r5, #-52]
	bl	platform_driver_register
	ldr	r3, .L16287+12
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L16285
.L16267:
	ldr	r3, [sp, #8]
	add	r6, r6, #1
	cmp	r6, r3
	bne	.L16268
	movw	r0, #:lower16:.LC1268
	mov	r1, #0
	movt	r0, #:upper16:.LC1268
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L16272
	ldr	ip, .L16287+16
	movw	r0, #:lower16:.LC268
	mov	r3, #0
	movt	r0, #:upper16:.LC268
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	mov	r0, #0
.L16260:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16285:
	ldr	r0, .L16287
	movw	r1, #:lower16:.LC1267
	mov	r3, r4
	ldr	r2, .L16287+20
	movt	r1, #:upper16:.LC1267
	str	r6, [sp]
	sub	r0, r0, #8
	bl	__dynamic_pr_debug
	b	.L16267
.L16272:
	mov	r0, #0
	b	.L16260
.L16281:
	mov	r3, r0
	ldr	r0, .L16287
	mov	ip, r1
	movw	r1, #:lower16:.LC1261
	ldr	r2, .L16287+24
	movt	r1, #:upper16:.LC1261
	str	ip, [sp]
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L16261
.L16284:
	ldr	r3, [r9, #212]
	movw	r0, #:lower16:.LC1266
	mov	r2, r6
	ldr	r1, .L16287+24
	movt	r0, #:upper16:.LC1266
	sub	r3, r3, #1
	str	r3, [r9, #212]
	bl	printk
	ldr	r5, [sp, #20]
.L16266:
	ldr	r3, [r9, #212]
	cmp	r3, r4
	bls	.L16286
	ldr	r0, [r5, #20]
	cmp	r0, #0
	bne	.L16269
	bl	kfree
.L16269:
	add	r4, r4, #1
	add	r5, r5, #104
	b	.L16266
.L16283:
	movw	r0, #:lower16:.LC1264
	ldr	r1, .L16287+24
	movt	r0, #:upper16:.LC1264
	bl	printk
	mvn	r0, #11
	b	.L16260
.L16282:
	movw	r0, #:lower16:.LC1262
	ldr	r1, .L16287+24
	mov	r3, r4
	movt	r0, #:upper16:.LC1262
	ldr	r2, [sp, #8]
	bl	printk
	mvn	r0, #21
	b	.L16260
.L16286:
	ldr	r0, [r9, #3328]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L16260
.L16288:
	.align	2
.L16287:
	.word	.LANCHOR8-2416
	.word	.LANCHOR7-1588
	.word	.LANCHOR1+4044
	.word	.LANCHOR8-2406
	.word	.LANCHOR5+652
	.word	.LANCHOR5+636
	.word	.LANCHOR5+624
	.fnend
	.size	gsmd_setup, .-gsmd_setup
	.align	2
	.global	gsmd_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_cleanup, %function
gsmd_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gsmd_cleanup, .-gsmd_cleanup
	.section	.rodata.str1.4
	.align	2
.LC1269:
	.ascii	"%s: p:%pK#%d d:%pK skb_len:%d\012\000"
	.align	2
.LC1270:
	.ascii	"<3>%s: tx pkt dropped: tx_drop_cnt:%u\012\000"
	.text
	.align	2
	.global	gbam_data_recv_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_recv_cb, %function
gbam_data_recv_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	subs	r5, r1, #0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	.pad #20
	sub	sp, sp, #20
	beq	.L16290
	mov	r4, r0
	ldr	r0, .L16306
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L16303
.L16292:
	add	r7, r4, #8
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L16295
	movw	r3, #:lower16:.LANCHOR7
	ldr	r2, [r4, #44]
	movt	r3, #:upper16:.LANCHOR7
	ldr	r3, [r3, #-1564]
	cmp	r2, r3
	bhi	.L16304
	ldr	r3, [r4, #40]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r7
	strd	r2, [r5]
	str	r5, [r3]
	ldr	r3, [r4, #44]
	str	r5, [r4, #40]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	gbam_write_data_tohost
.L16304:
	ldr	r3, [r4, #244]
	ldr	r0, .L16306+4
	add	r3, r3, #1
	str	r3, [r4, #244]
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L16305
.L16295:
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	dev_kfree_skb_any
.L16290:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L16303:
	ldr	r2, [r4]
	add	r3, r4, #20
	movw	r1, #:lower16:.LC1269
	ldr	ip, [r5, #80]
	movt	r1, #:upper16:.LC1269
	sub	r0, r0, #32
	strd	r2, [sp]
	ldr	r2, .L16306+4
	mov	r3, r4
	str	ip, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L16292
.L16305:
	movw	r0, #:lower16:.LC1270
	ldr	r1, .L16306+4
	movt	r0, #:upper16:.LC1270
	ldr	r2, [r4, #244]
	bl	printk
	b	.L16295
.L16307:
	.align	2
.L16306:
	.word	.LANCHOR8-2368
	.word	.LANCHOR5+760
	.fnend
	.size	gbam_data_recv_cb, .-gbam_data_recv_cb
	.section	.rodata.str1.4
	.align	2
.LC1271:
	.ascii	"%s: port:%pK d:%pK tom:%lu pbam:%u, pno:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_notify, %function
gbam_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	ip, r1, #0
	beq	.L16309
	cmp	ip, #1
	bxne	lr
	cmp	r2, #0
	bxeq	lr
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	mov	r0, r2
	strd	r6, [sp, #8]
	add	r6, r4, #4
	str	lr, [sp, #16]
	.pad #20
	sub	sp, sp, #20
	bl	dev_kfree_skb_any
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r2, .L16324
	mov	r5, r0
	ldr	r3, [r4, #240]
	ldrh	r1, [r2, #-6]
	sub	r3, r3, #1
	str	r3, [r4, #240]
	tst	r1, #4
	bne	.L16323
.L16312:
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #80
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3460]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	queue_work
.L16309:
	mov	r1, r2
	b	gbam_data_recv_cb
.L16323:
	ldr	r7, [r4]
	add	ip, r4, #20
	movw	r1, #:lower16:.LC1271
	ldr	lr, [r4, #260]
	sub	r0, r2, #24
	movt	r1, #:upper16:.LC1271
	ldr	r2, .L16324+4
	stm	sp, {ip, lr}
	str	r3, [sp, #8]
	mov	r3, r4
	str	r7, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L16312
.L16325:
	.align	2
.L16324:
	.word	.LANCHOR8-2352
	.word	.LANCHOR5+780
	.fnend
	.size	gbam_notify, .-gbam_notify
	.align	2
	.global	gbam_data_write_done
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_done, %function
gbam_data_write_done:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bxeq	lr
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	mov	r0, r1
	strd	r6, [sp, #8]
	add	r6, r4, #4
	str	lr, [sp, #16]
	.pad #20
	sub	sp, sp, #20
	bl	dev_kfree_skb_any
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r2, .L16336
	mov	r5, r0
	ldr	r3, [r4, #240]
	ldrh	r1, [r2, #-6]
	sub	r3, r3, #1
	str	r3, [r4, #240]
	tst	r1, #4
	bne	.L16335
.L16328:
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #80
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3460]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	queue_work
.L16335:
	ldr	r7, [r4]
	add	ip, r4, #20
	movw	r1, #:lower16:.LC1271
	ldr	lr, [r4, #260]
	sub	r0, r2, #24
	movt	r1, #:upper16:.LC1271
	ldr	r2, .L16336+4
	stm	sp, {ip, lr}
	str	r3, [sp, #8]
	mov	r3, r4
	str	r7, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L16328
.L16337:
	.align	2
.L16336:
	.word	.LANCHOR8-2352
	.word	.LANCHOR5+780
	.fnend
	.size	gbam_data_write_done, .-gbam_data_write_done
	.section	.rodata.str1.4
	.align	2
.LC1272:
	.ascii	"%s: grmnet:%pK port#%d\012\000"
	.align	2
.LC1273:
	.ascii	"<3>%s: invalid bam portno#%d\012\000"
	.align	2
.LC1274:
	.ascii	"<3>%s: grmnet port is null\012\000"
	.align	2
.LC1275:
	.ascii	"<3>%s: usb_bam_client_ready failed\012\000"
	.text
	.align	2
	.global	gbam_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_disconnect, %function
gbam_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L16379
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #24]
	ldrh	r3, [ip, #-14]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	tst	r3, #4
	bne	.L16373
.L16339:
	cmp	r5, #5
	beq	.L16374
	sub	r3, r5, #6
	cmp	r3, #1
	bhi	.L16342
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #4044]
	cmp	r8, r3
	bge	.L16375
	cmp	r4, #0
	beq	.L16348
.L16349:
	add	r3, r6, r8, lsl #2
	ldr	r7, [r3, #3672]
	str	r4, [r7, #16]
.L16351:
	add	r10, r7, #4
	mov	r9, #0
	mov	r0, r10
	add	fp, r7, #8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, fp
	str	r1, [sp, #12]
	bl	_raw_spin_lock
	mov	r0, fp
	str	r9, [r7, #12]
	str	r9, [r6, #3456]
	bl	_raw_spin_unlock
	mov	r0, r10
	ldr	r1, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #84]
	bic	r2, r5, #2
	cmp	r2, #5
	str	r9, [r3]
	ldr	r3, [r4, #88]
	str	r9, [r3]
	beq	.L16376
	cmp	r8, #0
	cmpeq	r5, #6
	beq	.L16377
.L16338:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16342:
	cmp	r4, #0
	movwne	r6, #:lower16:.LANCHOR1
	movtne	r6, #:upper16:.LANCHOR1
	bne	.L16349
.L16348:
	ldr	r1, .L16379+4
	movw	r0, #:lower16:.LC1274
	movt	r0, #:upper16:.LC1274
.L16372:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L16374:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #424]
	cmp	r8, r3
	bge	.L16378
	cmp	r4, #0
	beq	.L16348
	mov	r3, #84
	mla	r3, r3, r8, r6
	ldr	r7, [r3, #428]
	mov	r0, r7
	str	r4, [r7, #16]
	bl	gbam_free_buffers
	b	.L16351
.L16376:
	ldr	r0, [r6, #3460]
	add	r1, r7, #300
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work
.L16373:
	movw	r1, #:lower16:.LC1272
	ldr	r2, .L16379+4
	sub	r0, ip, #32
	movt	r1, #:upper16:.LC1272
	mov	r3, r4
	str	r8, [sp]
	bl	__dynamic_pr_debug
	b	.L16339
.L16377:
	mov	r0, r9
	bl	usb_bam_client_ready
	cmp	r0, #0
	beq	.L16338
	movw	r0, #:lower16:.LC1275
	ldr	r1, .L16379+4
	movt	r0, #:upper16:.LC1275
	b	.L16372
.L16375:
	ldr	r1, .L16379+4
	movw	r0, #:lower16:.LC650
	mov	r2, r8
	movt	r0, #:upper16:.LC650
.L16371:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L16378:
	movw	r0, #:lower16:.LC1273
	ldr	r1, .L16379+4
	mov	r2, r8
	movt	r0, #:upper16:.LC1273
	b	.L16371
.L16380:
	.align	2
.L16379:
	.word	.LANCHOR8-2320
	.word	.LANCHOR5+804
	.fnend
	.size	gbam_disconnect, .-gbam_disconnect
	.align	2
	.global	gbam_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_connect, %function
gbam_connect:
	.fnstart
	@ args = 4, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L16419
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldrb	lr, [sp, #56]	@ zero_extendqisi2
	str	r3, [sp, #8]
	ldrh	r3, [ip, #-6]
	str	lr, [sp, #12]
	tst	r3, #4
	bne	.L16414
.L16382:
	cmp	r7, #5
	beq	.L16415
	sub	r3, r7, #6
	cmp	r3, #1
	bhi	.L16386
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	ldr	r3, [r8, #4044]
	cmp	r4, r3
	bge	.L16413
	cmp	r6, #0
	beq	.L16393
.L16394:
	add	r4, r8, r4, lsl #2
	ldr	r4, [r4, #3672]
.L16396:
	ldr	r0, [r6, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L16416
	ldr	r3, [r6, #84]
	str	r4, [r3]
	ldr	r0, [r6, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L16417
	ldr	r1, [r6, #88]
	add	r9, r4, #4
	add	r10, r4, #8
	mov	r0, r9
	str	r4, [r1]
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	mov	r0, r10
	bl	_raw_spin_lock
	cmp	r7, #5
	mov	r0, r10
	str	r6, [r4, #12]
	beq	.L16418
	bl	_raw_spin_unlock
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #6
	bne	.L16392
	ldr	r3, [sp, #8]
	str	r6, [r4, #16]
	strb	r3, [r4, #128]
	ldr	r3, [sp, #12]
	strb	r3, [r4, #129]
.L16391:
	add	r1, r4, #284
	str	r7, [r4, #132]
	ldr	r0, [r8, #3460]
	bl	queue_work
.L16381:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16386:
	cmp	r6, #0
	movwne	r8, #:lower16:.LANCHOR1
	movtne	r8, #:upper16:.LANCHOR1
	bne	.L16394
.L16393:
	movw	r0, #:lower16:.LC1274
	ldr	r1, .L16419+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC1274
	bl	printk
	b	.L16381
.L16415:
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	ldr	r3, [r8, #424]
	cmp	r4, r3
	bge	.L16413
	cmp	r6, #0
	beq	.L16393
	mov	r1, #84
	mla	r4, r1, r4, r8
	ldr	r4, [r4, #428]
	b	.L16396
.L16418:
	str	r5, [r4, #240]
	str	r5, [r4, #244]
	str	r5, [r4, #248]
	str	r5, [r4, #260]
	str	r5, [r4, #264]
	str	r5, [r4, #268]
	str	r5, [r4, #272]
	str	r5, [r4, #276]
	str	r5, [r4, #280]
	bl	_raw_spin_unlock
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L16391
.L16392:
	cmp	r7, #7
	bne	.L16391
	ldr	r1, [sp, #8]
	add	r2, r4, #120
	add	r3, r4, #124
	str	r6, [r4, #16]
	strb	r1, [r4, #136]
	ldr	r1, [sp, #12]
	strd	r2, [r4, #140]
	strb	r1, [r4, #137]
	b	.L16391
.L16414:
	movw	r1, #:lower16:.LC1272
	ldr	r2, .L16419+4
	sub	r0, ip, #24
	movt	r1, #:upper16:.LC1272
	mov	r3, r6
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L16382
.L16417:
	movw	r0, #:lower16:.LC386
	ldr	r1, .L16419+4
	movt	r0, #:upper16:.LC386
	ldr	r2, [r6, #88]
	bl	printk
	ldr	r3, [r6, #84]
	mov	r2, #0
	str	r2, [r3]
	b	.L16381
.L16413:
	movw	r0, #:lower16:.LC174
	ldr	r1, .L16419+4
	mov	r2, r4
	movt	r0, #:upper16:.LC174
	mvn	r5, #18
	bl	printk
	b	.L16381
.L16416:
	movw	r0, #:lower16:.LC385
	ldr	r1, .L16419+4
	movt	r0, #:upper16:.LC385
	ldr	r2, [r6, #84]
	bl	printk
	b	.L16381
.L16420:
	.align	2
.L16419:
	.word	.LANCHOR8-2304
	.word	.LANCHOR5+820
	.fnend
	.size	gbam_connect, .-gbam_connect
	.section	.rodata.str1.4
	.align	2
.LC1276:
	.ascii	"%s: requested BAM ports:%d and BAM2BAM ports:%d\012"
	.ascii	"\000"
	.align	2
.LC1277:
	.ascii	"<3>%s: Invalid num of ports count:%d,%d\012\000"
	.align	2
.LC1278:
	.ascii	"k_gbam\000"
	.align	2
.LC1279:
	.ascii	"<3>%s: Unable to create workqueue gbam_wq\012\000"
	.align	2
.LC1280:
	.ascii	"usb_rmnet\000"
	.text
	.align	2
	.global	gbam_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_setup, %function
gbam_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16473
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r3, #-14]
	.pad #20
	sub	sp, sp, #20
	str	r1, [sp, #8]
	tst	r3, #4
	bne	.L16468
.L16422:
	ldr	r3, [sp, #8]
	orrs	r2, r4, r3
	beq	.L16423
	cmp	r3, #3
	cmpls	r4, #1
	movhi	r3, #1
	movls	r3, #0
	bhi	.L16423
	movw	r0, #:lower16:.LC1278
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC1278
	mov	r1, #10
	bl	__alloc_workqueue_key
	movw	fp, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	fp, #:upper16:.LANCHOR1
	str	r0, [fp, #3460]
	beq	.L16426
	cmp	r4, #0
	beq	.L16428
	movw	r4, #:lower16:kmalloc_caches
	ldr	r3, [fp, #424]
	movt	r4, #:upper16:kmalloc_caches
	ldr	r0, [r4, #36]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [fp, #424]
	beq	.L16443
	mov	r2, #348
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16469
.L16429:
	movw	r8, #:lower16:gbam_data_write_tobam
	movw	r7, #:lower16:gbam_write_data_tohost_w
	ldr	r0, .L16473+4
	movt	r8, #:upper16:gbam_data_write_tobam
	movt	r7, #:upper16:gbam_write_data_tohost_w
	str	r4, [r4, #76]
	movw	r6, #:lower16:gbam_connect_work
	movw	lr, #:lower16:gbam_disconnect_work
	str	r8, [r4, #92]
	add	r8, r4, #28
	movw	ip, #:lower16:gbam_data_ch_probe
	movw	r1, #:lower16:gbam_data_ch_remove
	movw	r2, #:lower16:.LC361
	str	r8, [r4, #28]
	mov	r5, #0
	mov	r3, #2560
	str	r7, [r4, #108]
	add	r7, r4, #84
	movt	lr, #:upper16:gbam_disconnect_work
	str	r8, [r4, #32]
	add	r8, r4, #52
	movt	ip, #:upper16:gbam_data_ch_probe
	movt	r1, #:upper16:gbam_data_ch_remove
	movt	r2, #:upper16:.LC361
	str	r5, [r4]
	str	r7, [r4, #84]
	add	r10, r4, #288
	add	r9, r4, #304
	str	r8, [r4, #52]
	movt	r6, #:upper16:gbam_connect_work
	str	r8, [r4, #56]
	add	r8, r4, #100
	str	r7, [r4, #88]
	add	r7, r4, #36
	str	r5, [r4, #4]
	str	r8, [r4, #100]
	str	r7, [r4, #36]
	str	r7, [r4, #40]
	add	r7, r4, #60
	str	r8, [r4, #104]
	mov	r8, #8
	str	r5, [r4, #8]
	str	r5, [r4, #44]
	str	r5, [r4, #48]
	str	r7, [r4, #60]
	str	r7, [r4, #64]
	str	r5, [r4, #68]
	str	r5, [r4, #72]
	str	r3, [r4, #80]
	str	r3, [r4, #96]
	str	r3, [r4, #284]
	str	r10, [r4, #288]
	str	r10, [r4, #292]
	str	r6, [r4, #296]
	str	r3, [r4, #300]
	str	r9, [r4, #304]
	str	r9, [r4, #308]
	str	lr, [r4, #312]
	str	r8, [r4, #24]
	str	r4, [fp, #428]
	str	ip, [fp, #432]
	str	r1, [fp, #436]
	str	r2, [fp, #452]
	str	r5, [fp, #460]
	bl	platform_driver_register
	ldr	r3, .L16473+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L16470
.L16428:
	ldr	r3, [sp, #8]
	cmp	r3, #0
	beq	.L16432
	ldr	r9, .L16473+12
	movw	r4, #:lower16:kmalloc_caches
	movw	r8, #:lower16:gbam2bam_connect_work
	movw	r7, #:lower16:gbam2bam_disconnect_work
	movw	r6, #:lower16:gbam2bam_suspend_work
	movt	r6, #:upper16:gbam2bam_suspend_work
	movt	r4, #:upper16:kmalloc_caches
	movt	r8, #:upper16:gbam2bam_connect_work
	movt	r7, #:upper16:gbam2bam_disconnect_work
	mov	r5, #0
	str	r6, [sp, #12]
.L16437:
	ldr	r0, [r4, #36]
	mov	r2, #348
	movw	r1, #32976
	ldr	ip, [fp, #4044]
	mov	r3, #16
	cmp	r0, #0
	add	ip, ip, #1
	str	ip, [fp, #4044]
	beq	.L16433
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L16434
.L16433:
	ldr	r6, .L16473+16
	mov	ip, #0
	str	r5, [r3]
	add	r1, r3, #288
	movw	r0, #:lower16:gbam2bam_resume_work
	str	ip, [r3, #4]
	mov	r2, #2560
	add	lr, r3, #304
	str	ip, [r3, #8]
	add	ip, r3, #320
	movt	r0, #:upper16:gbam2bam_resume_work
	ldrh	r10, [r6]
	str	r3, [r3, #76]
	str	r1, [r3, #288]
	str	ip, [r3, #320]
	str	ip, [r3, #324]
	ldr	ip, [sp, #12]
	tst	r10, #4
	str	r1, [r3, #292]
	add	r1, r3, #336
	str	r2, [r3, #284]
	str	r8, [r3, #296]
	str	r2, [r3, #300]
	str	lr, [r3, #304]
	str	lr, [r3, #308]
	str	r7, [r3, #312]
	str	r2, [r3, #316]
	str	ip, [r3, #328]
	str	r2, [r3, #332]
	str	r1, [r3, #336]
	str	r1, [r3, #340]
	str	r0, [r3, #344]
	str	r3, [r9], #4
	bne	.L16471
.L16435:
	ldr	r3, [sp, #8]
	add	r5, r5, #1
	cmp	r5, r3
	bne	.L16437
.L16432:
	movw	r0, #:lower16:.LC1280
	mov	r1, #0
	movt	r0, #:upper16:.LC1280
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [fp, #3360]
	beq	.L16439
	cmn	r0, #4096
	bhi	.L16439
	ldr	ip, .L16473+20
	movw	r0, #:lower16:.LC268
	mov	r3, #0
	movt	r0, #:upper16:.LC268
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L16440
	cmn	r0, #4096
	bhi	.L16440
.L16439:
	mov	r0, #0
.L16421:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16443:
	mov	r4, #16
	b	.L16429
.L16471:
	movw	r1, #:lower16:.LC1267
	ldr	r2, .L16473+24
	sub	r0, r6, #18
	movt	r1, #:upper16:.LC1267
	str	r5, [sp]
	bl	__dynamic_pr_debug
	b	.L16435
.L16470:
	ldr	r2, .L16473
	movw	r1, #:lower16:.LC1267
	mov	r3, r4
	movt	r1, #:upper16:.LC1267
	str	r5, [sp]
	sub	r0, r2, #8
	ldr	r2, .L16473+28
	bl	__dynamic_pr_debug
	b	.L16428
.L16440:
	ldr	r0, [fp, #3360]
	bl	debugfs_remove
	mov	r3, #0
	mov	r0, r3
	str	r3, [fp, #3360]
	b	.L16421
.L16468:
	mov	r3, r0
	ldr	r0, .L16473
	mov	ip, r1
	movw	r1, #:lower16:.LC1276
	ldr	r2, .L16473+32
	movt	r1, #:upper16:.LC1276
	str	ip, [sp]
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L16422
.L16434:
	ldr	r3, [fp, #4044]
	movw	r0, #:lower16:.LC1266
	mov	r2, r5
	ldr	r1, .L16473+32
	movt	r0, #:upper16:.LC1266
	sub	r3, r3, #1
	str	r3, [fp, #4044]
	bl	printk
.L16436:
	ldr	r3, [fp, #424]
	cmp	r3, #0
	ble	.L16430
	ldr	r0, [fp, #428]
	cmp	r0, #0
	beq	.L16430
	bl	kfree
	ldr	r0, .L16473+4
	bl	platform_driver_unregister
.L16430:
	ldr	r5, .L16473+12
	mov	r4, #0
.L16441:
	ldr	r3, [fp, #4044]
	cmp	r3, r4
	ble	.L16472
	ldr	r0, [r5], #4
	add	r4, r4, #1
	bl	kfree
	b	.L16441
.L16469:
	ldr	r3, [fp, #424]
	movw	r0, #:lower16:.LC1266
	mov	r2, r4
	ldr	r1, .L16473+32
	movt	r0, #:upper16:.LC1266
	sub	r3, r3, #1
	str	r3, [fp, #424]
	bl	printk
	b	.L16436
.L16423:
	movw	r0, #:lower16:.LC1277
	ldr	r1, .L16473+32
	mov	r2, r4
	movt	r0, #:upper16:.LC1277
	ldr	r3, [sp, #8]
	bl	printk
	mvn	r0, #21
	b	.L16421
.L16426:
	movw	r0, #:lower16:.LC1279
	ldr	r1, .L16473+32
	movt	r0, #:upper16:.LC1279
	bl	printk
	mvn	r0, #11
	b	.L16421
.L16472:
	ldr	r0, [fp, #3460]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L16421
.L16474:
	.align	2
.L16473:
	.word	.LANCHOR8-2272
	.word	.LANCHOR1+432
	.word	.LANCHOR8-2256
	.word	.LANCHOR1+3672
	.word	.LANCHOR8-2238
	.word	.LANCHOR5+884
	.word	.LANCHOR5+864
	.word	.LANCHOR5+848
	.word	.LANCHOR5+836
	.fnend
	.size	gbam_setup, .-gbam_setup
	.align	2
	.global	gbam_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_cleanup, %function
gbam_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3360]
	b	debugfs_remove_recursive
	.fnend
	.size	gbam_cleanup, .-gbam_cleanup
	.align	2
	.global	gbam_suspend
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_suspend, %function
gbam_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r2, r2, #6
	cmp	r2, #1
	bxhi	lr
	movw	r0, #:lower16:.LANCHOR4
	movw	r2, #954
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	movw	r4, #:lower16:.LANCHOR1
	str	lr, [sp, #12]
	ldrh	r2, [r0, r2]
	movt	r4, #:upper16:.LANCHOR1
	mov	r3, r1
	add	r1, r4, r1, lsl #2
	ldr	r5, [r1, #3672]
	tst	r2, #4
	bne	.L16485
.L16478:
	add	r1, r5, #316
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	ldr	r0, [r4, #3460]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_work
.L16485:
	movw	r1, #:lower16:.LC854
	ldr	r2, .L16486
	add	r0, r0, #936
	movt	r1, #:upper16:.LC854
	bl	__dynamic_pr_debug
	b	.L16478
.L16487:
	.align	2
.L16486:
	.word	.LANCHOR5-1720
	.fnend
	.size	gbam_suspend, .-gbam_suspend
	.align	2
	.global	gbam_resume
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_resume, %function
gbam_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r2, r2, #6
	cmp	r2, #1
	bxhi	lr
	ldr	r0, .L16498
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	str	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR1
	mov	r3, r1
	str	lr, [sp, #12]
	add	r1, r4, r1, lsl #2
	ldrh	r2, [r0, #-6]
	ldr	r5, [r1, #3672]
	tst	r2, #4
	bne	.L16497
.L16490:
	add	r1, r5, #332
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	ldr	r0, [r4, #3460]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_work
.L16497:
	movw	r1, #:lower16:.LC636
	ldr	r2, .L16498+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC636
	bl	__dynamic_pr_debug
	b	.L16490
.L16499:
	.align	2
.L16498:
	.word	.LANCHOR4-2112
	.word	.LANCHOR5-3328
	.fnend
	.size	gbam_resume, .-gbam_resume
	.section	.rodata.str1.4
	.align	2
.LC1281:
	.ascii	"<3>%s: Invalid port_num#%d\012\000"
	.text
	.align	2
	.global	gsmd_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_connect, %function
gsmd_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L16516
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r4, r1
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r2, #-6]
	tst	r3, #4
	bne	.L16514
.L16501:
	uxtb	r3, r4
	cmp	r3, #5
	bhi	.L16502
	movw	r6, #:lower16:.LANCHOR1
	mov	r1, #84
	movt	r6, #:upper16:.LANCHOR1
	mla	r3, r1, r3, r6
	ldr	r3, [r3, #512]
	cmp	r3, #0
	beq	.L16502
	cmp	r5, #0
	beq	.L16515
	mla	r4, r1, r4, r6
	ldr	r4, [r4, #512]
	add	r7, r4, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_smd_send_cpkt_tomodem
	movw	r3, #:lower16:gsmd_ctrl_send_cbits_tomodem
	str	r5, [r4, #104]
	movt	r2, #:upper16:grmnet_ctrl_smd_send_cpkt_tomodem
	movt	r3, #:upper16:gsmd_ctrl_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	strd	r2, [r5, #96]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #112
	mov	r2, #0
	ldr	r0, [r6, #3412]
	bl	queue_delayed_work
	mov	r0, #0
.L16500:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L16514:
	movw	r1, #:lower16:.LC1272
	sub	r0, r2, #24
	ldr	r2, .L16516+4
	movt	r1, #:upper16:.LC1272
	mov	r3, r5
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L16501
.L16502:
	movw	r0, #:lower16:.LC1281
	ldr	r1, .L16516+4
	mov	r2, r4
	movt	r0, #:upper16:.LC1281
	bl	printk
	mvn	r0, #18
	b	.L16500
.L16515:
	movw	r0, #:lower16:.LC1274
	ldr	r1, .L16516+4
	movt	r0, #:upper16:.LC1274
	bl	printk
	mvn	r0, #18
	b	.L16500
.L16517:
	.align	2
.L16516:
	.word	.LANCHOR8-2208
	.word	.LANCHOR5+992
	.fnend
	.size	gsmd_ctrl_connect, .-gsmd_ctrl_connect
	.align	2
	.global	gsmd_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_disconnect, %function
gsmd_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L16540
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r2, #-14]
	.pad #8
	sub	sp, sp, #8
	tst	r3, #4
	bne	.L16537
.L16519:
	cmp	r6, #5
	bhi	.L16520
	movw	r8, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	r8, #:upper16:.LANCHOR1
	mla	r3, r3, r6, r8
	ldr	r5, [r3, #512]
	cmp	r5, #0
	beq	.L16520
	cmp	r4, #0
	beq	.L16538
	add	r10, r5, #108
	add	r7, r5, #40
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r9, r0
	str	r3, [r5, #104]
	str	r3, [r4, #96]
	str	r3, [r4, #100]
	ldr	r4, [r5, #40]
	str	r3, [r5, #88]
	cmp	r4, r7
	beq	.L16526
.L16523:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #40]
	cmp	r4, r7
	bne	.L16523
.L16526:
	mov	r1, r9
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	add	r1, r5, #8
	mov	r0, #0
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L16539
.L16525:
	ldr	r0, [r8, #3412]
	add	r1, r5, #160
	mov	r2, #0
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_delayed_work
.L16539:
	ldr	r0, [r5]
	ldr	r1, [r5, #88]
	orr	r2, r1, #4
	mvn	r2, r2
	bl	smd_tiocmset
	b	.L16525
.L16537:
	movw	r1, #:lower16:.LC1272
	sub	r0, r2, #32
	ldr	r2, .L16540+4
	movt	r1, #:upper16:.LC1272
	mov	r3, r4
	str	r6, [sp]
	bl	__dynamic_pr_debug
	b	.L16519
.L16520:
	ldr	r1, .L16540+4
	movw	r0, #:lower16:.LC1281
	mov	r2, r6
	movt	r0, #:upper16:.LC1281
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L16538:
	ldr	r1, .L16540+4
	movw	r0, #:lower16:.LC1274
	movt	r0, #:upper16:.LC1274
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L16541:
	.align	2
.L16540:
	.word	.LANCHOR8-2176
	.word	.LANCHOR5+1012
	.fnend
	.size	gsmd_ctrl_disconnect, .-gsmd_ctrl_disconnect
	.section	.rodata.str1.4
	.align	2
.LC1282:
	.ascii	"%s: requested ports:%d\012\000"
	.align	2
.LC1283:
	.ascii	"<3>%s: Invalid client:%d\012\000"
	.align	2
.LC1284:
	.ascii	"<3>%s: Invalid num of ports count:%d\012\000"
	.align	2
.LC1285:
	.ascii	"gsmd_ctrl\000"
	.align	2
.LC1286:
	.ascii	"<3>%s: Unable to create workqueue grmnet_ctrl\012\000"
	.align	2
.LC1287:
	.ascii	"&c->wait\000"
	.align	2
.LC1288:
	.ascii	"&c->smd_wait_q\000"
	.text
	.align	2
	.global	gsmd_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_setup, %function
gsmd_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16578
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r5, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	str	r2, [sp, #24]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16571
.L16543:
	cmp	r4, #1
	bhi	.L16572
	sub	r3, r5, #1
	cmp	r3, #2
	bhi	.L16573
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r3, [sp, #28]
	ldrb	r3, [r3, #3424]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L16574
.L16547:
	add	r2, r4, r4, lsl #1
	ldr	r0, [sp, #28]
	add	r3, r3, #1
	add	r1, r2, r5
	mov	r7, r2
	cmp	r2, r1
	str	r1, [sp, #16]
	str	r2, [sp, #32]
	strb	r3, [r0, #3424]
	bcs	.L16555
	ldr	r1, .L16578+4
	rsb	r4, r4, r4, lsl #6
	movw	fp, #:lower16:kmalloc_caches
	movw	r3, #:lower16:grmnet_ctrl_smd_connect_w
	lsl	r2, r4, #2
	movw	r9, #:lower16:delayed_work_timer_fn
	movt	r3, #:upper16:grmnet_ctrl_smd_connect_w
	movt	fp, #:upper16:kmalloc_caches
	add	r5, r1, r2
	movt	r9, #:upper16:delayed_work_timer_fn
	mov	r10, #0
	str	r3, [sp, #20]
	str	r2, [sp, #36]
.L16554:
	ldr	r0, [fp, #32]
	mov	r6, #0
	mov	r3, r10
	mov	r8, #2560
	mov	r2, #208
	movw	r1, #32976
	mov	r4, #16
	str	r3, [sp, #12]
	add	r10, r10, #1
	cmp	r0, r6
	beq	.L16551
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16575
.L16551:
	add	r3, r4, #116
	mov	r2, r6
	str	r7, [r4, #100]
	mov	r1, r6
	add	r0, r4, #128
	str	r6, [r4, #108]
	str	r8, [r4, #112]
	str	r3, [r4, #116]
	str	r3, [r4, #120]
	ldr	r3, [sp, #20]
	str	r3, [r4, #124]
	bl	init_timer_key
	movw	r3, #:lower16:grmnet_ctrl_smd_disconnect_w
	add	r0, r4, #164
	str	r9, [r4, #144]
	movt	r3, #:upper16:grmnet_ctrl_smd_disconnect_w
	add	r2, r4, #112
	mov	r1, r6
	str	r2, [r4, #148]
	mov	r2, r6
	str	r8, [r4, #160]
	str	r0, [r4, #164]
	str	r0, [r4, #168]
	add	r0, r4, #176
	str	r3, [r4, #172]
	bl	init_timer_key
	movw	r3, #:lower16:.LANCHOR5
	add	r0, r4, #160
	ldr	r2, .L16578+8
	movt	r3, #:upper16:.LANCHOR5
	movw	r1, #:lower16:.LC1287
	str	r4, [r4, #84]
	add	r3, r3, r7, lsl #2
	movt	r1, #:upper16:.LC1287
	str	r9, [r4, #192]
	str	r0, [r4, #196]
	add	r0, r4, #12
	ldr	r3, [r3, #1052]
	str	r3, [r4, #4]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC1288
	ldr	r2, .L16578+8
	add	r0, r4, #24
	movt	r1, #:upper16:.LC1288
	bl	__init_waitqueue_head
	ldr	r0, .L16578+12
	movw	r3, #:lower16:grmnet_ctrl_smd_read_w
	add	r2, r4, #40
	movt	r3, #:upper16:grmnet_ctrl_smd_read_w
	movw	lr, #:lower16:grmnet_ctrl_smd_write_w
	movw	ip, #:lower16:grmnet_ctrl_smd_ch_probe
	movw	r1, #:lower16:grmnet_ctrl_smd_ch_remove
	str	r2, [r4, #40]
	movt	lr, #:upper16:grmnet_ctrl_smd_write_w
	movt	ip, #:upper16:grmnet_ctrl_smd_ch_probe
	str	r2, [r4, #44]
	movt	r1, #:upper16:grmnet_ctrl_smd_ch_remove
	add	r2, r4, #56
	str	r8, [r4, #52]
	str	r3, [r4, #64]
	add	r3, r4, #72
	str	r8, [r4, #68]
	ldrh	r8, [r0]
	str	r2, [r4, #56]
	str	r2, [r4, #60]
	str	r3, [r4, #72]
	str	r3, [r4, #76]
	tst	r8, #4
	str	lr, [r4, #80]
	stm	r5, {r4, ip}
	str	r1, [r5, #8]
	ldr	r3, [r4, #4]
	str	r3, [r5, #24]
	str	r6, [r5, #32]
	bne	.L16576
.L16553:
	ldr	r3, [sp, #16]
	add	r7, r7, #1
	add	r5, r5, #84
	cmp	r3, r7
	bne	.L16554
.L16555:
	ldr	r3, [sp, #24]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L16542
	ldr	r2, [sp, #32]
	mov	r0, #0
	strb	r2, [r3]
.L16542:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16576:
	movw	r1, #:lower16:.LC1267
	ldr	r2, .L16578+16
	mov	r3, r4
	movt	r1, #:upper16:.LC1267
	sub	r0, r0, #18
	str	r7, [sp]
	bl	__dynamic_pr_debug
	b	.L16553
.L16574:
	movw	r0, #:lower16:.LC1285
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC1285
	mov	r1, #10
	bl	__alloc_workqueue_key
	ldr	r3, [sp, #28]
	cmp	r0, #0
	str	r0, [r3, #3412]
	beq	.L16548
	ldrb	r3, [r3, #3424]	@ zero_extendqisi2
	b	.L16547
.L16571:
	movw	r1, #:lower16:.LC1282
	ldr	r2, .L16578+20
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1282
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L16543
.L16575:
	movw	r0, #:lower16:.LC1266
	ldr	r1, .L16578+20
	mov	r2, r7
	movt	r0, #:upper16:.LC1266
	bl	printk
	ldr	r3, [sp, #36]
	add	r5, r3, #4
	ldr	r3, .L16578+4
	add	r5, r3, r5
	ldr	r3, [sp, #12]
	mov	r6, r3
.L16552:
	cmp	r4, r6
	beq	.L16577
	ldr	r0, [r5, #-4]
	cmp	r0, #0
	beq	.L16556
	bl	kfree
	mov	r0, r5
	bl	platform_driver_unregister
.L16556:
	add	r4, r4, #1
	add	r5, r5, #84
	b	.L16552
.L16572:
	movw	r0, #:lower16:.LC1283
	ldr	r1, .L16578+20
	mov	r2, r4
	movt	r0, #:upper16:.LC1283
	bl	printk
	mvn	r0, #21
	b	.L16542
.L16577:
	ldr	r2, [sp, #28]
	ldrb	r3, [r2, #3424]	@ zero_extendqisi2
	sub	r3, r3, #1
	uxtb	r3, r3
	cmp	r3, #0
	strb	r3, [r2, #3424]
	bne	.L16559
	ldr	r0, [r2, #3412]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L16542
.L16559:
	mvn	r0, #11
	b	.L16542
.L16548:
	movw	r0, #:lower16:.LC1286
	ldr	r1, .L16578+20
	movt	r0, #:upper16:.LC1286
	bl	printk
	mvn	r0, #11
	b	.L16542
.L16573:
	movw	r0, #:lower16:.LC1284
	ldr	r1, .L16578+20
	mov	r2, r5
	movt	r0, #:upper16:.LC1284
	bl	printk
	mvn	r0, #21
	b	.L16542
.L16579:
	.align	2
.L16578:
	.word	.LANCHOR8-2160
	.word	.LANCHOR1+512
	.word	.LANCHOR1+4048
	.word	.LANCHOR8-2142
	.word	.LANCHOR5+1076
	.word	.LANCHOR5+1036
	.fnend
	.size	gsmd_ctrl_setup, .-gsmd_ctrl_setup
	.section	.rodata.str1.4
	.align	2
.LC1289:
	.ascii	"%s: grmnet:%pK\012\000"
	.text
	.align	2
	.global	gqti_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_connect, %function
gqti_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16593
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16591
.L16581:
	cmp	r5, #0
	beq	.L16592
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #3228]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_qti_send_cpkt_tomodem
	movw	r3, #:lower16:gqti_ctrl_notify_modem
	str	r5, [r4]
	movt	r2, #:upper16:grmnet_ctrl_qti_send_cpkt_tomodem
	movt	r3, #:upper16:gqti_ctrl_notify_modem
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r5, #96]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #1
	add	r0, r4, #32
	mov	r3, #0
	mov	r1, #3
	str	r2, [r4, #8]
	bl	__wake_up
	cmp	r4, #0
	beq	.L16586
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L16580
	ldr	r4, [r0, #108]
	cmp	r4, #0
	beq	.L16586
	blx	r4
	mov	r0, #0
.L16580:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16586:
	mov	r0, r4
	b	.L16580
.L16591:
	movw	r1, #:lower16:.LC1289
	ldr	r2, .L16593+4
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1289
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L16581
.L16592:
	movw	r0, #:lower16:.LC1274
	ldr	r1, .L16593+4
	movt	r0, #:upper16:.LC1274
	bl	printk
	mvn	r0, #18
	b	.L16580
.L16594:
	.align	2
.L16593:
	.word	.LANCHOR8-2112
	.word	.LANCHOR5+1104
	.fnend
	.size	gqti_ctrl_connect, .-gqti_ctrl_connect
	.align	2
	.global	gqti_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_disconnect, %function
gqti_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L16617
	movw	r2, #:lower16:.LANCHOR1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r2, #:upper16:.LANCHOR1
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	ldrh	r3, [ip, #-14]
	str	lr, [sp, #28]
	ldr	r5, [r2, #3228]
	tst	r3, #4
	bne	.L16615
.L16596:
	cmp	r4, #0
	beq	.L16616
	cmp	r5, #0
	beq	.L16598
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L16598
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L16598
	blx	r3
.L16598:
	mov	r6, #0
	mov	r7, r5
	add	r9, r5, #52
	mov	r0, r9
	str	r6, [r5, #8]
	str	r6, [r5, #12]
	bl	_raw_spin_lock_irqsave
	str	r6, [r7], #44
	mov	r8, r0
	str	r6, [r4, #96]
	str	r6, [r4, #100]
	ldr	r4, [r5, #44]
	cmp	r4, r7
	beq	.L16599
.L16600:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #44]
	cmp	r4, r7
	bne	.L16600
.L16599:
	mov	r0, r9
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	rmnet_ctrl_queue_notify
.L16615:
	movw	r1, #:lower16:.LC1289
	ldr	r2, .L16617+4
	sub	r0, ip, #32
	movt	r1, #:upper16:.LC1289
	mov	r3, r4
	bl	__dynamic_pr_debug
	b	.L16596
.L16616:
	movw	r0, #:lower16:.LC1274
	ldr	r1, .L16617+4
	movt	r0, #:upper16:.LC1274
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L16618:
	.align	2
.L16617:
	.word	.LANCHOR8-2080
	.word	.LANCHOR5+1124
	.fnend
	.size	gqti_ctrl_disconnect, .-gqti_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_connect, %function
ghsic_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16633
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16630
.L16620:
	movw	r3, #:lower16:.LANCHOR1
	clz	r2, r6
	movt	r3, #:upper16:.LANCHOR1
	lsr	r2, r2, #5
	ldr	r1, [r3, #1016]
	cmp	r4, r1
	orrhi	r2, r2, #1
	cmp	r2, #0
	bne	.L16631
	mov	r1, #104
	mla	r4, r1, r4, r3
	ldr	r4, [r4, #1020]
	cmp	r4, #0
	beq	.L16632
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #48]
	mov	r1, r0
	cmp	r3, #0
	bne	.L16624
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r3, [r6, #140]
	ldr	r3, [r4, #48]
.L16624:
	cmp	r3, #1
	bne	.L16625
	ldr	r0, [r6, #92]
	movw	r2, #:lower16:ghsic_send_cpkt_tomodem
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r2, #:upper16:ghsic_send_cpkt_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r0, [r4, #52]
	strd	r2, [r6, #96]
.L16625:
	mov	r5, #0
	mov	r0, r7
	str	r6, [r4, #8]
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #16
	ldr	r0, [r4, #12]
	bl	queue_work
	mov	r0, r5
.L16619:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16630:
	movw	r1, #:lower16:.LC612
	ldr	r2, .L16633+4
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC612
	mov	r3, r4
	bl	__dynamic_pr_debug
	b	.L16620
.L16631:
	movw	r0, #:lower16:.LC174
	ldr	r1, .L16633+4
	mov	r2, r4
	movt	r0, #:upper16:.LC174
	bl	printk
	mvn	r0, #18
	b	.L16619
.L16632:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L16633+4
	movt	r0, #:upper16:.LC105
	bl	printk
	mvn	r0, #18
	b	.L16619
.L16634:
	.align	2
.L16633:
	.word	.LANCHOR8-2064
	.word	.LANCHOR5+1148
	.fnend
	.size	ghsic_ctrl_connect, .-ghsic_ctrl_connect
	.align	2
	.global	ghsic_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_disconnect, %function
ghsic_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16648
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L16645
.L16636:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #104
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #1016]
	mla	r3, r2, r5, r3
	cmp	r5, r1
	ldr	r4, [r3, #1020]
	bhi	.L16646
	clz	r3, r4
	cmp	r6, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L16647
	ldr	r8, [r4, #48]
	add	r7, r4, #4
	mov	r0, r7
	cmp	r8, #0
	bne	.L16639
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r6, #140]
.L16640:
	mov	r3, #0
	mov	r0, r7
	str	r3, [r4, #8]
	str	r3, [r4, #52]
	str	r3, [r4, #88]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #32
	ldrd	r6, [sp, #8]
	ldr	r0, [r4, #12]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work
.L16639:
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r6, #96]
	str	r5, [r6, #100]
	b	.L16640
.L16645:
	movw	r1, #:lower16:.LC612
	ldr	r2, .L16648+4
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC612
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L16636
.L16646:
	movw	r0, #:lower16:.LC174
	mov	r2, r5
	ldr	r1, .L16648+4
	movt	r0, #:upper16:.LC174
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L16647:
	movw	r0, #:lower16:.LC1274
	ldr	r1, .L16648+4
	movt	r0, #:upper16:.LC1274
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L16649:
	.align	2
.L16648:
	.word	.LANCHOR8-2032
	.word	.LANCHOR5+1168
	.fnend
	.size	ghsic_ctrl_disconnect, .-ghsic_ctrl_disconnect
	.section	.rodata.str1.4
	.align	2
.LC1290:
	.ascii	"<3>%s: setting xport name for invalid port num %d\012"
	.ascii	"\000"
	.align	2
.LC1291:
	.ascii	"_ctrl\000"
	.text
	.align	2
	.global	ghsic_ctrl_set_port_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_set_port_name, %function
ghsic_ctrl_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r2, [r4, #4048]
	str	lr, [sp, #12]
	cmp	r2, #3
	bhi	.L16656
	mov	r3, r0
	add	r5, r4, #1020
	mov	r0, #104
	cmp	r3, #0
	movne	r1, r3
	mla	r2, r0, r2, r5
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r4, #4048]
	mov	r3, #104
	movw	r1, #:lower16:.LC1291
	movt	r1, #:upper16:.LC1291
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r4, #4048]
	ldr	r6, [sp, #8]
	add	r3, r3, #1
	str	r3, [r4, #4048]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16656:
	movw	r0, #:lower16:.LC1290
	ldr	r1, .L16657
	movt	r0, #:upper16:.LC1290
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L16658:
	.align	2
.L16657:
	.word	.LANCHOR5+1192
	.fnend
	.size	ghsic_ctrl_set_port_name, .-ghsic_ctrl_set_port_name
	.section	.rodata.str1.4
	.align	2
.LC1292:
	.ascii	"<3>%s: Unable to create workqueue:%s\012\000"
	.text
	.align	2
	.global	ghsic_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_setup, %function
ghsic_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	mov	fp, r1
	ldr	r2, [r8, #1016]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	add	r1, r2, r0
	cmp	r1, #4
	str	r2, [sp, #28]
	str	r2, [sp, #32]
	movle	r2, #0
	movgt	r2, #1
	cmp	r0, #0
	str	r1, [sp, #12]
	moveq	r2, #1
	cmp	r2, #0
	bne	.L16683
	ldr	r0, .L16688
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L16684
.L16662:
	ldr	r3, [sp, #12]
	ldr	r6, [sp, #28]
	cmp	r6, r3
	bcs	.L16659
	mov	r3, #104
	movw	r9, #:lower16:kmalloc_caches
	movw	r2, #:lower16:ghsic_ctrl_connect_w
	movw	r1, #:lower16:gctrl_disconnect_w
	mul	r3, r3, r6
	movw	r0, #:lower16:ghsic_ctrl_receive
	movt	r2, #:upper16:ghsic_ctrl_connect_w
	movt	r1, #:upper16:gctrl_disconnect_w
	movt	r0, #:upper16:ghsic_ctrl_receive
	movt	r9, #:upper16:kmalloc_caches
	str	r2, [sp, #16]
	add	r5, r3, #84
	str	r1, [sp, #20]
	str	r3, [sp, #36]
	ldr	r3, .L16688+4
	str	r0, [sp, #24]
	add	r5, r3, r5
.L16669:
	ldr	r0, [r9, #28]
	mov	r7, #0
	mov	r2, #108
	ldr	r3, [r8, #1016]
	movw	r1, #32976
	mov	r4, #16
	cmp	r0, r7
	add	r3, r3, #1
	str	r3, [r8, #1016]
	beq	.L16663
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16664
.L16663:
	mov	r3, r7
	mov	r2, #1
	str	r7, [sp]
	mov	r1, #10
	mov	r0, r5
	bl	__alloc_workqueue_key
	mov	r2, r0
	movw	r1, #:lower16:ghsic_ctrl_probe
	cmp	r2, #0
	movw	r3, #:lower16:ghsic_ctrl_remove
	movw	ip, #:lower16:ghsic_ctrl_status
	add	r10, r4, #20
	str	r2, [r4, #12]
	movt	r1, #:upper16:ghsic_ctrl_probe
	movt	r3, #:upper16:ghsic_ctrl_remove
	sub	r0, r5, #80
	mov	lr, #2560
	movt	ip, #:upper16:ghsic_ctrl_status
	add	r2, r4, #36
	beq	.L16685
	cmp	fp, #0
	str	r6, [r4]
	str	r2, [r4, #36]
	str	r2, [r4, #40]
	ldr	r2, [sp, #20]
	str	r7, [r4, #4]
	ldr	r7, [sp, #16]
	streq	ip, [r4, #76]
	str	lr, [r4, #16]
	str	r10, [r4, #20]
	str	r2, [r4, #44]
	ldr	r2, [sp, #24]
	str	r10, [r4, #24]
	str	r7, [r4, #28]
	str	lr, [r4, #32]
	str	fp, [r4, #48]
	str	r4, [r4, #56]
	str	r5, [r4, #64]
	str	r2, [r4, #72]
	str	r4, [r5, #-84]
	str	r3, [r5, #-76]
	mov	r3, #0
	str	r1, [r5, #-80]
	str	r5, [r5, #-60]
	str	r3, [r5, #-52]
	bl	platform_driver_register
	ldr	r0, .L16688+8
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L16686
.L16667:
	ldr	r3, [sp, #12]
	add	r6, r6, #1
	add	r5, r5, #104
	cmp	r3, r6
	bhi	.L16669
.L16659:
	ldr	r0, [sp, #28]
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16686:
	movw	r1, #:lower16:.LC1267
	ldr	r2, .L16688+12
	mov	r3, r4
	movt	r1, #:upper16:.LC1267
	sub	r0, r0, #18
	str	r6, [sp]
	bl	__dynamic_pr_debug
	b	.L16667
.L16684:
	movw	r1, #:lower16:.LC1282
	ldr	r2, .L16688+16
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1282
	bl	__dynamic_pr_debug
	b	.L16662
.L16685:
	movw	r0, #:lower16:.LC1292
	ldr	r1, .L16688+12
	mov	r2, r5
	movt	r0, #:upper16:.LC1292
	bl	printk
.L16664:
	ldr	r3, [r8, #1016]
	movw	r0, #:lower16:.LC1266
	mov	r2, r6
	ldr	r1, .L16688+4
	movt	r0, #:upper16:.LC1266
	ldr	ip, [sp, #36]
	sub	r3, r3, #1
	add	r4, r1, ip
	ldr	r1, .L16688+16
	str	r3, [r8, #1016]
	bl	printk
	ldr	r5, [sp, #28]
.L16668:
	ldr	r3, [r8, #1016]
	add	r6, r4, #104
	cmp	r3, r5
	bls	.L16687
	ldr	r7, [r6, #-104]
	add	r5, r5, #1
	ldr	r0, [r7, #12]
	bl	destroy_workqueue
	mov	r0, r7
	bl	kfree
	add	r0, r4, #4
	mov	r4, r6
	bl	platform_driver_unregister
	b	.L16668
.L16683:
	mov	r2, r3
	movw	r0, #:lower16:.LC1284
	ldr	r1, .L16688+16
	mvn	r3, #21
	movt	r0, #:upper16:.LC1284
	str	r3, [sp, #28]
	bl	printk
	b	.L16659
.L16687:
	mvn	r3, #11
	str	r3, [sp, #28]
	ldr	r3, [sp, #32]
	str	r3, [r8, #1016]
	b	.L16659
.L16689:
	.align	2
.L16688:
	.word	.LANCHOR8-2016
	.word	.LANCHOR1+1020
	.word	.LANCHOR8-1998
	.word	.LANCHOR5+1240
	.word	.LANCHOR5+1220
	.fnend
	.size	ghsic_ctrl_setup, .-ghsic_ctrl_setup
	.align	2
	.global	ghsic_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_disconnect, %function
ghsic_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L16709
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r2, #-6]
	tst	r3, #4
	bne	.L16706
.L16691:
	movw	r2, #:lower16:.LANCHOR1
	mov	r3, #104
	movt	r2, #:upper16:.LANCHOR1
	ldr	r1, [r2, #1436]
	mla	r2, r3, r6, r2
	cmp	r6, r1
	ldr	r4, [r2, #1440]
	bhi	.L16707
	clz	r3, r4
	cmp	r5, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L16708
	mov	r0, r4
	bl	ghsic_data_free_buffers.part.0
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L16694
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L16694:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L16695
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L16695:
	mov	r5, #0
	add	r9, r4, #48
	mov	r0, r9
	add	r8, r4, #164
	str	r5, [r4, #4]
	add	r7, r4, #80
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r1, r8
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #184]
	bl	_clear_bit
	mov	r1, r6
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r8
	str	r5, [r4, #12]
	mov	r5, r0
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r5
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #104
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	ldr	r0, [r4, #84]
	ldrd	r4, [sp]
	add	sp, sp, #32
	b	queue_work
.L16706:
	movw	r1, #:lower16:.LC612
	sub	r0, r2, #24
	ldr	r2, .L16709+4
	movt	r1, #:upper16:.LC612
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L16691
.L16707:
	movw	r0, #:lower16:.LC174
	mov	r2, r6
	ldr	r1, .L16709+4
	movt	r0, #:upper16:.LC174
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L16708:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L16709+4
	movt	r0, #:upper16:.LC105
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L16710:
	.align	2
.L16709:
	.word	.LANCHOR8-1968
	.word	.LANCHOR5+1260
	.fnend
	.size	ghsic_data_disconnect, .-ghsic_data_disconnect
	.align	2
	.global	ghsic_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_connect, %function
ghsic_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16729
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L16724
.L16712:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #104
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #1436]
	mla	r3, r2, r5, r3
	cmp	r5, r1
	ldr	r4, [r3, #1440]
	bhi	.L16725
	cmp	r4, #0
	cmpne	r6, #0
	beq	.L16726
	ldr	r3, [r4, #16]
	add	r8, r4, #48
	add	r7, r4, #80
	mov	r0, r8
	cmp	r3, #0
	bne	.L16716
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #88]
	mov	r1, r0
	mov	r0, r8
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #92]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldr	r2, [r3, #-1560]
	ldr	r3, [r3, #-1556]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r6, #88]
	str	r4, [r3]
	ldr	r3, [r6, #92]
	str	r4, [r3]
.L16717:
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L16727
	ldr	r0, [r4, #12]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L16728
	mov	r3, #1
	mov	r0, r8
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r8
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r5, [r4, #188]
	str	r5, [r4, #204]
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #88
	ldr	r0, [r4, #84]
	bl	queue_work
.L16711:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16716:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #84]
	mov	r1, r0
	mov	r0, r8
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #88]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldr	r2, [r3, #-1552]
	ldr	r3, [r3, #-1548]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r6, #84]
	str	r4, [r3]
	ldr	r3, [r6, #88]
	str	r4, [r3]
	b	.L16717
.L16724:
	movw	r1, #:lower16:.LC612
	ldr	r2, .L16729+4
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC612
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L16712
.L16726:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L16729+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC105
	bl	printk
	b	.L16711
.L16728:
	movw	r0, #:lower16:.LC386
	ldr	r1, .L16729+4
	movt	r0, #:upper16:.LC386
	ldr	r2, [r4, #12]
	bl	printk
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L16711
.L16725:
	movw	r0, #:lower16:.LC174
	mov	r2, r5
	ldr	r1, .L16729+4
	movt	r0, #:upper16:.LC174
	mvn	r5, #18
	bl	printk
	b	.L16711
.L16727:
	movw	r0, #:lower16:.LC385
	ldr	r1, .L16729+4
	movt	r0, #:upper16:.LC385
	ldr	r2, [r4, #8]
	bl	printk
	b	.L16711
.L16730:
	.align	2
.L16729:
	.word	.LANCHOR8-1936
	.word	.LANCHOR5+1284
	.fnend
	.size	ghsic_data_connect, .-ghsic_data_connect
	.section	.rodata.str1.4
	.align	2
.LC1293:
	.ascii	"_data\000"
	.text
	.align	2
	.global	ghsic_data_set_port_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_set_port_name, %function
ghsic_data_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r2, [r4, #4052]
	str	lr, [sp, #12]
	cmp	r2, #3
	bhi	.L16737
	mov	r3, r0
	add	r5, r4, #1440
	mov	r0, #104
	cmp	r3, #0
	movne	r1, r3
	mla	r2, r0, r2, r5
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r4, #4052]
	mov	r3, #104
	movw	r1, #:lower16:.LC1293
	movt	r1, #:upper16:.LC1293
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r4, #4052]
	ldr	r6, [sp, #8]
	add	r3, r3, #1
	str	r3, [r4, #4052]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16737:
	movw	r0, #:lower16:.LC1290
	ldr	r1, .L16738
	movt	r0, #:upper16:.LC1290
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L16739:
	.align	2
.L16738:
	.word	.LANCHOR5+1304
	.fnend
	.size	ghsic_data_set_port_name, .-ghsic_data_set_port_name
	.section	.rodata.str1.4
	.align	2
.LC1294:
	.ascii	"%s: count: %d\012\000"
	.text
	.align	2
	.global	ghsic_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_setup, %function
ghsic_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r7, #1436]
	.pad #52
	sub	sp, sp, #52
	str	r1, [sp, #12]
	add	r1, r2, r0
	cmp	r1, #4
	str	r2, [sp, #36]
	str	r2, [sp, #40]
	movle	r2, #0
	movgt	r2, #1
	cmp	r0, #0
	str	r1, [sp, #8]
	moveq	r2, #1
	cmp	r2, #0
	bne	.L16763
	ldr	r0, .L16769
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L16764
.L16743:
	ldr	r3, [sp, #8]
	ldr	r8, [sp, #36]
	cmp	r8, r3
	bcs	.L16740
	movw	r2, #:lower16:kmalloc_caches
	mov	r3, #104
	movt	r2, #:upper16:kmalloc_caches
	movw	r1, #:lower16:ghsic_data_connect_w
	mul	r3, r3, r8
	movw	r0, #:lower16:ghsic_data_disconnect_w
	movw	ip, #:lower16:ghsic_data_write_tohost
	str	r2, [sp, #16]
	ldr	r2, .L16769+4
	movt	r1, #:upper16:ghsic_data_connect_w
	movt	r0, #:upper16:ghsic_data_disconnect_w
	movt	ip, #:upper16:ghsic_data_write_tohost
	mov	r5, r8
	mov	r6, r7
	str	r1, [sp, #20]
	str	r3, [sp, #44]
	add	r3, r3, #84
	add	r10, r2, r3
	str	r0, [sp, #24]
	str	ip, [sp, #28]
.L16749:
	ldr	r1, [sp, #16]
	mov	r4, #0
	mov	r2, #220
	ldr	r3, [r6, #1436]
	mov	r9, #16
	ldr	r0, [r1, #32]
	movw	r1, #32976
	add	r3, r3, #1
	str	r3, [r6, #1436]
	cmp	r0, r4
	beq	.L16744
	bl	kmem_cache_alloc_trace
	subs	r9, r0, #0
	beq	.L16765
.L16744:
	mov	r3, r4
	mov	r2, #1
	str	r4, [sp]
	mov	r1, #10
	mov	r0, r10
	bl	__alloc_workqueue_key
	mov	r2, r0
	add	r1, r9, #64
	cmp	r2, #0
	movw	r8, #:lower16:ghsic_data_write_tomdm
	movw	r7, #:lower16:ghsic_data_receive
	movw	lr, #:lower16:ghsic_data_unthrottle_tx
	str	r1, [sp, #32]
	movw	ip, #:lower16:ghsic_data_probe
	movw	r1, #:lower16:ghsic_data_remove
	str	r2, [r9, #84]
	movt	r8, #:upper16:ghsic_data_write_tomdm
	add	fp, r9, #24
	movt	r7, #:upper16:ghsic_data_receive
	mov	r3, #2560
	movt	lr, #:upper16:ghsic_data_unthrottle_tx
	movt	ip, #:upper16:ghsic_data_probe
	sub	r0, r10, #80
	movt	r1, #:upper16:ghsic_data_remove
	beq	.L16766
	add	r2, r9, #32
	str	r5, [r9]
	str	r3, [r9, #88]
	str	r3, [r9, #104]
	str	r2, [r9, #32]
	str	r2, [r9, #36]
	add	r2, r9, #56
	str	r3, [r9, #120]
	str	r3, [r9, #136]
	add	r3, r9, #140
	str	r2, [r9, #56]
	str	r2, [r9, #60]
	add	r2, r9, #64
	str	fp, [r9, #24]
	str	fp, [r9, #28]
	str	r2, [r9, #64]
	str	r2, [r9, #68]
	add	r2, r9, #92
	str	r4, [r9, #40]
	str	r4, [r9, #72]
	str	r2, [r9, #92]
	str	r2, [r9, #96]
	ldr	r2, [sp, #20]
	str	r4, [r9, #80]
	str	r4, [r9, #48]
	str	r4, [r9, #44]
	str	r4, [r9, #76]
	str	r2, [r9, #100]
	add	r2, r9, #108
	str	r2, [r9, #108]
	str	r2, [r9, #112]
	ldr	r2, [sp, #24]
	str	r8, [r9, #132]
	str	r3, [r9, #140]
	str	r3, [r9, #144]
	str	r2, [r9, #116]
	add	r2, r9, #124
	str	r2, [r9, #124]
	str	r2, [r9, #128]
	ldr	r3, [sp, #28]
	str	r3, [r9, #148]
	ldr	r3, [sp, #12]
	str	r9, [r9, #152]
	str	r10, [r9, #160]
	str	r7, [r9, #168]
	str	r3, [r9, #16]
	str	lr, [r9, #176]
	str	r9, [r10, #-84]
	str	ip, [r10, #-80]
	str	r1, [r10, #-76]
	str	r10, [r10, #-60]
	str	r4, [r10, #-52]
	bl	platform_driver_register
	ldr	r0, .L16769+8
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L16767
.L16747:
	ldr	r3, [sp, #8]
	add	r5, r5, #1
	add	r10, r10, #104
	cmp	r3, r5
	bhi	.L16749
.L16740:
	ldr	r0, [sp, #36]
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16767:
	movw	r1, #:lower16:.LC164
	ldr	r2, .L16769+12
	mov	r3, r5
	movt	r1, #:upper16:.LC164
	sub	r0, r0, #18
	bl	__dynamic_pr_debug
	b	.L16747
.L16764:
	movw	r1, #:lower16:.LC1294
	ldr	r2, .L16769+16
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1294
	bl	__dynamic_pr_debug
	b	.L16743
.L16765:
	mov	r8, r5
	mov	r7, r6
.L16745:
	ldr	r3, [r7, #1436]
	movw	r0, #:lower16:.LC1266
	mov	r2, r8
	ldr	r1, .L16769+4
	movt	r0, #:upper16:.LC1266
	ldr	ip, [sp, #44]
	sub	r3, r3, #1
	add	r4, r1, ip
	ldr	r1, .L16769+16
	str	r3, [r7, #1436]
	bl	printk
	ldr	r5, [sp, #36]
.L16748:
	ldr	r3, [r7, #1436]
	add	r6, r4, #104
	cmp	r3, r5
	bls	.L16768
	ldr	r8, [r6, #-104]
	add	r5, r5, #1
	ldr	r0, [r8, #84]
	bl	destroy_workqueue
	mov	r0, r8
	bl	kfree
	add	r0, r4, #4
	mov	r4, r6
	bl	platform_driver_unregister
	b	.L16748
.L16763:
	mov	r2, r3
	movw	r0, #:lower16:.LC1284
	ldr	r1, .L16769+16
	mvn	r3, #21
	movt	r0, #:upper16:.LC1284
	str	r3, [sp, #36]
	bl	printk
	b	.L16740
.L16766:
	movw	r0, #:lower16:.LC1292
	ldr	r1, .L16769+12
	mov	r2, r10
	movt	r0, #:upper16:.LC1292
	mov	r8, r5
	bl	printk
	mov	r0, r9
	mov	r7, r6
	bl	kfree
	b	.L16745
.L16768:
	mvn	r3, #11
	str	r3, [sp, #36]
	ldr	r3, [sp, #40]
	str	r3, [r7, #1436]
	b	.L16740
.L16770:
	.align	2
.L16769:
	.word	.LANCHOR8-1920
	.word	.LANCHOR1+1440
	.word	.LANCHOR8-1902
	.word	.LANCHOR5+1352
	.word	.LANCHOR5+1332
	.fnend
	.size	ghsic_data_setup, .-ghsic_data_setup
	.align	2
	.global	ghsuart_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_connect, %function
ghsuart_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16787
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16783
.L16772:
	movw	r3, #:lower16:.LANCHOR1
	clz	r5, r6
	movt	r3, #:upper16:.LANCHOR1
	lsr	r5, r5, #5
	ldr	r2, [r3, #1856]
	cmp	r4, r2
	orrhi	r5, r5, #1
	cmp	r5, #0
	bne	.L16784
	mov	r1, #84
	mla	r4, r1, r4, r3
	ldr	r4, [r4, #1860]
	cmp	r4, #0
	beq	.L16785
	add	r7, r4, #8
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r6, #92]
	movw	r2, #:lower16:ghsuart_send_cpkt_tomodem
	movw	r3, #:lower16:ghsuart_send_cbits_tomodem
	movt	r2, #:upper16:ghsuart_send_cpkt_tomodem
	movt	r3, #:upper16:ghsuart_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	str	ip, [r4, #68]
	strd	r2, [r6, #96]
	str	r6, [r4, #12]
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	tst	r0, #2
	ubfx	r0, r0, #1, #1
	bne	.L16786
.L16771:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16786:
	add	r1, r4, #36
	ldr	r0, [r4, #32]
	bl	queue_work
	mov	r0, r5
	b	.L16771
.L16783:
	movw	r1, #:lower16:.LC612
	ldr	r2, .L16787+4
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC612
	mov	r3, r4
	bl	__dynamic_pr_debug
	b	.L16772
.L16784:
	movw	r0, #:lower16:.LC174
	ldr	r1, .L16787+4
	mov	r2, r4
	movt	r0, #:upper16:.LC174
	bl	printk
	mvn	r0, #18
	b	.L16771
.L16785:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L16787+4
	movt	r0, #:upper16:.LC105
	bl	printk
	mvn	r0, #18
	b	.L16771
.L16788:
	.align	2
.L16787:
	.word	.LANCHOR8-1872
	.word	.LANCHOR5+1376
	.fnend
	.size	ghsuart_ctrl_connect, .-ghsuart_ctrl_connect
	.align	2
	.global	ghsuart_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_disconnect, %function
ghsuart_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16800
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L16797
.L16790:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #1856]
	cmp	r4, r2
	bhi	.L16798
	mov	r1, #84
	cmp	r6, #0
	mla	r4, r1, r4, r3
	ldr	r5, [r4, #1860]
	clz	r4, r5
	lsr	r4, r4, #5
	moveq	r4, #1
	cmp	r4, #0
	bne	.L16799
	add	r7, r5, #8
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r4, [r6, #96]
	str	r4, [r6, #100]
	str	r4, [r5, #12]
	str	r4, [r5, #68]
	str	r4, [r5, #92]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r5, #52
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r5, #32]
	ldrd	r4, [sp]
	add	sp, sp, #24
	b	queue_work
.L16797:
	movw	r1, #:lower16:.LC612
	ldr	r2, .L16800+4
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC612
	mov	r3, r4
	bl	__dynamic_pr_debug
	b	.L16790
.L16798:
	movw	r0, #:lower16:.LC174
	mov	r2, r4
	ldr	r1, .L16800+4
	movt	r0, #:upper16:.LC174
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L16799:
	movw	r0, #:lower16:.LC1274
	ldr	r1, .L16800+4
	movt	r0, #:upper16:.LC1274
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L16801:
	.align	2
.L16800:
	.word	.LANCHOR8-1840
	.word	.LANCHOR5+1400
	.fnend
	.size	ghsuart_ctrl_disconnect, .-ghsuart_ctrl_disconnect
	.section	.rodata.str1.4
	.align	2
.LC1295:
	.ascii	"SMUX_RMNET_CTL_HSUART\000"
	.text
	.align	2
	.global	ghsuart_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_setup, %function
ghsuart_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r2, [r8, #1856]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #12]
	add	r1, r2, r0
	cmp	r1, #2
	str	r2, [sp, #20]
	str	r2, [sp, #24]
	movle	r2, #0
	movgt	r2, #1
	cmp	r0, #0
	str	r1, [sp, #8]
	moveq	r2, #1
	cmp	r2, #0
	bne	.L16824
	ldr	r0, .L16829
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L16825
.L16805:
	ldr	r3, [sp, #8]
	ldr	r7, [sp, #20]
	cmp	r7, r3
	bcs	.L16802
	mov	r3, #84
	ldr	fp, .L16829+4
	movw	r9, #:lower16:kmalloc_caches
	movw	r2, #:lower16:.LC1295
	movw	r10, #:lower16:.LC744
	mul	r3, r3, r7
	movt	r2, #:upper16:.LC1295
	movt	r9, #:upper16:kmalloc_caches
	movt	r10, #:upper16:.LC744
	str	r2, [sp, #16]
	add	r5, r3, #4
	str	r3, [sp, #28]
	ldr	r3, .L16829+8
	add	r5, r3, r5
.L16811:
	ldr	r0, [r9, #28]
	mov	r6, #0
	mov	r2, #108
	ldr	r3, [r8, #1856]
	movw	r1, #32976
	mov	r4, #16
	cmp	r0, r6
	add	r3, r3, #1
	str	r3, [r8, #1856]
	beq	.L16806
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16814
.L16806:
	movw	r0, #:lower16:.LC1295
	mov	r3, r6
	str	r6, [sp]
	mov	r2, #1
	mov	r1, #10
	movt	r0, #:upper16:.LC1295
	bl	__alloc_workqueue_key
	mov	r3, r0
	mov	r2, fp
	cmp	r3, #0
	mov	r1, r10
	add	r0, r4, #20
	str	r3, [r4, #32]
	beq	.L16826
	ldr	r3, [sp, #12]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r6, [r4, #8]
	str	r6, [r4, #16]
	bl	__init_waitqueue_head
	movw	r3, #:lower16:ghsuart_ctrl_connect_w
	movw	r2, #:lower16:ghsuart_ctrl_disconnect_w
	str	r4, [r4, #72]
	movt	r3, #:upper16:ghsuart_ctrl_connect_w
	movw	r1, #:lower16:ghsuart_ctrl_receive
	mov	ip, #2560
	add	r0, r4, #56
	movt	r2, #:upper16:ghsuart_ctrl_disconnect_w
	movt	r1, #:upper16:ghsuart_ctrl_receive
	str	r3, [r4, #48]
	add	r3, r4, #40
	mov	lr, #42
	str	ip, [r4, #36]
	str	r3, [r4, #40]
	str	r3, [r4, #44]
	movw	r3, #:lower16:ghsuart_ctrl_remove
	movt	r3, #:upper16:ghsuart_ctrl_remove
	str	ip, [r4, #52]
	str	r0, [r4, #56]
	str	r0, [r4, #60]
	mov	r0, r5
	str	r2, [r4, #64]
	movw	r2, #:lower16:ghsuart_ctrl_probe
	str	lr, [r4, #76]
	movt	r2, #:upper16:ghsuart_ctrl_probe
	str	r1, [r4, #84]
	str	r4, [r5, #-4]
	str	r3, [r5, #4]
	ldr	r3, [sp, #16]
	str	r2, [r5]
	str	r3, [r5, #20]
	str	r6, [r5, #28]
	bl	platform_driver_register
	cmp	r0, #0
	ldr	ip, .L16829+12
	blt	.L16822
	ldrh	r3, [ip]
	tst	r3, #4
	bne	.L16827
.L16809:
	ldr	r3, [sp, #8]
	add	r7, r7, #1
	add	r5, r5, #84
	cmp	r3, r7
	bhi	.L16811
.L16802:
	ldr	r0, [sp, #20]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16822:
	mov	r6, r0
.L16807:
	ldr	r3, [r8, #1856]
	movw	r0, #:lower16:.LC1266
	mov	r2, r7
	ldr	r1, .L16829+8
	movt	r0, #:upper16:.LC1266
	ldr	ip, [sp, #28]
	sub	r3, r3, #1
	add	r4, r1, ip
	ldr	r1, .L16829+16
	str	r3, [r8, #1856]
	bl	printk
	ldr	r5, [sp, #20]
.L16810:
	ldr	r3, [r8, #1856]
	add	r7, r4, #84
	cmp	r5, r3
	bcs	.L16828
	ldr	r9, [r7, #-84]
	add	r5, r5, #1
	ldr	r0, [r9, #32]
	bl	destroy_workqueue
	add	r0, r4, #4
	mov	r4, r7
	bl	platform_driver_unregister
	mov	r0, r9
	bl	kfree
	b	.L16810
.L16827:
	movw	r1, #:lower16:.LC1267
	ldr	r2, .L16829+20
	mov	r3, r4
	sub	r0, ip, #18
	movt	r1, #:upper16:.LC1267
	str	r7, [sp]
	bl	__dynamic_pr_debug
	b	.L16809
.L16825:
	movw	r1, #:lower16:.LC1282
	ldr	r2, .L16829+16
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1282
	bl	__dynamic_pr_debug
	b	.L16805
.L16814:
	mvn	r6, #11
	b	.L16807
.L16824:
	mov	r2, r3
	movw	r0, #:lower16:.LC1284
	ldr	r1, .L16829+16
	mvn	r3, #21
	movt	r0, #:upper16:.LC1284
	str	r3, [sp, #20]
	bl	printk
	b	.L16802
.L16826:
	movw	r2, #:lower16:.LC1295
	movw	r0, #:lower16:.LC1292
	ldr	r1, .L16829+20
	movt	r2, #:upper16:.LC1295
	movt	r0, #:upper16:.LC1292
	bl	printk
	mov	r0, r4
	mvn	r6, #11
	bl	kfree
	b	.L16807
.L16828:
	ldr	r3, [sp, #24]
	str	r6, [sp, #20]
	str	r3, [r8, #1856]
	b	.L16802
.L16830:
	.align	2
.L16829:
	.word	.LANCHOR8-1824
	.word	.LANCHOR1+3968
	.word	.LANCHOR1+1860
	.word	.LANCHOR8-1806
	.word	.LANCHOR5+1424
	.word	.LANCHOR5+1444
	.fnend
	.size	ghsuart_ctrl_setup, .-ghsuart_ctrl_setup
	.align	2
	.global	event_string
	.syntax unified
	.arm
	.fpu softvfp
	.type	event_string, %function
event_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #8
	bhi	.L16833
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	add	r0, r3, r0, lsl #2
	ldr	r0, [r0, #1468]
	bx	lr
.L16833:
	movw	r0, #:lower16:.LC183
	movt	r0, #:upper16:.LC183
	bx	lr
	.fnend
	.size	event_string, .-event_string
	.align	2
	.global	ghsuart_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_disconnect, %function
ghsuart_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16855
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16851
.L16835:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #84
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #2028]
	mla	r3, r2, r5, r3
	cmp	r5, r1
	ldr	r4, [r3, #2032]
	bhi	.L16852
	clz	r3, r4
	cmp	r6, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L16853
	mov	r0, r4
	bl	ghsuart_data_free_buffers.part.0
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L16838
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L16838:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L16839
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L16839:
	ldr	r5, [r4, #16]
	mov	r3, #0
	str	r3, [r4, #4]
	cmp	r5, r3
	beq	.L16854
.L16840:
	add	r8, r4, #72
	mov	r5, #0
	mov	r0, r8
	add	r7, r4, #184
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #192]
	bl	_clear_bit
	mov	r1, r6
	mov	r0, r8
	add	r6, r4, #104
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r5, r0
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #128
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r4, #108]
	ldrd	r4, [sp]
	add	sp, sp, #24
	b	queue_work
.L16854:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r5, [r6, #140]
	str	r5, [r4, #24]
	str	r5, [r4, #196]
	bl	_raw_spin_unlock_irqrestore
	b	.L16840
.L16851:
	movw	r1, #:lower16:.LC612
	ldr	r2, .L16855+4
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC612
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L16835
.L16852:
	movw	r0, #:lower16:.LC174
	mov	r2, r5
	ldr	r1, .L16855+4
	movt	r0, #:upper16:.LC174
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L16853:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L16855+4
	movt	r0, #:upper16:.LC105
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L16856:
	.align	2
.L16855:
	.word	.LANCHOR8-1776
	.word	.LANCHOR5+1504
	.fnend
	.size	ghsuart_data_disconnect, .-ghsuart_data_disconnect
	.section	.rodata.str1.4
	.align	2
.LC1296:
	.ascii	"%s: ctrl xport: %s data xport: %s dev: %pK portno: "
	.ascii	"%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_disable, %function
frmnet_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	ldr	r8, .L16898
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #16
	sub	sp, sp, #16
	ldrh	r3, [r8, #-14]
	tst	r3, #4
	bne	.L16894
.L16858:
	ldr	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, .L16898+4
	mov	r3, #0
	ldr	r2, [r4, #136]
	str	r3, [r2]
	ldrh	r2, [r0, #-6]
	str	r3, [r4, #120]
	tst	r2, #4
	bne	.L16895
.L16859:
	add	r7, r4, #132
	add	r9, r4, #144
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #144]
	mov	r6, r0
	cmp	r5, r9
	beq	.L16863
.L16860:
	mov	r0, r5
	sub	r10, r5, #8
	bl	list_del
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r10
	bl	kfree
	ldr	r5, [r4, #144]
	cmp	r9, r5
	bne	.L16860
.L16863:
	mov	r3, #0
	mov	r1, r6
	mov	r0, r7
	movw	r5, #:lower16:.LANCHOR1
	str	r3, [r4, #152]
	movt	r5, #:upper16:.LANCHOR1
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, .L16898+8
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	ldrh	r0, [r3, #-6]
	lsl	r3, r2, #1
	add	r1, r3, r2
	add	r1, r5, r1, lsl #3
	tst	r0, #4
	ldr	r6, [r1, #3240]
	ldr	r7, [r1, #3244]
	bne	.L16896
.L16862:
	add	r1, r3, r2
	sub	r0, r7, #3
	add	r1, r5, r1, lsl #3
	ldr	r1, [r1, #3252]
	cmp	r0, #7
	ldrls	pc, [pc, r0, asl #2]
	b	.L16866
.L16868:
	.word	.L16872
	.word	.L16871
	.word	.L16866
	.word	.L16866
	.word	.L16866
	.word	.L16870
	.word	.L16869
	.word	.L16867
.L16870:
	mov	r0, r4
	bl	ghsic_ctrl_disconnect
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r2, #1
.L16867:
	add	r3, r3, r2
	add	r5, r5, r3, lsl #3
	sub	r2, r6, #5
	ldr	r1, [r5, #3248]
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L16874
.L16876:
	.word	.L16879
	.word	.L16879
	.word	.L16879
	.word	.L16878
	.word	.L16877
	.word	.L16857
.L16879:
	uxtb	r1, r1
	mov	r2, r6
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gbam_disconnect
.L16857:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16877:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	ghsuart_data_disconnect
.L16878:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	ghsic_data_disconnect
.L16869:
	mov	r0, r4
	bl	ghsuart_ctrl_disconnect
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r2, #1
	b	.L16867
.L16871:
	mov	r0, r4
	bl	gqti_ctrl_disconnect
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r2, #1
	b	.L16867
.L16872:
	uxtb	r1, r1
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r2, #1
	b	.L16867
.L16894:
	movw	r1, #:lower16:.LC612
	ldrb	r3, [r0, #116]	@ zero_extendqisi2
	sub	r0, r8, #32
	ldr	r2, .L16898+12
	movt	r1, #:upper16:.LC612
	bl	__dynamic_pr_debug
	b	.L16858
.L16895:
	movw	r1, #:lower16:.LC612
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	sub	r0, r0, #24
	ldr	r2, .L16898+16
	movt	r1, #:upper16:.LC612
	bl	__dynamic_pr_debug
	b	.L16859
.L16896:
	sub	r1, r7, #1
	cmp	r1, #9
	movwhi	r3, #:lower16:.LC183
	movthi	r3, #:upper16:.LC183
	bhi	.L16864
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r1, lsl #2
	ldr	r3, [r3, #1160]
.L16864:
	sub	r0, r6, #1
	cmp	r0, #9
	movwhi	r0, #:lower16:.LC183
	movthi	r0, #:upper16:.LC183
	bhi	.L16865
	movw	r1, #:lower16:.LANCHOR3
	movt	r1, #:upper16:.LANCHOR3
	add	r1, r1, r0, lsl #2
	ldr	r0, [r1, #1160]
.L16865:
	movw	r1, #:lower16:.LC1296
	stm	sp, {r0, r4}
	sub	r0, r8, #8
	movt	r1, #:upper16:.LC1296
	str	r2, [sp, #8]
	ldr	r2, .L16898+20
	bl	__dynamic_pr_debug
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r2, #1
	b	.L16862
.L16874:
	sub	r6, r6, #1
	cmp	r6, #9
	bls	.L16897
.L16884:
	movw	r2, #:lower16:.LC183
	movt	r2, #:upper16:.LC183
.L16880:
	ldr	r1, .L16898+20
	movw	r0, #:lower16:.LC637
	movt	r0, #:upper16:.LC637
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L16866:
	sub	r7, r7, #1
	cmp	r7, #9
	bhi	.L16884
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r7, r3, r7, lsl #2
	ldr	r2, [r7, #1160]
	b	.L16880
.L16897:
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r6, r3, r6, lsl #2
	ldr	r2, [r6, #1160]
	b	.L16880
.L16899:
	.align	2
.L16898:
	.word	.LANCHOR8-1744
	.word	.LANCHOR4-2400
	.word	.LANCHOR8-1728
	.word	.LANCHOR5+1528
	.word	.LANCHOR5-3708
	.word	.LANCHOR5+1544
	.fnend
	.size	frmnet_disable, .-frmnet_disable
	.align	2
	.global	ghsuart_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_connect, %function
ghsuart_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16918
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L16913
.L16901:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #84
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #2028]
	mla	r3, r2, r5, r3
	cmp	r5, r1
	ldr	r4, [r3, #2032]
	bhi	.L16914
	cmp	r4, #0
	cmpne	r6, #0
	beq	.L16915
	ldr	r3, [r4, #16]
	add	r8, r4, #72
	add	r7, r4, #104
	mov	r0, r8
	cmp	r3, #0
	bne	.L16905
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #88]
	mov	r1, r0
	mov	r0, r8
	add	r5, r4, #20
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #92]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR7
	mov	r0, r5
	movt	r3, #:upper16:.LANCHOR7
	ldr	r2, [r3, #-1544]
	ldr	r3, [r3, #-1540]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r6, #88]
	str	r4, [r3]
	ldr	r3, [r6, #92]
	str	r4, [r3]
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:ghsuart_send_controlbits_tomodem
	mov	r1, r0
	movt	r3, #:upper16:ghsuart_send_controlbits_tomodem
	mov	r0, r5
	str	r3, [r6, #140]
	str	r6, [r4, #24]
	bl	_raw_spin_unlock_irqrestore
.L16906:
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L16916
	ldr	r0, [r4, #12]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L16917
	mov	r3, #1
	mov	r0, r8
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r8
	str	r5, [r4, #208]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r5, [r4, #204]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #112
	ldr	r0, [r4, #108]
	bl	queue_work
.L16900:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16905:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #84]
	mov	r1, r0
	mov	r0, r8
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #88]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldr	r2, [r3, #-1536]
	ldr	r3, [r3, #-1532]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r6, #84]
	str	r4, [r3]
	ldr	r3, [r6, #88]
	str	r4, [r3]
	b	.L16906
.L16913:
	movw	r1, #:lower16:.LC612
	ldr	r2, .L16918+4
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC612
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L16901
.L16915:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L16918+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC105
	bl	printk
	b	.L16900
.L16917:
	movw	r0, #:lower16:.LC386
	ldr	r1, .L16918+4
	movt	r0, #:upper16:.LC386
	ldr	r2, [r4, #12]
	bl	printk
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L16900
.L16914:
	movw	r0, #:lower16:.LC174
	mov	r2, r5
	ldr	r1, .L16918+4
	movt	r0, #:upper16:.LC174
	mvn	r5, #18
	bl	printk
	b	.L16900
.L16916:
	movw	r0, #:lower16:.LC385
	ldr	r1, .L16918+4
	movt	r0, #:upper16:.LC385
	ldr	r2, [r4, #8]
	bl	printk
	b	.L16900
.L16919:
	.align	2
.L16918:
	.word	.LANCHOR8-1696
	.word	.LANCHOR5+1568
	.fnend
	.size	ghsuart_data_connect, .-ghsuart_data_connect
	.section	.rodata.str1.4
	.align	2
.LC1297:
	.ascii	"%s: reset port:%d\012\000"
	.align	2
.LC1298:
	.ascii	"<3>%s: gsmd_ctrl_connect failed: err:%d\012\000"
	.align	2
.LC1299:
	.ascii	"<3>%s: gqti_ctrl_connect failed: err:%d\012\000"
	.align	2
.LC1300:
	.ascii	"<3>%s: ghsic_ctrl_connect failed: err:%d\012\000"
	.align	2
.LC1301:
	.ascii	"<3>%s: ghsuart_ctrl_connect failed: err:%d\012\000"
	.align	2
.LC1302:
	.ascii	"<3>%s: usb_bam_get_connection_idx failed\012\000"
	.align	2
.LC1303:
	.ascii	"<3>%s: gbam_connect failed: err:%d\012\000"
	.align	2
.LC1304:
	.ascii	"<3>%s: ghsic_data_connect failed: err:%d\012\000"
	.align	2
.LC1305:
	.ascii	"<3>%s: ghsuart_data_connect failed: err:%d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_set_alt, %function
frmnet_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17033
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-6]
	.pad #36
	sub	sp, sp, #36
	ldr	r5, [r0, #128]
	tst	r2, #4
	bne	.L17020
.L16921:
	ldr	r2, [r4, #136]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L16922
	ldr	r0, .L17033+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17021
.L16923:
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #136]
.L16922:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	subs	r8, r0, #0
	bne	.L17022
	ldr	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r8, r0, #0
	bne	.L17023
	ldr	r3, [r4, #136]
	str	r4, [r3]
	ldr	r2, [r4, #84]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L16927
	ldr	r3, [r4, #88]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L16927
.L16928:
	mov	r3, #1
	mov	r7, r4
	str	r3, [r4, #120]
	ldr	r5, [r7, #144]!
	cmp	r5, r7
	beq	.L16920
	movw	fp, #:lower16:.LC705
	ldr	r9, .L17033+8
	add	r6, r4, #132
	movt	fp, #:upper16:.LC705
	str	r8, [sp, #20]
	b	.L16969
.L17027:
	ldr	r2, [r10]
	cmp	r2, #0
	beq	.L17019
	ldr	r2, [r4, #152]
	add	r2, r2, #1
	cmp	r2, #1
	str	r2, [r4, #152]
	bne	.L17019
	ldr	ip, [r10]
	mvn	lr, #94
	mov	r0, r6
	strb	lr, [ip]
	strb	r2, [ip, #1]
	strb	r3, [ip, #2]
	strb	r3, [ip, #3]
	ldrh	r2, [r4, #112]
	strh	r2, [ip, #4]	@ unaligned
	strb	r3, [ip, #6]
	strb	r3, [ip, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #136]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	bne	.L17024
.L16962:
	ldr	r5, [r5]
	cmp	r5, r7
	beq	.L17025
.L16969:
	ldrh	r3, [r9, #-14]
	ldr	r10, [r4, #140]
	tst	r3, #4
	bne	.L17026
.L16959:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	cmp	r10, #0
	mov	r1, r0
	clz	r3, r3
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r3, #0
	beq	.L17027
.L17019:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L17030:
	ldr	r5, [r5]
	cmp	r5, r7
	bne	.L16969
.L17025:
	ldr	r8, [sp, #20]
.L16920:
	mov	r0, r8
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17026:
	ldrb	ip, [r4, #116]	@ zero_extendqisi2
	mov	r3, r4
	mov	r1, fp
	ldr	r2, .L17033+12
	ldr	r0, .L17033+16
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L16959
.L17024:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #144]
	mov	r8, r0
	cmp	r2, r7
	beq	.L16965
	ldr	r3, [r4, #152]
	cmp	r3, #0
	beq	.L16966
	sub	r3, r3, #1
	mov	r0, r2
	str	r2, [sp, #28]
	str	r3, [r4, #152]
	sub	r3, r2, #8
	str	r3, [sp, #24]
	bl	list_del
	ldr	r2, [sp, #28]
	ldr	r0, [r2, #-8]
	bl	kfree
	ldr	r3, [sp, #24]
	mov	r0, r3
	bl	kfree
.L16965:
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, .L17033+20
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L16962
	movw	r1, #:lower16:.LC156
	mov	r2, r10
	movt	r1, #:upper16:.LC156
	sub	r0, r0, #18
	bl	__dynamic_pr_debug
	b	.L16962
.L16927:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16930
	mov	r1, r4
	ldr	r0, [r5]
	ldr	r2, [r4, #88]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16930
	ldr	r3, .L17033+24
	movw	r5, #:lower16:.LANCHOR1
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	movt	r5, #:upper16:.LANCHOR1
	ldr	r2, [r4, #128]
	ldrh	r1, [r3, #-6]
	lsl	r3, r0, #1
	ldr	r9, [r2]
	add	r2, r3, r0
	add	r2, r5, r2, lsl #3
	tst	r1, #4
	ldr	r6, [r2, #3240]
	ldr	r7, [r2, #3244]
	bne	.L17028
.L16931:
	add	r1, r3, r0
	sub	r2, r7, #3
	add	r1, r5, r1, lsl #3
	ldr	r1, [r1, #3252]
	cmp	r2, #7
	ldrls	pc, [pc, r2, asl #2]
	b	.L16934
.L16936:
	.word	.L16940
	.word	.L16939
	.word	.L16934
	.word	.L16934
	.word	.L16934
	.word	.L16938
	.word	.L16937
	.word	.L16935
.L16938:
	mov	r0, r4
	bl	ghsic_ctrl_connect
	subs	r2, r0, #0
	bne	.L16943
.L17017:
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
.L16935:
	add	r3, r3, r0
	add	r5, r5, r3, lsl #3
	sub	r2, r6, #5
	ldr	r5, [r5, #3248]
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L16946
.L16947:
	.word	.L16952
	.word	.L16951
	.word	.L16950
	.word	.L16949
	.word	.L16948
	.word	.L16973
.L16966:
	ldr	r2, .L17033+28
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L17029
.L16967:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L17030
.L17022:
	ldr	r2, [r4, #136]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r8
	str	r0, [r2, #28]
	ldr	r0, [r5]
	ldr	r2, [r4, #136]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L16920
.L16948:
	mov	r1, r5
	mov	r0, r4
	bl	ghsuart_data_connect
	subs	r8, r0, #0
	beq	.L16928
	movw	r0, #:lower16:.LC1305
	ldr	r1, .L17033+32
	mov	r2, r8
	movt	r0, #:upper16:.LC1305
	bl	printk
	mov	r1, r5
	mov	r0, r4
	bl	ghsuart_ctrl_disconnect
	b	.L16928
.L16949:
	mov	r1, r5
	mov	r0, r4
	bl	ghsic_data_connect
	subs	r8, r0, #0
	beq	.L16928
	movw	r0, #:lower16:.LC1304
	ldr	r1, .L17033+32
	mov	r2, r8
	movt	r0, #:upper16:.LC1304
	bl	printk
	mov	r1, r5
	mov	r0, r4
	bl	ghsic_ctrl_disconnect
	b	.L16928
.L16950:
	mov	r3, r5
	mov	r2, #0
	ldr	r0, [r9, #28]
	mov	r1, #2
	uxtb	r6, r5
	bl	usb_bam_get_connection_idx
	mov	r3, r5
	mov	r2, #1
	mov	r5, r0
	mov	r1, #2
	ldr	r0, [r9, #28]
	bl	usb_bam_get_connection_idx
	orrs	r3, r0, r5
	bmi	.L17031
	uxtb	ip, r0
	uxtb	r3, r5
	mov	r2, #7
	mov	r1, r6
	mov	r0, r4
	str	ip, [sp]
	bl	gbam_connect
	subs	r5, r0, #0
	beq	.L16928
	movw	r0, #:lower16:.LC1303
	ldr	r1, .L17033+32
	mov	r2, r5
	movt	r0, #:upper16:.LC1303
	bl	printk
	cmp	r7, #4
	bne	.L16957
	mov	r0, r4
	mov	r8, r5
	bl	gqti_ctrl_disconnect
	b	.L16928
.L16951:
	mov	r2, #0
	mov	r3, r5
	ldr	r0, [r9, #28]
	mov	r1, r2
	uxtb	r7, r5
	bl	usb_bam_get_connection_idx
	mov	r3, r5
	mov	r2, #1
	mov	r5, r0
	mov	r1, #0
	ldr	r0, [r9, #28]
	bl	usb_bam_get_connection_idx
	orrs	r3, r0, r5
	bmi	.L16953
	uxtb	r3, r5
	uxtb	r1, r0
.L16954:
	str	r1, [sp]
	mov	r2, r6
	mov	r0, r4
	mov	r1, r7
	bl	gbam_connect
	subs	r8, r0, #0
	beq	.L16928
	movw	r0, #:lower16:.LC1303
	ldr	r1, .L17033+32
	mov	r2, r8
	movt	r0, #:upper16:.LC1303
	bl	printk
	mov	r1, r7
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L16928
.L16952:
	mov	r1, #0
	uxtb	r7, r5
	mov	r3, r1
	b	.L16954
.L16973:
	mov	r8, #0
	b	.L16928
.L16939:
	mov	r0, r4
	bl	gqti_ctrl_connect
	subs	r2, r0, #0
	beq	.L17017
	movw	r0, #:lower16:.LC1299
	ldr	r1, .L17033+32
	mov	r8, r2
	movt	r0, #:upper16:.LC1299
	bl	printk
	b	.L16928
.L16940:
	mov	r0, r4
	bl	gsmd_ctrl_connect
	subs	r2, r0, #0
	beq	.L17017
	movw	r0, #:lower16:.LC1298
	ldr	r1, .L17033+32
	mov	r8, r2
	movt	r0, #:upper16:.LC1298
	bl	printk
	b	.L16928
.L16937:
	mov	r0, r4
	bl	ghsuart_ctrl_connect
	subs	r2, r0, #0
	beq	.L17017
	movw	r0, #:lower16:.LC1301
	ldr	r1, .L17033+32
	mov	r8, r2
	movt	r0, #:upper16:.LC1301
	bl	printk
	b	.L16928
.L17020:
	ldrb	ip, [r0, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC148
	sub	r0, r3, #24
	ldr	r2, .L17033+36
	movt	r1, #:upper16:.LC148
	mov	r3, r4
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L16921
.L17021:
	movw	r1, #:lower16:.LC1297
	ldr	r2, .L17033+36
	sub	r0, r0, #32
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1297
	bl	__dynamic_pr_debug
	ldr	r2, [r4, #136]
	b	.L16923
.L17028:
	sub	r2, r7, #1
	cmp	r2, #9
	movwhi	r3, #:lower16:.LC183
	movthi	r3, #:upper16:.LC183
	bhi	.L16932
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #1160]
.L16932:
	sub	r1, r6, #1
	cmp	r1, #9
	movwhi	r2, #:lower16:.LC183
	movthi	r2, #:upper16:.LC183
	bhi	.L16933
	movw	r2, #:lower16:.LANCHOR3
	movt	r2, #:upper16:.LANCHOR3
	add	r2, r2, r1, lsl #2
	ldr	r2, [r2, #1160]
.L16933:
	movw	r1, #:lower16:.LC1296
	stm	sp, {r2, r4}
	ldr	r2, .L17033+32
	movt	r1, #:upper16:.LC1296
	str	r0, [sp, #8]
	ldr	r0, .L17033+40
	bl	__dynamic_pr_debug
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L16931
.L17029:
	movw	r1, #:lower16:.LC154
	ldr	r2, .L17033+12
	sub	r0, r9, #8
	movt	r1, #:upper16:.LC154
	bl	__dynamic_pr_debug
	b	.L16967
.L16930:
	ldr	r2, [r4, #84]
	mov	r3, #0
	mvn	r8, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #88]
	str	r3, [r2, #28]
	b	.L16920
.L16934:
	sub	r7, r7, #1
	cmp	r7, #9
	bls	.L17032
.L16974:
	movw	r2, #:lower16:.LC183
	movt	r2, #:upper16:.LC183
.L16958:
	movw	r0, #:lower16:.LC637
	ldr	r1, .L17033+32
	mvn	r8, #18
	movt	r0, #:upper16:.LC637
	bl	printk
	b	.L16928
.L17023:
	ldr	r2, [r4, #136]
	movw	r0, #:lower16:.LC1046
	mov	r3, r8
	ldr	r1, .L17033+36
	movt	r0, #:upper16:.LC1046
	ldr	r2, [r2, #4]
	bl	printk
	b	.L16920
.L16946:
	sub	r6, r6, #1
	cmp	r6, #9
	bhi	.L16974
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r6, r3, r6, lsl #2
	ldr	r2, [r6, #1160]
	b	.L16958
.L17032:
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r7, lsl #2
	ldr	r2, [r3, #1160]
	b	.L16958
.L16943:
	movw	r0, #:lower16:.LC1300
	ldr	r1, .L17033+32
	mov	r8, r2
	movt	r0, #:upper16:.LC1300
	bl	printk
	b	.L16928
.L16953:
	movw	r0, #:lower16:.LC1302
	ldr	r1, .L17033+32
	mov	r8, #0
	movt	r0, #:upper16:.LC1302
	bl	printk
	mov	r1, r7
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L16928
.L17031:
	movw	r0, #:lower16:.LC1302
	ldr	r1, .L17033+32
	mov	r8, #0
	movt	r0, #:upper16:.LC1302
	bl	printk
	mov	r1, r6
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L16928
.L16957:
	mov	r1, r6
	mov	r0, r4
	mov	r8, r5
	bl	gsmd_ctrl_disconnect
	b	.L16928
.L17034:
	.align	2
.L17033:
	.word	.LANCHOR8-1680
	.word	.LANCHOR8-1648
	.word	.LANCHOR4-1168
	.word	.LANCHOR5-2820
	.word	.LANCHOR4-1200
	.word	.LANCHOR4-1134
	.word	.LANCHOR8-1632
	.word	.LANCHOR4-1158
	.word	.LANCHOR5+1608
	.word	.LANCHOR5+1592
	.word	.LANCHOR8-1656
	.fnend
	.size	frmnet_set_alt, .-frmnet_set_alt
	.align	2
	.global	ghsuart_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_setup, %function
ghsuart_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r2, [r9, #2028]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	str	r1, [sp, #16]
	add	r1, r2, r0
	cmp	r1, #4
	str	r2, [sp, #28]
	str	r2, [sp, #32]
	movle	r2, #0
	movgt	r2, #1
	cmp	r0, #0
	str	r1, [sp, #12]
	moveq	r2, #1
	cmp	r2, #0
	bne	.L17058
	ldr	r2, .L17063
	ldrh	r2, [r2, #-14]
	tst	r2, #4
	bne	.L17059
.L17038:
	ldr	r3, [sp, #12]
	ldr	r7, [sp, #28]
	cmp	r7, r3
	bge	.L17035
	ldr	r2, [sp, #16]
	mov	r3, #84
	movw	r10, #:lower16:.LC744
	movt	r10, #:upper16:.LC744
	mul	r3, r3, r7
	cmp	r2, #0
	movw	r2, #:lower16:kmalloc_caches
	movt	r2, #:upper16:kmalloc_caches
	moveq	r1, #11
	movne	r1, #10
	add	r6, r3, #4
	str	r2, [sp, #20]
	ldr	r2, .L17063+4
	str	r1, [sp, #24]
	str	r3, [sp, #36]
	add	fp, r2, #1936
	add	r6, r2, r6
	b	.L17044
.L17062:
	mov	r2, #216
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17040
.L17039:
	ldr	r3, .L17063+8
	mov	r5, #0
	mov	r2, #1
	mov	r1, #10
	str	r5, [sp]
	ldr	r8, [r3, r7, lsl #2]
	mov	r3, r5
	mov	r0, r8
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #108]
	beq	.L17060
	mov	r2, fp
	mov	r1, r10
	str	r7, [r4]
	add	r0, r4, #32
	str	r5, [r4, #20]
	str	r5, [r4, #28]
	str	r5, [r4, #104]
	str	r5, [r4, #72]
	bl	__init_waitqueue_head
	movw	r0, #:lower16:ghsuart_data_write_tomdm
	movw	r3, #:lower16:ghsuart_data_disconnect_w
	ldr	r2, [sp, #16]
	movt	r0, #:upper16:ghsuart_data_write_tomdm
	movt	r3, #:upper16:ghsuart_data_disconnect_w
	movw	lr, #:lower16:ghsuart_data_connect_w
	movw	ip, #:lower16:ghsuart_data_write_tohost
	movt	lr, #:upper16:ghsuart_data_connect_w
	movw	r1, #:lower16:ghsuart_data_probe
	str	r0, [r4, #156]
	add	r0, r4, #132
	movt	ip, #:upper16:ghsuart_data_write_tohost
	str	r3, [r4, #140]
	mov	r3, #2560
	movt	r1, #:upper16:ghsuart_data_probe
	str	r2, [r4, #16]
	movw	r2, #:lower16:ghsuart_data_remove
	str	r0, [r4, #132]
	movt	r2, #:upper16:ghsuart_data_remove
	str	r0, [r4, #136]
	add	r0, r4, #148
	str	lr, [r4, #124]
	add	lr, r4, #116
	str	r3, [r4, #112]
	str	r3, [r4, #128]
	str	r3, [r4, #144]
	str	r3, [r4, #160]
	add	r3, r4, #80
	str	r0, [r4, #148]
	str	r0, [r4, #152]
	add	r0, r4, #48
	str	r0, [r4, #48]
	str	r0, [r4, #52]
	add	r0, r4, #56
	str	r3, [r4, #80]
	str	r3, [r4, #84]
	ldr	r3, [sp, #24]
	str	r0, [r4, #56]
	str	r0, [r4, #60]
	add	r0, r4, #88
	str	lr, [r4, #116]
	str	lr, [r4, #120]
	add	lr, r4, #164
	str	r5, [r4, #64]
	str	r5, [r4, #68]
	str	r0, [r4, #88]
	str	r0, [r4, #92]
	mov	r0, r6
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	lr, [r4, #164]
	str	lr, [r4, #168]
	str	ip, [r4, #172]
	str	r4, [r4, #176]
	str	r3, [r4, #180]
	str	r4, [r6, #-4]
	stm	r6, {r1, r2}
	str	r8, [r6, #20]
	str	r5, [r6, #28]
	bl	platform_driver_register
	ldr	r3, .L17063+12
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L17061
.L17042:
	ldr	r3, [sp, #12]
	add	r7, r7, #1
	add	r6, r6, #84
	cmp	r3, r7
	ble	.L17035
.L17044:
	ldr	r2, [sp, #20]
	ldr	r3, [r9, #2028]
	ldr	r0, [r2, #32]
	add	r3, r3, #1
	str	r3, [r9, #2028]
	cmp	r0, #0
	bne	.L17062
	mov	r4, #16
	b	.L17039
.L17060:
	movw	r0, #:lower16:.LC1292
	ldr	r1, .L17063+16
	mov	r2, r8
	movt	r0, #:upper16:.LC1292
	bl	printk
	mov	r0, r4
	bl	kfree
.L17040:
	ldr	r3, [r9, #2028]
	movw	r0, #:lower16:.LC1266
	mov	r2, r7
	ldr	r1, .L17063+4
	movt	r0, #:upper16:.LC1266
	ldr	ip, [sp, #36]
	sub	r3, r3, #1
	add	r4, r1, ip
	ldr	r1, .L17063+20
	str	r3, [r9, #2028]
	bl	printk
	ldr	r5, [sp, #28]
.L17043:
	ldr	r3, [r9, #2028]
	add	r6, r4, #84
	cmp	r5, r3
	bcc	.L17045
	mvn	r3, #11
	str	r3, [sp, #28]
	ldr	r3, [sp, #32]
	str	r3, [r9, #2028]
.L17035:
	ldr	r0, [sp, #28]
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17061:
	ldr	r0, .L17063
	movw	r1, #:lower16:.LC1267
	mov	r3, r4
	ldr	r2, .L17063+16
	movt	r1, #:upper16:.LC1267
	str	r7, [sp]
	sub	r0, r0, #8
	bl	__dynamic_pr_debug
	b	.L17042
.L17059:
	ldr	r0, .L17063
	movw	r1, #:lower16:.LC1294
	ldr	r2, .L17063+20
	movt	r1, #:upper16:.LC1294
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L17038
.L17058:
	mov	r2, r3
	movw	r0, #:lower16:.LC1284
	ldr	r1, .L17063+20
	mvn	r3, #21
	movt	r0, #:upper16:.LC1284
	str	r3, [sp, #28]
	bl	printk
	b	.L17035
.L17045:
	ldr	r7, [r6, #-84]
	add	r5, r5, #1
	ldr	r0, [r7, #108]
	bl	destroy_workqueue
	mov	r0, r7
	bl	kfree
	add	r0, r4, #4
	mov	r4, r6
	bl	platform_driver_unregister
	b	.L17043
.L17064:
	.align	2
.L17063:
	.word	.LANCHOR8-1600
	.word	.LANCHOR1+2032
	.word	.LANCHOR5+1648
	.word	.LANCHOR8-1590
	.word	.LANCHOR5+1656
	.word	.LANCHOR5+1628
	.fnend
	.size	ghsuart_data_setup, .-ghsuart_data_setup
	.section	.rodata.str1.4
	.align	2
.LC1306:
	.ascii	"<3>%s: Max-%d instances supported\012\000"
	.align	2
.LC1307:
	.ascii	"%s: port#:%d, ctrl port: %s data port: %s\012\000"
	.align	2
.LC1308:
	.ascii	"<3>%s: Unable to allocate rmnet device\012\000"
	.align	2
.LC1309:
	.ascii	"<3>%s: Un-supported transport: %u\012\000"
	.align	2
.LC1310:
	.ascii	"<3>%s: rmnet: Cannot open ctrl port:'%s' data port:"
	.ascii	"'%s'\012\000"
	.align	2
.LC1311:
	.ascii	"%s: bam ports: %u bam2bam ports: %u data hsic ports"
	.ascii	": %u data hsuart ports: %u smd ports: %u ctrl hsic "
	.ascii	"ports: %u ctrl hsuart ports: %u nr_rmnet_ports: %u\012"
	.ascii	"\000"
	.align	2
.LC1312:
	.ascii	"%s: usb config:%pK\012\000"
	.align	2
.LC1313:
	.ascii	"<3>%s: supporting ports#%u port_id:%u\000"
	.align	2
.LC1314:
	.ascii	"<3>%s: failed to get string id, err:%d\012\000"
	.align	2
.LC1315:
	.ascii	"rmnet%d\000"
	.align	2
.LC1316:
	.ascii	"<3>%s: cannot allocate memory for name\012\000"
	.align	2
.LC1317:
	.ascii	"<3>%s: usb add function failed: %d\012\000"
	.align	2
.LC1318:
	.ascii	"%s: complete\012\000"
	.align	2
.LC1319:
	.ascii	"<3>%s: Could not bind rmnet%u config\012\000"
	.align	2
.LC1320:
	.ascii	"<3>%s: rmnet: Cannot setup transports\000"
	.section	.rodata.cst4
	.align	2
.LC1321:
	.word	__stack_chk_guard
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_function_bind_config, %function
rmnet_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 136
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:.LC1321
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LC1321
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	mov	r8, r1
	ldr	r9, [r7, #4056]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #172
	sub	sp, sp, #172
	ldr	r3, [r3]
	str	r3, [sp, #164]
	mov	r3,#0
	cmp	r9, #0
	beq	.L17204
.L17066:
	ldr	r3, [r7, #4060]
	cmp	r3, #0
	ble	.L17145
	ldr	r9, .L17224
	mov	r5, #0
	ldr	r10, .L17224+4
.L17146:
	ldrh	r3, [r10, #-14]
	tst	r3, #4
	bne	.L17205
.L17136:
	ldr	r2, [r7, #3356]
	cmp	r5, r2
	bcs	.L17206
	movw	r2, #:lower16:.LANCHOR7
	movt	r2, #:upper16:.LANCHOR7
	ldrb	r3, [r2, #-1528]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L17139
	ldr	r1, [r8, #24]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17207
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #-1528]
	strb	r3, [r1, #48]
.L17139:
	ldr	r4, [r9, #20]
	add	fp, r4, #132
	mov	r0, fp
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r8, #24]
	movw	r1, #:lower16:.LC1315
	mov	r6, r0
	movt	r1, #:upper16:.LC1315
	mov	r2, r5
	mov	r0, #32
	str	r3, [r4, #128]
	bl	kasprintf
	mov	r3, r0
	mov	r1, r6
	mov	r0, fp
	str	r3, [r4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L17208
	ldr	r3, .L17224+8
	movw	ip, #:lower16:frmnet_bind
	movw	r2, #:lower16:frmnet_unbind
	movt	ip, #:upper16:frmnet_bind
	movt	r2, #:upper16:frmnet_unbind
	movw	r6, #:lower16:frmnet_disable
	movw	r0, #:lower16:frmnet_setup
	movw	r1, #:lower16:frmnet_suspend
	movw	lr, #:lower16:frmnet_resume
	str	r3, [r4, #4]
	movw	r3, #:lower16:frmnet_set_alt
	movt	r0, #:upper16:frmnet_setup
	movt	r3, #:upper16:frmnet_set_alt
	str	ip, [r4, #32]
	movw	ip, #:lower16:frmnet_send_cpkt_response
	str	r2, [r4, #36]
	movw	r2, #:lower16:frmnet_disconnect
	movt	r1, #:upper16:frmnet_suspend
	str	r3, [r4, #40]
	movw	r3, #:lower16:frmnet_connect
	movt	lr, #:upper16:frmnet_resume
	movt	ip, #:upper16:frmnet_send_cpkt_response
	movt	r2, #:upper16:frmnet_disconnect
	strd	r0, [r4, #52]
	movt	r3, #:upper16:frmnet_connect
	movt	r6, #:upper16:frmnet_disable
	mov	r1, r4
	mov	r0, r8
	str	r6, [r4, #48]
	str	lr, [r4, #60]
	str	ip, [r4, #92]
	str	r2, [r4, #104]
	str	r3, [r4, #108]
	bl	usb_add_function
	cmp	r0, #0
	bne	.L17209
	ldr	r3, .L17224+12
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L17210
	ldr	r3, [r7, #4060]
	add	r5, r5, #1
	add	r9, r9, #24
	cmp	r3, r5
	bgt	.L17146
.L17145:
.L17099:
	mov	r6, #0
.L17065:
	movw	r3, #:lower16:.LC1321
	movt	r3, #:upper16:.LC1321
	ldr	r2, [r3]
	ldr	r3, [sp, #164]
	eors	r2, r3, r2
	bne	.L17211
	mov	r0, r6
	add	sp, sp, #172
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17205:
	movw	r1, #:lower16:.LC1312
	ldr	r2, .L17224+16
	mov	r3, r8
	movt	r1, #:upper16:.LC1312
	ldr	r0, .L17224+20
	bl	__dynamic_pr_debug
	b	.L17136
.L17210:
	movw	r1, #:lower16:.LC1318
	ldr	r2, .L17224+16
	sub	r0, r10, #8
	movt	r1, #:upper16:.LC1318
	add	r5, r5, #1
	bl	__dynamic_pr_debug
	ldr	r3, [r7, #4060]
	add	r9, r9, #24
	cmp	r5, r3
	blt	.L17146
	b	.L17145
.L17204:
	mov	r3, #1
	ldr	r1, .L17224+24
	mov	r2, #50
	add	r0, sp, #64
	movw	r6, #:lower16:.LC485
	str	r3, [r7, #4056]
	movt	r6, #:upper16:.LC485
	bl	strlcpy
	add	r0, sp, #64
	bl	strim
	mov	r3, r0
	mov	r2, #50
	add	r1, r7, #3072
	add	r0, sp, #114
	str	r3, [sp, #56]
	bl	strlcpy
	add	r0, sp, #114
	str	r9, [sp, #40]
	bl	strim
	str	r0, [sp, #60]
	b	.L17068
.L17100:
	mov	r1, r6
	add	r0, sp, #56
	bl	strsep
	mov	r4, r0
	mov	r1, r6
	add	r0, sp, #56
	bl	strsep
	cmp	r4, #0
	cmpne	r0, #0
	mov	r5, r0
	bne	.L17212
.L17068:
	ldr	r3, [sp, #56]
	cmp	r3, #0
	bne	.L17100
	ldr	ip, .L17224+20
	ldr	r0, [r7, #3372]
	ldr	r2, [r7, #3376]
	ldrh	r3, [ip, #-6]
	tst	r3, #4
	bne	.L17213
.L17101:
	orrs	r3, r0, r2
	bne	.L17102
.L17106:
	ldr	r1, [r7, #3364]
	cmp	r1, #0
	bne	.L17214
.L17104:
	ldr	r0, [r7, #3384]
	cmp	r0, #0
	bne	.L17215
.L17108:
	ldr	r0, [r7, #3380]
	cmp	r0, #0
	bne	.L17216
.L17114:
	ldr	r0, [r7, #3392]
	cmp	r0, #0
	bne	.L17217
.L17120:
	ldr	r0, [r7, #3388]
	cmp	r0, #0
	beq	.L17066
	mov	r1, #1
	bl	ghsuart_ctrl_setup
	subs	r6, r0, #0
	blt	.L17105
	ldr	r3, [r7, #3356]
	cmp	r3, #0
	beq	.L17066
	ldr	r2, [r7, #3244]
	cmp	r2, #9
	streq	r6, [r7, #3252]
	addeq	r6, r6, #1
	cmp	r3, #1
	bls	.L17066
	ldr	r2, [r7, #3268]
	cmp	r2, #9
	streq	r6, [r7, #3276]
	addeq	r6, r6, #1
	cmp	r3, #2
	beq	.L17066
	ldr	r3, [r7, #3292]
	cmp	r3, #9
	streq	r6, [r7, #3300]
	b	.L17066
.L17102:
	mov	r1, r2
	bl	gbam_setup
	subs	r6, r0, #0
	beq	.L17106
.L17105:
	movw	r0, #:lower16:.LC1320
	ldr	r1, .L17224+28
	movt	r0, #:upper16:.LC1320
	bl	printk
	b	.L17065
.L17212:
	ldr	r3, [sp, #60]
	cmp	r3, #0
	beq	.L17069
	mov	r1, r6
	add	r0, sp, #60
	bl	strsep
	str	r0, [sp, #40]
.L17069:
	ldr	r3, [r7, #3356]
	cmp	r3, #2
	bhi	.L17218
	ldr	r0, .L17224+32
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L17219
.L17072:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L17149
	mov	r2, #160
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L17220
.L17073:
	ldr	fp, [r7, #3356]
	mov	r1, #0
	add	r2, r3, #144
	mov	r0, r4
	str	r1, [r3, #132]
	lsl	r1, fp, #1
	strb	fp, [r3, #116]
	str	r2, [r3, #144]
	str	r1, [sp, #36]
	add	r1, r1, fp
	add	r10, r7, r1, lsl #3
	str	r2, [r3, #148]
	str	fp, [r10, #3256]
	str	r3, [r10, #3260]
	bl	str_to_xport
	mov	r2, r0
	mov	r0, r5
	str	r2, [r10, #3244]
	str	r2, [sp, #44]
	bl	str_to_xport
	ldr	r2, [sp, #44]
	str	r0, [r10, #3240]
	sub	r3, r2, #3
	cmp	r3, #7
	ldrls	pc, [pc, r3, asl #2]
	b	.L17074
.L17076:
	.word	.L17080
	.word	.L17079
	.word	.L17074
	.word	.L17074
	.word	.L17074
	.word	.L17078
	.word	.L17077
	.word	.L17075
.L17149:
	mov	r3, #16
	b	.L17073
.L17215:
	mov	r1, #1
	bl	ghsic_data_setup
	subs	r6, r0, #0
	blt	.L17105
	ldr	r3, [r7, #3356]
	cmp	r3, #0
	beq	.L17108
	ldr	r2, [r7, #3240]
	cmp	r2, #8
	streq	r6, [r7, #3248]
	addeq	r6, r6, #1
	cmp	r3, #1
	bls	.L17108
	ldr	r2, [r7, #3264]
	cmp	r2, #8
	streq	r6, [r7, #3272]
	addeq	r6, r6, #1
	cmp	r3, #2
	beq	.L17108
	ldr	r3, [r7, #3288]
	cmp	r3, #8
	streq	r6, [r7, #3296]
	b	.L17108
.L17216:
	mov	r1, #1
	bl	ghsic_ctrl_setup
	subs	r6, r0, #0
	blt	.L17105
	ldr	r3, [r7, #3356]
	cmp	r3, #0
	beq	.L17114
	ldr	r2, [r7, #3244]
	cmp	r2, #8
	streq	r6, [r7, #3252]
	addeq	r6, r6, #1
	cmp	r3, #1
	bls	.L17114
	ldr	r2, [r7, #3268]
	cmp	r2, #8
	streq	r6, [r7, #3276]
	addeq	r6, r6, #1
	cmp	r3, #2
	beq	.L17114
	ldr	r3, [r7, #3292]
	cmp	r3, #8
	streq	r6, [r7, #3300]
	b	.L17114
.L17078:
	ldr	r2, [r7, #4048]
	cmp	r2, #3
	bhi	.L17221
	ldr	r3, .L17224+36
	mov	r0, #104
	ldr	r1, [sp, #40]
	mla	r2, r0, r2, r3
	cmp	r1, #0
	moveq	r1, r4
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r3, .L17224+36
	mov	ip, #104
	movw	r1, #:lower16:.LC1291
	ldr	r0, [r7, #4048]
	movt	r1, #:upper16:.LC1291
	mov	r2, #20
	mla	r0, ip, r0, r3
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r7, #4048]
	add	r3, r3, #1
	str	r3, [r7, #4048]
.L17082:
	ldr	r3, [sp, #36]
	ldr	r2, [r7, #3380]
	add	r3, r3, fp
	add	r3, r7, r3, lsl #3
	add	r1, r2, #1
	ldr	r0, [r3, #3240]
	str	r1, [r7, #3380]
	str	r2, [r3, #3252]
.L17075:
	sub	r3, r0, #5
	cmp	r3, #5
	ldrls	pc, [pc, r3, asl #2]
	b	.L17086
.L17088:
	.word	.L17092
	.word	.L17091
	.word	.L17091
	.word	.L17090
	.word	.L17089
	.word	.L17087
.L17091:
	ldr	r3, [sp, #36]
	ldr	r2, [r7, #3376]
	add	r3, r3, fp
	add	r3, r7, r3, lsl #3
	add	r1, r2, #1
	str	r1, [r7, #3376]
	str	r2, [r3, #3248]
.L17087:
	ldr	r2, [r7, #3356]
	ldr	r3, [r7, #4060]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r7, #3356]
	str	r3, [r7, #4060]
	b	.L17068
.L17092:
	ldr	r3, [sp, #36]
	ldr	r2, [r7, #3372]
	add	r3, r3, fp
	add	r3, r7, r3, lsl #3
	add	r1, r2, #1
	str	r1, [r7, #3372]
	str	r2, [r3, #3248]
	b	.L17087
.L17089:
	ldr	r3, [sp, #36]
	ldr	r2, [r7, #3392]
	add	r3, r3, fp
	add	r3, r7, r3, lsl #3
	add	r1, r2, #1
	str	r1, [r7, #3392]
	str	r2, [r3, #3248]
	b	.L17087
.L17090:
	ldr	r2, [r7, #4052]
	cmp	r2, #3
	bhi	.L17222
	ldr	r4, .L17224+40
	mov	r0, #104
	ldr	r3, [sp, #40]
	mla	r2, r0, r2, r4
	cmp	r3, #0
	movne	r1, r3
	moveq	r1, r5
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r7, #4052]
	mov	r3, #104
	movw	r1, #:lower16:.LC1293
	movt	r1, #:upper16:.LC1293
	mov	r2, #20
	mla	r0, r3, r0, r4
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r7, #4052]
	add	r3, r3, #1
	str	r3, [r7, #4052]
.L17094:
	ldr	r3, [sp, #36]
	ldr	r2, [r7, #3384]
	add	r3, r3, fp
	add	r3, r7, r3, lsl #3
	add	r1, r2, #1
	str	r1, [r7, #3384]
	str	r2, [r3, #3248]
	b	.L17087
.L17077:
	ldr	r3, [sp, #36]
	ldr	r2, [r7, #3388]
	add	r3, r3, fp
	add	r3, r7, r3, lsl #3
	add	r1, r2, #1
	str	r1, [r7, #3388]
	str	r2, [r3, #3252]
	b	.L17075
.L17079:
	ldr	r3, [sp, #36]
	ldr	r2, [r7, #3368]
	add	r3, r3, fp
	add	r3, r7, r3, lsl #3
	add	r1, r2, #1
	str	r1, [r7, #3368]
	str	r2, [r3, #3252]
	b	.L17075
.L17080:
	ldr	r3, [sp, #36]
	ldr	r2, [r7, #3364]
	add	r3, r3, fp
	add	r3, r7, r3, lsl #3
	add	r1, r2, #1
	str	r1, [r7, #3364]
	str	r2, [r3, #3252]
	b	.L17075
.L17214:
	add	r2, sp, #55
	mov	r0, #0
	bl	gsmd_ctrl_setup
	subs	r6, r0, #0
	bne	.L17105
	ldr	r3, [r7, #3356]
	cmp	r3, #0
	beq	.L17104
	ldr	r2, [r7, #3260]
	ldrb	r1, [sp, #55]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L17109
	ldrb	r0, [r2, #116]	@ zero_extendqisi2
	add	r0, r1, r0
	strb	r0, [r2, #116]
.L17109:
	cmp	r3, #1
	bls	.L17104
	ldr	r2, [r7, #3284]
	cmp	r2, #0
	beq	.L17111
	ldrb	r0, [r2, #116]	@ zero_extendqisi2
	add	r0, r1, r0
	strb	r0, [r2, #116]
.L17111:
	cmp	r3, #2
	beq	.L17104
	ldr	r3, [r7, #3308]
	cmp	r3, #0
	beq	.L17104
	ldrb	r2, [r3, #116]	@ zero_extendqisi2
	add	r1, r1, r2
	strb	r1, [r3, #116]
	b	.L17104
.L17217:
	mov	r1, #1
	bl	ghsuart_data_setup
	subs	r6, r0, #0
	blt	.L17105
	ldr	r3, [r7, #3356]
	cmp	r3, #0
	beq	.L17120
	ldr	r2, [r7, #3240]
	cmp	r2, #9
	streq	r6, [r7, #3248]
	addeq	r6, r6, #1
	cmp	r3, #1
	bls	.L17120
	ldr	r2, [r7, #3264]
	cmp	r2, #9
	streq	r6, [r7, #3272]
	addeq	r6, r6, #1
	cmp	r3, #2
	beq	.L17120
	ldr	r3, [r7, #3288]
	cmp	r3, #9
	streq	r6, [r7, #3296]
	b	.L17120
.L17213:
	mov	r3, r0
	sub	r0, ip, #24
	ldr	r6, [r7, #3356]
	ldr	lr, [r7, #3384]
	movw	r1, #:lower16:.LC1311
	ldr	r5, [r7, #3364]
	movt	r1, #:upper16:.LC1311
	ldr	r4, [r7, #3380]
	ldr	ip, [r7, #3392]
	stm	sp, {r2, lr}
	ldr	r2, [r7, #3388]
	str	r6, [sp, #24]
	str	ip, [sp, #8]
	str	r5, [sp, #12]
	str	r4, [sp, #16]
	str	r2, [sp, #20]
	ldr	r2, .L17224+44
	bl	__dynamic_pr_debug
	ldr	r0, [r7, #3372]
	ldr	r2, [r7, #3376]
	b	.L17101
.L17219:
	movw	r1, #:lower16:.LC1307
	ldr	r2, .L17224+48
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC1307
	strd	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L17072
.L17211:
	bl	__stack_chk_fail
.L17222:
	movw	r0, #:lower16:.LC1290
	ldr	r1, .L17224+52
	movt	r0, #:upper16:.LC1290
	bl	printk
	b	.L17094
.L17086:
	mov	ip, r0
	movw	r0, #:lower16:.LC1309
	ldr	r1, .L17224+48
	mov	r2, ip
	movt	r0, #:upper16:.LC1309
	bl	printk
.L17085:
	ldr	r6, .L17224
.L17097:
	ldr	r3, [r7, #3356]
	add	r6, r6, #24
	cmp	r3, r9
	bls	.L17223
	ldr	r0, [r6, #-4]
	add	r9, r9, #1
	bl	kfree
	b	.L17097
.L17221:
	movw	r0, #:lower16:.LC1290
	ldr	r1, .L17224+56
	movt	r0, #:upper16:.LC1290
	bl	printk
	b	.L17082
.L17207:
	movw	r0, #:lower16:.LC1314
	mvn	r2, #18
	ldr	r1, .L17224+16
	movt	r0, #:upper16:.LC1314
	mov	r6, r2
	bl	printk
.L17138:
	movw	r0, #:lower16:.LC1319
	ldr	r1, .L17224+28
	mov	r2, r5
	movt	r0, #:upper16:.LC1319
	bl	printk
	b	.L17065
.L17209:
	mov	r6, r0
	movw	r0, #:lower16:.LC1317
	ldr	r1, .L17224+16
	mov	r2, r6
	movt	r0, #:upper16:.LC1317
	bl	printk
	ldr	r0, [r4]
	bl	kfree
	b	.L17138
.L17218:
	movw	r0, #:lower16:.LC1306
	ldr	r1, .L17224+48
	mov	r2, #3
	movt	r0, #:upper16:.LC1306
	mvn	r6, #21
	bl	printk
.L17071:
	movw	r0, #:lower16:.LC1310
	ldr	r1, .L17224+28
	mov	r3, r5
	mov	r2, r4
	movt	r0, #:upper16:.LC1310
	bl	printk
	b	.L17065
.L17206:
	movw	r0, #:lower16:.LC1313
	ldr	r1, .L17224+16
	mov	r3, r5
	movt	r0, #:upper16:.LC1313
	mvn	r6, #18
	bl	printk
	b	.L17138
.L17220:
	movw	r0, #:lower16:.LC1308
	ldr	r1, .L17224+48
	mvn	r6, #11
	movt	r0, #:upper16:.LC1308
	bl	printk
	b	.L17071
.L17208:
	movw	r0, #:lower16:.LC1316
	ldr	r1, .L17224+16
	mvn	r6, #11
	movt	r0, #:upper16:.LC1316
	bl	printk
	b	.L17138
.L17074:
	movw	r0, #:lower16:.LC1309
	ldr	r1, .L17224+48
	movt	r0, #:upper16:.LC1309
	bl	printk
	b	.L17085
.L17223:
	mov	r3, #0
	mvn	r6, #18
	str	r3, [r7, #3356]
	str	r3, [r7, #3364]
	str	r3, [r7, #3368]
	str	r3, [r7, #3372]
	str	r3, [r7, #3380]
	str	r3, [r7, #3384]
	str	r3, [r7, #3388]
	str	r3, [r7, #3392]
	b	.L17071
.L17225:
	.align	2
.L17224:
	.word	.LANCHOR1+3240
	.word	.LANCHOR8-1504
	.word	.LANCHOR7-1512
	.word	.LANCHOR8-1494
	.word	.LANCHOR5+1748
	.word	.LANCHOR8-1536
	.word	.LANCHOR1+3124
	.word	.LANCHOR5+1700
	.word	.LANCHOR8-1566
	.word	.LANCHOR1+1020
	.word	.LANCHOR1+1440
	.word	.LANCHOR5+1728
	.word	.LANCHOR5+1680
	.word	.LANCHOR5+1304
	.word	.LANCHOR5+1192
	.fnend
	.size	rmnet_function_bind_config, .-rmnet_function_bind_config
	.align	2
	.global	notify_control_line_state
	.syntax unified
	.arm
	.fpu softvfp
	.type	notify_control_line_state, %function
notify_control_line_state:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	.save {lr}
	str	lr, [sp, #-4]!
	mov	lr, r0
	movt	ip, #:upper16:.LANCHOR1
	mov	r2, #1
	add	r0, ip, #2192
	mov	r1, r2
	add	r0, r0, #12
	mov	r3, #0
	str	r2, [ip, #2200]
	str	lr, [ip, #3408]
	ldr	lr, [sp], #4
	b	__wake_up
	.fnend
	.size	notify_control_line_state, .-notify_control_line_state
	.section	.rodata.str1.4
	.align	2
.LC1322:
	.ascii	"<6>DUN register failed. data is null.\012\000"
	.align	2
.LC1323:
	.ascii	"<6>DUN is registerd\012\000"
	.section	.text.unlikely
	.align	2
	.global	modem_register
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_register, %function
modem_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #0
	push	{r4, lr}
	.save {r4, lr}
	bne	.L17229
	movw	r0, #:lower16:.LC1322
	movt	r0, #:upper16:.LC1322
	bl	printk
	mvn	r0, #0
	pop	{r4, pc}
.L17229:
	movw	r2, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1323
	movt	r2, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1323
	str	r3, [r2, #3972]
	bl	printk
	mov	r0, #0
	pop	{r4, pc}
	.fnend
	.size	modem_register, .-modem_register
	.section	.rodata.str1.4
	.align	2
.LC1324:
	.ascii	"acm ttyGS%d: %s speed IN/%s OUT/%s NOTIFY/%s\012\000"
	.align	2
.LC1325:
	.ascii	"%s/%pK: can't bind, err %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_bind, %function
acm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L17233
	add	r1, r3, #12
	add	r2, r3, #1
	mov	r6, r0
	movw	r5, #:lower16:.LANCHOR7
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR7
	strb	r2, [r0, #44]
	strb	r3, [r4, #144]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-2294]
	strb	r3, [r5, #-2270]
	strb	r3, [r5, #-1501]
	cmp	r0, #15
	bhi	.L17233
	add	r1, r0, #12
	add	r3, r0, #1
	mov	r2, #0
	str	r4, [r6, r1, lsl #2]
	sub	r1, r5, #1488
	strb	r0, [r5, #-2282]
	strb	r0, [r5, #-1500]
	strb	r0, [r5, #-1492]
	strb	r3, [r6, #44]
	strb	r0, [r4, #145]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L17233
	ldr	r1, .L17293
	mov	r2, #0
	str	r0, [r4, #88]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L17233
	ldr	r1, .L17293+4
	mov	r2, #0
	str	r0, [r4, #92]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	beq	.L17233
	str	r8, [r4, #152]
	ldr	r3, [r8, #8]
	mov	r1, #208
	str	r7, [r8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	beq	.L17234
	mov	r2, #10
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r9, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r9]
	beq	.L17236
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r10, r0
	str	r0, [r9]
	bne	.L17236
	ldr	r3, [r8, #8]
	mov	r0, r8
	mov	r1, r9
	mvn	r8, #18
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r4, #156]
	b	.L17237
.L17233:
	mvn	r8, #18
.L17237:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L17244
	bl	kfree
.L17244:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L17245
	bl	kfree
.L17245:
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	cmp	r6, #0
	beq	.L17246
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #152]
.L17246:
	cmp	r5, #0
	movw	r1, #:lower16:.LC1325
	movne	r3, #0
	movt	r1, #:upper16:.LC1325
	strne	r3, [r5]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r4
	str	r8, [sp]
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L17232:
	mov	r0, r8
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17236:
	movw	r3, #:lower16:acm_cdc_notify_complete
	str	r9, [r4, #156]
	ldrb	r1, [r5, #-1486]	@ zero_extendqisi2
	movt	r3, #:upper16:acm_cdc_notify_complete
	ldrb	r2, [r5, #-1474]	@ zero_extendqisi2
	ldr	r0, .L17293+8
	str	r3, [r9, #28]
	ldr	r3, [r4, #156]
	strb	r1, [r5, #-1350]
	strb	r2, [r5, #-1338]
	strb	r1, [r5, #-1314]
	ldrb	r1, [r5, #-1462]	@ zero_extendqisi2
	str	r4, [r3, #32]
	ldr	r3, [r4, #20]
	strb	r1, [r5, #-1326]
	ldr	r3, [r3, #24]
	strb	r2, [r5, #-1302]
	ldr	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L17240
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L17291
.L17238:
	ldr	r3, .L17293+12
	ldrh	r3, [r3, #-14]
	tst	r3, #4
	beq	.L17241
	ldr	r2, [r6, #24]
	ldr	r1, [r7]
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	ldr	r2, [r2]
	add	r1, r1, #32
	ldr	r2, [r2, #20]
	cmp	r2, #4
	movwhi	ip, #:lower16:.LC990
	movthi	ip, #:upper16:.LC990
	bls	.L17292
.L17242:
	ldr	r0, [r4, #92]
	movw	r2, #:lower16:.LC1324
	ldr	lr, [r4, #152]
	movt	r2, #:upper16:.LC1324
	ldr	r5, [lr, #4]
	ldr	lr, [r4, #88]
	str	r5, [sp, #12]
	ldr	r5, [r0, #4]
	ldr	r0, .L17293+16
	str	r5, [sp, #8]
	ldr	lr, [lr, #4]
	stm	sp, {ip, lr}
	bl	__dynamic_dev_dbg
.L17241:
	mov	r0, r4
	mov	r8, #0
	bl	modem_register
	b	.L17232
.L17292:
	movw	r0, #:lower16:.LC976
	movw	ip, #:lower16:.LC975
	movt	r0, #:upper16:.LC976
	cmp	r2, #2
	movt	ip, #:upper16:.LC975
	movls	ip, r0
	b	.L17242
.L17291:
	ldr	r0, .L17293+20
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L17240
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L17238
	ldr	r0, .L17293+24
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L17238
.L17240:
	mov	r0, r4
	mvn	r8, #11
	bl	usb_free_all_descriptors
	b	.L17237
.L17234:
	mvn	r8, #18
	str	r9, [r4, #156]
	b	.L17237
.L17294:
	.align	2
.L17293:
	.word	.LANCHOR7-1476
	.word	.LANCHOR7-1464
	.word	.LANCHOR7-1292
	.word	.LANCHOR8-1456
	.word	.LANCHOR8-1488
	.word	.LANCHOR7-1452
	.word	.LANCHOR7-1408
	.fnend
	.size	acm_bind, .-acm_bind
	.align	2
	.global	modem_unregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_unregister, %function
modem_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	mov	r2, #1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	ip, #:upper16:.LANCHOR1
	mov	r3, #0
	str	lr, [sp, #4]
	add	r0, ip, #2192
	mov	r1, r2
	add	r0, r0, #12
	str	r2, [ip, #2200]
	str	r3, [ip, #3972]
	bl	__wake_up
	movw	r0, #:lower16:.LC760
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC760
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
	.fnend
	.size	modem_unregister, .-modem_unregister
	.align	2
	.global	acm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_bind_config, %function
acm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR7
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movt	r3, #:upper16:.LANCHOR7
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r3, #-2328]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	cmp	r2, #0
	bne	.L17298
	ldr	r1, [r0, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L17301
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r0, #24]
	strb	r2, [r3, #-2328]
	strb	r2, [r3, #-2288]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L17301
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r0, #24]
	strb	r2, [r3, #-2320]
	strb	r2, [r3, #-2276]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L17301
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r3, #-2312]
	strb	r2, [r3, #-2265]
	strb	r2, [r1, #48]
.L17298:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L17312
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17338
.L17302:
	movw	r0, #:lower16:acm_connect
	movw	r1, #:lower16:acm_disconnect
	strb	r6, [r4, #146]
	movt	r0, #:upper16:acm_connect
	movt	r1, #:upper16:acm_disconnect
	movw	r3, #:lower16:acm_send_break
	mov	ip, #0
	movt	r3, #:upper16:acm_send_break
	strd	r0, [r4, #116]
	movw	r1, #:lower16:.LC1067
	mov	r2, r6
	movt	r1, #:upper16:.LC1067
	mov	r0, #208
	str	r3, [r4, #124]
	str	ip, [r4, #148]
	bl	kasprintf
	cmp	r0, #0
	str	r0, [r4]
	beq	.L17339
	ldr	ip, .L17342
	movw	r1, #:lower16:acm_bind
	movw	r2, #:lower16:acm_unbind
	movt	r1, #:upper16:acm_bind
	movw	r3, #:lower16:acm_set_alt
	movt	r2, #:upper16:acm_unbind
	movt	r3, #:upper16:acm_set_alt
	movw	r7, #:lower16:.LANCHOR4
	movt	r7, #:upper16:.LANCHOR4
	str	ip, [r4, #4]
	str	r1, [r4, #32]
	movw	r1, #1986
	strd	r2, [r4, #36]
	ldrh	r1, [r7, r1]
	movw	r2, #:lower16:acm_setup
	movw	r3, #:lower16:acm_disable
	movt	r2, #:upper16:acm_setup
	movt	r3, #:upper16:acm_disable
	tst	r1, #4
	str	r3, [r4, #48]
	str	r2, [r4, #52]
	bne	.L17340
.L17304:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L17307
	add	r8, r4, #72
	add	r2, r5, #36
	str	r5, [r4, #20]
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r6, [r4, #32]
	cmp	r6, #0
	beq	.L17308
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	blt	.L17341
.L17308:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L17309
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L17309
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L17309:
	tst	r3, #2
	bne	.L17310
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L17310
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L17310:
	tst	r3, #1
	bne	.L17311
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L17311
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L17311:
	cmp	r6, #0
	beq	.L17297
	movw	r3, #2010
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L17305
.L17306:
	mov	r0, r4
	bl	kfree
.L17297:
	mov	r0, r6
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17312:
	mov	r4, #16
	b	.L17302
.L17340:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC937
	mov	r3, r0
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC937
	add	r0, r7, #1968
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L17304
.L17307:
	movw	r3, #2010
	mvn	r6, #21
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L17306
.L17305:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC938
	movt	r2, #:upper16:.LC938
	ldr	r0, .L17342+4
	ldr	r3, [r4]
	ldr	r1, [r1]
	stm	sp, {r4, r6}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L17306
.L17341:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L17308
.L17301:
	mvn	r6, #18
	b	.L17297
.L17339:
	mov	r0, r4
	mvn	r6, #11
	bl	kfree
	b	.L17297
.L17338:
	mvn	r6, #11
	b	.L17297
.L17343:
	.align	2
.L17342:
	.word	.LANCHOR7-2264
	.word	.LANCHOR4+1992
	.fnend
	.size	acm_bind_config, .-acm_bind_config
	.align	2
	.global	adb_req_put
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_req_put, %function
adb_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #88
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r1
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r2, r7
	ldr	r1, [r7, #4]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	adb_req_put, .-adb_req_put
	.align	2
	.global	adb_req_get
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_req_get, %function
adb_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r4, r3
	moveq	r4, #0
	beq	.L17347
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del
.L17347:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	adb_req_get, .-adb_req_get
	.align	2
	.global	f_midi_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_bind_config, %function
f_midi_bind_config:
	.fnstart
	@ args = 16, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r3
	strd	r8, [sp, #16]
	mov	r9, r0
	strd	r10, [sp, #24]
	mov	fp, r2
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r8, [sp, #60]
	str	r1, [sp, #4]
	cmp	r8, #0
	beq	.L17351
	mvn	r3, #0
	str	r3, [r8]
	str	r3, [r8, #4]
.L17351:
	ldr	r3, [sp, #48]
	cmp	r3, #16
	cmpls	r7, #16
	bhi	.L17363
	movw	r10, #:lower16:kmalloc_caches
	movt	r10, #:upper16:kmalloc_caches
	ldr	r0, [r10, #36]
	cmp	r0, #0
	beq	.L17364
	mov	r2, #344
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L17376
.L17353:
	cmp	r7, #0
	addne	r6, r5, #228
	movne	r4, #0
	bne	.L17356
	b	.L17377
.L17367:
	mov	r4, r2
.L17356:
	ldr	r0, [r10, #24]
	mov	r2, #12
	movw	r1, #32976
	mov	r3, #16
	cmp	r0, #0
	beq	.L17354
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L17355
.L17354:
	add	r2, r4, #1
	mov	r1, #0
	str	r5, [r3]
	cmp	r2, r7
	str	r1, [r3, #4]
	strb	r4, [r3, #8]
	str	r3, [r6, #4]!
	bne	.L17367
.L17357:
	ldr	r3, [r9, #24]
	movw	r1, #:lower16:f_midi_in_tasklet
	mov	r2, r5
	movt	r1, #:upper16:f_midi_in_tasklet
	add	r0, r5, #300
	ldr	r3, [r3]
	str	r3, [r5, #84]
	bl	tasklet_init
	mov	r1, #208
	mov	r0, fp
	bl	kstrdup
	mov	r3, r0
	ldr	r2, [sp, #48]
	mov	r0, r5
	str	r7, [r5, #320]
	str	r3, [r5, #332]
	ldr	r3, [sp, #52]
	str	r2, [r5, #324]
	ldr	r2, [sp, #4]
	str	r3, [r5, #336]
	ldr	r3, [sp, #56]
	str	r2, [r5, #328]
	str	r3, [r5, #340]
	bl	f_midi_register_card
	subs	r7, r0, #0
	blt	.L17359
	ldr	lr, .L17378
	movw	r3, #:lower16:.LC1060
	movw	ip, #:lower16:f_midi_bind
	movt	r3, #:upper16:.LC1060
	movw	r1, #:lower16:f_midi_unbind
	movw	r2, #:lower16:f_midi_set_alt
	movt	ip, #:upper16:f_midi_bind
	movt	r1, #:upper16:f_midi_unbind
	movt	r2, #:upper16:f_midi_set_alt
	stm	r5, {r3, lr}
	movw	r3, #:lower16:f_midi_disable
	mov	r0, r9
	movt	r3, #:upper16:f_midi_disable
	str	ip, [r5, #32]
	str	r1, [r5, #36]
	mov	r1, r5
	str	r2, [r5, #40]
	str	r3, [r5, #48]
	bl	usb_add_function
	subs	r7, r0, #0
	bne	.L17359
	cmp	r8, #0
	beq	.L17350
	ldr	r3, [r5, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r8]
	ldr	r3, [r5, #100]
	ldr	r3, [r3, #12]
	str	r3, [r8, #4]
	ldr	r3, [r5, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r8]
	ldr	r3, [r5, #100]
	ldr	r3, [r3, #12]
	str	r3, [r8, #4]
	b	.L17350
.L17355:
	sub	r4, r4, #1
	mvn	r7, #11
.L17359:
	cmn	r4, #1
	addne	r4, r4, #59
	addne	r6, r5, #232
	addne	r4, r5, r4, lsl #2
	beq	.L17362
.L17361:
	ldr	r0, [r4, #-4]!
	bl	kfree
	cmp	r6, r4
	bne	.L17361
.L17362:
	mov	r0, r5
	bl	kfree
.L17350:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17364:
	mov	r5, #16
	b	.L17353
.L17377:
	mvn	r4, #0
	b	.L17357
.L17363:
	mvn	r7, #21
	b	.L17350
.L17376:
	mvn	r7, #11
	b	.L17350
.L17379:
	.align	2
.L17378:
	.word	.LANCHOR7-2368
	.fnend
	.size	f_midi_bind_config, .-f_midi_bind_config
	.align	2
	.global	rndis_signal_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_signal_connect, %function
rndis_signal_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR1
	mov	r1, #0
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR1
	str	r10, [sp, #24]
	lsl	r10, r0, #4
	strd	r8, [sp, #16]
	add	r9, r5, #3696
	sub	r6, r10, r0
	str	lr, [sp, #28]
	lsl	r6, r6, #2
	add	r3, r5, r6
	add	r8, r9, r6
	str	r1, [r3, #3712]
	ldr	r3, [r8, #4]
	cmp	r3, r1
	beq	.L17383
	movw	r3, #:lower16:kmalloc_caches
	mov	r7, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r1
	beq	.L17384
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17385
	add	r3, r4, #20
.L17382:
	sub	r7, r10, r7
	mov	r10, #20
	str	r3, [r4, #8]
	add	r5, r5, r7, lsl #2
	mov	r7, #0
	add	r2, r6, #52
	str	r10, [r4, #12]
	add	r2, r9, r2
	mov	r0, r4
	str	r7, [r4, #16]
	ldr	r1, [r5, #3752]
	bl	__list_add
	ldr	r3, [r4, #8]
	mov	r2, #11
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, r10}
	str	r2, [r3, #8]
	str	r7, [r3, #12]
	str	r7, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	blx	r3
	mov	r0, r7
.L17380:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17384:
	mov	r3, #36
	mov	r4, #16
	b	.L17382
.L17385:
	mvn	r0, #11
	b	.L17380
.L17383:
	movw	r0, #65012
	movt	r0, 65535
	b	.L17380
	.fnend
	.size	rndis_signal_connect, .-rndis_signal_connect
	.align	2
	.global	rndis_signal_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_signal_disconnect, %function
rndis_signal_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR1
	mov	r1, #1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR1
	str	r10, [sp, #24]
	lsl	r10, r0, #4
	strd	r8, [sp, #16]
	add	r9, r5, #3696
	sub	r6, r10, r0
	str	lr, [sp, #28]
	lsl	r6, r6, #2
	add	r3, r5, r6
	add	r8, r9, r6
	str	r1, [r3, #3712]
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L17390
	movw	r3, #:lower16:kmalloc_caches
	mov	r7, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L17391
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17392
	add	r3, r4, #20
.L17389:
	sub	r7, r10, r7
	mov	r10, #20
	str	r3, [r4, #8]
	add	r5, r5, r7, lsl #2
	mov	r7, #0
	add	r2, r6, #52
	str	r10, [r4, #12]
	add	r2, r9, r2
	mov	r0, r4
	str	r7, [r4, #16]
	ldr	r1, [r5, #3752]
	bl	__list_add
	ldr	r3, [r4, #8]
	mov	r2, #12
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, r10}
	str	r2, [r3, #8]
	str	r7, [r3, #12]
	str	r7, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	blx	r3
	mov	r0, r7
.L17387:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17391:
	mov	r3, #36
	mov	r4, #16
	b	.L17389
.L17392:
	mvn	r0, #11
	b	.L17387
.L17390:
	movw	r0, #65012
	movt	r0, 65535
	b	.L17387
	.fnend
	.size	rndis_signal_disconnect, .-rndis_signal_disconnect
	.align	2
	.global	rndis_uninit
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_uninit, %function
rndis_uninit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxgt	lr
	rsb	r0, r0, r0, lsl #4
	movw	r2, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r2, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	lsl	r3, r0, #2
	str	r8, [sp, #16]
	mov	r0, #0
	str	lr, [sp, #20]
	add	r1, r2, r3
	ldr	r5, [r1, #3748]
	add	r6, r1, #3744
	mov	r8, r1
	str	r0, [r1, #3700]
	add	r6, r6, #4
	ldr	r4, [r5]
.L17396:
	cmp	r6, r5
	bne	.L17403
	b	.L17394
.L17401:
	cmp	r6, r4
	mov	r5, r4
	ldr	r4, [r4]
	beq	.L17394
.L17403:
	ldr	r3, [r5, #16]
	cmp	r3, #0
	bne	.L17401
	ldr	r7, [r5, #8]
	mov	r3, #1
	str	r3, [r5, #16]
	cmp	r7, #0
	beq	.L17394
	ldr	r5, [r8, #3748]
	cmp	r6, r5
	ldr	r4, [r5]
	bne	.L17399
	b	.L17394
.L17398:
	cmp	r6, r4
	mov	r5, r4
	ldr	r4, [r4]
	beq	.L17413
.L17399:
	cmp	r5, #0
	beq	.L17398
	ldr	r3, [r5, #8]
	cmp	r7, r3
	bne	.L17398
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	mov	r5, r4
	bl	kfree
	cmp	r6, r4
	ldr	r4, [r4]
	bne	.L17399
.L17413:
	ldr	r5, [r8, #3748]
	ldr	r4, [r5]
	b	.L17396
.L17394:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_uninit, .-rndis_uninit
	.align	2
	.global	rndis_set_host_mac
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_host_mac, %function
rndis_set_host_mac:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r0, lsl #2
	str	r1, [r3, #3716]
	bx	lr
	.fnend
	.size	rndis_set_host_mac, .-rndis_set_host_mac
	.section	.rodata.str1.4
	.align	2
.LC1326:
	.ascii	"%s: REMOTE_NDIS_INITIALIZE_MSG\012\000"
	.align	2
.LC1327:
	.ascii	"%s: REMOTE_NDIS_HALT_MSG\012\000"
	.align	2
.LC1328:
	.ascii	"%s: OID_GEN_CURRENT_PACKET_FILTER %08x\012\000"
	.align	2
.LC1329:
	.ascii	"<4>%s: set unknown OID 0x%08X, size %d\012\000"
	.align	2
.LC1330:
	.ascii	"%s: REMOTE_NDIS_RESET_MSG\012\000"
	.align	2
.LC1331:
	.ascii	"<4>%s: unknown RNDIS message 0x%08X len %d\012\000"
	.align	2
.LC1332:
	.ascii	"%03d:  %02x %02x %02x %02x %02x %02x %02x %02x %02x"
	.ascii	" %02x %02x %02x %02x %02x %02x %02x\012\000"
	.text
	.align	2
	.global	rndis_msg_parser
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_msg_parser, %function
rndis_msg_parser:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r1, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #64
	sub	sp, sp, #64
	beq	.L17430
	cmp	r0, #0
	ldr	r2, [r4]	@ unaligned
	bne	.L17428
	sub	r3, r2, #2
	cmp	r3, #6
	ldrls	pc, [pc, r3, asl #2]
	b	.L17419
.L17421:
	.word	.L17426
	.word	.L17425
	.word	.L17424
	.word	.L17423
	.word	.L17422
	.word	.L17419
	.word	.L17420
.L17422:
	ldr	r0, .L17539
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17527
.L17444:
	movw	r6, #:lower16:.LANCHOR1
	mov	r9, #1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r4, [r6, #3748]
	add	r8, r6, #3696
	add	r7, r8, #52
	ldr	r5, [r4]
.L17448:
	cmp	r4, r7
	bne	.L17449
	b	.L17454
.L17452:
	cmp	r5, r7
	mov	r4, r5
	ldr	r5, [r5]
	beq	.L17454
.L17449:
	ldr	r3, [r4, #16]
	cmp	r3, #0
	bne	.L17452
	ldr	r10, [r4, #8]
	str	r9, [r4, #16]
	cmp	r10, #0
	beq	.L17454
	ldr	r4, [r6, #3748]
	cmp	r4, r7
	ldr	r5, [r4]
	bne	.L17447
	b	.L17454
.L17446:
	cmp	r5, r7
	mov	r4, r5
	ldr	r5, [r5]
	beq	.L17528
.L17447:
	cmp	r4, #0
	beq	.L17446
	ldr	r3, [r4, #8]
	cmp	r10, r3
	bne	.L17446
	mov	r0, r4
	bl	list_del
	mov	r0, r4
	mov	r4, r5
	bl	kfree
	cmp	r5, r7
	ldr	r5, [r5]
	bne	.L17447
.L17528:
	ldr	r4, [r6, #3748]
	ldr	r5, [r4]
	b	.L17448
.L17426:
	ldr	r0, .L17539+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17529
.L17427:
	movw	r6, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #3724]
	str	r2, [r6, #3700]
	cmp	r3, #0
	beq	.L17428
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L17463
	mov	r2, #72
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L17430
	add	r3, r7, #20
.L17429:
	mov	r5, #0
	mov	r8, #52
	ldr	r2, .L17539+8
	mov	r0, r7
	str	r3, [r7, #8]
	str	r8, [r7, #12]
	str	r5, [r7, #16]
	ldr	r1, [r6, #3752]
	bl	__list_add
	ldr	r3, [r7, #8]
	mov	r1, #-2147483646
	mov	r2, #1
	stm	r3, {r1, r8}
	ldr	r1, [r4, #8]
	str	r1, [r3, #8]
	str	r5, [r3, #12]
	str	r2, [r3, #16]
	str	r5, [r3, #20]
	str	r2, [r3, #24]
	str	r5, [r3, #28]
	ldrb	r2, [r6, #3732]	@ zero_extendqisi2
	ldr	r1, [r6, #3724]
	str	r2, [r3, #32]
	ldrb	r2, [r6, #3732]	@ zero_extendqisi2
	ldr	r1, [r1, #356]
	str	r5, [r3, #44]
	str	r5, [r3, #48]
	add	r1, r1, #80
	mul	r2, r2, r1
	str	r2, [r3, #36]
	ldrb	r2, [r6, #3733]	@ zero_extendqisi2
	str	r2, [r3, #40]
	ldr	r3, [r6, #3740]
	ldr	r0, [r6, #3744]
	blx	r3
	mov	r0, r5
	b	.L17415
.L17425:
	ldr	r0, .L17539+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17530
.L17431:
	movw	r5, #:lower16:.LANCHOR1
	mov	r4, #0
	movt	r5, #:upper16:.LANCHOR1
	ldr	r0, [r5, #3724]
	str	r4, [r5, #3700]
	cmp	r0, r4
	beq	.L17415
	bl	netif_carrier_off
	ldr	r3, [r5, #3724]
	ldr	r5, [r3, #576]
	cmp	r5, r4
	beq	.L17531
	mov	r0, r4
	add	r1, r5, #80
	bl	_set_bit
	mov	r0, r4
.L17415:
	add	sp, sp, #64
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17424:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #3724]
	cmp	r3, #0
	beq	.L17428
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L17465
	mov	r2, #156
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L17430
	add	r1, r5, #20
.L17433:
	mov	r3, #136
	mov	r8, #0
	ldr	r2, .L17539+8
	mov	r0, r5
	str	r1, [r5, #8]
	str	r3, [r5, #12]
	str	r8, [r5, #16]
	ldr	r1, [r6, #3752]
	bl	__list_add
	ldr	r7, [r5, #8]
	mov	r3, #-2147483644
	mov	r1, r5
	str	r3, [r7]
	ldr	r3, [r4, #8]
	str	r3, [r7, #8]
	ldr	r0, [r4, #12]
	bl	gen_ndis_query_resp.constprop.0
	cmp	r0, #0
	beq	.L17460
	mov	r0, #187
	mov	r3, #24
	movt	r0, 49152
	str	r3, [r7, #4]
	str	r8, [r7, #16]
	str	r8, [r7, #20]
.L17460:
	str	r0, [r7, #12]
	ldr	r3, [r6, #3740]
	ldr	r0, [r6, #3744]
	blx	r3
	mov	r0, #0
	b	.L17415
.L17454:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L17532
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L17430
	add	r3, r5, #20
.L17450:
	mov	r4, #0
	mov	r7, #16
	str	r3, [r5, #8]
	add	r2, r8, #52
	mov	r0, r5
	str	r7, [r5, #12]
	str	r4, [r5, #16]
	ldr	r1, [r6, #3752]
	bl	__list_add
	ldr	r3, [r5, #8]
	mov	r1, #-2147483642
	mov	r2, #1
	stm	r3, {r1, r7}
	str	r4, [r3, #8]
	str	r2, [r3, #12]
	ldr	r3, [r6, #3740]
	ldr	r0, [r6, #3744]
	blx	r3
	mov	r0, r4
	b	.L17415
.L17532:
	mov	r3, #36
	mov	r5, #16
	b	.L17450
.L17430:
	mvn	r0, #11
	b	.L17415
.L17423:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L17466
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L17430
	add	r3, r5, #20
.L17434:
	movw	r6, #:lower16:.LANCHOR1
	mov	r8, #16
	str	r3, [r5, #8]
	movt	r6, #:upper16:.LANCHOR1
	mov	r3, #0
	add	r2, r6, #3744
	mov	r0, r5
	str	r8, [r5, #12]
	add	r2, r2, #4
	str	r3, [r5, #16]
	ldr	r1, [r6, #3752]
	bl	__list_add
	ldr	r7, [r5, #8]
	mov	r2, #-2147483643
	ldr	r3, [r4, #16]
	ldr	r1, [r4, #20]
	stm	r7, {r2, r8}
	ldr	r2, [r4, #8]
	str	r2, [r7, #8]
	ldr	r0, [r5, #8]
	ldr	r2, [r4, #12]
	cmp	r0, #0
	beq	.L17461
	movw	r0, #270
	movt	r0, 1
	cmp	r2, r0
	bne	.L17533
	add	r1, r4, r1
	ldr	r0, .L17539+16
	ldr	r2, [r1, #8]	@ unaligned
	ldr	r3, [r6, #3720]
	strh	r2, [r3]	@ movhi
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17534
.L17438:
	ldr	r3, [r6, #3720]
	ldr	r0, [r6, #3724]
	ldrh	r4, [r3]
	cmp	r4, #0
	beq	.L17439
	mov	r3, #2
	str	r3, [r6, #3700]
	bl	netif_carrier_on
	ldr	r3, [r6, #3724]
	ldr	r2, [r3, #160]
	tst	r2, #1
	bne	.L17535
.L17441:
	mov	r3, #0
	str	r3, [r7, #12]
.L17443:
	ldr	r3, [r6, #3740]
	ldr	r0, [r6, #3744]
	blx	r3
	mov	r0, #0
	b	.L17415
.L17420:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L17470
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L17430
	add	r3, r6, #20
.L17455:
	movw	r8, #:lower16:.LANCHOR1
	mov	r5, #0
	str	r3, [r6, #8]
	movt	r8, #:upper16:.LANCHOR1
	mov	r7, #16
	add	r2, r8, #3744
	mov	r0, r6
	add	r2, r2, #4
	str	r7, [r6, #12]
	str	r5, [r6, #16]
	ldr	r1, [r8, #3752]
	bl	__list_add
	ldr	r3, [r6, #8]
	mov	r2, #-2147483640
	stm	r3, {r2, r7}
	ldr	r2, [r4, #8]
	str	r2, [r3, #8]
	str	r5, [r3, #12]
	ldr	r3, [r8, #3740]
	ldr	r0, [r8, #3744]
	blx	r3
	mov	r0, r5
	b	.L17415
.L17465:
	mov	r1, #36
	mov	r5, #16
	b	.L17433
.L17463:
	mov	r3, #36
	mov	r7, #16
	b	.L17429
.L17533:
	movw	r1, #259
	movt	r1, 257
	cmp	r2, r1
	bne	.L17536
	ldr	r0, .L17539+20
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L17441
	movw	r1, #:lower16:.LC671
	ldr	r2, .L17539+24
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC671
	bl	__dynamic_pr_debug
	b	.L17441
.L17536:
	movw	r0, #:lower16:.LC1329
	ldr	r1, .L17539+24
	movt	r0, #:upper16:.LC1329
	bl	printk
.L17461:
	mov	r3, #187
	movt	r3, 49152
	str	r3, [r7, #12]
	b	.L17443
.L17439:
	mov	r3, #1
	str	r3, [r6, #3700]
	bl	netif_carrier_off
	ldr	r3, [r6, #3724]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L17537
	add	r1, r1, #80
	mov	r0, r4
	bl	_set_bit
	b	.L17441
.L17470:
	mov	r3, #36
	mov	r6, #16
	b	.L17455
.L17466:
	mov	r3, #36
	mov	r5, #16
	b	.L17434
.L17535:
	ldr	r4, [r3, #576]
	mov	r0, #0
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L17441
	ldr	r0, [r4, #4]
	bl	__netif_schedule
	b	.L17441
.L17527:
	movw	r1, #:lower16:.LC1330
	ldr	r2, .L17539+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1330
	bl	__dynamic_pr_debug
	b	.L17444
.L17529:
	movw	r1, #:lower16:.LC1326
	ldr	r2, .L17539+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1326
	bl	__dynamic_pr_debug
	b	.L17427
.L17530:
	movw	r1, #:lower16:.LC1327
	ldr	r2, .L17539+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1327
	bl	__dynamic_pr_debug
	b	.L17431
.L17419:
	ldr	r7, [r4, #4]	@ unaligned
	movw	r0, #:lower16:.LC1331
	movw	r6, #:lower16:.LC1332
	ldr	r8, .L17539
	movt	r0, #:upper16:.LC1331
	movt	r6, #:upper16:.LC1332
	ldr	r1, .L17539+28
	mov	r5, #0
	mov	r3, r7
	bl	printk
.L17456:
	cmp	r5, r7
	bcc	.L17538
.L17428:
	movw	r0, #65012
	movt	r0, 65535
	b	.L17415
.L17534:
	ldr	r3, [r6, #3720]
	movw	r1, #:lower16:.LC1328
	sub	r0, r0, #24
	ldr	r2, .L17539+24
	movt	r1, #:upper16:.LC1328
	ldrh	r3, [r3]
	bl	__dynamic_pr_debug
	b	.L17438
.L17537:
	movw	r0, #:lower16:.LC101
	movw	r1, #1847
	movt	r0, #:upper16:.LC101
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC102
	movt	r0, #:upper16:.LC102
	bl	printk
	b	.L17441
.L17531:
	movw	r0, #:lower16:.LC101
	movw	r1, #1847
	movt	r0, #:upper16:.LC101
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC102
	movt	r0, #:upper16:.LC102
	bl	printk
	mov	r0, r5
	b	.L17415
.L17538:
	ldr	r3, .L17539+32
	ldrh	r3, [r3]
	tst	r3, #4
	beq	.L17457
	ldrb	ip, [r4, #15]	@ zero_extendqisi2
	mov	r2, r5
	mov	r1, r6
	ldrb	r3, [r4]	@ zero_extendqisi2
	mov	r0, r8
	str	ip, [sp, #56]
	ldrb	ip, [r4, #14]	@ zero_extendqisi2
	str	ip, [sp, #52]
	ldrb	ip, [r4, #13]	@ zero_extendqisi2
	str	ip, [sp, #48]
	ldrb	ip, [r4, #12]	@ zero_extendqisi2
	str	ip, [sp, #44]
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	str	ip, [sp, #40]
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	str	ip, [sp, #36]
	ldrb	ip, [r4, #9]	@ zero_extendqisi2
	str	ip, [sp, #32]
	ldrb	ip, [r4, #8]	@ zero_extendqisi2
	str	ip, [sp, #28]
	ldrb	ip, [r4, #7]	@ zero_extendqisi2
	str	ip, [sp, #24]
	ldrb	ip, [r4, #6]	@ zero_extendqisi2
	str	ip, [sp, #20]
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	str	ip, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	__dynamic_pr_debug
.L17457:
	add	r5, r5, #16
	add	r4, r4, #16
	b	.L17456
.L17540:
	.align	2
.L17539:
	.word	.LANCHOR8-1344
	.word	.LANCHOR8-1440
	.word	.LANCHOR1+3748
	.word	.LANCHOR8-1408
	.word	.LANCHOR8-1392
	.word	.LANCHOR8-1360
	.word	.LANCHOR5+1788
	.word	.LANCHOR5+1768
	.word	.LANCHOR8-1326
	.fnend
	.size	rndis_msg_parser, .-rndis_msg_parser
	.section	.rodata.str1.4
	.align	2
.LC1333:
	.ascii	"enabled\000"
	.align	2
.LC1334:
	.ascii	"disabled\000"
	.align	2
.LC1335:
	.ascii	"RNDIS command error %d, %d/%d\012\000"
	.align	2
.LC1336:
	.ascii	"%s: MaxTransferSize: %d : Multi_pkt_txr: %s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_command_complete, %function
rndis_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r5, #20]
	cmp	r3, #0
	beq	.L17541
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L17541
	ldrb	r0, [r5, #164]	@ zero_extendqisi2
	mov	r4, r1
	ldr	r1, [r1]
	bl	rndis_msg_parser
	subs	r2, r0, #0
	blt	.L17556
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	beq	.L17557
.L17541:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17557:
	ldr	r0, .L17559
	ldr	r2, [r3, #20]
	ldrh	r1, [r0, #-6]
	cmp	r2, #2048
	movls	ip, #0
	movhi	ip, #1
	tst	r1, #4
	strb	ip, [r5, #124]
	bne	.L17558
.L17546:
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldr	r3, [r3, #-1248]
	cmp	r3, #1
	movls	r3, #0
	strbls	r3, [r5, #124]
	b	.L17541
.L17556:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1335
	ldr	ip, [r4, #4]
	movt	r1, #:upper16:.LC1335
	ldr	r3, [r4, #48]
	add	r0, r0, #32
	str	ip, [sp]
	bl	dev_err
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	bne	.L17541
	b	.L17557
.L17558:
	movw	lr, #:lower16:.LC1334
	ldr	r1, [r6]
	cmp	r2, #2048
	ldr	r4, [r3, #20]
	movt	lr, #:upper16:.LC1334
	movw	ip, #:lower16:.LC1333
	movt	ip, #:upper16:.LC1333
	movls	ip, lr
	ldr	r3, .L17559+4
	movw	r2, #:lower16:.LC1336
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC1336
	add	r1, r1, #32
	stm	sp, {r4, ip}
	bl	__dynamic_dev_dbg
	b	.L17546
.L17560:
	.align	2
.L17559:
	.word	.LANCHOR8-1296
	.word	.LANCHOR5+1808
	.fnend
	.size	rndis_command_complete, .-rndis_command_complete
	.section	.rodata.str1.4
	.align	2
.LC1337:
	.ascii	"<3>%s: RNDIS command error %d, %d/%d\012\000"
	.align	2
.LC1338:
	.ascii	"%s: MaxTransferSize: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_command_complete, %function
rndis_qc_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r1
	str	lr, [sp, #8]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r1]
	ldrb	r0, [r5, #144]	@ zero_extendqisi2
	bl	rndis_msg_parser
	subs	r2, r0, #0
	blt	.L17570
.L17562:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	beq	.L17571
.L17561:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L17571:
	ldr	r0, .L17572
	ldr	r3, [r3, #20]
	ldrh	r2, [r0, #-14]
	str	r3, [r5, #136]
	tst	r2, #4
	beq	.L17561
	ldr	r2, .L17572+4
	movw	r1, #:lower16:.LC1338
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1338
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	__dynamic_pr_debug
.L17570:
	ldr	ip, [r4, #4]
	movw	r0, #:lower16:.LC1337
	ldr	r1, .L17572+4
	movt	r0, #:upper16:.LC1337
	ldr	r3, [r4, #48]
	str	ip, [sp]
	bl	printk
	b	.L17562
.L17573:
	.align	2
.L17572:
	.word	.LANCHOR8-1264
	.word	.LANCHOR5+1832
	.fnend
	.size	rndis_qc_command_complete, .-rndis_qc_command_complete
	.align	2
	.global	rndis_register
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_register, %function
rndis_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L17577
	movw	r2, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r2, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldrb	r4, [r2, #3697]	@ zero_extendqisi2
	cmp	r4, #0
	bne	.L17576
	movw	ip, #:lower16:.LANCHOR4
	movw	lr, #3138
	str	r0, [r2, #3740]
	movt	ip, #:upper16:.LANCHOR4
	mov	r3, #1
	ldrh	r0, [ip, lr]
	str	r1, [r2, #3744]
	add	r1, r2, #3696
	strb	r3, [r2, #3697]
	strh	r3, [r1, #36]	@ movhi
	tst	r0, #4
	ubfx	r0, r0, #2, #1
	beq	.L17574
	movw	r1, #:lower16:.LC1009
	ldr	r2, .L17585
	add	r0, ip, #3120
	movt	r1, #:upper16:.LC1009
	mov	r3, r4
	bl	__dynamic_pr_debug
	mov	r0, r4
	b	.L17574
.L17576:
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3162
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r0, #18
	bne	.L17584
.L17574:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L17584:
	movw	r1, #:lower16:.LC1010
	ldr	r0, .L17585+4
	movt	r1, #:upper16:.LC1010
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L17574
.L17577:
	mvn	r0, #21
	bx	lr
.L17586:
	.align	2
.L17585:
	.word	.LANCHOR5-960
	.word	.LANCHOR4+3144
	.fnend
	.size	rndis_register, .-rndis_register
	.align	2
	.global	rndis_deregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_deregister, %function
rndis_deregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	ldrh	r2, [r3, #210]
	tst	r2, #4
	bne	.L17594
.L17588:
	cmp	r4, #0
	bgt	.L17587
	rsb	r4, r4, r4, lsl #4
	movw	r0, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LANCHOR1
	add	r4, r0, r4, lsl #2
	mov	r3, #0
	strb	r3, [r4, #3697]
.L17587:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L17594:
	movw	r1, #:lower16:.LC285
	ldr	r2, .L17595
	add	r0, r3, #192
	movt	r1, #:upper16:.LC285
	bl	__dynamic_pr_debug
	b	.L17588
.L17596:
	.align	2
.L17595:
	.word	.LANCHOR5-1976
	.fnend
	.size	rndis_deregister, .-rndis_deregister
	.align	2
	.global	rndis_set_param_dev
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_dev, %function
rndis_set_param_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17607
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r6, r2
	mov	r5, r1
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L17606
.L17598:
	cmp	r5, #0
	beq	.L17600
	cmp	r4, #0
	bne	.L17601
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	str	r4, [r3, #3552]
	str	r4, [r3, #3556]
	str	r6, [r3, #3720]
	str	r5, [r3, #3724]
.L17597:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17606:
	movw	r1, #:lower16:.LC285
	ldr	r2, .L17607+4
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC285
	bl	__dynamic_pr_debug
	b	.L17598
.L17601:
	mvn	r0, #0
	b	.L17597
.L17600:
	mvn	r0, #21
	b	.L17597
.L17608:
	.align	2
.L17607:
	.word	.LANCHOR8-1248
	.word	.LANCHOR5+1860
	.fnend
	.size	rndis_set_param_dev, .-rndis_set_param_dev
	.align	2
	.global	rndis_set_param_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_vendor, %function
rndis_set_param_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	ip, #3210
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, ip]
	mov	r4, r2
	mov	r6, r1
	tst	r3, #4
	bne	.L17617
.L17610:
	clz	r3, r4
	cmp	r5, #0
	lsr	r3, r3, #5
	movne	r0, #1
	moveq	r0, r3
	cmp	r0, #0
	bne	.L17612
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [r3, #3728]
	str	r4, [r3, #3736]
.L17609:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17617:
	movw	r1, #:lower16:.LC285
	ldr	r2, .L17618
	movt	r1, #:upper16:.LC285
	ldr	r0, .L17618+4
	bl	__dynamic_pr_debug
	b	.L17610
.L17612:
	mvn	r0, #0
	b	.L17609
.L17619:
	.align	2
.L17618:
	.word	.LANCHOR5-920
	.word	.LANCHOR4+3192
	.fnend
	.size	rndis_set_param_vendor, .-rndis_set_param_vendor
	.align	2
	.global	rndis_set_param_medium
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_medium, %function
rndis_set_param_medium:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR4
	movw	r3, #306
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	ip, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [ip, r3]
	mov	r5, r2
	.pad #8
	sub	sp, sp, #8
	mov	r6, r1
	tst	r3, #4
	bne	.L17628
.L17621:
	cmp	r4, #0
	bne	.L17623
	movw	ip, #:lower16:.LANCHOR1
	mov	r0, r4
	movt	ip, #:upper16:.LANCHOR1
	str	r6, [ip, #3704]
	str	r5, [ip, #3708]
.L17620:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17628:
	movw	r1, #:lower16:.LC819
	ldr	r2, .L17629
	add	r0, ip, #288
	movt	r1, #:upper16:.LC819
	mov	r3, r6
	str	r5, [sp]
	bl	__dynamic_pr_debug
	b	.L17621
.L17623:
	mvn	r0, #0
	b	.L17620
.L17630:
	.align	2
.L17629:
	.word	.LANCHOR5-1880
	.fnend
	.size	rndis_set_param_medium, .-rndis_set_param_medium
	.align	2
	.global	rndis_set_max_pkt_xfer
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_max_pkt_xfer, %function
rndis_set_max_pkt_xfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3186
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	mov	r5, r1
	tst	r2, #4
	bne	.L17637
.L17632:
	rsb	r4, r4, r4, lsl #4
	movw	r0, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LANCHOR1
	add	r4, r0, r4, lsl #2
	strb	r5, [r4, #3732]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17637:
	movw	r1, #:lower16:.LC285
	ldr	r2, .L17638
	add	r0, r3, #3168
	movt	r1, #:upper16:.LC285
	bl	__dynamic_pr_debug
	b	.L17632
.L17639:
	.align	2
.L17638:
	.word	.LANCHOR5-944
	.fnend
	.size	rndis_set_max_pkt_xfer, .-rndis_set_max_pkt_xfer
	.align	2
	.global	rndis_set_pkt_alignment_factor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_pkt_alignment_factor, %function
rndis_set_pkt_alignment_factor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3258
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	mov	r5, r1
	tst	r3, #4
	bne	.L17646
.L17641:
	rsb	r4, r4, r4, lsl #4
	movw	r0, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LANCHOR1
	add	r4, r0, r4, lsl #2
	strb	r5, [r4, #3733]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17646:
	movw	r1, #:lower16:.LC285
	ldr	r2, .L17647
	movt	r1, #:upper16:.LC285
	ldr	r0, .L17647+4
	bl	__dynamic_pr_debug
	b	.L17641
.L17648:
	.align	2
.L17647:
	.word	.LANCHOR5-896
	.word	.LANCHOR4+3240
	.fnend
	.size	rndis_set_pkt_alignment_factor, .-rndis_set_pkt_alignment_factor
	.align	2
	.global	rndis_add_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_hdr, %function
rndis_add_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L17649
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r4, r0
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	str	r2, [r4, #4]	@ unaligned
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L17649:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_add_hdr, .-rndis_add_hdr
	.align	2
	.global	rndis_free_response
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_free_response, %function
rndis_free_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	rsb	r0, r0, r0, lsl #4
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	lsl	r0, r0, #2
	movt	r6, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	add	r3, r6, r0
	ldr	r5, [r3, #3748]
	add	r6, r3, #3744
	add	r6, r6, #4
	cmp	r5, r6
	ldr	r4, [r5]
	beq	.L17655
	mov	r7, r1
	b	.L17658
.L17657:
	cmp	r6, r4
	mov	r5, r4
	ldr	r4, [r4]
	beq	.L17655
.L17658:
	cmp	r5, #0
	beq	.L17657
	ldr	r3, [r5, #8]
	cmp	r3, r7
	bne	.L17657
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	mov	r5, r4
	bl	kfree
	cmp	r6, r4
	ldr	r4, [r4]
	bne	.L17658
.L17655:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_free_response, .-rndis_free_response
	.align	2
	.global	rndis_get_next_response
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_get_next_response, %function
rndis_get_next_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L17669
	rsb	r0, r0, r0, lsl #4
	movw	ip, #:lower16:.LANCHOR1
	movt	ip, #:upper16:.LANCHOR1
	lsl	r0, r0, #2
	add	r3, ip, r0
	ldr	r2, [r3, #3748]
	add	ip, r3, #3744
	add	ip, ip, #4
	cmp	r2, ip
	ldr	r3, [r2]
	beq	.L17669
	.save {lr}
	str	lr, [sp, #-4]!
	b	.L17667
.L17666:
	cmp	ip, r3
	mov	r2, r3
	ldr	r3, [r3]
	beq	.L17674
.L17667:
	ldr	lr, [r2, #16]
	cmp	lr, #0
	bne	.L17666
	ldr	r3, [r2, #12]
	mov	r0, #1
	str	r0, [r2, #16]
	str	r3, [r1]
	ldr	r0, [r2, #8]
	ldr	pc, [sp], #4
.L17674:
	mov	r0, #0
	ldr	pc, [sp], #4
.L17669:
	mov	r0, #0
	bx	lr
	.fnend
	.size	rndis_get_next_response, .-rndis_get_next_response
	.section	.rodata.str1.4
	.align	2
.LC1339:
	.ascii	"%s: remove entries\000"
	.align	2
.LC1340:
	.ascii	"\012\000"
	.section	.rodata.cst4
	.align	2
.LC1341:
	.word	__stack_chk_guard
	.text
	.align	2
	.global	rndis_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_init, %function
rndis_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movw	r3, #:lower16:.LC1341
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LC1341
	str	lr, [sp, #12]
	ldrb	r5, [r4, #3980]	@ zero_extendqisi2
	.pad #32
	sub	sp, sp, #32
	ldr	r3, [r3]
	str	r3, [sp, #28]
	mov	r3,#0
	cmp	r5, #0
	bne	.L17690
	movw	r1, #:lower16:.LC806
	mov	r2, r5
	movt	r1, #:upper16:.LC806
	add	r0, sp, #8
	add	r6, r4, #3696
	bl	sprintf
	add	r0, sp, #8
	ldr	r3, .L17695
	mov	r2, r5
	mov	r1, #432
	str	r6, [sp]
	bl	proc_create_data
	cmp	r0, #0
	bne	.L17691
	ldr	r4, .L17695+4
	ldrh	r3, [r4, #-14]
	tst	r3, #4
	bne	.L17692
.L17678:
	ldr	r3, .L17695+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	mvneq	r0, #4
	bne	.L17693
.L17675:
	movw	r3, #:lower16:.LC1341
	movt	r3, #:upper16:.LC1341
	ldr	r2, [r3]
	ldr	r3, [sp, #28]
	eors	r2, r3, r2
	bne	.L17694
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17691:
	mov	r3, r6
	mov	r2, #1
	str	r5, [r4, #3700]
	mov	r0, r5
	strh	r5, [r3], #52	@ movhi
	str	r2, [r4, #3712]
	str	r3, [r4, #3748]
	str	r3, [r4, #3752]
	strb	r2, [r4, #3980]
	b	.L17675
.L17690:
	mov	r0, #0
	b	.L17675
.L17692:
	movw	r1, #:lower16:.LC1339
	ldr	r2, .L17695+12
	sub	r0, r4, #32
	movt	r1, #:upper16:.LC1339
	bl	__dynamic_pr_debug
	b	.L17678
.L17693:
	movw	r1, #:lower16:.LC1340
	sub	r0, r4, #8
	movt	r1, #:upper16:.LC1340
	bl	__dynamic_pr_debug
	mvn	r0, #4
	b	.L17675
.L17694:
	bl	__stack_chk_fail
.L17696:
	.align	2
.L17695:
	.word	.LANCHOR5+1892
	.word	.LANCHOR8-1216
	.word	.LANCHOR8-1200
	.word	.LANCHOR5+1880
	.fnend
	.size	rndis_init, .-rndis_init
	.section	.rodata.str1.4
	.align	2
.LC1342:
	.ascii	"rndis\000"
	.section	.rodata.cst4
	.align	2
.LC1343:
	.word	__stack_chk_guard
	.text
	.align	2
	.global	rndis_bind_config_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind_config_vendor, %function
rndis_bind_config_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LC1343
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	movt	ip, #:upper16:.LC1343
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	ip, [ip]
	str	ip, [sp, #20]
	mov	ip,#0
	beq	.L17705
	mov	r7, r0
	mov	r9, r2
	mov	r8, r3
	bl	rndis_init
	subs	r5, r0, #0
	blt	.L17697
	movw	r5, #:lower16:.LANCHOR7
	movt	r5, #:upper16:.LANCHOR7
	ldrb	r3, [r5, #-1244]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L17699
	ldr	r2, [r7, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17701
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #-3568]
	strb	r3, [r5, #-1244]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17701
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #-3548]
	strb	r3, [r5, #-1236]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17701
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r5, #-3577]
	strb	r3, [r5, #-1228]
	strb	r3, [r2, #48]
.L17699:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L17706
	mov	r2, #180
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17715
.L17702:
	ldr	r3, [r6]	@ unaligned
	movw	r2, #:lower16:rndis_add_header
	movw	r1, #:lower16:rndis_rm_hdr
	ldr	lr, .L17718
	movt	r2, #:upper16:rndis_add_header
	movt	r1, #:upper16:rndis_rm_hdr
	mov	r0, r7
	str	r3, [r4, #150]	@ unaligned
	movw	r3, #:lower16:.LC1342
	ldrh	ip, [r6, #4]	@ unaligned
	movt	r3, #:upper16:.LC1342
	str	lr, [r4, #4]
	ldr	lr, [r5, #-3292]
	str	r2, [r4, #128]
	movw	r2, #:lower16:rndis_bind
	ldr	r5, [r5, #-1248]
	movt	r2, #:upper16:rndis_bind
	str	r3, [r4]
	movw	r3, #:lower16:rndis_unbind
	movt	r3, #:upper16:rndis_unbind
	str	r2, [r4, #32]
	movw	r2, #:lower16:rndis_setup
	movt	r2, #:upper16:rndis_setup
	str	r3, [r4, #36]
	movw	r3, #:lower16:rndis_disable
	str	r1, [r4, #132]
	movw	r1, #:lower16:rndis_set_alt
	movt	r3, #:upper16:rndis_disable
	movt	r1, #:upper16:rndis_set_alt
	str	r1, [r4, #40]
	mov	r1, #0
	str	r2, [r4, #52]
	mov	r2, #44
	str	r3, [r4, #48]
	strh	r1, [r4, #98]	@ movhi
	mov	r1, r4
	str	r2, [r4, #100]
	str	lr, [r4, #116]
	str	r5, [r4, #120]
	strh	ip, [r4, #154]	@ unaligned
	str	r9, [r4, #156]
	str	r8, [r4, #160]
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L17697
	mov	r0, r4
	bl	kfree
.L17703:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r2, [r3, #3980]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L17716
.L17697:
	movw	r3, #:lower16:.LC1343
	movt	r3, #:upper16:.LC1343
	ldr	r2, [r3]
	ldr	r3, [sp, #20]
	eors	r2, r3, r2
	bne	.L17717
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L17706:
	mov	r4, #16
	b	.L17702
.L17716:
	mov	r4, #0
	movw	r1, #:lower16:.LC806
	mov	r2, r4
	movt	r1, #:upper16:.LC806
	mov	r0, sp
	strb	r4, [r3, #3980]
	bl	sprintf
	mov	r0, sp
	mov	r1, r4
	bl	remove_proc_entry
	b	.L17697
.L17715:
	mvn	r5, #11
	b	.L17703
.L17701:
	mvn	r5, #18
	b	.L17697
.L17705:
	mvn	r5, #21
	b	.L17697
.L17717:
	bl	__stack_chk_fail
.L17719:
	.align	2
.L17718:
	.word	.LANCHOR7-1212
	.fnend
	.size	rndis_bind_config_vendor, .-rndis_bind_config_vendor
	.section	.rodata.cst4
	.align	2
.LC1344:
	.word	__stack_chk_guard
	.text
	.align	2
	.global	rndis_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind_config, %function
rndis_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC1344
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	movt	r3, #:upper16:.LC1344
	str	lr, [sp, #16]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r3]
	str	r3, [sp, #20]
	mov	r3,#0
	beq	.L17728
	mov	r7, r0
	bl	rndis_init
	subs	r5, r0, #0
	blt	.L17720
	movw	r5, #:lower16:.LANCHOR7
	movt	r5, #:upper16:.LANCHOR7
	ldrb	r3, [r5, #-1244]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L17722
	ldr	r2, [r7, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17724
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #-3568]
	strb	r3, [r5, #-1244]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17724
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #-3548]
	strb	r3, [r5, #-1236]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17724
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r5, #-3577]
	strb	r3, [r5, #-1228]
	strb	r3, [r2, #48]
.L17722:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L17729
	mov	r2, #180
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17738
.L17725:
	ldr	r2, [r6]	@ unaligned
	movw	r1, #:lower16:rndis_add_header
	movw	r3, #:lower16:rndis_rm_hdr
	ldr	lr, .L17741
	movt	r1, #:upper16:rndis_add_header
	movt	r3, #:upper16:rndis_rm_hdr
	mov	r0, r7
	str	r2, [r4, #150]	@ unaligned
	movw	r2, #:lower16:.LC1342
	ldrh	ip, [r6, #4]	@ unaligned
	movt	r2, #:upper16:.LC1342
	str	lr, [r4, #4]
	ldr	r6, [r5, #-3292]
	str	r1, [r4, #128]
	movw	r1, #:lower16:rndis_bind
	ldr	lr, [r5, #-1248]
	movt	r1, #:upper16:rndis_bind
	str	r2, [r4]
	movw	r2, #:lower16:rndis_unbind
	movt	r2, #:upper16:rndis_unbind
	str	r1, [r4, #32]
	movw	r1, #:lower16:rndis_setup
	movt	r1, #:upper16:rndis_setup
	str	r2, [r4, #36]
	movw	r2, #:lower16:rndis_disable
	str	r3, [r4, #132]
	movw	r3, #:lower16:rndis_set_alt
	movt	r2, #:upper16:rndis_disable
	movt	r3, #:upper16:rndis_set_alt
	str	r3, [r4, #40]
	mov	r3, #0
	str	r1, [r4, #52]
	mov	r1, #44
	str	r2, [r4, #48]
	strh	r3, [r4, #98]	@ movhi
	str	r1, [r4, #100]
	mov	r1, r4
	str	r6, [r4, #116]
	str	lr, [r4, #120]
	strh	ip, [r4, #154]	@ unaligned
	str	r3, [r4, #156]
	str	r3, [r4, #160]
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L17720
	mov	r0, r4
	bl	kfree
.L17726:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r2, [r3, #3980]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L17739
.L17720:
	movw	r3, #:lower16:.LC1344
	movt	r3, #:upper16:.LC1344
	ldr	r2, [r3]
	ldr	r3, [sp, #20]
	eors	r2, r3, r2
	bne	.L17740
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L17729:
	mov	r4, #16
	b	.L17725
.L17739:
	mov	r4, #0
	movw	r1, #:lower16:.LC806
	mov	r2, r4
	movt	r1, #:upper16:.LC806
	mov	r0, sp
	strb	r4, [r3, #3980]
	bl	sprintf
	mov	r0, sp
	mov	r1, r4
	bl	remove_proc_entry
	b	.L17720
.L17738:
	mvn	r5, #11
	b	.L17726
.L17724:
	mvn	r5, #18
	b	.L17720
.L17728:
	mvn	r5, #21
	b	.L17720
.L17740:
	bl	__stack_chk_fail
.L17742:
	.align	2
.L17741:
	.word	.LANCHOR7-1212
	.fnend
	.size	rndis_bind_config, .-rndis_bind_config
	.section	.rodata.cst4
	.align	2
.LC1345:
	.word	__stack_chk_guard
	.text
	.align	2
	.global	rndis_exit
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_exit, %function
rndis_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r2, #:lower16:.LC1345
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r2, #:upper16:.LC1345
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	ldr	r2, [r2]
	str	r2, [sp, #20]
	mov	r2,#0
	ldrb	r2, [r3, #3980]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L17750
.L17743:
	movw	r3, #:lower16:.LC1345
	movt	r3, #:upper16:.LC1345
	ldr	r2, [r3]
	ldr	r3, [sp, #20]
	eors	r2, r3, r2
	bne	.L17751
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L17750:
	mov	r4, #0
	movw	r1, #:lower16:.LC806
	mov	r2, r4
	movt	r1, #:upper16:.LC806
	mov	r0, sp
	strb	r4, [r3, #3980]
	bl	sprintf
	mov	r0, sp
	mov	r1, r4
	bl	remove_proc_entry
	b	.L17743
.L17751:
	bl	__stack_chk_fail
	.fnend
	.size	rndis_exit, .-rndis_exit
	.align	2
	.global	ecm_ipa_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ipa_init, %function
ecm_ipa_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_ipa_init, .-ecm_ipa_init
	.align	2
	.global	ecm_qc_get_ipa_rx_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_rx_cb, %function
ecm_qc_get_ipa_rx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3504]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_rx_cb, .-ecm_qc_get_ipa_rx_cb
	.align	2
	.global	ecm_qc_get_ipa_tx_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_tx_cb, %function
ecm_qc_get_ipa_tx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3508]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_tx_cb, .-ecm_qc_get_ipa_tx_cb
	.align	2
	.global	ecm_qc_get_ipa_priv
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_priv, %function
ecm_qc_get_ipa_priv:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3524]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_priv, .-ecm_qc_get_ipa_priv
	.align	2
	.global	fmbim_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_free_req, %function
fmbim_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L17756
	mov	r5, r0
	ldr	r0, [r4]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L17756:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	fmbim_free_req, .-fmbim_free_req
	.section	.rodata.str1.4
	.align	2
.LC1346:
	.ascii	"<3>%s: %s: teth_bridge_set_aggr_params failed\012\000"
	.section	.text.unlikely
	.align	2
	.global	mbim_configure_params
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_configure_params, %function
mbim_configure_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L17761
	movw	r0, #:lower16:.LC1346
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC1346
	mov	r1, r2
	bl	printk
	mvn	r0, #0
	pop	{r4, pc}
.L17762:
	.align	2
.L17761:
	.word	.LANCHOR5+2000
	.fnend
	.size	mbim_configure_params, .-mbim_configure_params
	.text
	.align	2
	.global	bam_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_disconnect, %function
bam_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17789
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L17784
.L17764:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #3692]
	cmp	r4, r3
	bge	.L17785
	cmp	r6, #0
	beq	.L17786
	add	r4, r5, r4, lsl #2
	ldr	r4, [r4, #3684]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L17767
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L17767
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L17767
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r4, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r4, #4]
.L17767:
	ldr	r3, [r4, #60]
	cmp	r3, #7
	beq	.L17787
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L17788
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17787:
	ldr	r0, [r5, #3688]
	add	r1, r4, #184
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
.L17784:
	movw	r1, #:lower16:.LC152
	ldr	r2, .L17789+4
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC152
	mov	r3, r6
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L17764
.L17788:
	ldr	r2, .L17789+4
	movw	r0, #:lower16:.LC652
	movt	r0, #:upper16:.LC652
	mov	r1, r2
.L17783:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L17785:
	movw	r0, #:lower16:.LC650
	ldr	r1, .L17789+4
	mov	r2, r4
	movt	r0, #:upper16:.LC650
	b	.L17783
.L17786:
	ldr	r1, .L17789+4
	movw	r0, #:lower16:.LC651
	movt	r0, #:upper16:.LC651
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L17790:
	.align	2
.L17789:
	.word	.LANCHOR4-2016
	.word	.LANCHOR5-3208
	.fnend
	.size	bam_data_disconnect, .-bam_data_disconnect
	.section	.rodata.str1.4
	.align	2
.LC1347:
	.ascii	"<6>%s: SET DEVICE OFFLINE\000"
	.align	2
.LC1348:
	.ascii	"<6>%s: dev:%pK port:%d. Do nothing.\012\000"
	.align	2
.LC1349:
	.ascii	"<6>%s: mbim deactivated\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_disable, %function
mbim_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	movw	r0, #:lower16:.LC1347
	ldr	r1, .L17797
	movt	r0, #:upper16:.LC1347
	bl	printk
	mov	r0, r4
	str	r5, [r4, #88]
	strb	r5, [r4, #164]
	bl	mbim_clear_queues
	mov	r0, r4
	bl	mbim_reset_function_queue
	movw	r0, #:lower16:.LC1348
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	mov	r2, r4
	ldr	r1, .L17797+4
	movt	r0, #:upper16:.LC1348
	bl	printk
	add	r0, r4, #140
	ldrb	r1, [r4, #136]	@ zero_extendqisi2
	bl	bam_data_disconnect
	ldr	r0, [r4, #156]
	ldr	r3, [r0]
	cmp	r3, r5
	beq	.L17792
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #156]
	str	r5, [r3]
.L17792:
	mov	r3, #0
	movw	r0, #:lower16:.LC1349
	ldr	r1, .L17797
	movt	r0, #:upper16:.LC1349
	str	r3, [r4, #168]
	pop	{r4, r5, r6, lr}
	b	printk
.L17798:
	.align	2
.L17797:
	.word	.LANCHOR5+2024
	.word	.LANCHOR5+2040
	.fnend
	.size	mbim_disable, .-mbim_disable
	.text
	.align	2
	.global	bam_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_connect, %function
bam_data_connect:
	.fnstart
	@ args = 8, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L17816
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r4, r1
	mov	r7, r2
	strd	r8, [sp, #16]
	mov	r8, r3
	strd	r10, [sp, #24]
	ldrh	r3, [ip, #-14]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldrb	r9, [sp, #48]	@ zero_extendqisi2
	ldr	r10, [sp, #52]
	tst	r3, #4
	bne	.L17811
.L17800:
	movw	fp, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR1
	ldr	r3, [fp, #3692]
	cmp	r3, r4
	ble	.L17812
	cmp	r5, #0
	beq	.L17813
	ldr	r0, [r5, #8]
	add	r1, fp, r4, lsl #2
	ldr	r4, [r1, #3684]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L17814
	ldr	r3, [r5, #8]
	str	r4, [r3]
	ldr	r0, [r5, #12]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L17815
	ldr	r3, [r5, #12]
	cmp	r7, #7
	str	r4, [r3]
	str	r5, [r4, #4]
	strb	r8, [r4, #52]
	strb	r9, [r4, #53]
	str	r10, [r4, #56]
	str	r7, [r4, #60]
	bne	.L17806
	add	r2, r4, #44
	add	r3, r4, #48
	strb	r8, [r4, #64]
	strb	r9, [r4, #65]
	strd	r2, [r4, #68]
.L17806:
	add	r1, r4, #168
	ldr	r0, [fp, #3688]
	bl	queue_work
.L17799:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17811:
	movw	r1, #:lower16:.LC152
	ldr	r2, .L17816+4
	sub	r0, ip, #32
	movt	r1, #:upper16:.LC152
	mov	r3, r5
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L17800
.L17813:
	movw	r0, #:lower16:.LC651
	ldr	r1, .L17816+4
	mvn	r6, #18
	movt	r0, #:upper16:.LC651
	bl	printk
	b	.L17799
.L17815:
	movw	r0, #:lower16:.LC386
	ldr	r1, .L17816+4
	movt	r0, #:upper16:.LC386
	ldr	r2, [r5, #12]
	bl	printk
	ldr	r3, [r5, #8]
	mov	r2, #0
	str	r2, [r3]
	b	.L17799
.L17812:
	movw	r0, #:lower16:.LC174
	ldr	r1, .L17816+4
	mov	r2, r4
	movt	r0, #:upper16:.LC174
	mvn	r6, #18
	bl	printk
	b	.L17799
.L17814:
	movw	r0, #:lower16:.LC385
	ldr	r1, .L17816+4
	movt	r0, #:upper16:.LC385
	ldr	r2, [r5, #8]
	bl	printk
	b	.L17799
.L17817:
	.align	2
.L17816:
	.word	.LANCHOR4-1984
	.word	.LANCHOR5-3188
	.fnend
	.size	bam_data_connect, .-bam_data_connect
	.section	.rodata.str1.4
	.align	2
.LC1350:
	.ascii	"<6>%s: CONTROL_INTERFACE\000"
	.align	2
.LC1351:
	.ascii	"<6>%s: reset mbim control %d\012\000"
	.align	2
.LC1352:
	.ascii	"<3>%s: Failed configuring notify ep %s: err %d\012\000"
	.align	2
.LC1353:
	.ascii	"<6>%s: DATA_INTERFACE\000"
	.align	2
.LC1354:
	.ascii	"<6>%s: reset mbim\012\000"
	.align	2
.LC1355:
	.ascii	"<6>%s: Alt set 1, initialize ports\000"
	.align	2
.LC1356:
	.ascii	"<6>%s: Choose endpoints\000"
	.align	2
.LC1357:
	.ascii	"<3>%s: IN ep %s failed: %d\012\000"
	.align	2
.LC1358:
	.ascii	"<6>%s: Set mbim port in_desc = 0x%pK\012\000"
	.align	2
.LC1359:
	.ascii	"<3>%s: OUT ep %s failed: %d\012\000"
	.align	2
.LC1360:
	.ascii	"<6>%s: Set mbim port out_desc = 0x%pK\012\000"
	.align	2
.LC1361:
	.ascii	"%s: Activate mbim\012\000"
	.align	2
.LC1362:
	.ascii	"<6>%s: dev:%pK portno:%d\012\000"
	.align	2
.LC1363:
	.ascii	"<3>%s: bam_data_setup failed: err:%d\012\000"
	.align	2
.LC1364:
	.ascii	"<6>%s: mbim bam connected\012\000"
	.align	2
.LC1365:
	.ascii	"<6>%s: PORTS already SET\000"
	.align	2
.LC1366:
	.ascii	"<6>%s: SET DEVICE ONLINE\000"
	.align	2
.LC1367:
	.ascii	"<3>%s: ERROR: Illegal Interface\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_set_alt, %function
mbim_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	ldrb	r5, [r0, #196]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	mov	r6, r2
	ldr	r8, [r0, #84]
	cmp	r5, r1
	bne	.L17819
	movw	r0, #:lower16:.LC1350
	ldr	r1, .L17845
	movt	r0, #:upper16:.LC1350
	bl	printk
	cmp	r6, #0
	bne	.L17820
	ldr	r3, [r4, #156]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L17821
	movw	r0, #:lower16:.LC1351
	ldr	r1, .L17845
	mov	r2, r5
	movt	r0, #:upper16:.LC1351
	bl	printk
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L17821:
	mov	r1, r4
	ldr	r0, [r8]
	ldr	r2, [r4, #156]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	ldr	r3, [r4, #156]
	beq	.L17822
	mov	r2, #0
	movw	r0, #:lower16:.LC1352
	ldr	r1, .L17845
	movt	r0, #:upper16:.LC1352
	str	r2, [r3, #28]
	ldr	r2, [r4, #156]
	mov	r3, r5
	ldr	r2, [r2, #4]
	bl	printk
	b	.L17818
.L17822:
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	ldr	r2, [r4, #156]
	beq	.L17824
	movw	r0, #:lower16:.LC1046
	ldr	r1, .L17845
	mov	r3, r5
	movt	r0, #:upper16:.LC1046
	ldr	r2, [r2, #4]
	bl	printk
	b	.L17818
.L17824:
	str	r4, [r2]
	b	.L17825
.L17819:
	ldrb	r3, [r0, #197]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L17820
	movw	r0, #:lower16:.LC1353
	ldr	r1, .L17845
	movt	r0, #:upper16:.LC1353
	bl	printk
	cmp	r6, #1
	bhi	.L17820
	ldr	r3, [r4, #148]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L17826
	movw	r0, #:lower16:.LC1354
	ldr	r1, .L17845
	movt	r0, #:upper16:.LC1354
	bl	printk
	ldr	r3, .L17845+4
	mov	r2, #16384
	mov	r1, #0
	str	r1, [r4, #88]
	str	r3, [r4, #200]
	str	r2, [r4, #224]
.L17826:
	cmp	r6, #1
	bne	.L17827
	movw	r0, #:lower16:.LC1355
	ldr	r1, .L17845
	movt	r0, #:upper16:.LC1355
	bl	printk
	ldr	r3, [r4, #148]
	ldr	r7, [r3, #28]
	cmp	r7, #0
	bne	.L17828
	movw	r0, #:lower16:.LC1356
	ldr	r1, .L17845
	movt	r0, #:upper16:.LC1356
	bl	printk
	mov	r1, r4
	ldr	r0, [r8]
	ldr	r2, [r4, #148]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	ldr	r3, [r4, #148]
	beq	.L17829
	str	r7, [r3, #28]
	ldr	r2, [r4, #148]
	movw	r0, #:lower16:.LC1357
	ldr	r1, .L17845
	mov	r3, r5
	movt	r0, #:upper16:.LC1357
	ldr	r2, [r2, #4]
	bl	printk
	b	.L17818
.L17829:
	movw	r0, #:lower16:.LC1358
	ldr	r1, .L17845
	movt	r0, #:upper16:.LC1358
	ldr	r2, [r3, #28]
	bl	printk
	mov	r1, r4
	ldr	r0, [r8]
	ldr	r2, [r4, #152]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	ldr	r3, [r4, #152]
	beq	.L17830
	str	r7, [r3, #28]
	ldr	r2, [r4, #152]
	movw	r0, #:lower16:.LC1359
	ldr	r1, .L17845
	mov	r3, r5
	movt	r0, #:upper16:.LC1359
	ldr	r2, [r2, #4]
	bl	printk
	b	.L17818
.L17830:
	movw	r0, #:lower16:.LC1360
	ldr	r1, .L17845
	movt	r0, #:upper16:.LC1360
	ldr	r2, [r3, #28]
	bl	printk
	ldr	r0, .L17845+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L17831
	movw	r1, #:lower16:.LC1361
	ldr	r2, .L17845
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1361
	bl	__dynamic_pr_debug
.L17831:
	ldr	lr, [r4, #84]
	movw	r0, #:lower16:.LC1362
	mov	r2, r4
	ldr	ip, [r4, #132]
	movt	r0, #:upper16:.LC1362
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	ldr	r1, .L17845+12
	ldr	r7, [lr]
	cmp	ip, #7
	moveq	r8, #2
	movne	r8, #0
	bl	printk
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	mov	r1, r8
	mov	r2, #0
	ldr	r0, [r7, #28]
	bl	usb_bam_get_connection_idx
	mov	r5, r0
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	mov	r1, r8
	mov	r2, #1
	ldr	r0, [r7, #28]
	bl	usb_bam_get_connection_idx
	uxtb	ip, r0
	mov	lr, #1
	ldrb	r1, [r4, #136]	@ zero_extendqisi2
	uxtb	r3, r5
	ldr	r2, [r4, #132]
	add	r0, r4, #140
	stm	sp, {ip, lr}
	bl	bam_data_connect
	subs	r2, r0, #0
	beq	.L17833
	movw	r0, #:lower16:.LC1363
	ldr	r1, .L17845+12
	movt	r0, #:upper16:.LC1363
	bl	printk
	b	.L17827
.L17833:
	movw	r0, #:lower16:.LC1364
	ldr	r1, .L17845+12
	movt	r0, #:upper16:.LC1364
	bl	printk
	b	.L17827
.L17828:
	movw	r0, #:lower16:.LC1365
	ldr	r1, .L17845
	movt	r0, #:upper16:.LC1365
	bl	printk
.L17827:
	add	r5, r4, #204
	strb	r6, [r4, #198]
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r3, #3
	mov	r0, r5
	strb	r3, [r4, #164]
	bl	_raw_spin_unlock
.L17825:
	mov	r6, #1
	movw	r0, #:lower16:.LC1366
	ldr	r1, .L17845
	mov	r5, #0
	movt	r0, #:upper16:.LC1366
	str	r6, [r4, #88]
	bl	printk
	mov	r2, r6
	mov	r3, r5
	add	r0, r4, #108
	mov	r1, #3
	bl	__wake_up
	mov	r2, r6
	add	r0, r4, #120
	mov	r3, r5
	mov	r1, #3
	bl	__wake_up
	b	.L17818
.L17820:
	movw	r0, #:lower16:.LC1367
	ldr	r1, .L17845
	mvn	r5, #21
	movt	r0, #:upper16:.LC1367
	bl	printk
.L17818:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	pop	{r4, r5, r6, r7, r8, pc}
.L17846:
	.align	2
.L17845:
	.word	.LANCHOR5+2060
	.word	.LANCHOR0+1700
	.word	.LANCHOR8-1168
	.word	.LANCHOR5+2076
	.fnend
	.size	mbim_set_alt, .-mbim_set_alt
	.text
	.align	2
	.global	bam_data_destroy
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_destroy, %function
bam_data_destroy:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17858
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L17857
.L17848:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	add	r4, r5, r4, lsl #2
	ldr	r0, [r4, #3684]
	bl	kfree
	ldr	r0, [r5, #3688]
	mov	r3, #0
	str	r3, [r4, #3684]
	cmp	r0, r3
	beq	.L17849
	bl	destroy_workqueue
.L17849:
	mov	r0, #0
	ldr	r6, [sp, #8]
	str	r0, [r5, #3688]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17857:
	movw	r1, #:lower16:.LC747
	ldr	r2, .L17858+4
	sub	r0, r3, #20
	movt	r1, #:upper16:.LC747
	bl	__dynamic_pr_debug
	b	.L17848
.L17859:
	.align	2
.L17858:
	.word	.LANCHOR4-508
	.word	.LANCHOR5-2296
	.fnend
	.size	bam_data_destroy, .-bam_data_destroy
	.section	.rodata.str1.4
	.align	2
.LC1368:
	.ascii	"%s: requested %d BAM2BAM ports\000"
	.align	2
.LC1369:
	.ascii	"%s: bam_data is already setup\000"
	.align	2
.LC1370:
	.ascii	"k_bam_data\000"
	.align	2
.LC1371:
	.ascii	"<3>%s: Failed to create workqueue\012\000"
	.align	2
.LC1372:
	.ascii	"<3>%s: Failed to alloc port:%d\012\000"
	.text
	.align	2
	.global	bam_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_setup, %function
bam_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17888
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L17882
.L17861:
	cmp	r5, #1
	bne	.L17883
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3688]
	cmp	r3, #0
	beq	.L17864
	ldr	r0, .L17888+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17865
.L17881:
	mov	r0, #0
.L17860:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L17864:
	movw	r0, #:lower16:.LC1370
	mov	r2, r5
	str	r3, [sp]
	movt	r0, #:upper16:.LC1370
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #3688]
	beq	.L17884
	movw	r2, #:lower16:kmalloc_caches
	ldr	r3, [r4, #3692]
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #32]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [r4, #3692]
	beq	.L17885
	mov	r2, #232
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L17886
.L17867:
	ldr	r0, .L17888+8
	mov	r5, #0
	movw	ip, #:lower16:bam2bam_data_suspend_work
	movt	ip, #:upper16:bam2bam_data_suspend_work
	movw	r1, #:lower16:bam2bam_data_connect_work
	str	r5, [r3]
	movt	r1, #:upper16:bam2bam_data_connect_work
	movw	r2, #:lower16:bam2bam_data_disconnect_work
	str	r3, [r3, #16]
	movt	r2, #:upper16:bam2bam_data_disconnect_work
	ldrh	lr, [r0, #-6]
	str	r1, [r3, #180]
	movw	r1, #:lower16:bam2bam_data_resume_work
	str	ip, [r3, #212]
	add	ip, r3, #172
	movt	r1, #:upper16:bam2bam_data_resume_work
	str	r3, [r4, #3684]
	add	r4, r3, #188
	str	ip, [r3, #172]
	tst	lr, #4
	add	lr, r3, #204
	str	ip, [r3, #176]
	add	ip, r3, #220
	str	r2, [r3, #196]
	mov	r2, #2560
	str	r2, [r3, #168]
	str	r2, [r3, #184]
	str	r4, [r3, #188]
	str	r4, [r3, #192]
	str	r2, [r3, #200]
	str	lr, [r3, #204]
	str	lr, [r3, #208]
	str	r2, [r3, #216]
	str	ip, [r3, #220]
	str	ip, [r3, #224]
	str	r1, [r3, #228]
	beq	.L17881
	movw	r1, #:lower16:.LC1267
	ldr	r2, .L17888+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1267
	str	r5, [sp]
	bl	__dynamic_pr_debug
	mov	r0, r5
	b	.L17860
.L17885:
	mov	r3, #16
	b	.L17867
.L17882:
	movw	r1, #:lower16:.LC1368
	ldr	r2, .L17888+16
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1368
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L17861
.L17865:
	movw	r1, #:lower16:.LC1369
	ldr	r2, .L17888+16
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1369
	bl	__dynamic_pr_debug
	b	.L17881
.L17886:
	ldr	ip, [r4, #3692]
	movw	r0, #:lower16:.LC1372
	mov	r2, r3
	ldr	r1, .L17888+16
	movt	r0, #:upper16:.LC1372
	mov	r5, r3
	ldr	r6, .L17888+20
	mov	r7, r3
	sub	ip, ip, #1
	str	ip, [r4, #3692]
	bl	printk
.L17868:
	ldr	r3, [r4, #3692]
	cmp	r5, r3
	bge	.L17887
	ldr	r0, [r6]
	add	r5, r5, #1
	bl	kfree
	str	r7, [r6], #4
	b	.L17868
.L17883:
	movw	r0, #:lower16:.LC1284
	ldr	r1, .L17888+16
	mov	r2, r5
	movt	r0, #:upper16:.LC1284
	bl	printk
	mvn	r0, #21
	b	.L17860
.L17884:
	movw	r0, #:lower16:.LC1371
	ldr	r1, .L17888+16
	movt	r0, #:upper16:.LC1371
	bl	printk
	mvn	r0, #11
	b	.L17860
.L17887:
	ldr	r0, [r4, #3688]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L17860
.L17889:
	.align	2
.L17888:
	.word	.LANCHOR8-1152
	.word	.LANCHOR8-1120
	.word	.LANCHOR8-1104
	.word	.LANCHOR5+2112
	.word	.LANCHOR5+2096
	.word	.LANCHOR1+3684
	.fnend
	.size	bam_data_setup, .-bam_data_setup
	.section	.rodata.str1.4
	.align	2
.LC1373:
	.ascii	"<3>%s: bam_data_setup failed err: %d\012\000"
	.align	2
.LC1374:
	.ascii	"<3>%s: bam setup failed\000"
	.align	2
.LC1375:
	.ascii	"%s: data transport type is %s\000"
	.align	2
.LC1376:
	.ascii	"%s: set xport = %d\000"
	.align	2
.LC1377:
	.ascii	"%s: using random dev_mac ethernet address\012\000"
	.align	2
.LC1378:
	.ascii	"%s: using random host_mac ethernet address\012\000"
	.align	2
.LC1379:
	.ascii	"%02X%02X%02X%02X%02X%02X\000"
	.align	2
.LC1380:
	.ascii	"cdc_ethernet\000"
	.align	2
.LC1381:
	.ascii	"<3>%s: failed to add function\000"
	.align	2
.LC1382:
	.ascii	"%s: setting ecm_ipa, host_ethaddr=%pM, device_ethad"
	.ascii	"dr=%pM\000"
	.align	2
.LC1383:
	.ascii	"%s: ecm_ipa successful created\000"
	.text
	.align	2
	.global	ecm_qc_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_bind_config, %function
ecm_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	movw	r0, #:lower16:.LC506
	strd	r8, [sp, #16]
	movt	r0, #:upper16:.LC506
	mov	r8, r2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r6, #24]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r3]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L17909
	movw	r0, #:lower16:.LC509
	mov	r1, r4
	movt	r0, #:upper16:.LC509
	bl	strcmp
	cmp	r5, #0
	cmpne	r0, #0
	beq	.L17909
	mov	r0, #1
	bl	bam_data_setup
	subs	r7, r0, #0
	bne	.L17892
	ldr	r7, .L17943
	ldrh	r3, [r7, #-14]
	tst	r3, #4
	bne	.L17935
.L17894:
	movw	r9, #:lower16:.LANCHOR0
	movt	r9, #:upper16:.LANCHOR0
	ldrb	r3, [r9, #1456]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L17895
	ldr	r2, [r6, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17897
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r6, #24]
	strb	r3, [r9, #1456]
	strb	r3, [r9, #2396]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17897
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r9, #1472]
	strb	r3, [r9, #2428]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17897
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR7
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR7
	strb	r3, [r2, #-1201]
	strb	r3, [r1, #48]
	strb	r3, [r9, #1464]
.L17895:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L17910
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17936
.L17898:
	mov	r0, r8
	bl	str_to_xport
	ldr	r3, .L17943+4
	str	r0, [r4, #124]
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L17937
.L17899:
	cmp	r0, #7
	add	r7, r4, #128
	beq	.L17938
	ldrb	r3, [r5, #5]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1379
	mov	r1, #14
	ldrb	r10, [r5, #4]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1379
	mov	r0, r7
	ldrb	r8, [r5, #3]	@ zero_extendqisi2
	ldrb	lr, [r5, #2]	@ zero_extendqisi2
	str	r3, [sp, #16]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	ldrb	r3, [r5]	@ zero_extendqisi2
.L17934:
	stm	sp, {ip, lr}
	str	r8, [sp, #8]
	str	r10, [sp, #12]
	bl	snprintf
	ldr	lr, .L17943+8
	movw	r3, #:lower16:.LC1380
	movw	ip, #:lower16:ecm_qc_unbind
	movt	r3, #:upper16:.LC1380
	movt	ip, #:upper16:ecm_qc_unbind
	str	r7, [r9, #1468]
	movw	r1, #:lower16:ecm_qc_bind
	movw	r2, #:lower16:ecm_qc_set_alt
	movt	r1, #:upper16:ecm_qc_bind
	movt	r2, #:upper16:ecm_qc_set_alt
	stm	r4, {r3, lr}
	movw	r3, #:lower16:ecm_qc_get_alt
	mov	r0, r6
	movt	r3, #:upper16:ecm_qc_get_alt
	str	r1, [r4, #32]
	movw	r1, #:lower16:ecm_qc_setup
	str	ip, [r4, #36]
	movw	ip, #:lower16:ecm_qc_disable
	movt	r1, #:upper16:ecm_qc_setup
	movt	ip, #:upper16:ecm_qc_disable
	str	r2, [r4, #40]
	movw	r2, #:lower16:ecm_qc_suspend
	str	r3, [r4, #44]
	movw	r3, #:lower16:ecm_qc_resume
	movt	r2, #:upper16:ecm_qc_suspend
	movt	r3, #:upper16:ecm_qc_resume
	str	ip, [r4, #48]
	mov	ip, #15
	str	r1, [r4, #52]
	mov	r1, r4
	str	r2, [r4, #56]
	str	r3, [r4, #60]
	strh	ip, [r4, #98]	@ movhi
	bl	usb_add_function
	subs	r7, r0, #0
	bne	.L17939
	ldr	r3, [r4, #124]
	cmp	r3, #7
	bne	.L17890
	ldr	r0, .L17943+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L17940
.L17906:
	ldr	r0, .L17943+16
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L17890
	movw	r1, #:lower16:.LC1383
	ldr	r2, .L17943+20
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1383
	bl	__dynamic_pr_debug
	b	.L17890
.L17909:
	mvn	r7, #21
.L17890:
	mov	r0, r7
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17910:
	mov	r4, #16
	b	.L17898
.L17938:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	add	r8, r5, #3504
	ldr	r0, [r5, #4064]
	add	r1, r8, #14
	bl	get_qc_ether_addr
	cmp	r0, #0
	beq	.L17901
	ldr	r0, .L17943+24
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17941
.L17901:
	add	r1, r8, #8
	ldr	r0, [r5, #4068]
	bl	get_qc_ether_addr
	cmp	r0, #0
	beq	.L17902
	ldr	r0, .L17943+28
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L17942
.L17902:
	ldrb	r3, [r5, #3517]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1379
	mov	r1, #14
	ldrb	r10, [r5, #3516]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1379
	mov	r0, r7
	ldrb	r8, [r5, #3515]	@ zero_extendqisi2
	ldrb	lr, [r5, #3514]	@ zero_extendqisi2
	str	r3, [sp, #16]
	ldrb	ip, [r5, #3513]	@ zero_extendqisi2
	ldrb	r3, [r5, #3512]	@ zero_extendqisi2
	b	.L17934
.L17940:
	ldr	r3, .L17943+32
	movw	r1, #:lower16:.LC1382
	sub	r0, r0, #20
	ldr	r2, .L17943+20
	movt	r1, #:upper16:.LC1382
	str	r3, [sp]
	sub	r3, r3, #6
	bl	__dynamic_pr_debug
	b	.L17906
.L17897:
	mvn	r7, #18
	b	.L17890
.L17935:
	movw	r1, #:lower16:.LC1375
	ldr	r2, .L17943+20
	mov	r3, r8
	movt	r1, #:upper16:.LC1375
	sub	r0, r7, #32
	bl	__dynamic_pr_debug
	b	.L17894
.L17937:
	movw	r1, #:lower16:.LC1376
	mov	r3, r0
	ldr	r2, .L17943+20
	sub	r0, r7, #8
	movt	r1, #:upper16:.LC1376
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #124]
	b	.L17899
.L17942:
	movw	r1, #:lower16:.LC1378
	ldr	r2, .L17943+36
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1378
	bl	__dynamic_pr_debug
	b	.L17902
.L17941:
	movw	r1, #:lower16:.LC1377
	ldr	r2, .L17943+36
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1377
	bl	__dynamic_pr_debug
	b	.L17901
.L17936:
	mvn	r7, #11
	b	.L17890
.L17939:
	movw	r0, #:lower16:.LC1381
	ldr	r1, .L17943+20
	movt	r0, #:upper16:.LC1381
	bl	printk
	mov	r3, #0
	mov	r0, r4
	str	r3, [r9, #1468]
	bl	kfree
	b	.L17890
.L17892:
	movw	r0, #:lower16:.LC1373
	ldr	r1, .L17943+40
	mov	r2, r7
	movt	r0, #:upper16:.LC1373
	bl	printk
	movw	r0, #:lower16:.LC1374
	ldr	r1, .L17943+20
	movt	r0, #:upper16:.LC1374
	bl	printk
	b	.L17890
.L17944:
	.align	2
.L17943:
	.word	.LANCHOR8-1072
	.word	.LANCHOR8-1056
	.word	.LANCHOR7-1188
	.word	.LANCHOR8-988
	.word	.LANCHOR8-964
	.word	.LANCHOR5+2156
	.word	.LANCHOR8-1024
	.word	.LANCHOR8-1012
	.word	.LANCHOR1+3518
	.word	.LANCHOR5+2176
	.word	.LANCHOR5+2136
	.fnend
	.size	ecm_qc_bind_config, .-ecm_qc_bind_config
	.section	.rodata.str1.4
	.align	2
.LC1384:
	.ascii	"<6>%s: port number %u\000"
	.align	2
.LC1385:
	.ascii	"<3>%s: Can not add port %u. Max ports = %d\000"
	.align	2
.LC1386:
	.ascii	"<6>%s: no_ports:%d\012\000"
	.align	2
.LC1387:
	.ascii	"<6>%s: mbim struct not allocated\000"
	.align	2
.LC1388:
	.ascii	"usb_mbim\000"
	.align	2
.LC1389:
	.ascii	"<6>%s: Exit status %d\000"
	.section	.text.unlikely
	.align	2
	.global	mbim_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_bind_config, %function
mbim_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	mov	r5, r0
	movw	r7, #:lower16:.LANCHOR1
	ldr	r1, .L17956
	movw	r0, #:lower16:.LC1384
	mov	r6, r2
	movt	r0, #:upper16:.LC1384
	mov	r2, r4
	movt	r7, #:upper16:.LANCHOR1
	bl	printk
	ldr	r8, [r7, #3548]
	cmp	r8, r4
	bhi	.L17946
	movw	r0, #:lower16:.LC1385
	mov	r2, r4
	ldr	r1, .L17956
	mov	r3, r8
	movt	r0, #:upper16:.LC1385
	mvn	r4, #18
	bl	printk
	b	.L17945
.L17946:
	movw	r0, #:lower16:.LC1386
	ldr	r1, .L17956+4
	mov	r2, r8
	movt	r0, #:upper16:.LC1386
	bl	printk
	mov	r0, r8
	bl	bam_data_setup
	subs	r4, r0, #0
	beq	.L17948
	movw	r0, #:lower16:.LC1373
	ldr	r1, .L17956+4
	mov	r2, r4
	movt	r0, #:upper16:.LC1373
	bl	printk
	movw	r0, #:lower16:.LC1374
	ldr	r1, .L17956
	movt	r0, #:upper16:.LC1374
	bl	printk
	b	.L17945
.L17948:
	movw	r0, #:lower16:.LC644
	ldr	r1, .L17956+4
	mov	r2, r8
	movt	r0, #:upper16:.LC644
	bl	printk
	movw	r1, #:lower16:.LANCHOR7
	movt	r1, #:upper16:.LANCHOR7
	ldrb	r3, [r1, #-1180]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L17949
	ldr	r0, [r5, #24]
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L17950
.L17951:
	mvn	r4, #18
	b	.L17945
.L17950:
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR0
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR0
	strb	r3, [r0, #48]
	ldr	r0, [r5, #24]
	strb	r3, [r1, #-1180]
	strb	r3, [r2, #2688]
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17951
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #-1172]
	strb	r3, [r0, #48]
	strb	r3, [r2, #2708]
	strb	r3, [r2, #2720]
.L17949:
	ldr	r4, [r7, #3540]
	cmp	r4, #0
	bne	.L17952
	movw	r0, #:lower16:.LC1387
	ldr	r1, .L17956
	mvn	r4, #11
	movt	r0, #:upper16:.LC1387
	bl	printk
	b	.L17945
.L17952:
	ldr	ip, .L17956+8
	movw	r2, #:lower16:.LC1388
	movw	r3, #:lower16:mbim_bind
	movt	r2, #:upper16:.LC1388
	movt	r3, #:upper16:mbim_bind
	ldr	r7, [r5, #24]
	movw	r1, #:lower16:mbim_unbind
	ldr	lr, .L17956+12
	mov	r0, r6
	movt	r1, #:upper16:mbim_unbind
	movw	r6, #:lower16:.LANCHOR0
	stm	r4, {r2, ip}
	movw	r2, #:lower16:mbim_set_alt
	movw	ip, #:lower16:mbim_disable
	str	r3, [r4, #32]
	movw	r3, #:lower16:mbim_get_alt
	movt	r2, #:upper16:mbim_set_alt
	movt	r3, #:upper16:mbim_get_alt
	str	r1, [r4, #36]
	movw	r1, #:lower16:mbim_setup
	movt	r1, #:upper16:mbim_setup
	movt	ip, #:upper16:mbim_disable
	strd	r2, [r4, #40]
	movw	r2, #:lower16:mbim_suspend
	movw	r3, #:lower16:mbim_resume
	movt	r3, #:upper16:mbim_resume
	movt	r2, #:upper16:mbim_suspend
	str	ip, [r4, #48]
	str	r1, [r4, #52]
	mov	r1, #16384
	movt	r6, #:upper16:.LANCHOR0
	strd	r2, [r4, #56]
	mov	r2, #0
	str	r7, [r4, #84]
	str	r2, [r4, #88]
	str	lr, [r4, #200]
	str	r1, [r4, #224]
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #132]
	movne	r3, #6
	strne	r3, [r4, #132]
	bne	.L17954
	mov	r3, #8192
	mov	r2, #16
	mov	r1, #1
	str	r3, [r6, #184]
	strh	r1, [r6, #188]	@ movhi
	str	r3, [r6, #196]
	strh	r2, [r6, #206]	@ movhi
.L17954:
	add	r2, r4, #208
	add	r3, r4, #216
	mov	r1, r4
	mov	r0, r5
	str	r2, [r4, #208]
	strd	r2, [r4, #212]
	str	r3, [r4, #220]
	bl	usb_add_function
	mov	r4, r0
	movw	r0, #:lower16:.LC1389
	ldr	r1, .L17956
	movt	r0, #:upper16:.LC1389
	mov	r2, r4
	bl	printk
.L17945:
	mov	r0, r4
	pop	{r4, r5, r6, r7, r8, pc}
.L17957:
	.align	2
.L17956:
	.word	.LANCHOR5+2196
	.word	.LANCHOR5+2216
	.word	.LANCHOR7-1156
	.word	.LANCHOR0+1700
	.fnend
	.size	mbim_bind_config, .-mbim_bind_config
	.section	.rodata.str1.4
	.align	2
.LC1390:
	.ascii	"%s: %s: mbim transport is %s\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_bind_config, %function
mbim_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L17965
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L17964
.L17959:
	ldr	r0, .L17965+4
	bl	strim
	mov	r2, r0
	mov	r1, #0
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	mbim_bind_config
.L17964:
	ldr	r2, .L17965+4
	movw	r1, #:lower16:.LC1390
	sub	r0, r0, #20
	ldr	r3, .L17965+8
	movt	r1, #:upper16:.LC1390
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L17959
.L17966:
	.align	2
.L17965:
	.word	.LANCHOR8-940
	.word	.LANCHOR1+3176
	.word	.LANCHOR5+2232
	.fnend
	.size	mbim_function_bind_config, .-mbim_function_bind_config
	.align	2
	.global	bam_data_suspend
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_suspend, %function
bam_data_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L17974
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	add	r1, r4, r0, lsl #2
	ldrh	r3, [ip, #-14]
	ldr	r5, [r1, #3684]
	tst	r3, #4
	bne	.L17973
.L17968:
	ldr	r0, [r4, #3688]
	add	r1, r5, #200
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work
.L17973:
	ldr	r3, .L17974+4
	mov	r2, r0
	movw	r1, #:lower16:.LC649
	sub	r0, ip, #32
	movt	r1, #:upper16:.LC649
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L17968
.L17975:
	.align	2
.L17974:
	.word	.LANCHOR4-2032
	.word	.LANCHOR5-3228
	.fnend
	.size	bam_data_suspend, .-bam_data_suspend
	.align	2
	.global	bam_data_resume
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_resume, %function
bam_data_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L17983
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	add	r1, r4, r0, lsl #2
	ldrh	r3, [ip, #-6]
	ldr	r5, [r1, #3684]
	tst	r3, #4
	bne	.L17982
.L17977:
	ldr	r0, [r4, #3688]
	add	r1, r5, #216
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work
.L17982:
	ldr	r3, .L17983+4
	mov	r2, r0
	movw	r1, #:lower16:.LC647
	sub	r0, ip, #24
	movt	r1, #:upper16:.LC647
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L17977
.L17984:
	.align	2
.L17983:
	.word	.LANCHOR4-2064
	.word	.LANCHOR5-3260
	.fnend
	.size	bam_data_resume, .-bam_data_resume
	.align	2
	.global	ecm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_bind_config, %function
ecm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	movw	r0, #:lower16:.LC506
	strd	r8, [sp, #16]
	movt	r0, #:upper16:.LC506
	str	lr, [sp, #24]
	ldr	r8, [r6, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r8]
	ldr	r5, [r3, #28]
	mov	r1, r5
	bl	strcmp
	cmp	r0, #0
	beq	.L17992
	movw	r0, #:lower16:.LC509
	mov	r1, r5
	movt	r0, #:upper16:.LC509
	bl	strcmp
	cmp	r0, #0
	cmpne	r4, #0
	beq	.L17992
	movw	r7, #:lower16:.LANCHOR0
	movt	r7, #:upper16:.LANCHOR0
	ldrb	r3, [r7, #1488]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L17987
	ldrb	r3, [r8, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17989
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r8, #48]
	ldr	r2, [r6, #24]
	strb	r3, [r7, #1488]
	strb	r3, [r7, #3016]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17989
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r7, #1504]
	strb	r3, [r7, #3048]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17989
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR7
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR7
	strb	r3, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r2, #-1145]
	strb	r3, [r7, #1496]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17989
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r7, #1512]
	strb	r3, [r7, #3007]
.L17987:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L17993
	mov	r2, #176
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L17999
.L17990:
	ldrb	r3, [r4, #5]	@ zero_extendqisi2
	add	r8, r5, #150
	movw	r2, #:lower16:.LC1379
	ldrb	lr, [r4, #3]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1379
	mov	r0, r8
	ldrb	r1, [r4, #2]	@ zero_extendqisi2
	ldrb	r9, [r4, #4]	@ zero_extendqisi2
	str	r3, [sp, #16]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldr	r4, .L18000
	str	ip, [sp]
	stmib	sp, {r1, lr}
	mov	r1, #14
	str	r9, [sp, #12]
	bl	snprintf
	movw	r3, #:lower16:.LC1380
	movw	r0, #:lower16:ecm_bind
	str	r8, [r7, #1500]
	movt	r3, #:upper16:.LC1380
	movw	lr, #:lower16:ecm_unbind
	movw	r1, #:lower16:ecm_set_alt
	movw	ip, #:lower16:ecm_get_alt
	movw	r2, #:lower16:ecm_disable
	stm	r5, {r3, r4}
	movw	r3, #:lower16:ecm_setup
	movt	r0, #:upper16:ecm_bind
	movt	lr, #:upper16:ecm_unbind
	movt	r1, #:upper16:ecm_set_alt
	movt	ip, #:upper16:ecm_get_alt
	movt	r2, #:upper16:ecm_disable
	movt	r3, #:upper16:ecm_setup
	str	r0, [r5, #32]
	mov	r4, #15
	mov	r0, r6
	str	lr, [r5, #36]
	str	r1, [r5, #40]
	mov	r1, r5
	str	ip, [r5, #44]
	str	r2, [r5, #48]
	str	r3, [r5, #52]
	strh	r4, [r5, #98]	@ movhi
	bl	usb_add_function
	subs	r4, r0, #0
	beq	.L17985
	mov	r3, #0
	mov	r0, r5
	str	r3, [r7, #1500]
	bl	kfree
	b	.L17985
.L17992:
	mvn	r4, #21
.L17985:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L17993:
	mov	r5, #16
	b	.L17990
.L17989:
	mvn	r4, #18
	b	.L17985
.L17999:
	mvn	r4, #11
	b	.L17985
.L18001:
	.align	2
.L18000:
	.word	.LANCHOR7-1132
	.fnend
	.size	ecm_bind_config, .-ecm_bind_config
	.section	.rodata.cst4
	.align	2
.LC1391:
	.word	__stack_chk_guard
	.text
	.align	2
	.global	rndis_qc_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind_config, %function
rndis_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC1391
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	subs	r7, r1, #0
	movt	r3, #:upper16:.LC1391
	str	lr, [sp, #16]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r3]
	str	r3, [sp, #20]
	mov	r3,#0
	beq	.L18012
	mov	r6, r0
	bl	rndis_init
	subs	r5, r0, #0
	blt	.L18002
	mov	r0, #1
	bl	bam_data_setup
	subs	r5, r0, #0
	bne	.L18004
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldrb	r2, [r3, #-1124]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L18006
	ldr	r1, [r6, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L18008
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r2, [r3, #-3272]
	strb	r2, [r3, #-1124]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L18008
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r2, [r3, #-3252]
	strb	r2, [r3, #-1116]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L18008
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r3, #-3281]
	strb	r2, [r3, #-1108]
	strb	r2, [r1, #48]
.L18006:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L18013
	mov	r2, #184
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18019
.L18009:
	ldr	ip, [r7]	@ unaligned
	movw	r3, #:lower16:rndis_qc_add_header
	movw	r2, #:lower16:rndis_qc_rm_hdr
	ldr	r1, .L18021
	movt	r3, #:upper16:rndis_qc_add_header
	movt	r2, #:upper16:rndis_qc_rm_hdr
	mov	r5, #44
	mov	r0, r6
	str	ip, [r4, #122]	@ unaligned
	movw	ip, #:lower16:.LC1342
	ldrh	lr, [r7, #4]	@ unaligned
	movt	ip, #:upper16:.LC1342
	str	r3, [r4, #104]
	movw	r3, #:lower16:rndis_qc_unbind
	str	r1, [r4, #4]
	movw	r1, #:lower16:rndis_qc_bind
	movt	r3, #:upper16:rndis_qc_unbind
	movt	r1, #:upper16:rndis_qc_bind
	str	ip, [r4]
	movw	ip, #:lower16:rndis_qc_set_alt
	movt	ip, #:upper16:rndis_qc_set_alt
	str	r1, [r4, #32]
	movw	r1, #:lower16:rndis_qc_setup
	movt	r1, #:upper16:rndis_qc_setup
	str	r3, [r4, #36]
	movw	r3, #:lower16:rndis_qc_disable
	str	ip, [r4, #40]
	movw	ip, #:lower16:rndis_qc_suspend
	movt	r3, #:upper16:rndis_qc_disable
	movt	ip, #:upper16:rndis_qc_suspend
	str	r3, [r4, #48]
	mov	r3, #0
	str	r1, [r4, #52]
	movw	r1, #:lower16:rndis_qc_resume
	movt	r1, #:upper16:rndis_qc_resume
	str	ip, [r4, #56]
	mov	ip, #1
	str	r5, [r4, #100]
	str	r1, [r4, #60]
	mov	r1, r4
	strh	r3, [r4, #98]	@ movhi
	str	r2, [r4, #108]
	strh	lr, [r4, #126]	@ unaligned
	str	r3, [r4, #128]
	strb	ip, [r4, #132]
	str	r3, [r4, #140]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L18010
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r4, [r3, #2496]
.L18002:
	movw	r3, #:lower16:.LC1391
	movt	r3, #:upper16:.LC1391
	ldr	r2, [r3]
	ldr	r3, [sp, #20]
	eors	r2, r3, r2
	bne	.L18020
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L18013:
	mov	r4, #16
	b	.L18009
.L18019:
	mvn	r5, #11
.L18010:
	mov	r0, r4
	mov	r4, #0
	bl	kfree
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r2, [r3, #3980]	@ zero_extendqisi2
	str	r4, [r3, #2496]
	cmp	r2, r4
	beq	.L18002
	movw	r1, #:lower16:.LC806
	mov	r2, r4
	strb	r4, [r3, #3980]
	movt	r1, #:upper16:.LC806
	mov	r0, sp
	bl	sprintf
	mov	r0, sp
	mov	r1, r4
	bl	remove_proc_entry
	b	.L18002
.L18008:
	mvn	r5, #18
	b	.L18002
.L18012:
	mvn	r5, #21
	b	.L18002
.L18020:
	bl	__stack_chk_fail
.L18004:
	movw	r0, #:lower16:.LC1373
	ldr	r1, .L18021+4
	mov	r2, r5
	movt	r0, #:upper16:.LC1373
	bl	printk
	movw	r0, #:lower16:.LC1374
	ldr	r1, .L18021+8
	movt	r0, #:upper16:.LC1374
	bl	printk
	b	.L18002
.L18022:
	.align	2
.L18021:
	.word	.LANCHOR7-1092
	.word	.LANCHOR5+2260
	.word	.LANCHOR5+2280
	.fnend
	.size	rndis_qc_bind_config, .-rndis_qc_bind_config
	.section	.rodata.cst4
	.align	2
.LC1392:
	.word	__stack_chk_guard
	.text
	.align	2
	.global	rndis_qc_bind_config_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind_config_vendor, %function
rndis_qc_bind_config_vendor:
	.fnstart
	@ args = 4, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LC1392
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	movt	ip, #:upper16:.LC1392
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #24
	sub	sp, sp, #24
	ldrb	r10, [sp, #56]	@ zero_extendqisi2
	ldr	ip, [ip]
	str	ip, [sp, #20]
	mov	ip,#0
	beq	.L18034
	mov	r7, r0
	mov	r9, r2
	mov	r8, r3
	bl	rndis_init
	subs	r5, r0, #0
	blt	.L18023
	mov	r0, #1
	bl	bam_data_setup
	subs	r5, r0, #0
	bne	.L18025
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldrb	r2, [r3, #-1124]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L18027
	ldr	r1, [r7, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L18029
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r2, [r3, #-3272]
	strb	r2, [r3, #-1124]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L18029
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r2, [r3, #-3252]
	strb	r2, [r3, #-1116]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L18029
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r3, #-3281]
	strb	r2, [r3, #-1108]
	strb	r2, [r1, #48]
.L18027:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L18035
	mov	r2, #184
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18041
.L18030:
	ldr	r1, [r6]	@ unaligned
	movw	r3, #:lower16:rndis_qc_add_header
	cmp	r10, #0
	ldr	r2, .L18043
	movt	r3, #:upper16:rndis_qc_add_header
	moveq	r10, #15
	mov	r0, r7
	str	r1, [r4, #122]	@ unaligned
	movw	r1, #:lower16:rndis_qc_rm_hdr
	ldrh	ip, [r6, #4]	@ unaligned
	str	r2, [r4, #4]
	movw	r2, #:lower16:.LC1342
	movt	r1, #:upper16:rndis_qc_rm_hdr
	str	r3, [r4, #104]
	movw	r3, #:lower16:rndis_qc_bind
	movt	r2, #:upper16:.LC1342
	movt	r3, #:upper16:rndis_qc_bind
	str	r2, [r4]
	movw	r2, #:lower16:rndis_qc_set_alt
	str	r3, [r4, #32]
	movw	r3, #:lower16:rndis_qc_setup
	movt	r2, #:upper16:rndis_qc_set_alt
	movt	r3, #:upper16:rndis_qc_setup
	str	r1, [r4, #108]
	movw	r1, #:lower16:rndis_qc_unbind
	movt	r1, #:upper16:rndis_qc_unbind
	str	r1, [r4, #36]
	movw	r1, #:lower16:rndis_qc_disable
	str	r2, [r4, #40]
	movw	r2, #:lower16:rndis_qc_suspend
	movt	r1, #:upper16:rndis_qc_disable
	str	r3, [r4, #52]
	movw	r3, #:lower16:rndis_qc_resume
	movt	r2, #:upper16:rndis_qc_suspend
	movt	r3, #:upper16:rndis_qc_resume
	str	r1, [r4, #48]
	mov	r1, #0
	strh	ip, [r4, #126]	@ unaligned
	strd	r2, [r4, #56]
	mov	r2, #44
	strh	r1, [r4, #98]	@ movhi
	mov	r1, r4
	str	r2, [r4, #100]
	str	r9, [r4, #128]
	strb	r10, [r4, #132]
	str	r8, [r4, #140]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L18031
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r4, [r3, #2496]
.L18023:
	movw	r3, #:lower16:.LC1392
	movt	r3, #:upper16:.LC1392
	ldr	r2, [r3]
	ldr	r3, [sp, #20]
	eors	r2, r3, r2
	bne	.L18042
	mov	r0, r5
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L18035:
	mov	r4, #16
	b	.L18030
.L18041:
	mvn	r5, #11
.L18031:
	mov	r0, r4
	mov	r4, #0
	bl	kfree
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r2, [r3, #3980]	@ zero_extendqisi2
	str	r4, [r3, #2496]
	cmp	r2, r4
	beq	.L18023
	movw	r1, #:lower16:.LC806
	mov	r2, r4
	strb	r4, [r3, #3980]
	movt	r1, #:upper16:.LC806
	mov	r0, sp
	bl	sprintf
	mov	r0, sp
	mov	r1, r4
	bl	remove_proc_entry
	b	.L18023
.L18029:
	mvn	r5, #18
	b	.L18023
.L18034:
	mvn	r5, #21
	b	.L18023
.L18042:
	bl	__stack_chk_fail
.L18025:
	movw	r0, #:lower16:.LC1373
	ldr	r1, .L18043+4
	mov	r2, r5
	movt	r0, #:upper16:.LC1373
	bl	printk
	movw	r0, #:lower16:.LC1374
	ldr	r1, .L18043+8
	movt	r0, #:upper16:.LC1374
	bl	printk
	b	.L18023
.L18044:
	.align	2
.L18043:
	.word	.LANCHOR7-1092
	.word	.LANCHOR5+2260
	.word	.LANCHOR5+2280
	.fnend
	.size	rndis_qc_bind_config_vendor, .-rndis_qc_bind_config_vendor
	.section	.rodata.str1.4
	.align	2
.LC1393:
	.ascii	"usb\000"
	.align	2
.LC1394:
	.ascii	"%s%%d\000"
	.align	2
.LC1395:
	.ascii	"self\000"
	.align	2
.LC1396:
	.ascii	"using random %s ethernet address\012\000"
	.align	2
.LC1397:
	.ascii	"<7>usb: set unique host mac\012\000"
	.align	2
.LC1398:
	.ascii	"register_netdev failed, %d\012\000"
	.align	2
.LC1399:
	.ascii	"<6>%s: MAC %pM\012\000"
	.align	2
.LC1400:
	.ascii	"<6>%s: HOST MAC %pM\012\000"
	.text
	.align	2
	.global	gether_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_setup, %function
gether_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	ldr	r8, [r4, #3968]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	cmp	r8, #0
	bne	.L18050
	mov	r2, #1
	mov	r6, r0
	mov	r7, r1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r5, r0, #0
	mvneq	r6, #11
	bne	.L18059
.L18045:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L18050:
	mvn	r6, #15
	b	.L18045
.L18059:
	add	r9, r5, #1152
	movw	r2, #:lower16:eth_work
	str	r8, [r5, #1152]
	add	lr, r9, #28
	add	r3, r9, #92
	str	r5, [r5, #1160]
	movt	r2, #:upper16:eth_work
	movw	ip, #:lower16:process_rx_w
	str	r8, [r5, #1168]
	movt	ip, #:upper16:process_rx_w
	add	r1, r9, #108
	str	lr, [r5, #1180]
	add	r10, r9, #20
	str	r8, [r5, #1212]
	str	lr, [r5, #1184]
	mov	lr, #2560
	str	r8, [r5, #1216]
	add	r8, r9, #52
	str	r3, [r5, #1244]
	str	r3, [r5, #1248]
	movw	r3, #:lower16:.LC1393
	str	r2, [r5, #1252]
	movw	r2, #:lower16:.LC1394
	movt	r3, #:upper16:.LC1393
	movt	r2, #:upper16:.LC1394
	str	r10, [r5, #1172]
	str	r10, [r5, #1176]
	str	r8, [r5, #1204]
	str	r8, [r5, #1208]
	add	r8, r6, #32
	str	lr, [r5, #1240]
	str	lr, [r5, #1256]
	str	r1, [r5, #1260]
	str	r1, [r5, #1264]
	mov	r1, #16
	str	ip, [r5, #1268]
	bl	snprintf
	ldr	r1, [r5, #484]
	ldr	r0, [r4, #4072]
	bl	get_ether_addr
	cmp	r0, #0
	beq	.L18047
	movw	r2, #:lower16:.LC1395
	movw	r1, #:lower16:.LC1396
	movt	r2, #:upper16:.LC1395
	movt	r1, #:upper16:.LC1396
	mov	r0, r8
	bl	dev_warn
.L18047:
	ldr	r3, [r7]	@ unaligned
	movw	r0, #:lower16:.LC1397
	add	r10, r9, #125
	movt	r0, #:upper16:.LC1397
	str	r3, [r5, #1277]	@ unaligned
	ldrh	r3, [r7, #4]	@ unaligned
	strh	r3, [r9, #129]	@ unaligned
	bl	printk
	ldr	r3, .L18060
	mov	r0, r5
	ldr	r1, .L18060+4
	add	r2, r3, #136
	str	r3, [r5, #328]
	str	r2, [r5, #332]
	str	r8, [r5, #688]
	str	r1, [r5, #736]
	str	r6, [r5, #1164]
	bl	register_netdev
	subs	r6, r0, #0
	bge	.L18048
	ldr	r0, .L18060+8
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L18049
	movw	r2, #:lower16:.LC1398
	mov	r1, r8
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1398
	mov	r3, r6
	bl	__dynamic_dev_dbg
.L18049:
	mov	r0, r5
	bl	free_netdev
	b	.L18045
.L18048:
	movw	r0, #:lower16:.LC1399
	ldr	r2, [r5, #484]
	movt	r0, #:upper16:.LC1399
	ldr	r1, [r5, #1160]
	bl	printk
	movw	r0, #:lower16:.LC1400
	mov	r2, r10
	ldr	r1, [r5, #1160]
	movt	r0, #:upper16:.LC1400
	bl	printk
	mov	r0, r5
	str	r9, [r4, #3968]
	bl	netif_carrier_off
	b	.L18045
.L18061:
	.align	2
.L18060:
	.word	.LANCHOR5+2308
	.word	.LANCHOR7-1084
	.word	.LANCHOR8-916
	.fnend
	.size	gether_setup, .-gether_setup
	.align	2
	.global	gether_setup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_setup_name, %function
gether_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	ldr	r9, [r4, #3968]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	cmp	r9, #0
	bne	.L18067
	mov	r10, r2
	mov	r2, #1
	mov	r5, r0
	mov	r6, r1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r7, r0, #0
	mvneq	r5, #11
	bne	.L18076
.L18062:
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18067:
	mvn	r5, #15
	b	.L18062
.L18076:
	add	r8, r7, #1152
	movw	r2, #:lower16:eth_work
	str	r9, [r7, #1152]
	add	lr, r8, #20
	movt	r2, #:upper16:eth_work
	str	r7, [r7, #1160]
	movw	ip, #:lower16:process_rx_w
	add	r1, r8, #108
	str	r9, [r7, #1168]
	str	lr, [r7, #1172]
	movt	ip, #:upper16:process_rx_w
	add	fp, r8, #92
	str	lr, [r7, #1176]
	add	lr, r8, #28
	mov	r3, r10
	str	r9, [r7, #1212]
	str	lr, [r7, #1180]
	str	lr, [r7, #1184]
	mov	lr, #2560
	str	r9, [r7, #1216]
	add	r9, r8, #52
	str	r2, [r7, #1252]
	movw	r2, #:lower16:.LC1394
	movt	r2, #:upper16:.LC1394
	str	r9, [r7, #1204]
	str	r9, [r7, #1208]
	add	r9, r5, #32
	str	lr, [r7, #1240]
	str	fp, [r7, #1244]
	str	fp, [r7, #1248]
	str	lr, [r7, #1256]
	str	r1, [r7, #1260]
	str	r1, [r7, #1264]
	mov	r1, #16
	str	ip, [r7, #1268]
	bl	snprintf
	ldr	r1, [r7, #484]
	ldr	r0, [r4, #4072]
	bl	get_ether_addr
	cmp	r0, #0
	beq	.L18064
	movw	r2, #:lower16:.LC1395
	movw	r1, #:lower16:.LC1396
	movt	r2, #:upper16:.LC1395
	movt	r1, #:upper16:.LC1396
	mov	r0, r9
	bl	dev_warn
.L18064:
	ldr	r3, [r6]	@ unaligned
	movw	r0, #:lower16:.LC1397
	add	r10, r8, #125
	movt	r0, #:upper16:.LC1397
	str	r3, [r7, #1277]	@ unaligned
	ldrh	r3, [r6, #4]	@ unaligned
	strh	r3, [r8, #129]	@ unaligned
	bl	printk
	ldr	r3, .L18077
	mov	r0, r7
	ldr	r1, .L18077+4
	add	r2, r3, #136
	str	r3, [r7, #328]
	str	r2, [r7, #332]
	str	r9, [r7, #688]
	str	r1, [r7, #736]
	str	r5, [r7, #1164]
	bl	register_netdev
	subs	r5, r0, #0
	bge	.L18065
	ldr	r0, .L18077+8
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L18066
	movw	r2, #:lower16:.LC1398
	mov	r1, r9
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1398
	mov	r3, r5
	bl	__dynamic_dev_dbg
.L18066:
	mov	r0, r7
	bl	free_netdev
	b	.L18062
.L18065:
	movw	r0, #:lower16:.LC1399
	ldr	r2, [r7, #484]
	movt	r0, #:upper16:.LC1399
	ldr	r1, [r7, #1160]
	bl	printk
	movw	r0, #:lower16:.LC1400
	mov	r2, r10
	ldr	r1, [r7, #1160]
	movt	r0, #:upper16:.LC1400
	bl	printk
	mov	r0, r7
	str	r8, [r4, #3968]
	bl	netif_carrier_off
	b	.L18062
.L18078:
	.align	2
.L18077:
	.word	.LANCHOR5+2308
	.word	.LANCHOR7-1084
	.word	.LANCHOR8-916
	.fnend
	.size	gether_setup_name, .-gether_setup_name
	.section	.rodata.str1.4
	.align	2
.LC1401:
	.ascii	"<3>%s: %s: rndis_pdata\012\000"
	.align	2
.LC1402:
	.ascii	"<6>%s: %s MAC: %02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.align	2
.LC1403:
	.ascii	"<3>%s: %s: gether_setup failed\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_bind_config, %function
rndis_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	.pad #24
	sub	sp, sp, #24
	ldr	r4, [r0, #4]
	cmp	r4, #0
	bne	.L18080
	ldr	r2, .L18088
	movw	r0, #:lower16:.LC1401
	mvn	r5, #0
	movt	r0, #:upper16:.LC1401
	mov	r1, r2
	bl	printk
	b	.L18079
.L18080:
	mov	r6, r1
	ldrb	r1, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1402
	ldrb	r3, [r4]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1402
	ldr	r2, .L18088
	str	r1, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r6, #24]
	movw	r2, #:lower16:.LC1342
	mov	r1, r4
	movt	r2, #:upper16:.LC1342
	ldr	r0, [r3]
	bl	gether_setup_name
	subs	r5, r0, #0
	beq	.L18082
	ldr	r2, .L18088
	movw	r0, #:lower16:.LC1403
	movt	r0, #:upper16:.LC1403
	mov	r1, r2
	bl	printk
	b	.L18079
.L18082:
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L18083
	movw	r3, #:lower16:.LANCHOR7
	mov	r0, #3
	movt	r3, #:upper16:.LANCHOR7
	mvn	ip, #31
	sub	r2, r3, #3568
	sub	r1, r3, #3584
	strb	r0, [r3, #-3578]
	movw	r0, #769
	strb	ip, [r3, #-3571]
	mov	r3, #480
	strh	r0, [r2, #-2]	@ movhi
	strh	r3, [r1, #4]	@ movhi
.L18083:
	ldr	r2, [r4, #8]
	mov	r0, r6
	add	r3, r4, #13
	mov	r1, r4
	add	sp, sp, #24
	@ sp needed
	pop	{r4, r5, r6, lr}
	b	rndis_bind_config_vendor
.L18079:
	mov	r0, r5
	add	sp, sp, #24
	@ sp needed
	pop	{r4, r5, r6, pc}
.L18089:
	.align	2
.L18088:
	.word	.LANCHOR5+2608
	.fnend
	.size	rndis_function_bind_config, .-rndis_function_bind_config
	.text
	.align	2
	.global	gether_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_cleanup, %function
gether_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #3968]
	cmp	r3, #0
	beq	.L18090
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #3968]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #3968]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #3968]
.L18090:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gether_cleanup, .-gether_cleanup
	.section	.rodata.str1.4
	.align	2
.LC1404:
	.ascii	"<3>%s: %s: ecm_pdata\012\000"
	.align	2
.LC1405:
	.ascii	"ecm\000"
	.align	2
.LC1406:
	.ascii	"<3>%s: %s: ecm_bind_config failed\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_bind_config, %function
ecm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r0, #4]
	.pad #36
	sub	sp, sp, #36
	cmp	r7, #0
	beq	.L18125
	movw	r5, #:lower16:.LANCHOR1
	ldr	r3, [r1, #24]
	mov	r4, r1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r10, [r5, #3968]
	ldr	r8, [r3]
	cmp	r10, #0
	bne	.L18109
	mov	r2, #1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r6, r0, #0
	mvneq	r8, #11
	bne	.L18126
.L18099:
	ldr	r2, .L18128
	movw	r0, #:lower16:.LC1403
	movt	r0, #:upper16:.LC1403
	mov	r1, r2
	bl	printk
.L18096:
	mov	r0, r8
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18109:
	mvn	r8, #15
	b	.L18099
.L18126:
	add	r9, r6, #1152
	movw	r2, #:lower16:eth_work
	str	r10, [r6, #1152]
	add	lr, r9, #28
	add	r3, r9, #92
	str	r6, [r6, #1160]
	movt	r2, #:upper16:eth_work
	movw	ip, #:lower16:process_rx_w
	str	r10, [r6, #1168]
	movt	ip, #:upper16:process_rx_w
	add	r1, r9, #108
	str	lr, [r6, #1180]
	add	fp, r9, #20
	str	r10, [r6, #1212]
	str	lr, [r6, #1184]
	mov	lr, #2560
	str	r10, [r6, #1216]
	add	r10, r9, #52
	str	r3, [r6, #1244]
	str	r3, [r6, #1248]
	movw	r3, #:lower16:.LC1405
	str	r2, [r6, #1252]
	movw	r2, #:lower16:.LC1394
	movt	r3, #:upper16:.LC1405
	movt	r2, #:upper16:.LC1394
	str	fp, [r6, #1172]
	str	fp, [r6, #1176]
	add	fp, r8, #32
	str	r10, [r6, #1204]
	str	r10, [r6, #1208]
	str	lr, [r6, #1240]
	str	lr, [r6, #1256]
	str	r1, [r6, #1260]
	str	r1, [r6, #1264]
	mov	r1, #16
	str	ip, [r6, #1268]
	bl	snprintf
	ldr	r1, [r6, #484]
	ldr	r0, [r5, #4072]
	bl	get_ether_addr
	cmp	r0, #0
	beq	.L18100
	movw	r2, #:lower16:.LC1395
	movw	r1, #:lower16:.LC1396
	movt	r2, #:upper16:.LC1395
	movt	r1, #:upper16:.LC1396
	mov	r0, fp
	bl	dev_warn
.L18100:
	ldr	r3, [r7]	@ unaligned
	add	r2, r9, #125
	movw	r0, #:lower16:.LC1397
	movw	r10, #:lower16:.LANCHOR7
	movt	r0, #:upper16:.LC1397
	movt	r10, #:upper16:.LANCHOR7
	str	r2, [sp, #28]
	str	r3, [r6, #1277]	@ unaligned
	ldrh	r3, [r7, #4]	@ unaligned
	strh	r3, [r9, #129]	@ unaligned
	bl	printk
	ldr	r2, .L18128+4
	sub	r3, r10, #1072
	mov	r0, r6
	sub	r3, r3, #12
	str	r3, [r6, #736]
	add	r3, r2, #136
	str	r2, [r6, #328]
	str	r3, [r6, #332]
	str	fp, [r6, #688]
	str	r8, [r6, #1164]
	bl	register_netdev
	subs	r8, r0, #0
	bge	.L18101
	ldr	r0, .L18128+8
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L18102
	movw	r2, #:lower16:.LC1398
	mov	r1, fp
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1398
	mov	r3, r8
	bl	__dynamic_dev_dbg
.L18102:
	mov	r0, r6
	bl	free_netdev
	b	.L18099
.L18125:
	ldr	r2, .L18128
	movw	r0, #:lower16:.LC1404
	mvn	r8, #21
	movt	r0, #:upper16:.LC1404
	mov	r1, r2
	bl	printk
	b	.L18096
.L18101:
	movw	r0, #:lower16:.LC1399
	ldr	r2, [r6, #484]
	movt	r0, #:upper16:.LC1399
	ldr	r1, [r6, #1160]
	bl	printk
	movw	r0, #:lower16:.LC1400
	add	r2, r9, #125
	ldr	r1, [r6, #1160]
	movt	r0, #:upper16:.LC1400
	bl	printk
	mov	r0, r6
	str	r9, [r5, #3968]
	bl	netif_carrier_off
	cmp	r8, #0
	bne	.L18099
	ldr	r5, [r4, #24]
	movw	r0, #:lower16:.LC506
	movt	r0, #:upper16:.LC506
	ldr	r3, [r5]
	ldr	r6, [r3, #28]
	mov	r1, r6
	bl	strcmp
	cmp	r0, #0
	beq	.L18112
	movw	r0, #:lower16:.LC509
	mov	r1, r6
	movt	r0, #:upper16:.LC509
	bl	strcmp
	cmp	r0, #0
	beq	.L18112
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldrb	r3, [r6, #1488]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L18105
	ldrb	r3, [r5, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L18107
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r5, #48]
	ldr	r2, [r4, #24]
	strb	r3, [r6, #1488]
	strb	r3, [r6, #3016]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L18107
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r4, #24]
	strb	r3, [r6, #1504]
	strb	r3, [r6, #3048]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L18107
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r4, #24]
	strb	r3, [r10, #-1145]
	strb	r3, [r6, #1496]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L18107
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r6, #1512]
	strb	r3, [r6, #3007]
.L18105:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L18113
	mov	r2, #176
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L18127
.L18108:
	ldrb	ip, [r7, #5]	@ zero_extendqisi2
	add	r8, r5, #150
	movw	r2, #:lower16:.LC1379
	ldrb	r3, [r7]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1379
	mov	r0, r8
	mov	r1, #14
	str	ip, [sp, #16]
	ldrb	ip, [r7, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r7, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r7, #1]	@ zero_extendqisi2
	ldr	r7, .L18128+12
	str	ip, [sp]
	bl	snprintf
	movw	r3, #:lower16:.LC1380
	movw	r0, #:lower16:ecm_bind
	str	r8, [r6, #1500]
	movt	r3, #:upper16:.LC1380
	movw	lr, #:lower16:ecm_unbind
	movw	r1, #:lower16:ecm_set_alt
	movw	ip, #:lower16:ecm_get_alt
	movw	r2, #:lower16:ecm_disable
	stm	r5, {r3, r7}
	movw	r3, #:lower16:ecm_setup
	movt	r0, #:upper16:ecm_bind
	movt	lr, #:upper16:ecm_unbind
	movt	r1, #:upper16:ecm_set_alt
	movt	ip, #:upper16:ecm_get_alt
	movt	r2, #:upper16:ecm_disable
	movt	r3, #:upper16:ecm_setup
	str	r0, [r5, #32]
	mov	r7, #15
	mov	r0, r4
	str	lr, [r5, #36]
	str	r1, [r5, #40]
	mov	r1, r5
	str	ip, [r5, #44]
	str	r2, [r5, #48]
	str	r3, [r5, #52]
	strh	r7, [r5, #98]	@ movhi
	bl	usb_add_function
	subs	r8, r0, #0
	beq	.L18096
	mov	r3, #0
	mov	r0, r5
	str	r3, [r6, #1500]
	bl	kfree
.L18104:
	ldr	r2, .L18128
	movw	r0, #:lower16:.LC1406
	movt	r0, #:upper16:.LC1406
	mov	r1, r2
	bl	printk
	bl	gether_cleanup
	b	.L18096
.L18112:
	mvn	r8, #21
	b	.L18104
.L18113:
	mov	r5, #16
	b	.L18108
.L18127:
	mvn	r8, #11
	b	.L18104
.L18107:
	mvn	r8, #18
	b	.L18104
.L18129:
	.align	2
.L18128:
	.word	.LANCHOR5+2636
	.word	.LANCHOR5+2308
	.word	.LANCHOR8-916
	.word	.LANCHOR7-1132
	.fnend
	.size	ecm_function_bind_config, .-ecm_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC1407:
	.ascii	"<3>%s: RNDIS header memory allocation failed.\012\000"
	.text
	.align	2
	.global	gether_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_connect, %function
gether_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r3, #3968]
	cmp	r6, #0
	mvneq	r0, #21
	beq	.L18130
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #144]
	beq	.L18133
	mov	r2, #44
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5, #144]
	beq	.L18159
.L18133:
	ldr	r3, [r5, #88]
	str	r6, [r3]
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L18135
	ldr	r3, [r5, #92]
	str	r6, [r3]
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L18136
	ldr	r3, [r6, #12]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L18146
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L18146
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r7, [r3, #604]
	lsl	r7, r7, #1
.L18137:
	add	r8, r6, #16
	mov	r0, r8
	bl	_raw_spin_lock
	mov	r2, r7
	add	r0, r6, #20
	ldr	r1, [r5, #88]
	bl	prealloc
	subs	r4, r0, #0
	blt	.L18138
	mov	r2, r7
	add	r0, r6, #28
	ldr	r1, [r5, #92]
	bl	prealloc
	mov	r4, r0
	mov	r0, r8
	bl	_raw_spin_unlock
	cmp	r4, #0
	bne	.L18139
	ldrb	r3, [r5, #96]	@ zero_extendqisi2
	mov	r0, r6
	strb	r3, [r6, #124]
	ldr	r3, [r5, #100]
	str	r3, [r6, #68]
	ldr	r3, [r5, #132]
	str	r3, [r6, #84]
	ldr	r3, [r5, #128]
	str	r3, [r6, #80]
	ldr	r3, [r5, #116]
	str	r3, [r6, #72]
	ldr	r3, [r5, #120]
	str	r3, [r6, #76]
	bl	_raw_spin_lock
	str	r5, [r6, #4]
	str	r4, [r6, #40]
	str	r4, [r6, #44]
	str	r4, [r6, #48]
	str	r6, [r5, #84]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #160]
	tst	r3, #1
	beq	.L18140
	ldr	r3, [r5, #136]
	cmp	r3, #0
	beq	.L18141
.L18157:
	mov	r0, r5
	blx	r3
.L18141:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r6, #8]
	bl	netif_carrier_on
	ldr	r0, [r6, #8]
	ldr	r3, [r0, #160]
	tst	r3, #1
	bne	.L18160
.L18130:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18138:
	mov	r0, r8
	bl	_raw_spin_unlock
.L18139:
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L18136:
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	cmp	r4, #0
	blt	.L18135
.L18158:
	ldr	r0, [r6, #8]
	b	.L18130
.L18135:
	ldr	r0, [r5, #144]
	bl	kfree
.L18134:
	mov	r0, r4
	b	.L18130
.L18146:
	mov	r7, #2
	b	.L18137
.L18140:
	ldr	r3, [r5, #140]
	cmp	r3, #0
	bne	.L18157
	b	.L18141
.L18160:
	mov	r1, #32
	mov	r0, r6
	bl	rx_fill
	ldr	r3, [r6, #8]
	mov	r0, #0
	str	r0, [r6, #36]
	ldr	r4, [r3, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L18158
	ldr	r0, [r4, #4]
	bl	__netif_schedule
	ldr	r0, [r6, #8]
	b	.L18130
.L18159:
	movw	r0, #:lower16:.LC1407
	ldr	r1, .L18161
	mvn	r4, #11
	movt	r0, #:upper16:.LC1407
	bl	printk
	b	.L18134
.L18162:
	.align	2
.L18161:
	.word	.LANCHOR5+2664
	.fnend
	.size	gether_connect, .-gether_connect
	.align	2
	.global	gether_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_disconnect, %function
gether_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #84]
	cmp	r4, #0
	beq	.L18163
	ldr	r3, [r4, #8]
	mov	r6, r0
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L18182
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L18174:
	ldr	r0, [r4, #8]
	add	r7, r4, #16
	add	r9, r4, #20
	bl	netif_carrier_off
	ldr	r0, [r6, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r5, [r4, #20]
	cmp	r5, r9
	beq	.L18166
	mov	r10, #0
	b	.L18169
.L18167:
	ldr	r0, [r6, #88]
.L18181:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r5, [r4, #20]
	cmp	r5, r9
	beq	.L18166
.L18169:
	mov	r0, r5
	sub	r8, r5, #36
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldrb	r3, [r6, #124]	@ zero_extendqisi2
	mov	r1, r8
	cmp	r3, #0
	beq	.L18167
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r8
	str	r10, [r5, #-36]
	ldr	r0, [r6, #88]
	b	.L18181
.L18166:
	mov	r5, #0
	ldr	r0, [r6, #144]
	add	r8, r4, #28
	bl	kfree
	mov	r0, r7
	str	r5, [r6, #144]
	bl	_raw_spin_unlock
	ldr	r3, [r6, #88]
	str	r5, [r3]
	ldr	r3, [r6, #88]
	str	r5, [r3, #28]
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r0, [r4, #28]
	cmp	r8, r0
	beq	.L18170
.L18171:
	sub	r5, r0, #36
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r6, #92]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r0, [r4, #28]
	cmp	r0, r8
	bne	.L18171
.L18170:
	mov	r0, r7
	add	r7, r4, #64
	bl	_raw_spin_unlock
	mov	r0, r7
	add	r5, r4, #52
	bl	_raw_spin_lock
	ldr	r3, [r4, #52]
	cmp	r5, r3
	beq	.L18172
	mov	r8, #0
	mov	r9, #0
	b	.L18173
.L18183:
	ldr	r2, [r4, #60]
	sub	r2, r2, #1
	str	r2, [r4, #60]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #52]
	cmp	r5, r3
	beq	.L18172
.L18173:
	subs	r0, r3, #0
	bne	.L18183
.L18172:
	mov	r0, r7
	mov	r5, #0
	bl	_raw_spin_unlock
	ldr	r3, [r6, #92]
	mov	r0, r4
	str	r5, [r3]
	ldr	r3, [r6, #92]
	str	r5, [r3, #28]
	str	r5, [r4, #68]
	str	r5, [r4, #80]
	str	r5, [r4, #84]
	bl	_raw_spin_lock
	str	r5, [r4, #4]
	mov	r0, r4
	str	r5, [r6, #84]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L18163:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L18182:
	movw	r0, #:lower16:.LC101
	movw	r1, #1847
	movt	r0, #:upper16:.LC101
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC102
	movt	r0, #:upper16:.LC102
	bl	printk
	b	.L18174
	.fnend
	.size	gether_disconnect, .-gether_disconnect
	.section	.rodata.str1.4
	.align	2
.LC1408:
	.ascii	"rndis deactivated\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_disable, %function
rndis_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #168]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	ldr	r0, .L18214
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18212
.L18186:
	ldr	r5, [r7, #164]
	cmp	r5, #0
	bgt	.L18192
	rsb	r5, r5, r5, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	lsl	r5, r5, #2
	mov	r1, #0
	add	r2, r3, r5
	ldr	r3, [r2, #3748]
	add	r5, r2, #3744
	mov	r9, r2
	str	r1, [r2, #3700]
	add	r5, r5, #4
	ldr	r4, [r3]
.L18188:
	cmp	r5, r3
	bne	.L18195
	b	.L18192
.L18193:
	cmp	r4, r5
	mov	r3, r4
	ldr	r4, [r4]
	beq	.L18192
.L18195:
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L18193
	ldr	r8, [r3, #8]
	mov	r2, #1
	str	r2, [r3, #16]
	cmp	r8, #0
	beq	.L18192
	ldr	r6, [r9, #3748]
	cmp	r6, r5
	ldr	r4, [r6]
	bne	.L18191
	b	.L18196
.L18190:
	cmp	r4, r5
	mov	r6, r4
	ldr	r4, [r4]
	beq	.L18213
.L18191:
	cmp	r6, #0
	beq	.L18190
	ldr	r3, [r6, #8]
	cmp	r8, r3
	bne	.L18190
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r6, r4
	bl	kfree
	cmp	r4, r5
	ldr	r4, [r4]
	bne	.L18191
.L18213:
	ldr	r3, [r9, #3748]
	cmp	r5, r3
	ldr	r4, [r3]
	bne	.L18195
.L18192:
	mov	r0, r7
	bl	gether_disconnect
	ldr	r0, [r7, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r7, #168]
	mov	r2, #0
	str	r2, [r3]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L18196:
	mov	r3, r5
	b	.L18188
.L18212:
	ldr	r3, [r7, #20]
	movw	r2, #:lower16:.LC1408
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1408
	ldr	r3, [r3, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18186
.L18215:
	.align	2
.L18214:
	.word	.LANCHOR8-892
	.fnend
	.size	rndis_disable, .-rndis_disable
	.section	.rodata.str1.4
	.align	2
.LC1409:
	.ascii	"reset rndis\012\000"
	.align	2
.LC1410:
	.ascii	"init rndis\012\000"
	.align	2
.LC1411:
	.ascii	"RNDIS RX/TX early activation ... \012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_alt, %function
rndis_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L18256
	ldrb	r3, [r0, #149]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L18222
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L18223
	ldr	r0, .L18262
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18257
.L18224:
	mov	r0, r4
	bl	gether_disconnect
	ldr	r2, [r4, #88]
.L18223:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L18225
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L18225
.L18226:
	ldr	r0, .L18262+4
	mov	r3, #0
	strb	r3, [r4, #96]
	strh	r3, [r4, #98]	@ movhi
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18258
.L18230:
	mov	r0, r4
	bl	gether_connect
	cmn	r0, #4096
	mov	r5, r0
	bhi	.L18216
	ldr	r0, .L18262+8
	add	r6, r4, #98
	ldrb	r4, [r4, #164]	@ zero_extendqisi2
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L18259
.L18232:
	clz	r3, r5
	cmp	r4, #0
	lsr	r3, r3, #5
	movne	r3, #1
	cmp	r3, #0
	bne	.L18233
	movw	r2, #:lower16:.LANCHOR1
	mov	r0, r3
	movt	r2, #:upper16:.LANCHOR1
	str	r3, [r2, #3552]
	str	r3, [r2, #3556]
	str	r6, [r2, #3720]
	str	r5, [r2, #3724]
.L18216:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18225:
	ldr	r3, .L18262+12
	ldr	r0, [r5]
	ldrh	r1, [r3, #-2]
	tst	r1, #4
	bne	.L18260
.L18227:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18229
	mov	r1, r4
	ldr	r0, [r5]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L18226
.L18229:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L18216
.L18256:
	ldr	r0, [r0, #168]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L18218
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #168]
.L18218:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L18261
.L18219:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #168]
	mov	r0, #0
	str	r4, [r3]
	b	.L18216
.L18258:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1411
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1411
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18230
.L18261:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18222
	ldr	r0, [r4, #168]
	ldr	r1, [r0, #28]
	b	.L18219
.L18259:
	movw	r1, #:lower16:.LC285
	ldr	r2, .L18262+16
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC285
	bl	__dynamic_pr_debug
	b	.L18232
.L18257:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1409
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1409
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18224
.L18260:
	movw	r2, #:lower16:.LC1410
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1410
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r0, [r5]
	ldr	r2, [r4, #88]
	b	.L18227
.L18222:
	mvn	r0, #21
	b	.L18216
.L18233:
	mov	r0, #0
	b	.L18216
.L18263:
	.align	2
.L18262:
	.word	.LANCHOR8-868
	.word	.LANCHOR8-820
	.word	.LANCHOR8-1248
	.word	.LANCHOR8-844
	.word	.LANCHOR5+1860
	.fnend
	.size	rndis_set_alt, .-rndis_set_alt
	.section	.rodata.str1.4
	.align	2
.LC1412:
	.ascii	"ecm deactivated\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_disable, %function
ecm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18279
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L18278
.L18265:
	ldr	r3, [r4, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L18266
	mov	r0, r4
	bl	gether_disconnect
.L18266:
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L18264
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #164]
	str	r3, [r2, #28]
.L18264:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L18278:
	ldr	r1, [r4, #20]
	sub	r0, r3, #20
	movw	r2, #:lower16:.LC1412
	movt	r2, #:upper16:.LC1412
	ldr	r3, [r1, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18265
.L18280:
	.align	2
.L18279:
	.word	.LANCHOR8-796
	.fnend
	.size	ecm_disable, .-ecm_disable
	.section	.rodata.str1.4
	.align	2
.LC1413:
	.ascii	"reset ecm\012\000"
	.align	2
.LC1414:
	.ascii	"init ecm\012\000"
	.align	2
.LC1415:
	.ascii	"activate ecm\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_set_alt, %function
ecm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r0, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L18327
	ldrb	r3, [r4, #149]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	bne	.L18287
	ldr	r2, [r4, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L18288
	ldr	r0, .L18334
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18328
.L18289:
	mov	r0, r4
	bl	gether_disconnect
	ldr	r2, [r4, #88]
.L18288:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L18290
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L18290
.L18291:
	cmp	r5, #1
	bne	.L18295
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC513
	movt	r0, #:upper16:.LC513
	ldr	r1, [r3, #28]
	bl	strcmp
	ldr	r3, .L18334+4
	mov	r2, #15
	subs	r0, r0, #0
	movne	r0, #1
	strh	r2, [r4, #98]	@ movhi
	ldrh	r2, [r3, #-2]
	strb	r0, [r4, #96]
	tst	r2, #4
	bne	.L18329
.L18296:
	mov	r0, r4
	bl	gether_connect
	cmn	r0, #4096
	bhi	.L18281
.L18295:
	ldr	r7, [r4, #168]
	mov	r3, #1
	strb	r3, [r4, #172]
	cmp	r7, #0
	beq	.L18300
	ldr	r6, [r7]
	mov	r3, #0
	mov	r1, #8
	ldr	r0, [r4, #20]
	movw	r8, #:lower16:.LANCHOR4
	movw	r2, #2442
	movt	r8, #:upper16:.LANCHOR4
	ldr	r9, [r0, #24]
	strb	r3, [r6, #1]
	ldrb	r0, [r4, #173]	@ zero_extendqisi2
	strh	r0, [r6, #2]	@ unaligned
	strb	r3, [r6, #6]
	strb	r3, [r6, #7]
	str	r1, [r7, #4]
	ldrh	r3, [r8, r2]
	tst	r3, #4
	bne	.L18330
.L18298:
	mov	r1, #2
	mvn	r3, #94
	mov	r5, #0
	mov	r2, #32
	strb	r1, [r4, #172]
	mov	r1, r7
	strb	r3, [r6]
	ldrb	r3, [r4, #148]	@ zero_extendqisi2
	strh	r3, [r6, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	r5, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L18331
.L18300:
	mov	r0, #0
.L18281:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L18290:
	ldr	r3, .L18334+8
	ldr	r0, [r6]
	ldrh	r1, [r3, #-2]
	tst	r1, #4
	bne	.L18332
.L18292:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18294
	mov	r1, r4
	ldr	r0, [r6]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L18291
.L18294:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L18281
.L18327:
	cmp	r2, #0
	bne	.L18287
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L18285
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #164]
.L18285:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L18333
.L18286:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #164]
	mov	r0, #0
	str	r4, [r3]
	b	.L18281
.L18331:
	movw	r3, #2466
	str	r7, [r4, #168]
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L18300
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC26
	mov	r3, r0
	movt	r2, #:upper16:.LC26
	ldr	r0, .L18334+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mov	r0, r5
	b	.L18281
.L18333:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18287
	ldr	r0, [r4, #164]
	ldr	r1, [r0, #28]
	b	.L18286
.L18328:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1413
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1413
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18289
.L18332:
	movw	r2, #:lower16:.LC1414
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1414
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	ldr	r2, [r4, #88]
	b	.L18292
.L18329:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1415
	sub	r0, r3, #20
	movt	r2, #:upper16:.LC1415
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18296
.L18287:
	mvn	r0, #21
	b	.L18281
.L18330:
	ldrb	lr, [r4, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC22
	movw	r3, #:lower16:.LC21
	ldr	r1, [r9]
	movt	ip, #:upper16:.LC22
	movw	r2, #:lower16:.LC24
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC24
	ldr	r0, .L18334+16
	cmp	lr, #0
	moveq	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18298
.L18335:
	.align	2
.L18334:
	.word	.LANCHOR8-772
	.word	.LANCHOR8-724
	.word	.LANCHOR8-748
	.word	.LANCHOR4+2448
	.word	.LANCHOR4+2424
	.fnend
	.size	ecm_set_alt, .-ecm_set_alt
	.section	.rodata.str1.4
	.align	2
.LC1416:
	.ascii	"ncm deactivated\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_disable, %function
ncm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18351
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L18350
.L18337:
	ldr	r3, [r4, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L18338
	mov	r0, r4
	bl	gether_disconnect
.L18338:
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L18336
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #164]
	str	r3, [r2, #28]
.L18336:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L18350:
	ldr	r1, [r4, #20]
	sub	r0, r3, #20
	movw	r2, #:lower16:.LC1416
	movt	r2, #:upper16:.LC1416
	ldr	r3, [r1, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18337
.L18352:
	.align	2
.L18351:
	.word	.LANCHOR8-700
	.fnend
	.size	ncm_disable, .-ncm_disable
	.section	.rodata.str1.4
	.align	2
.LC1417:
	.ascii	"reset ncm control %d\012\000"
	.align	2
.LC1418:
	.ascii	"init ncm ctrl %d\012\000"
	.align	2
.LC1419:
	.ascii	"reset ncm\012\000"
	.align	2
.LC1420:
	.ascii	"<7>usb: %s gather_disconnect\012\000"
	.align	2
.LC1421:
	.ascii	"init ncm\012\000"
	.align	2
.LC1422:
	.ascii	"<3>activate ncm setting MTU size (%d)\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_set_alt, %function
ncm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r1, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r1, r5
	ldr	r6, [r3, #24]
	beq	.L18396
	ldrb	r3, [r0, #149]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r5
	bne	.L18361
	cmp	r2, #0
	beq	.L18395
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	bne	.L18397
.L18362:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L18369
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L18369
.L18364:
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC513
	movt	r0, #:upper16:.LC513
	ldr	r1, [r3, #28]
	bl	strcmp
	subs	r3, r0, #0
	mov	r2, #15
	movne	r3, #1
	mov	r0, r4
	strb	r3, [r4, #96]
	strh	r2, [r4, #98]	@ movhi
	bl	gether_connect
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L18353
	ldrh	r3, [r4, #182]
	str	r2, [r4, #184]
	movw	r0, #:lower16:.LC1422
	movt	r0, #:upper16:.LC1422
	sub	r3, r3, #14
	str	r3, [r2, #356]
	ldr	r3, [r4, #184]
	ldr	r1, [r3, #356]
	bl	printk
.L18395:
	mov	r0, #0
.L18353:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18396:
	cmp	r2, #0
	bne	.L18361
	ldr	r0, [r0, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L18357
	ldr	r3, .L18402
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L18398
.L18358:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #164]
.L18357:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L18399
.L18359:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #164]
	mov	r0, #0
	str	r4, [r3]
	b	.L18353
.L18369:
	ldr	r3, .L18402+4
	ldr	r0, [r6]
	ldrh	r1, [r3, #-2]
	tst	r1, #4
	bne	.L18400
.L18365:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18367
	mov	r1, r4
	ldr	r0, [r6]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L18364
.L18367:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L18353
.L18399:
	ldr	ip, .L18402+8
	ldr	r1, [r6]
	ldrh	r3, [ip, #-2]
	tst	r3, #4
	bne	.L18401
.L18360:
	mov	r2, r0
	mov	r0, r1
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18361
	ldr	r0, [r4, #164]
	ldr	r1, [r0, #28]
	b	.L18359
.L18361:
	mvn	r0, #21
	b	.L18353
.L18398:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1417
	sub	r0, r3, #20
	movt	r2, #:upper16:.LC1417
	mov	r3, r5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #164]
	b	.L18358
.L18400:
	movw	r2, #:lower16:.LC1421
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1421
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	ldr	r2, [r4, #88]
	b	.L18365
.L18401:
	movw	r2, #:lower16:.LC1418
	add	r1, r1, #32
	mov	r3, r5
	sub	r0, ip, #20
	movt	r2, #:upper16:.LC1418
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	ldr	r0, [r4, #164]
	b	.L18360
.L18397:
	ldr	r0, .L18402+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L18363
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1419
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1419
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L18363:
	movw	r0, #:lower16:.LC1420
	ldr	r1, .L18402+16
	movt	r0, #:upper16:.LC1420
	bl	printk
	mov	r0, r4
	bl	gether_disconnect
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, #15
	ldr	r2, [r4, #88]
	movt	r3, #:upper16:.LANCHOR0
	mov	r1, #0
	ldr	ip, [r3, #36]
	mov	lr, #16384
	add	r3, r3, #48
	strh	r0, [r4, #98]	@ movhi
	movw	r0, #9014
	str	r1, [r4, #100]
	str	ip, [r4, #108]
	str	lr, [r4, #112]
	str	r3, [r4, #176]
	strb	r1, [r4, #180]
	strh	r0, [r4, #182]	@ movhi
	str	r1, [r4, #184]
	b	.L18362
.L18403:
	.align	2
.L18402:
	.word	.LANCHOR8-676
	.word	.LANCHOR8-604
	.word	.LANCHOR8-652
	.word	.LANCHOR8-628
	.word	.LANCHOR5+2680
	.fnend
	.size	ncm_set_alt, .-ncm_set_alt
	.align	2
	.global	gether_qc_get_macs
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_get_macs, %function
gether_qc_get_macs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r1
	movt	r4, #:upper16:.LANCHOR1
	mov	r1, r0
	str	r6, [sp, #8]
	ldr	r0, [r4, #4064]
	str	lr, [sp, #12]
	bl	get_qc_ether_addr
	cmp	r0, #0
	beq	.L18405
	ldr	r0, .L18422
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L18420
.L18405:
	mov	r1, r5
	ldr	r0, [r4, #4068]
	bl	get_qc_ether_addr
	cmp	r0, #0
	beq	.L18404
	ldr	r0, .L18422+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18421
.L18404:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18421:
	movw	r1, #:lower16:.LC1378
	ldr	r2, .L18422+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1378
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__dynamic_pr_debug
.L18420:
	movw	r1, #:lower16:.LC1377
	ldr	r2, .L18422+8
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1377
	bl	__dynamic_pr_debug
	b	.L18405
.L18423:
	.align	2
.L18422:
	.word	.LANCHOR8-1024
	.word	.LANCHOR8-1012
	.word	.LANCHOR5+2176
	.fnend
	.size	gether_qc_get_macs, .-gether_qc_get_macs
	.section	.rodata.str1.4
	.align	2
.LC1423:
	.ascii	"host\000"
	.text
	.align	2
	.global	gether_qc_setup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_setup_name, %function
gether_qc_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r0, #28
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r2, #1
	mov	r1, r2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	alloc_etherdev_mqs
	subs	r4, r0, #0
	beq	.L18431
	mov	r1, #0
	movw	r2, #:lower16:.LC1394
	movw	r7, #:lower16:.LANCHOR1
	mov	r3, r8
	movt	r2, #:upper16:.LC1394
	movt	r7, #:upper16:.LANCHOR1
	str	r1, [r4, #1152]
	mov	r1, #16
	str	r4, [r4, #1160]
	add	r8, r6, #32
	bl	snprintf
	ldr	r1, [r4, #484]
	ldr	r0, [r7, #4064]
	bl	get_qc_ether_addr
	cmp	r0, #0
	bne	.L18445
.L18426:
	add	r9, r4, #1168
	ldr	r0, [r7, #4068]
	add	r9, r9, #5
	mov	r1, r9
	bl	get_qc_ether_addr
	cmp	r0, #0
	bne	.L18446
.L18427:
	cmp	r5, #0
	beq	.L18428
	ldr	r3, [r9]	@ unaligned
	str	r3, [r5]	@ unaligned
	ldrh	r3, [r9, #4]	@ unaligned
	strh	r3, [r5, #4]	@ unaligned
.L18428:
	ldr	r3, .L18448
	mov	r0, r4
	add	r2, r3, #136
	str	r3, [r4, #328]
	str	r2, [r4, #332]
	bl	netif_carrier_off
	ldr	r3, .L18448+4
	mov	r0, r4
	str	r8, [r4, #688]
	str	r3, [r4, #736]
	str	r6, [r4, #1164]
	bl	register_netdev
	subs	r5, r0, #0
	bge	.L18429
	ldr	r0, .L18448+8
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18447
.L18430:
	mov	r0, r4
	bl	free_netdev
.L18424:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L18445:
	movw	r2, #:lower16:.LC1395
	movw	r1, #:lower16:.LC1396
	movt	r2, #:upper16:.LC1395
	movt	r1, #:upper16:.LC1396
	mov	r0, r8
	bl	dev_warn
	b	.L18426
.L18446:
	movw	r2, #:lower16:.LC1423
	movw	r1, #:lower16:.LC1396
	movt	r2, #:upper16:.LC1423
	movt	r1, #:upper16:.LC1396
	mov	r0, r8
	bl	dev_warn
	b	.L18427
.L18447:
	movw	r2, #:lower16:.LC1398
	mov	r1, r8
	movt	r2, #:upper16:.LC1398
	mov	r3, r5
	sub	r0, r0, #20
	bl	__dynamic_dev_dbg
	b	.L18430
.L18431:
	mvn	r5, #11
	b	.L18424
.L18429:
	movw	r0, #:lower16:.LC1399
	ldr	r2, [r4, #484]
	movt	r0, #:upper16:.LC1399
	ldr	r1, [r4, #1160]
	bl	printk
	movw	r0, #:lower16:.LC1400
	mov	r2, r9
	ldr	r1, [r4, #1160]
	movt	r0, #:upper16:.LC1400
	bl	printk
	b	.L18424
.L18449:
	.align	2
.L18448:
	.word	.LANCHOR5+2692
	.word	.LANCHOR7-1060
	.word	.LANCHOR8-580
	.fnend
	.size	gether_qc_setup_name, .-gether_qc_setup_name
	.align	2
	.global	gether_qc_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_setup, %function
gether_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r2, #:lower16:.LC1393
	movt	r2, #:upper16:.LC1393
	b	gether_qc_setup_name
	.fnend
	.size	gether_qc_setup, .-gether_qc_setup
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_bind_config, %function
rndis_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	.pad #24
	sub	sp, sp, #24
	ldr	r4, [r0, #4]
	cmp	r4, #0
	bne	.L18452
	ldr	r2, .L18460
	movw	r0, #:lower16:.LC1401
	mvn	r5, #21
	movt	r0, #:upper16:.LC1401
	mov	r1, r2
	bl	printk
	b	.L18451
.L18452:
	mov	r6, r1
	ldrb	r1, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1402
	ldrb	r3, [r4]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1402
	ldr	r2, .L18460
	str	r1, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r6, #24]
	movw	r2, #:lower16:.LC1342
	mov	r1, r4
	movt	r2, #:upper16:.LC1342
	ldr	r0, [r3]
	bl	gether_qc_setup_name
	subs	r5, r0, #0
	beq	.L18454
	ldr	r2, .L18460
	movw	r0, #:lower16:.LC1403
	movt	r0, #:upper16:.LC1403
	mov	r1, r2
	bl	printk
	b	.L18451
.L18454:
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L18455
	movw	r3, #:lower16:.LANCHOR7
	mov	r1, #3
	movt	r3, #:upper16:.LANCHOR7
	mvn	ip, #31
	sub	r2, r3, #3280
	mov	r0, #480
	strb	r1, [r3, #-3282]
	movw	r1, #769
	strb	ip, [r3, #-3275]
	strh	r0, [r2, #-4]	@ movhi
	strh	r1, [r2, #6]	@ movhi
.L18455:
	ldrb	r2, [r4, #12]	@ zero_extendqisi2
	mov	r0, r6
	add	r3, r4, #13
	mov	r1, r4
	str	r2, [sp]
	ldr	r2, [r4, #8]
	bl	rndis_qc_bind_config_vendor
	mov	r5, r0
.L18451:
	mov	r0, r5
	add	sp, sp, #24
	@ sp needed
	pop	{r4, r5, r6, pc}
.L18461:
	.align	2
.L18460:
	.word	.LANCHOR5+2992
	.fnend
	.size	rndis_qc_function_bind_config, .-rndis_qc_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC1424:
	.ascii	"%s: %s: ecm_transport is %s\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_function_bind_config, %function
ecm_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r6, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	cmp	r6, #0
	beq	.L18477
	ldr	r0, .L18480
	mov	r5, r1
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18478
.L18465:
	ldr	r0, .L18480+4
	bl	strim
	mov	r4, r0
	movw	r0, #:lower16:.LC631
	movt	r0, #:upper16:.LC631
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L18466
	ldr	r3, [r5, #24]
	movw	r2, #:lower16:.LC1405
	mov	r1, r6
	movt	r2, #:upper16:.LC1405
	ldr	r0, [r3]
	bl	gether_qc_setup_name
	subs	r7, r0, #0
	bne	.L18479
.L18466:
	mov	r2, r4
	mov	r1, r6
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	ecm_qc_bind_config
.L18478:
	ldr	r2, .L18480+4
	movw	r1, #:lower16:.LC1424
	sub	r0, r0, #20
	ldr	r3, .L18480+8
	movt	r1, #:upper16:.LC1424
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L18465
.L18479:
	ldr	r2, .L18480+8
	movw	r0, #:lower16:.LC1403
	movt	r0, #:upper16:.LC1403
	mov	r1, r2
	bl	printk
.L18462:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L18477:
	ldr	r2, .L18480+8
	movw	r0, #:lower16:.LC1404
	mvn	r7, #21
	movt	r0, #:upper16:.LC1404
	mov	r1, r2
	bl	printk
	b	.L18462
.L18481:
	.align	2
.L18480:
	.word	.LANCHOR8-556
	.word	.LANCHOR1+3020
	.word	.LANCHOR5+3024
	.fnend
	.size	ecm_qc_function_bind_config, .-ecm_qc_function_bind_config
	.align	2
	.global	gether_qc_cleanup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_cleanup_name, %function
gether_qc_cleanup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r0
	movw	r0, #:lower16:init_net
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:init_net
	str	lr, [sp, #4]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L18482
	.syntax divided
@ 17 "/home/jprim/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/jprim/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	free_netdev
.L18482:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gether_qc_cleanup_name, .-gether_qc_cleanup_name
	.align	2
	.global	gether_qc_connect_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_connect_name, %function
gether_qc_connect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r0
	movw	r0, #:lower16:init_net
	movt	r0, #:upper16:init_net
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L18488
	.syntax divided
@ 17 "/home/jprim/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/jprim/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	adds	r7, r4, #1152
	beq	.L18488
	ldrb	r3, [r6, #96]	@ zero_extendqisi2
	mov	r0, r7
	strb	r3, [r4, #1172]
	ldr	r3, [r6, #100]
	str	r3, [r4, #1168]
	bl	_raw_spin_lock
	str	r6, [r4, #1156]
	str	r7, [r6, #84]
	ldr	r3, [r4, #1160]
	ldr	r3, [r3, #160]
	tst	r3, #1
	beq	.L18489
	ldr	r3, [r6, #112]
	cmp	r3, #0
	beq	.L18490
.L18507:
	mov	r0, r6
	blx	r3
.L18490:
	mov	r0, r7
	bl	_raw_spin_unlock
	cmp	r5, #0
	ldr	r0, [r4, #1160]
	bne	.L18491
.L18485:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18489:
	ldr	r3, [r6, #116]
	cmp	r3, #0
	bne	.L18507
	b	.L18490
.L18488:
	mvn	r0, #21
	b	.L18485
.L18491:
	bl	netif_carrier_on
	ldr	r0, [r4, #1160]
	ldr	r3, [r0, #160]
	tst	r3, #1
	beq	.L18485
	ldr	r5, [r0, #576]
	mov	r0, #0
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L18493
.L18508:
	ldr	r0, [r4, #1160]
	b	.L18485
.L18493:
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L18508
	.fnend
	.size	gether_qc_connect_name, .-gether_qc_connect_name
	.align	2
	.global	gether_qc_disconnect_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_disconnect_name, %function
gether_qc_disconnect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movw	r0, #:lower16:init_net
	movt	r0, #:upper16:init_net
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L18509
	.syntax divided
@ 17 "/home/jprim/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/jprim/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	adds	r6, r4, #1152
	beq	.L18509
	ldr	r3, [r4, #1160]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L18519
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L18514:
	ldr	r0, [r4, #1160]
	bl	netif_carrier_off
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #1156]
	str	r3, [r5, #84]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L18509:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18519:
	movw	r0, #:lower16:.LC101
	movw	r1, #1847
	movt	r0, #:upper16:.LC101
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC102
	movt	r0, #:upper16:.LC102
	bl	printk
	b	.L18514
	.fnend
	.size	gether_qc_disconnect_name, .-gether_qc_disconnect_name
	.section	.rodata.str1.4
	.align	2
.LC1425:
	.ascii	"%s: dev:%pK. Disconnect BAM.\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_disable, %function
ecm_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L18543
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r3, [r1, #-2]
	tst	r3, #4
	bne	.L18540
.L18521:
	ldr	r3, [r4, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L18523
	ldr	r0, .L18543+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18541
.L18524:
	add	r0, r4, #156
	bl	bam_data_disconnect.constprop.0
	ldr	r3, [r4, #124]
	cmp	r3, #7
	bne	.L18542
.L18523:
	ldr	r0, [r4, #144]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L18520
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #144]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #144]
	str	r3, [r2, #28]
.L18520:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L18542:
	movw	r1, #:lower16:.LC855
	mov	r0, r4
	movt	r1, #:upper16:.LC855
	bl	gether_qc_disconnect_name
	b	.L18523
.L18541:
	movw	r1, #:lower16:.LC1425
	ldr	r2, .L18543+8
	mov	r3, r4
	movt	r1, #:upper16:.LC1425
	sub	r0, r0, #20
	bl	__dynamic_pr_debug
	b	.L18524
.L18540:
	ldr	r3, [r4, #20]
	sub	r0, r1, #20
	movw	r2, #:lower16:.LC1412
	movt	r2, #:upper16:.LC1412
	ldr	r3, [r3, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18521
.L18544:
	.align	2
.L18543:
	.word	.LANCHOR8-532
	.word	.LANCHOR8-508
	.word	.LANCHOR5+3052
	.fnend
	.size	ecm_qc_disable, .-ecm_qc_disable
	.section	.rodata.str1.4
	.align	2
.LC1426:
	.ascii	"<3>%s: bam_data_connect failed: err:%d\012\000"
	.align	2
.LC1427:
	.ascii	"%s: ecm bam connected\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_set_alt, %function
ecm_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldrb	r0, [r0, #120]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L18619
	ldrb	r3, [r4, #121]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	bne	.L18618
	ldr	r2, [r4, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L18552
	ldr	r0, .L18630
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18620
.L18553:
	ldr	r0, .L18630+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18621
.L18554:
	add	r0, r4, #156
	bl	bam_data_disconnect.constprop.0
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L18616
	movw	r1, #:lower16:.LC855
	mov	r0, r4
	movt	r1, #:upper16:.LC855
	bl	gether_qc_disconnect_name
.L18616:
	ldr	r2, [r4, #88]
.L18552:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L18556
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L18556
.L18557:
	cmp	r5, #1
	bne	.L18617
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC513
	movt	r0, #:upper16:.LC513
	ldr	r1, [r3, #28]
	bl	strcmp
	ldr	r3, .L18630+8
	mov	r2, #15
	subs	r0, r0, #0
	movne	r0, #1
	strh	r2, [r4, #98]	@ movhi
	ldrh	r2, [r3, #-2]
	strb	r0, [r4, #96]
	tst	r2, #4
	bne	.L18622
.L18563:
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L18564
	movw	r1, #:lower16:.LC855
	mov	r2, #1
	movt	r1, #:upper16:.LC855
	mov	r0, r4
	bl	gether_qc_connect_name
	cmn	r0, #4096
	bhi	.L18545
	ldr	r2, [r4, #20]
	ldr	r3, [r4, #124]
	ldr	r2, [r2, #24]
	cmp	r3, #7
	moveq	r7, #2
	movne	r7, #0
	ldr	r6, [r2]
.L18566:
	ldr	ip, [r4, #88]
	mov	r3, #0
	mov	r1, r7
	ldr	r0, [r4, #92]
	str	r2, [r4, #156]
	mov	r2, r3
	str	r4, [r4, #160]
	str	ip, [r4, #164]
	str	r0, [r4, #168]
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx
	mov	r5, r0
	mov	r1, r7
	ldr	r0, [r6, #28]
	mov	r3, #0
	mov	r2, #1
	bl	usb_bam_get_connection_idx
	mov	ip, #0
	uxtb	r2, r5
	ldr	r1, [r4, #124]
	uxtb	r3, r0
	add	r0, r4, #156
	str	ip, [sp]
	bl	bam_data_connect.constprop.0
	subs	r2, r0, #0
	bne	.L18623
	ldr	r0, .L18630+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18624
.L18568:
	movw	r3, #257
	ldr	r2, [r4, #20]
	ldr	r5, [r4, #148]
	strh	r3, [r4, #152]	@ movhi
	cmp	r5, #0
	beq	.L18569
	ldr	r6, [r5]
	mov	r3, #0
	mov	r1, #8
	ldr	r8, [r2, #24]
	movw	r7, #:lower16:.LANCHOR4
	movw	r2, #2346
	movt	r7, #:upper16:.LANCHOR4
	strb	r3, [r6, #1]
	ldrb	r0, [r4, #153]	@ zero_extendqisi2
	strh	r0, [r6, #2]	@ unaligned
	strb	r3, [r6, #6]
	strb	r3, [r6, #7]
	str	r1, [r5, #4]
	ldrh	r3, [r7, r2]
	tst	r3, #4
	bne	.L18625
.L18570:
	mov	r1, #2
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	strb	r1, [r4, #152]
	mov	r1, r5
	strb	r0, [r6]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r6, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L18617
	movw	r3, #2370
	str	r5, [r4, #148]
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L18573
	mov	r3, #1
	ldr	r2, [r4, #20]
	strb	r3, [r4, #152]
	b	.L18574
.L18556:
	ldr	r3, .L18630+16
	ldr	r0, [r6]
	ldrh	r1, [r3, #-2]
	tst	r1, #4
	bne	.L18626
.L18558:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18560
	mov	r1, r4
	ldr	r0, [r6]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L18557
.L18560:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
.L18545:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L18573:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC26
	mov	r3, r0
	movt	r2, #:upper16:.LC26
	ldr	r0, .L18630+20
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L18617:
	mov	r3, #1
	ldr	r2, [r4, #20]
	ldr	r5, [r4, #148]
	strb	r3, [r4, #152]
	cmp	r5, #0
	beq	.L18577
	movw	r7, #:lower16:.LANCHOR4
	movt	r7, #:upper16:.LANCHOR4
.L18574:
	ldr	r8, [r5]
	mov	r3, #0
	mov	r1, #8
	ldr	r9, [r2, #24]
	movw	r2, #2346
	strb	r3, [r8, #1]
	ldrb	r0, [r4, #153]	@ zero_extendqisi2
	strh	r0, [r8, #2]	@ unaligned
	strb	r3, [r8, #6]
	strb	r3, [r8, #7]
	str	r1, [r5, #4]
	ldrh	r3, [r7, r2]
	tst	r3, #4
	bne	.L18627
.L18575:
	mov	r1, #2
	mvn	r3, #94
	mov	r6, #0
	mov	r2, #32
	strb	r1, [r4, #152]
	mov	r1, r5
	strb	r3, [r8]
	ldrb	r3, [r4, #120]	@ zero_extendqisi2
	strh	r3, [r8, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r6, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L18628
.L18577:
	mov	r0, #0
	b	.L18545
.L18619:
	cmp	r2, #0
	bne	.L18618
	ldr	r0, [r4, #144]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L18549
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #144]
.L18549:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L18629
.L18550:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #144]
	mov	r0, #0
	str	r4, [r3]
	b	.L18545
.L18628:
	movw	r3, #2370
	str	r5, [r4, #148]
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L18577
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC26
	mov	r3, r0
	movt	r2, #:upper16:.LC26
	ldr	r0, .L18630+20
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mov	r0, r6
	b	.L18545
.L18564:
	ldr	r3, [r4, #20]
	mov	r7, #2
	ldr	r2, [r3, #24]
	ldr	r6, [r2]
	b	.L18566
.L18629:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18618
	ldr	r0, [r4, #144]
	ldr	r1, [r0, #28]
	b	.L18550
.L18569:
	mov	r3, #1
	strb	r3, [r4, #152]
	b	.L18577
.L18620:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1413
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1413
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18553
.L18621:
	movw	r1, #:lower16:.LC1425
	ldr	r2, .L18630+24
	mov	r3, r4
	movt	r1, #:upper16:.LC1425
	sub	r0, r0, #20
	bl	__dynamic_pr_debug
	b	.L18554
.L18626:
	movw	r2, #:lower16:.LC1414
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1414
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	ldr	r2, [r4, #88]
	b	.L18558
.L18622:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1415
	sub	r0, r3, #20
	movt	r2, #:upper16:.LC1415
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18563
.L18624:
	movw	r1, #:lower16:.LC1427
	ldr	r2, .L18630+28
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1427
	bl	__dynamic_pr_debug
	b	.L18568
.L18623:
	movw	r0, #:lower16:.LC1426
	ldr	r1, .L18630+28
	movt	r0, #:upper16:.LC1426
	bl	printk
.L18618:
	mvn	r0, #21
	b	.L18545
.L18627:
	ldrb	lr, [r4, #153]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC22
	movw	r3, #:lower16:.LC21
	ldr	r1, [r9]
	movt	ip, #:upper16:.LC22
	movw	r2, #:lower16:.LC24
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC24
	ldr	r0, .L18630+32
	cmp	lr, #0
	moveq	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18575
.L18625:
	ldrb	lr, [r4, #153]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC22
	movw	r3, #:lower16:.LC21
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC22
	movw	r2, #:lower16:.LC24
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC24
	ldr	r0, .L18630+32
	cmp	lr, #0
	moveq	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18570
.L18631:
	.align	2
.L18630:
	.word	.LANCHOR8-484
	.word	.LANCHOR8-508
	.word	.LANCHOR8-436
	.word	.LANCHOR8-412
	.word	.LANCHOR8-460
	.word	.LANCHOR4+2352
	.word	.LANCHOR5+3052
	.word	.LANCHOR5+3076
	.word	.LANCHOR4+2328
	.fnend
	.size	ecm_qc_set_alt, .-ecm_qc_set_alt
	.section	.rodata.str1.4
	.align	2
.LC1428:
	.ascii	"<6>%s: rndis deactivated\012\000"
	.align	2
.LC1429:
	.ascii	"%s: dev:%pK. %s Disconnect BAM.\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_disable, %function
rndis_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #156]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC1428
	ldr	r1, .L18677
	movt	r0, #:upper16:.LC1428
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	bl	printk
	ldr	r2, [r4, #144]
	cmp	r2, #0
	ble	.L18634
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
.L18644:
	ldr	r0, .L18677+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L18636
	ldr	r2, .L18677+8
	movw	r1, #:lower16:.LC1429
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1429
	mov	r3, r4
	str	r2, [sp]
	bl	__dynamic_pr_debug
.L18636:
	ldr	r0, .L18677+12
	add	r5, r4, #168
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L18646
	mov	r3, #0
	movw	r1, #:lower16:.LC152
	ldr	r2, .L18677+16
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC152
	str	r3, [sp]
	mov	r3, r5
	bl	__dynamic_pr_debug
.L18646:
	ldr	r3, [r7, #3692]
	cmp	r3, #0
	bgt	.L18647
	movw	r0, #:lower16:.LC650
	ldr	r1, .L18677+16
	mov	r2, #0
	movt	r0, #:upper16:.LC650
	bl	printk
.L18648:
	movw	r1, #:lower16:.LC805
	mov	r0, r4
	movt	r1, #:upper16:.LC805
	bl	gether_qc_disconnect_name
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #156]
	mov	r2, #0
	str	r2, [r3]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L18634:
	mov	r3, #60
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	mov	r1, #0
	mul	r3, r3, r2
	add	r2, r7, r3
	add	r5, r2, #3744
	add	r5, r5, #4
	str	r1, [r2, #3700]
	mov	r8, r5
.L18637:
	ldr	r3, [r8]
	ldr	r2, [r3]
.L18641:
	cmp	r3, r5
	beq	.L18644
	ldr	r1, [r3, #16]
	cmp	r1, #0
	bne	.L18642
	ldr	r10, [r3, #8]
	mov	r2, #1
	str	r2, [r3, #16]
	cmp	r10, #0
	beq	.L18644
	ldr	r6, [r8]
	ldr	r9, [r6]
.L18638:
	cmp	r5, r6
	beq	.L18637
	cmp	r6, #0
	beq	.L18639
	ldr	r3, [r6, #8]
	cmp	r10, r3
	bne	.L18639
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	bl	kfree
.L18639:
	mov	r6, r9
	ldr	r9, [r9]
	b	.L18638
.L18647:
	cmp	r5, #0
	bne	.L18649
	movw	r0, #:lower16:.LC651
	ldr	r1, .L18677+16
	movt	r0, #:upper16:.LC651
	bl	printk
	b	.L18648
.L18649:
	ldr	r5, [r7, #3684]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L18650
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L18650
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L18650
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r5, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r5, #4]
.L18650:
	ldr	r3, [r5, #60]
	cmp	r3, #7
	bne	.L18651
	add	r1, r5, #184
	ldr	r0, [r7, #3688]
	bl	queue_work
	b	.L18648
.L18651:
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	beq	.L18648
	ldr	r2, .L18677+16
	movw	r0, #:lower16:.LC652
	movt	r0, #:upper16:.LC652
	mov	r1, r2
	bl	printk
	b	.L18648
.L18642:
	mov	r3, r2
	ldr	r2, [r2]
	b	.L18641
.L18678:
	.align	2
.L18677:
	.word	.LANCHOR5+3096
	.word	.LANCHOR8-388
	.word	.LANCHOR5+3116
	.word	.LANCHOR4-2016
	.word	.LANCHOR5-3208
	.fnend
	.size	rndis_qc_disable, .-rndis_qc_disable
	.section	.rodata.str1.4
	.align	2
.LC1430:
	.ascii	"<6>%s: rndis bam connected\012\000"
	.align	2
.LC1431:
	.ascii	"RNDIS RX/TX early activation ...\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_set_alt, %function
rndis_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrb	r2, [r0, #120]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r6, [r3, #24]
	beq	.L18722
	ldrb	r3, [r0, #121]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L18685
	ldr	ip, [r0, #88]
	ldr	r3, [ip]
	cmp	r3, #0
	beq	.L18686
	ldr	r0, .L18728
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18723
.L18687:
	ldr	r0, .L18728+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18724
.L18688:
	add	r0, r4, #168
	bl	bam_data_disconnect.constprop.0
	movw	r1, #:lower16:.LC805
	mov	r0, r4
	movt	r1, #:upper16:.LC805
	bl	gether_qc_disconnect_name
	ldr	ip, [r4, #88]
.L18686:
	ldr	r3, [ip, #28]
	cmp	r3, #0
	beq	.L18689
	ldr	lr, [r4, #92]
	ldr	r3, [lr, #28]
	cmp	r3, #0
	beq	.L18689
.L18690:
	ldr	r1, [r4, #20]
	mov	r5, #0
	mov	r3, r5
	mov	r2, r5
	strb	r5, [r4, #96]
	strh	r5, [r4, #98]	@ movhi
	ldr	r0, [r1, #24]
	mov	r1, r5
	ldr	r7, [r0]
	str	r0, [r4, #168]
	str	r4, [r4, #172]
	str	ip, [r4, #176]
	str	lr, [r4, #180]
	ldr	r0, [r7, #28]
	bl	usb_bam_get_connection_idx
	mov	r3, r5
	mov	r1, r5
	mov	r2, #1
	mov	r5, r0
	ldr	r0, [r7, #28]
	bl	usb_bam_get_connection_idx
	mov	r1, #2
	uxtb	r2, r5
	uxtb	r3, r0
	add	r0, r4, #168
	str	r1, [sp]
	mov	r1, #6
	bl	bam_data_connect.constprop.0
	subs	r5, r0, #0
	beq	.L18693
	movw	r0, #:lower16:.LC1426
	mov	r2, r5
	ldr	r1, .L18728+8
	movt	r0, #:upper16:.LC1426
	mvn	r5, #21
	bl	printk
	b	.L18679
.L18689:
	ldr	r3, .L18728+12
	ldr	r0, [r6]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L18725
.L18691:
	mov	r2, ip
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18692
	mov	r1, r4
	ldr	r0, [r6]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18692
	ldr	ip, [r4, #88]
	ldr	lr, [r4, #92]
	b	.L18690
.L18722:
	ldr	r0, [r0, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L18681
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #156]
.L18681:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L18726
.L18682:
	ldr	r3, [r0, #8]
	mov	r5, #0
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #156]
	str	r4, [r3]
.L18679:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L18726:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18685
	ldr	r0, [r4, #156]
	ldr	r1, [r0, #28]
	b	.L18682
.L18724:
	ldr	r2, .L18728+16
	movw	r1, #:lower16:.LC1429
	mov	r3, r4
	movt	r1, #:upper16:.LC1429
	sub	r0, r0, #20
	str	r2, [sp]
	bl	__dynamic_pr_debug
	b	.L18688
.L18723:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1409
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1409
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18687
.L18725:
	movw	r2, #:lower16:.LC1410
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1410
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	ldr	ip, [r4, #88]
	b	.L18691
.L18685:
	mvn	r5, #21
	b	.L18679
.L18692:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L18679
.L18693:
	movw	r0, #:lower16:.LC1430
	ldr	r1, .L18728+8
	movt	r0, #:upper16:.LC1430
	bl	printk
	ldr	r0, .L18728+20
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18727
.L18694:
	movw	r1, #:lower16:.LC805
	mov	r2, #0
	movt	r1, #:upper16:.LC805
	mov	r0, r4
	bl	gether_qc_connect_name
	cmn	r0, #4096
	mov	r6, r0
	movhi	r5, r0
	bhi	.L18679
	ldr	r0, .L18728+24
	ldr	r7, [r4, #144]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L18696
	movw	r1, #:lower16:.LC285
	ldr	r2, .L18728+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC285
	bl	__dynamic_pr_debug
.L18696:
	uxtb	r7, r7
	clz	r3, r6
	lsr	r3, r3, #5
	cmp	r7, #0
	movne	r3, #1
	cmp	r3, #0
	bne	.L18679
	movw	r2, #:lower16:.LANCHOR1
	add	r4, r4, #98
	movt	r2, #:upper16:.LANCHOR1
	str	r3, [r2, #3552]
	str	r3, [r2, #3556]
	str	r4, [r2, #3720]
	str	r6, [r2, #3724]
	b	.L18679
.L18727:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1431
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1431
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18694
.L18729:
	.align	2
.L18728:
	.word	.LANCHOR8-364
	.word	.LANCHOR8-388
	.word	.LANCHOR5+3140
	.word	.LANCHOR8-340
	.word	.LANCHOR5+3116
	.word	.LANCHOR8-316
	.word	.LANCHOR8-1248
	.word	.LANCHOR5+1860
	.fnend
	.size	rndis_qc_set_alt, .-rndis_qc_set_alt
	.align	2
	.global	pcm_buffer_size
	.syntax unified
	.arm
	.fpu softvfp
	.type	pcm_buffer_size, %function
pcm_buffer_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR4
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	r2, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r3, [r2, #42]
	.pad #24
	sub	sp, sp, #24
	ldr	r0, [r0, #380]
	tst	r3, #4
	bne	.L18736
.L18731:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18736:
	ldrb	ip, [r4, #388]	@ zero_extendqisi2
	mov	r3, r0
	add	r0, r2, #24
	ldr	r6, [r4, #384]
	movw	r1, #:lower16:.LC786
	movt	r1, #:upper16:.LC786
	ubfx	lr, ip, #3, #1
	ubfx	r2, ip, #1, #1
	ubfx	r5, ip, #2, #1
	and	ip, ip, #1
	stm	sp, {r6, ip}
	str	r2, [sp, #8]
	ldr	r2, .L18737
	str	r5, [sp, #12]
	str	lr, [sp, #16]
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #380]
	b	.L18731
.L18738:
	.align	2
.L18737:
	.word	.LANCHOR5-2076
	.fnend
	.size	pcm_buffer_size, .-pcm_buffer_size
	.align	2
	.global	pcm_period_size
	.syntax unified
	.arm
	.fpu softvfp
	.type	pcm_period_size, %function
pcm_period_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #332]
	bx	lr
	.fnend
	.size	pcm_period_size, .-pcm_period_size
	.align	2
	.global	u_audio_clear
	.syntax unified
	.arm
	.fpu softvfp
	.type	u_audio_clear, %function
u_audio_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #2216]
	bx	lr
	.fnend
	.size	u_audio_clear, .-u_audio_clear
	.section	.rodata.str1.4
	.align	2
.LC1432:
	.ascii	"<3>%s: unable to open sound control device file: %s"
	.ascii	"\012\000"
	.align	2
.LC1433:
	.ascii	"<3>%s: No such PCM playback device: %s\012\000"
	.align	2
.LC1434:
	.ascii	"%s: Initialized PCM playback device: %s\012\000"
	.align	2
.LC1435:
	.ascii	"<3>%s: Setting playback HW params failed: err %d\000"
	.align	2
.LC1436:
	.ascii	"<3>%s: No such PCM capture device: %s\012\000"
	.align	2
.LC1437:
	.ascii	"<3>%s: Setting capture HW params failed: err %d\000"
	.align	2
.LC1438:
	.ascii	"<3>%s: Failed to open snd devices\012\000"
	.text
	.align	2
	.global	gaudio_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_setup, %function
gaudio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	beq	.L18787
	movw	r7, #:lower16:.LANCHOR7
	mov	r2, #0
	movt	r7, #:upper16:.LANCHOR7
	mov	r1, #2
	ldr	r0, [r7, #-1036]
	bl	filp_open
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #92]
	bhi	.L18788
	mov	r2, #0
	mov	r1, #1
	str	r4, [r4, #88]
	ldr	r0, [r7, #-1032]
	bl	filp_open
	cmn	r0, #4096
	str	r0, [r4, #120]
	bhi	.L18789
	movw	r6, #:lower16:.LANCHOR8
	movt	r6, #:upper16:.LANCHOR8
	sub	r3, r6, #292
	ldrh	r3, [r3, #-2]
	tst	r3, #4
	bne	.L18790
.L18747:
	movw	r8, #:lower16:kmalloc_caches
	ldr	r2, [r0, #124]
	mov	r3, #2
	movt	r8, #:upper16:kmalloc_caches
	mov	ip, #3
	ldr	r0, [r8, #40]
	ldr	r1, [r2]
	mov	r2, #8000
	str	r4, [r4, #116]
	cmp	r0, #0
	str	r1, [r4, #124]
	str	ip, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r2, [r4, #140]
	beq	.L18763
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L18791
.L18748:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	mov	r0, r5
	ldr	r1, [r4, #128]
	bl	_snd_pcm_hw_param_set.constprop.0
	mov	r0, r5
	ldr	r1, [r4, #132]
	bl	_snd_pcm_hw_param_set.constprop.1
	mov	r0, r5
	ldr	r1, [r4, #136]
	bl	_snd_pcm_hw_param_set.constprop.2
	mov	r0, r5
	ldr	r1, [r4, #140]
	bl	_snd_pcm_hw_param_set.constprop.3
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L18764
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r2, #32
	bne	.L18749
.L18750:
	str	r3, [r4, #128]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L18766
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r2, #32
	bne	.L18751
.L18752:
	str	r3, [r4, #132]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #136]
	ldr	r3, [r5, #296]
	str	r3, [r4, #140]
	bl	kfree
	ldr	r0, .L18796
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18792
.L18753:
	mov	r2, #0
	ldr	r0, [r7, #-1028]
	mov	r1, r2
	bl	filp_open
	cmn	r0, #4096
	str	r0, [r4, #148]
	bhi	.L18793
	ldr	r2, [r0, #124]
	mov	lr, #3
	mov	ip, #2
	ldr	r0, [r8, #40]
	mov	r1, #1
	mov	r3, #8000
	ldr	r2, [r2]
	str	r4, [r4, #144]
	cmp	r0, #0
	str	r2, [r4, #152]
	str	lr, [r4, #156]
	str	ip, [r4, #160]
	str	r1, [r4, #164]
	str	r3, [r4, #168]
	beq	.L18768
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L18794
.L18755:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	mov	r0, r5
	ldr	r1, [r4, #156]
	bl	_snd_pcm_hw_param_set.constprop.0
	mov	r0, r5
	ldr	r1, [r4, #160]
	bl	_snd_pcm_hw_param_set.constprop.1
	mov	r0, r5
	ldr	r1, [r4, #164]
	bl	_snd_pcm_hw_param_set.constprop.2
	mov	r0, r5
	ldr	r1, [r4, #168]
	bl	_snd_pcm_hw_param_set.constprop.3
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L18769
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r2, #32
	bne	.L18757
.L18758:
	str	r3, [r4, #156]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L18771
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r2, #32
	bne	.L18759
.L18760:
	str	r3, [r4, #160]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #164]
	ldr	r3, [r5, #296]
	str	r3, [r4, #168]
	bl	kfree
	ldrh	r3, [r6, #-246]
	tst	r3, #4
	bne	.L18795
.L18761:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #3976]
	cmp	r5, #0
	movne	r5, #0
	streq	r4, [r3, #3976]
.L18741:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18763:
	mov	r5, #16
	b	.L18748
.L18768:
	mov	r5, #16
	b	.L18755
.L18790:
	movw	r1, #:lower16:.LC1434
	ldr	r2, .L18796+4
	sub	r0, r6, #312
	movt	r1, #:upper16:.LC1434
	ldr	r3, [r7, #-1032]
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #120]
	b	.L18747
.L18795:
	add	r0, r4, #160
	movw	r1, #:lower16:.LC788
	ldr	r2, .L18796+8
	ldm	r0, {r0, r3, ip}
	movt	r1, #:upper16:.LC788
	stm	sp, {r0, r3}
	ldr	r0, .L18796+12
	ldr	r3, [r4, #156]
	str	ip, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L18761
.L18792:
	ldr	r2, [r4, #132]
	movw	r1, #:lower16:.LC779
	sub	r0, r0, #20
	ldr	ip, [r4, #136]
	movt	r1, #:upper16:.LC779
	ldr	r3, [r4, #140]
	str	r2, [sp]
	ldr	r2, .L18796+16
	str	r3, [sp, #8]
	ldr	r3, [r4, #128]
	str	ip, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L18753
.L18766:
	mov	r2, #0
.L18751:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/jprim/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L18752
.L18764:
	mov	r2, #0
.L18749:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/jprim/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L18750
.L18769:
	mov	r2, #0
.L18757:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/jprim/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L18758
.L18771:
	mov	r2, #0
.L18759:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/jprim/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L18760
.L18787:
	ldr	r2, .L18796+4
	movw	r0, #:lower16:.LC775
	mvn	r5, #18
	movt	r0, #:upper16:.LC775
	mov	r1, r2
	bl	printk
.L18743:
	movw	r0, #:lower16:.LC1438
	ldr	r1, .L18796+20
	movt	r0, #:upper16:.LC1438
	bl	printk
	b	.L18741
.L18794:
	movw	r0, #:lower16:.LC1437
	mvn	r2, #11
	ldr	r1, .L18796+4
	movt	r0, #:upper16:.LC1437
	mov	r5, r2
	bl	printk
	b	.L18743
.L18791:
	movw	r0, #:lower16:.LC1435
	mvn	r2, #11
	ldr	r1, .L18796+4
	movt	r0, #:upper16:.LC1435
	mov	r5, r2
	bl	printk
	b	.L18743
.L18793:
	movw	r0, #:lower16:.LC1436
	ldr	r1, .L18796+4
	mvn	r5, #21
	movt	r0, #:upper16:.LC1436
	ldr	r2, [r7, #-1028]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #144]
	str	r3, [r4, #148]
	str	r3, [r4, #152]
	b	.L18743
.L18789:
	movw	r0, #:lower16:.LC1433
	ldr	r1, .L18796+4
	mvn	r5, #21
	movt	r0, #:upper16:.LC1433
	ldr	r2, [r7, #-1032]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #120]
	b	.L18743
.L18788:
	movw	r0, #:lower16:.LC1432
	ldr	r1, .L18796+4
	movt	r0, #:upper16:.LC1432
	ldr	r2, [r7, #-1036]
	bl	printk
	mov	r3, #0
	cmp	r5, #0
	str	r3, [r4, #92]
	bne	.L18743
	b	.L18761
.L18797:
	.align	2
.L18796:
	.word	.LANCHOR8-268
	.word	.LANCHOR5+3164
	.word	.LANCHOR5+3212
	.word	.LANCHOR8-264
	.word	.LANCHOR5+3184
	.word	.LANCHOR5+3240
	.fnend
	.size	gaudio_setup, .-gaudio_setup
	.align	2
	.global	gaudio_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_cleanup, %function
gaudio_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r5, [r4, #3976]
	str	lr, [sp, #12]
	cmp	r5, #0
	beq	.L18798
	ldr	r0, .L18821
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L18820
.L18800:
	ldr	r0, [r5, #92]
	cmp	r0, #0
	beq	.L18801
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1008]
	bl	filp_close
.L18801:
	ldr	r0, [r5, #120]
	cmp	r0, #0
	beq	.L18802
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1008]
	bl	filp_close
.L18802:
	ldr	r0, [r5, #148]
	cmp	r0, #0
	beq	.L18803
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1008]
	bl	filp_close
.L18803:
	mov	r3, #0
	str	r3, [r4, #3976]
.L18798:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18820:
	movw	r1, #:lower16:.LC429
	ldr	r2, .L18821+4
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC429
	bl	__dynamic_pr_debug
	b	.L18800
.L18822:
	.align	2
.L18821:
	.word	.LANCHOR4-3520
	.word	.LANCHOR3+3408
	.fnend
	.size	gaudio_cleanup, .-gaudio_cleanup
	.align	2
	.global	control_selector_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	control_selector_init, %function
control_selector_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR7
	movw	r5, #:lower16:.LANCHOR0
	strd	r6, [sp, #8]
	mov	r6, r0
	movt	r4, #:upper16:.LANCHOR7
	strd	r8, [sp, #16]
	add	r9, r0, #252
	sub	r0, r4, #1024
	mov	r2, r9
	mov	r1, r9
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	sub	r7, r4, #1016
	sub	r8, r4, #984
	str	r9, [r6, #252]
	movt	r5, #:upper16:.LANCHOR0
	str	r9, [r6, #256]
	bl	__list_add
	mov	r1, r9
	sub	r0, r4, #992
	ldr	r2, [r6, #252]
	bl	__list_add
	mov	r2, r7
	mov	r1, r7
	str	r7, [r4, #-1016]
	sub	r0, r4, #960
	str	r7, [r4, #-1012]
	bl	__list_add
	mov	r1, r7
	sub	r0, r4, #916
	ldr	r2, [r4, #-1016]
	bl	__list_add
	mov	r2, r8
	mov	r1, r8
	str	r8, [r4, #-984]
	sub	r0, r4, #872
	add	r7, r6, #260
	str	r8, [r4, #-980]
	bl	__list_add
	mov	r1, r8
	sub	r0, r4, #828
	ldr	r2, [r4, #-984]
	bl	__list_add
	movw	r8, #65472
	movw	lr, #58272
	str	r7, [r6, #260]
	movw	ip, #65520
	mov	r3, #48
	str	r7, [r6, #264]
	add	r0, r5, #3456
	mov	r2, r7
	str	r8, [r4, #-896]
	mov	r1, r7
	add	r0, r0, #8
	str	lr, [r4, #-892]
	str	ip, [r4, #-888]
	str	r3, [r4, #-884]
	str	r8, [r4, #-808]
	str	lr, [r4, #-804]
	str	ip, [r4, #-800]
	str	r3, [r4, #-796]
	bl	__list_add
	add	r0, r5, #3424
	mov	r1, r7
	ldr	r2, [r6, #260]
	add	r0, r0, #8
	bl	__list_add
	add	r2, r5, #3440
	sub	r0, r4, #784
	mov	r1, r2
	str	r2, [r5, #3440]
	str	r2, [r5, #3444]
	bl	__list_add
	add	r2, r5, #3472
	sub	r0, r4, #740
	mov	r1, r2
	str	r2, [r5, #3472]
	str	r2, [r5, #3476]
	bl	__list_add
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	control_selector_init, .-control_selector_init
	.section	.rodata.str1.4
	.align	2
.LC1439:
	.ascii	"audio\000"
	.align	2
.LC1440:
	.ascii	"<3>%s: %s: Failed to add usb audio function, err = "
	.ascii	"%d\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_function_bind_config, %function
audio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L18830
	mov	r2, #276
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18839
.L18826:
	ldr	r0, .L18842
	movw	r1, #:lower16:.LC1439
	movw	r3, #:lower16:f_audio_bind
	ldr	ip, [r6, #24]
	movt	r1, #:upper16:.LC1439
	movw	r2, #:lower16:f_audio_unbind
	movt	r3, #:upper16:f_audio_bind
	movt	r2, #:upper16:f_audio_unbind
	mov	r7, #0
	ldr	lr, [ip]
	str	r1, [r4]
	movw	r1, #:lower16:f_audio_get_alt
	str	r0, [r4, #4]
	movw	r0, #:lower16:f_audio_set_alt
	movt	r1, #:upper16:f_audio_get_alt
	movt	r0, #:upper16:f_audio_set_alt
	str	r3, [r4, #32]
	movw	r3, #:lower16:f_audio_setup
	str	r2, [r4, #36]
	movw	r2, #:lower16:f_audio_disable
	add	ip, r4, #204
	movt	r3, #:upper16:f_audio_setup
	movt	r2, #:upper16:f_audio_disable
	strd	r0, [r4, #40]
	add	r1, r4, #236
	mov	r0, r4
	strd	r2, [r4, #48]
	str	lr, [r4, #84]
	str	r7, [r4, #180]
	str	ip, [r4, #204]
	str	ip, [r4, #208]
	str	r7, [r4, #212]
	str	r1, [r4, #236]
	str	r1, [r4, #240]
	bl	control_selector_init
	movw	r2, #:lower16:f_audio_playback_work
	movw	r3, #:lower16:f_audio_capture_work
	movt	r2, #:upper16:f_audio_playback_work
	mov	r1, #2560
	add	r0, r4, #192
	movt	r3, #:upper16:f_audio_capture_work
	str	r1, [r4, #188]
	str	r2, [r4, #200]
	add	r2, r4, #224
	str	r0, [r4, #192]
	str	r0, [r4, #196]
	mov	r0, r4
	str	r1, [r4, #220]
	str	r2, [r4, #224]
	str	r2, [r4, #228]
	str	r3, [r4, #232]
	bl	gaudio_setup
	subs	r5, r0, #0
	blt	.L18840
	mov	r0, r6
	mov	r1, r4
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L18841
.L18825:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18830:
	mov	r4, #16
	b	.L18826
.L18840:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r0, [r6, #3976]
	cmp	r0, r7
	beq	.L18829
	bl	gaudio_close_snd_dev
	str	r7, [r6, #3976]
.L18829:
	mov	r0, r4
	bl	kfree
	b	.L18825
.L18839:
	mvn	r5, #11
	b	.L18825
.L18841:
	ldr	r2, .L18842+4
	movw	r0, #:lower16:.LC1440
	mov	r3, r5
	movt	r0, #:upper16:.LC1440
	mov	r1, r2
	bl	printk
	b	.L18829
.L18843:
	.align	2
.L18842:
	.word	.LANCHOR7-696
	.word	.LANCHOR5+3256
	.fnend
	.size	audio_function_bind_config, .-audio_function_bind_config
	.align	2
	.global	audio_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_bind_config, %function
audio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L18849
	mov	r2, #276
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18858
.L18845:
	ldr	r0, .L18861
	movw	r1, #:lower16:.LC1439
	movw	r3, #:lower16:f_audio_bind
	ldr	ip, [r6, #24]
	movt	r1, #:upper16:.LC1439
	movw	r2, #:lower16:f_audio_unbind
	movt	r3, #:upper16:f_audio_bind
	movt	r2, #:upper16:f_audio_unbind
	mov	r7, #0
	ldr	lr, [ip]
	str	r1, [r4]
	movw	r1, #:lower16:f_audio_get_alt
	str	r0, [r4, #4]
	movw	r0, #:lower16:f_audio_set_alt
	movt	r1, #:upper16:f_audio_get_alt
	movt	r0, #:upper16:f_audio_set_alt
	str	r3, [r4, #32]
	movw	r3, #:lower16:f_audio_setup
	str	r2, [r4, #36]
	movw	r2, #:lower16:f_audio_disable
	add	ip, r4, #204
	movt	r3, #:upper16:f_audio_setup
	movt	r2, #:upper16:f_audio_disable
	strd	r0, [r4, #40]
	add	r1, r4, #236
	mov	r0, r4
	strd	r2, [r4, #48]
	str	lr, [r4, #84]
	str	r7, [r4, #180]
	str	ip, [r4, #204]
	str	ip, [r4, #208]
	str	r7, [r4, #212]
	str	r1, [r4, #236]
	str	r1, [r4, #240]
	bl	control_selector_init
	movw	r2, #:lower16:f_audio_playback_work
	movw	r3, #:lower16:f_audio_capture_work
	movt	r2, #:upper16:f_audio_playback_work
	mov	r1, #2560
	add	r0, r4, #192
	movt	r3, #:upper16:f_audio_capture_work
	str	r1, [r4, #188]
	str	r2, [r4, #200]
	add	r2, r4, #224
	str	r0, [r4, #192]
	str	r0, [r4, #196]
	mov	r0, r4
	str	r1, [r4, #220]
	str	r2, [r4, #224]
	str	r2, [r4, #228]
	str	r3, [r4, #232]
	bl	gaudio_setup
	subs	r5, r0, #0
	blt	.L18859
	mov	r0, r6
	mov	r1, r4
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L18860
.L18844:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18849:
	mov	r4, #16
	b	.L18845
.L18859:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r0, [r6, #3976]
	cmp	r0, r7
	beq	.L18848
	bl	gaudio_close_snd_dev
	str	r7, [r6, #3976]
.L18848:
	mov	r0, r4
	bl	kfree
	b	.L18844
.L18858:
	mvn	r5, #11
	b	.L18844
.L18860:
	ldr	r2, .L18861+4
	movw	r0, #:lower16:.LC1440
	mov	r3, r5
	movt	r0, #:upper16:.LC1440
	mov	r1, r2
	bl	printk
	b	.L18848
.L18862:
	.align	2
.L18861:
	.word	.LANCHOR7-696
	.word	.LANCHOR5+3256
	.fnend
	.size	audio_bind_config, .-audio_bind_config
	.align	2
	.global	conn_gadget_req_put
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_put, %function
conn_gadget_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #88
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r1
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r2, r7
	ldr	r1, [r7, #4]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	conn_gadget_req_put, .-conn_gadget_req_put
	.section	.rodata.str1.4
	.align	2
.LC1441:
	.ascii	"<3>%s() failed to queue req %pK (%d)\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_request_ep_out, %function
conn_gadget_request_ep_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r7, r0, #88
	strd	r8, [sp, #16]
	add	r8, r0, #128
	add	r9, r0, #136
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	b	.L18866
.L18869:
	bl	list_del
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	subs	r1, r10, #0
	mov	r2, #32
	beq	.L18868
	ldr	r3, [r5, #192]
	str	r3, [r4, #-32]
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r3, r0
	mov	r0, r7
	cmp	r3, #0
	blt	.L18872
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r5, #140]
	mov	r0, r4
	bl	__list_add
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L18866:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #128]
	mov	r6, r0
	cmp	r4, r8
	mov	r0, r4
	sub	r10, r4, #36
	bne	.L18869
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L18868:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L18872:
	movw	r0, #:lower16:.LC1441
	mov	r2, r10
	ldr	r1, .L18873
	movt	r0, #:upper16:.LC1441
	bl	printk
	mov	r2, r10
	mov	r1, r8
	mov	r0, r5
	bl	conn_gadget_req_put
	b	.L18868
.L18874:
	.align	2
.L18873:
	.word	.LANCHOR5+3276
	.fnend
	.size	conn_gadget_request_ep_out, .-conn_gadget_request_ep_out
	.section	.rodata.str1.4
	.align	2
.LC1442:
	.ascii	"<3>%s: intf: %d alt: %d\012\000"
	.align	2
.LC1443:
	.ascii	"<3>%s() kfifo_reset\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_set_alt, %function
conn_gadget_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	lr, r1
	ldr	ip, [r0, #20]
	mov	r6, r0
	movw	r0, #:lower16:.LC1442
	mov	r3, r2
	ldr	r1, .L18881
	mov	r2, lr
	movt	r0, #:upper16:.LC1442
	ldr	r5, [ip, #24]
	bl	printk
	mov	r1, r6
	ldr	r2, [r6, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L18875
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L18875
	mov	r1, r6
	ldr	r0, [r5]
	ldr	r2, [r6, #96]
	bl	config_ep_by_speed
	subs	r4, r0, #0
	bne	.L18880
	ldr	r0, [r6, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L18878
.L18880:
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L18875
.L18878:
	ldr	r3, [r6, #100]
	mov	r5, #1
	movw	r0, #:lower16:.LC1443
	ldr	r1, .L18881
	movt	r0, #:upper16:.LC1443
	str	r5, [r6, #100]
	str	r4, [r6, #104]
	str	r3, [r6, #212]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2484]
	str	r4, [r0, #168]
	str	r4, [r0, #172]
	bl	conn_gadget_request_ep_out
	mov	r3, r4
	mov	r2, r5
	mov	r1, #3
	add	r0, r6, #200
	bl	__wake_up
	mov	r3, r4
	mov	r2, r5
	add	r0, r6, #144
	mov	r1, #3
	bl	__wake_up
.L18875:
	mov	r0, r4
	pop	{r4, r5, r6, pc}
.L18882:
	.align	2
.L18881:
	.word	.LANCHOR5+3304
	.fnend
	.size	conn_gadget_function_set_alt, .-conn_gadget_function_set_alt
	.section	.rodata.str1.4
	.align	2
.LC1444:
	.ascii	"<6>conn_gadget_open\012\000"
	.align	2
.LC1445:
	.ascii	"<3>%s() handle closing now. open again\012\000"
	.align	2
.LC1446:
	.ascii	"<3>%s() conn_gadget_lock(open_excl) f\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_open, %function
conn_gadget_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC1444
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LC1444
	mov	r6, r1
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2484]
	cmp	r3, #0
	bne	.L18884
	movw	r0, #:lower16:.LC448
	ldr	r1, .L18891
	mvn	r5, #18
	movt	r0, #:upper16:.LC448
	bl	printk
	b	.L18883
.L18884:
	ldr	r5, [r3, #216]
	cmp	r5, #0
	beq	.L18886
	movw	r0, #:lower16:.LC1445
	ldr	r1, .L18891
	mvn	r5, #10
	movt	r0, #:upper16:.LC1445
	bl	printk
	b	.L18883
.L18886:
	mov	r4, r2
	add	r2, r3, #116
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L18887
	ldr	r3, [r4, #2484]
	str	r3, [r6, #124]
	ldr	r2, [r3, #100]
	str	r5, [r3, #104]
	cmp	r2, #0
	beq	.L18889
	movw	r0, #:lower16:.LC449
	ldr	r1, .L18891
	movt	r0, #:upper16:.LC449
	bl	printk
	ldr	r0, [r4, #2484]
	bl	conn_gadget_request_ep_out
	b	.L18889
.L18887:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC1446
	ldr	r1, .L18891
	mvn	r5, #15
	movt	r0, #:upper16:.LC1446
	bl	printk
	b	.L18883
.L18889:
	ldr	r3, [r4, #2484]
	ldr	r2, [r3, #100]
	str	r2, [r3, #212]
.L18883:
	mov	r0, r5
	pop	{r4, r5, r6, pc}
.L18892:
	.align	2
.L18891:
	.word	.LANCHOR5+3336
	.fnend
	.size	conn_gadget_open, .-conn_gadget_open
	.section	.rodata.str1.4
	.align	2
.LC1447:
	.ascii	"<3>%s() count is too large (%d)\012\000"
	.align	2
.LC1448:
	.ascii	"<3>%s() conn_gadget_lock(read_excl) f\012\000"
	.align	2
.LC1449:
	.ascii	"<3>%s() waiting for online state\012\000"
	.align	2
.LC1450:
	.ascii	"<3>%s() dev->error has value\012\000"
	.align	2
.LC1451:
	.ascii	"<3>%s() zero queue\012\000"
	.align	2
.LC1452:
	.ascii	"<3>%s() kfifo_to_user f %d\012\000"
	.align	2
.LC1453:
	.ascii	"<3>%s() wait_event_interruptible f %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_read, %function
conn_gadget_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r3, [r3, #2484]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	str	r2, [sp]
	cmp	r3, #0
	beq	.L18918
	ldr	r3, [r4, #192]
	mov	r5, r2
	cmp	r3, r2
	bls	.L18919
	add	r6, r4, #108
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L18897
	ldr	r3, [r4, #100]
	mov	r7, r1
	cmp	r3, #0
	bne	.L18899
	mov	r3, sp
	bic	r8, r3, #8128
	ldr	r3, [r4, #104]
	bic	r8, r8, #63
.L18898:
	cmp	r3, #0
	beq	.L18904
.L18906:
	mvn	r3, #4
	movw	r0, #:lower16:.LC1450
	ldr	r1, .L18923
	movt	r0, #:upper16:.LC1450
	str	r3, [sp]
	bl	printk
.L18905:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [sp]
.L18893:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L18920:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L18901
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L18902
	bl	schedule
.L18903:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L18920
.L18901:
	add	r1, sp, #4
	mov	r0, r9
	bl	finish_wait
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L18921
.L18899:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L18906
	ldrd	r2, [r4, #168]
	subs	r2, r2, r3
	bne	.L18907
.L18909:
	mov	r3, #0
	movw	r0, #:lower16:.LC1451
	ldr	r1, .L18923
	movt	r0, #:upper16:.LC1451
	str	r3, [sp]
	bl	printk
.L18908:
	mov	r0, r4
	bl	conn_gadget_request_ep_out
	b	.L18905
.L18907:
	cmp	r5, r2
	mov	r1, r7
	movcs	r5, r2
	mov	r3, sp
	mov	r2, r5
	add	r0, r4, #168
	bl	__kfifo_to_user
	cmp	r5, #0
	mov	r2, r0
	beq	.L18909
	cmp	r0, #0
	blt	.L18922
	ldr	r2, [r4, #168]
	ldr	r3, [r4, #196]
	ldr	r1, [r4, #172]
	add	r3, r3, r3, lsr #31
	sub	r2, r2, r1
	cmp	r2, r3, asr #1
	bls	.L18908
	b	.L18905
.L18897:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC1448
	ldr	r1, .L18923
	movt	r0, #:upper16:.LC1448
	bl	printk
	mvn	r0, #15
	b	.L18893
.L18919:
	movw	r0, #:lower16:.LC1447
	ldr	r1, .L18923
	movt	r0, #:upper16:.LC1447
	bl	printk
	mvn	r0, #21
	b	.L18893
.L18918:
	movw	r0, #:lower16:.LC448
	ldr	r1, .L18923
	movt	r0, #:upper16:.LC448
	bl	printk
	mvn	r0, #18
	b	.L18893
.L18922:
	mvn	r3, #13
	movw	r0, #:lower16:.LC1452
	ldr	r1, .L18923
	movt	r0, #:upper16:.LC1452
	str	r3, [sp]
	bl	printk
	b	.L18905
.L18904:
	movw	r0, #:lower16:.LC1449
	ldr	r1, .L18923
	movt	r0, #:upper16:.LC1449
	bl	printk
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L18899
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L18906
	ldr	r0, [r8, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r9, r4, #144
	str	r3, [sp, #4]
	str	r1, [sp, #16]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #20]
	b	.L18903
.L18921:
	ldr	r3, [r4, #104]
	b	.L18898
.L18902:
	mov	r0, r9
	add	r1, sp, #4
	bl	finish_wait
	mov	r2, #65024
	movw	r0, #:lower16:.LC1453
	ldr	r1, .L18923
	movt	r2, 65535
	movt	r0, #:upper16:.LC1453
	bl	printk
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #65024
	movt	r0, 65535
	b	.L18893
.L18924:
	.align	2
.L18923:
	.word	.LANCHOR5+3356
	.fnend
	.size	conn_gadget_read, .-conn_gadget_read
	.section	.rodata.str1.4
	.align	2
.LC1454:
	.ascii	"<3>conn_gadget_function_bind dev: %pK\012\000"
	.align	2
.LC1455:
	.ascii	"%s: create_bulk_endpoints dev: %pK\012\000"
	.align	2
.LC1456:
	.ascii	"<3>usb_ep_autoconfig for ep_in failed\012\000"
	.align	2
.LC1457:
	.ascii	"%s: usb_ep_autoconfig for ep_in got %s\012\000"
	.align	2
.LC1458:
	.ascii	"<3>usb_ep_autoconfig for ep_out failed\012\000"
	.align	2
.LC1459:
	.ascii	"%s: usb_ep_autoconfig for conn_gadget ep_out got %s"
	.ascii	"\012\000"
	.align	2
.LC1460:
	.ascii	"<3>%s() conn_gadget_bind() could not allocate reque"
	.ascii	"sts\012\000"
	.align	2
.LC1461:
	.ascii	"<3>%s speed %s: IN/%s, OUT/%s\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_bind, %function
conn_gadget_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r7, r0
	ldr	r3, [r0, #24]
	movw	r0, #:lower16:.LC1454
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC1454
	mov	r4, r1
	str	r3, [r1, #84]
	bl	printk
	ldrb	r3, [r7, #44]	@ zero_extendqisi2
	cmp	r3, #15
	mvnhi	r0, #18
	bhi	.L18925
	add	r2, r3, #12
	movw	r6, #:lower16:.LANCHOR8
	movt	r6, #:upper16:.LANCHOR8
	movw	r5, #:lower16:.LANCHOR7
	str	r4, [r7, r2, lsl #2]
	ldrh	r2, [r6, #-222]
	movt	r5, #:upper16:.LANCHOR7
	add	r1, r3, #1
	strb	r3, [r5, #-686]
	strb	r1, [r7, #44]
	ldr	r9, [r4, #84]
	tst	r2, #4
	beq	.L18927
	movw	r1, #:lower16:.LC1455
	ldr	r2, .L18965
	mov	r3, r4
	movt	r1, #:upper16:.LC1455
	sub	r0, r6, #240
	bl	__dynamic_pr_debug
.L18927:
	ldr	r1, .L18965+4
	mov	r2, #0
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	bne	.L18928
	movw	r0, #:lower16:.LC1456
	movt	r0, #:upper16:.LC1456
	bl	printk
	mvn	r0, #18
	b	.L18925
.L18928:
	ldrh	r3, [r6, #-198]
	tst	r3, #4
	beq	.L18929
	movw	r1, #:lower16:.LC1457
	ldr	r2, .L18965
	ldr	r0, .L18965+8
	movt	r1, #:upper16:.LC1457
	ldr	r3, [r8, #4]
	bl	__dynamic_pr_debug
.L18929:
	ldr	r1, .L18965+12
	mov	r2, #0
	str	r4, [r8]
	str	r8, [r4, #92]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	bne	.L18930
	movw	r0, #:lower16:.LC1458
	movt	r0, #:upper16:.LC1458
	bl	printk
	mvn	r0, #18
	b	.L18925
.L18930:
	ldrh	r3, [r6, #-174]
	tst	r3, #4
	beq	.L18931
	movw	r1, #:lower16:.LC1459
	ldr	r2, .L18965
	ldr	r0, .L18965+16
	movt	r1, #:upper16:.LC1459
	ldr	r3, [r8, #4]
	bl	__dynamic_pr_debug
.L18931:
	movw	r10, #:lower16:conn_gadget_complete_out
	mov	r6, #4
	str	r4, [r8]
	movt	r10, #:upper16:conn_gadget_complete_out
	add	r9, r4, #128
	str	r8, [r4, #96]
.L18934:
	ldr	r0, [r4, #96]
	ldr	r1, [r4, #192]
	cmp	r1, #0
	moveq	r1, #4096
	bl	conn_gadget_request_new
	subs	r2, r0, #0
	beq	.L18933
	mov	r1, r9
	mov	r0, r4
	str	r10, [r2, #28]
	bl	conn_gadget_req_put
	subs	r6, r6, #1
	bne	.L18934
	movw	r6, #:lower16:conn_gadget_complete_in
	mov	r8, #4
	movt	r6, #:upper16:conn_gadget_complete_in
	add	r9, r4, #120
.L18936:
	ldr	r0, [r4, #92]
	ldr	r1, [r4, #192]
	cmp	r1, #0
	moveq	r1, #4096
	bl	conn_gadget_request_new
	subs	r2, r0, #0
	beq	.L18933
	mov	r1, r9
	mov	r0, r4
	str	r6, [r2, #28]
	bl	conn_gadget_req_put
	subs	r8, r8, #1
	bne	.L18936
	b	.L18963
.L18933:
	movw	r0, #:lower16:.LC1460
	ldr	r1, .L18965
	movt	r0, #:upper16:.LC1460
	bl	printk
	mvn	r0, #0
	b	.L18925
.L18963:
	ldr	r3, [r7, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	bls	.L18938
	ldrb	r1, [r5, #-674]	@ zero_extendqisi2
	ldrb	r2, [r5, #-662]	@ zero_extendqisi2
	strb	r1, [r5, #-650]
	strb	r2, [r5, #-638]
.L18938:
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L18939
	ldrb	r1, [r5, #-674]	@ zero_extendqisi2
	ldrb	r2, [r5, #-662]	@ zero_extendqisi2
	strb	r1, [r5, #-626]
	strb	r2, [r5, #-614]
.L18939:
	ldr	r3, [r3]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	movwhi	r1, #:lower16:.LC990
	movthi	r1, #:upper16:.LC990
	bhi	.L18940
	movw	r3, #:lower16:.LC976
	movw	r1, #:lower16:.LC975
	movt	r3, #:upper16:.LC976
	cmp	r2, #2
	movt	r1, #:upper16:.LC975
	movls	r1, r3
.L18940:
	movw	r0, #:lower16:.LC1461
	ldr	r2, [r4]
	ldr	ip, [r4, #96]
	movt	r0, #:upper16:.LC1461
	ldr	r3, [r4, #92]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	ldr	r3, [r3, #4]
	bl	printk
	mov	r0, #0
.L18925:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
.L18966:
	.align	2
.L18965:
	.word	.LANCHOR5+3376
	.word	.LANCHOR7-676
	.word	.LANCHOR8-216
	.word	.LANCHOR7-664
	.word	.LANCHOR8-192
	.fnend
	.size	conn_gadget_function_bind, .-conn_gadget_function_bind
	.text
	.align	2
	.global	conn_gadget_req_get
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_get, %function
conn_gadget_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r4, r3
	moveq	r4, #0
	beq	.L18968
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del
.L18968:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	conn_gadget_req_get, .-conn_gadget_req_get
	.section	.rodata.str1.4
	.align	2
.LC1462:
	.ascii	"<3>conn_gadget_function_unbind\012\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_unbind, %function
conn_gadget_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC1462
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	movt	r0, #:upper16:.LC1462
	.pad #12
	sub	sp, sp, #12
	mov	r4, r1
	bl	printk
	movw	r0, #:lower16:.LANCHOR8
	ldr	r1, [r4, #100]
	mov	ip, #0
	movt	r0, #:upper16:.LANCHOR8
	mov	r2, #1
	ldrh	r3, [r0, #-150]
	str	ip, [r4, #100]
	str	r2, [r4, #104]
	str	r1, [r4, #212]
	tst	r3, #4
	beq	.L18972
	ldr	r3, .L18986
	movw	r1, #:lower16:.LC246
	sub	r0, r0, #168
	movt	r1, #:upper16:.LC246
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
.L18972:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #200
	bl	__wake_up
	add	r5, r4, #128
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #144
	bl	__wake_up
.L18973:
	mov	r1, r5
	mov	r0, r4
	bl	conn_gadget_req_get
	cmp	r0, #0
	beq	.L18983
	ldr	r1, [r4, #96]
	bl	conn_gadget_request_free.part.0
	b	.L18973
.L18983:
	add	r5, r4, #136
.L18975:
	mov	r1, r5
	mov	r0, r4
	bl	conn_gadget_req_get
	cmp	r0, #0
	beq	.L18984
	ldr	r1, [r4, #96]
	bl	conn_gadget_request_free.part.0
	b	.L18975
.L18984:
	add	r5, r4, #120
.L18977:
	mov	r1, r5
	mov	r0, r4
	bl	conn_gadget_req_get
	cmp	r0, #0
	beq	.L18985
	ldr	r1, [r4, #92]
	bl	conn_gadget_request_free.part.0
	b	.L18977
.L18985:
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L18987:
	.align	2
.L18986:
	.word	.LANCHOR5+3412
	.fnend
	.size	conn_gadget_function_unbind, .-conn_gadget_function_unbind
	.text
	.align	2
	.global	conn_gadget_req_move
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_move, %function
conn_gadget_req_move:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #88
	add	r4, r3, #36
	mov	r0, r5
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r4
	bl	__list_del_entry
	mov	r0, r4
	mov	r2, r7
	ldr	r1, [r7, #4]
	bl	__list_add
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	conn_gadget_req_move, .-conn_gadget_req_move
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_complete_out, %function
conn_gadget_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r1
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r3, #2484]
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r1, #44]
	ldr	r3, [r4, #192]
	ldr	r2, [r4, #196]
	cmp	r1, #0
	add	r3, r3, r3, lsl #2
	sub	r6, r2, r3
	bne	.L19002
	add	r0, r4, #168
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	__kfifo_in
	ldr	r3, [r4, #168]
	ldr	r2, [r4, #172]
	sub	r3, r3, r2
	cmp	r6, r3
	bls	.L19003
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	blt	.L19004
.L18995:
	add	r0, r4, #144
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__wake_up
.L19003:
	add	r6, r4, #88
	add	r5, r5, #36
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r0, r5
	bl	__list_del_entry
	mov	r0, r5
	add	r2, r4, #128
	ldr	r1, [r4, #132]
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L18995
.L19002:
	cmn	r1, #104
	beq	.L18993
	movw	r0, #:lower16:.LANCHOR8
	mov	r2, #1
	movt	r0, #:upper16:.LANCHOR8
	ldrh	r3, [r0, #-126]
	str	r2, [r4, #104]
	tst	r3, #4
	beq	.L18993
	ldr	r3, .L19005
	movw	r1, #:lower16:.LC246
	sub	r0, r0, #144
	movt	r1, #:upper16:.LC246
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
.L18993:
	movw	r0, #:lower16:.LC759
	ldr	r1, .L19005
	movt	r0, #:upper16:.LC759
	ldr	r2, [r5, #44]
	bl	printk
.L19001:
	mov	r3, r5
	add	r2, r4, #128
	add	r1, r4, #136
	mov	r0, r4
	bl	conn_gadget_req_move
	b	.L18995
.L19004:
	movw	r0, #:lower16:.LC1441
	ldr	r1, .L19005
	mov	r2, r5
	movt	r0, #:upper16:.LC1441
	bl	printk
	b	.L19001
.L19006:
	.align	2
.L19005:
	.word	.LANCHOR5+3440
	.fnend
	.size	conn_gadget_complete_out, .-conn_gadget_complete_out
	.align	2
	.global	conn_gadget_empty
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_empty, %function
conn_gadget_empty:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r1, r0
	mov	r0, r5
	sub	r4, r3, r4
	clz	r4, r4
	lsr	r4, r4, #5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	conn_gadget_empty, .-conn_gadget_empty
	.align	2
	.global	ncm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_bind_config, %function
ncm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	movw	r0, #:lower16:.LC506
	strd	r8, [sp, #16]
	movt	r0, #:upper16:.LC506
	str	lr, [sp, #24]
	ldr	r8, [r6, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r8]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L19016
	movw	r0, #:lower16:.LC509
	mov	r1, r4
	movt	r0, #:upper16:.LC509
	bl	strcmp
	cmp	r0, #0
	cmpne	r5, #0
	beq	.L19016
	movw	r7, #:lower16:.LANCHOR0
	movt	r7, #:upper16:.LANCHOR0
	ldrb	r3, [r7, #1528]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L19011
	ldrb	r3, [r8, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19013
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r8, #48]
	ldr	r2, [r6, #24]
	strb	r3, [r7, #1528]
	strb	r3, [r7, #3588]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19013
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r7, #1544]
	strb	r3, [r7, #3608]
	strb	r3, [r7, #3620]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19013
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR7
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR7
	strb	r3, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r2, #-601]
	strb	r3, [r7, #1536]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19013
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r7, #1552]
	strb	r3, [r7, #3579]
.L19011:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L19017
	mov	r2, #192
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L19023
.L19014:
	ldrb	r3, [r5, #5]	@ zero_extendqisi2
	add	r9, r4, #150
	movw	r2, #:lower16:.LC1379
	ldrb	r8, [r5, #4]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1379
	mov	r0, r9
	ldrb	lr, [r5, #3]	@ zero_extendqisi2
	ldrb	r1, [r5, #2]	@ zero_extendqisi2
	str	r3, [sp, #16]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	ldrb	r3, [r5]	@ zero_extendqisi2
	str	r8, [sp, #12]
	mov	r8, #0
	str	ip, [sp]
	stmib	sp, {r1, lr}
	mov	r1, #14
	bl	snprintf
	movw	r2, #:lower16:ncm_bind
	ldr	r1, .L19024
	movw	ip, #:lower16:ncm_set_alt
	movt	r2, #:upper16:ncm_bind
	movt	ip, #:upper16:ncm_set_alt
	ldr	r5, [r7, #36]
	ldr	lr, .L19024+4
	movw	r3, #:lower16:.LC765
	mov	r0, r6
	str	r2, [r4, #32]
	movw	r2, #:lower16:ncm_unbind
	movt	r3, #:upper16:.LC765
	movt	r2, #:upper16:ncm_unbind
	str	r9, [r7, #1540]
	str	r1, [r4, #176]
	movw	r1, #:lower16:ncm_get_alt
	str	ip, [r4, #40]
	movw	ip, #:lower16:ncm_disable
	movt	r1, #:upper16:ncm_get_alt
	movt	ip, #:upper16:ncm_disable
	stm	r4, {r3, lr}
	str	r2, [r4, #36]
	movw	r2, #:lower16:ncm_setup
	movt	r2, #:upper16:ncm_setup
	str	r5, [r4, #108]
	mov	r5, #16384
	str	ip, [r4, #48]
	mov	ip, #15
	str	r1, [r4, #44]
	movw	r1, #:lower16:ncm_wrap_ntb
	str	r2, [r4, #52]
	movw	r2, #:lower16:ncm_unwrap_ntb
	movt	r1, #:upper16:ncm_wrap_ntb
	movt	r2, #:upper16:ncm_unwrap_ntb
	strh	ip, [r4, #98]	@ movhi
	movw	ip, #9014
	str	r8, [r4, #100]
	str	r5, [r4, #112]
	mov	r5, #1
	strb	r8, [r4, #180]
	strb	r5, [r4, #104]
	str	r1, [r4, #128]
	mov	r1, r4
	str	r2, [r4, #132]
	strh	ip, [r4, #182]	@ movhi
	str	r8, [r4, #184]
	str	r8, [r4, #188]
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L19009
	mov	r0, r4
	str	r8, [r7, #1540]
	bl	kfree
	b	.L19009
.L19016:
	mvn	r5, #21
.L19009:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L19017:
	mov	r4, #16
	b	.L19014
.L19013:
	mvn	r5, #18
	b	.L19009
.L19023:
	mvn	r5, #11
	b	.L19009
.L19025:
	.align	2
.L19024:
	.word	.LANCHOR0+48
	.word	.LANCHOR7-588
	.fnend
	.size	ncm_bind_config, .-ncm_bind_config
	.section	.rodata.str1.4
	.align	2
.LC1463:
	.ascii	"<3>%s: %s: ncm_pdata\012\000"
	.align	2
.LC1464:
	.ascii	"<7>usb: %s MAC:%02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.align	2
.LC1465:
	.ascii	"<7>usb: %s before MAC:%02X:%02X:%02X:%02X:%02X:%02X"
	.ascii	"\012\000"
	.align	2
.LC1466:
	.ascii	"<7>usb: %s after MAC:%02X:%02X:%02X:%02X:%02X:%02X\012"
	.ascii	"\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_bind_config, %function
ncm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #4]
	.pad #16
	sub	sp, sp, #16
	cmp	r4, #0
	beq	.L19027
	mov	r3, #0
	mov	r2, #2
	ldr	ip, .L19037
	movw	lr, #52429
	mov	r5, r1
	movt	lr, 52428
	str	r2, [r4]	@ unaligned
	mov	r2, r3
	strb	r3, [r4, #4]
	strb	r3, [r4, #5]
	b	.L19028
.L19032:
	sub	r3, r2, r3
	add	r2, r2, #1
	add	r3, r3, #1
	cmp	r2, #256
	ldrb	r1, [r4, r3]	@ zero_extendqisi2
	eor	r0, r0, r1
	strb	r0, [r4, r3]
	beq	.L19033
.L19028:
	ldrb	r0, [ip], #1	@ zero_extendqisi2
	umull	r1, r3, lr, r2
	cmp	r0, #0
	mov	r1, r3
	bic	r3, r3, #3
	add	r3, r3, r1, lsr #2
	bne	.L19032
.L19033:
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1464
	mov	r2, #2
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1464
	ldr	r1, .L19037+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1465
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1465
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L19037+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r5, #24]
	movw	r2, #:lower16:.LC765
	mov	r1, r4
	movt	r2, #:upper16:.LC765
	ldr	r0, [r3]
	bl	gether_setup_name
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	mov	r6, r0
	movw	r0, #:lower16:.LC1466
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1466
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L19037+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	cmp	r6, #0
	beq	.L19035
	ldr	r2, .L19037+4
	movw	r0, #:lower16:.LC1403
	movt	r0, #:upper16:.LC1403
	mov	r1, r2
	bl	printk
	b	.L19026
.L19027:
	ldr	r2, .L19037+4
	movw	r0, #:lower16:.LC1463
	mvn	r6, #0
	movt	r0, #:upper16:.LC1463
	mov	r1, r2
	bl	printk
.L19026:
	mov	r0, r6
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19035:
	mov	r1, r4
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	ncm_bind_config
.L19038:
	.align	2
.L19037:
	.word	.LANCHOR1+2220
	.word	.LANCHOR5+3468
	.fnend
	.size	ncm_function_bind_config, .-ncm_function_bind_config
	.section	.rodata.str1.4
	.align	2
.LC1467:
	.ascii	"<7>usb: %s ncm ready (%s)\012\000"
	.text
	.align	2
	.global	is_ncm_ready
	.syntax unified
	.arm
	.fpu softvfp
	.type	is_ncm_ready, %function
is_ncm_ready:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC1342
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	r1, #:upper16:.LC1342
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	strcmp
	cmp	r0, #0
	beq	.L19040
	movw	r1, #:lower16:.LC765
	mov	r0, r4
	movt	r1, #:upper16:.LC765
	bl	strcmp
	cmp	r0, #0
	movne	r5, #0
	bne	.L19041
.L19040:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r5, [r3, #3560]	@ zero_extendqisi2
	cmp	r5, #0
	bne	.L19050
.L19041:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19050:
	movw	r0, #:lower16:.LC1467
	ldr	r1, .L19051
	mov	r2, r4
	movt	r0, #:upper16:.LC1467
	bl	printk
	b	.L19041
.L19052:
	.align	2
.L19051:
	.word	.LANCHOR5+3496
	.fnend
	.size	is_ncm_ready, .-is_ncm_ready
	.section	.rodata.str1.4
	.align	2
.LC1468:
	.ascii	"<7>usb: %s idProduct=0x%x, DeviceClass=0x%x\012\000"
	.section	.text.unlikely
	.align	2
	.global	set_ncm_device_descriptor
	.syntax unified
	.arm
	.fpu softvfp
	.type	set_ncm_device_descriptor, %function
set_ncm_device_descriptor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	ip, r0
	mov	r2, #93
	ldr	r1, .L19055
	mov	r3, #2
	str	lr, [sp, #-4]!
	.save {lr}
	mov	lr, #104
	movw	r0, #:lower16:.LC1468
	strb	r3, [ip, #4]
	movt	r0, #:upper16:.LC1468
	strb	r2, [ip, #10]
	movw	r2, #26717
	strb	lr, [ip, #11]
	ldr	lr, [sp], #4
	b	printk
.L19056:
	.align	2
.L19055:
	.word	.LANCHOR5+3512
	.fnend
	.size	set_ncm_device_descriptor, .-set_ncm_device_descriptor
	.section	.rodata.str1.4
	.align	2
.LC1469:
	.ascii	"<7>usb: %s old status=%d, new status=%d\012\000"
	.text
	.align	2
	.global	set_ncm_ready
	.syntax unified
	.arm
	.fpu softvfp
	.type	set_ncm_ready, %function
set_ncm_ready:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:.LANCHOR1
	mov	r4, r0
	movt	r5, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldrb	r2, [r5, #3560]	@ zero_extendqisi2
	str	lr, [sp, #12]
	cmp	r2, r0
	bne	.L19061
.L19058:
	cmp	r4, #0
	bne	.L19057
	ldr	r3, .L19062
	movw	r2, #3666
	strh	r4, [r5, r2]	@ movhi
	strh	r4, [r3]	@ movhi
.L19057:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19061:
	movw	r0, #:lower16:.LC1469
	ldr	r1, .L19062+4
	mov	r3, r4
	movt	r0, #:upper16:.LC1469
	bl	printk
	ldr	r0, [r5, #3536]
	strb	r4, [r5, #3560]
	bl	schedule_work
	b	.L19058
.L19063:
	.align	2
.L19062:
	.word	.LANCHOR1+3664
	.word	.LANCHOR5+3540
	.fnend
	.size	set_ncm_ready, .-set_ncm_ready
	.section	.rodata.str1.4
	.align	2
.LC1470:
	.ascii	"%x\000"
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	terminal_version_store, %function
terminal_version_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	movw	r1, #:lower16:.LC1470
	.pad #12
	sub	sp, sp, #12
	mov	r4, r2
	mov	r0, r2
	movt	r1, #:upper16:.LC1470
	add	r2, sp, #4
	mov	r5, r3
	bl	sscanf
	ldr	r3, .L19068
	movw	r0, #:lower16:.LC79
	mov	r2, r4
	ldr	ip, [sp, #4]
	movt	r0, #:upper16:.LC79
	ldr	r1, .L19068+4
	strh	ip, [r3]	@ movhi
	bl	printk
	ldr	r0, [sp, #4]
	cmp	r0, #0
	movne	r0, #1
	bl	set_ncm_ready
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L19069:
	.align	2
.L19068:
	.word	.LANCHOR1+3664
	.word	.LANCHOR5+3556
	.fnend
	.size	terminal_version_store, .-terminal_version_store
	.section	.rodata.str1.4
	.align	2
.LC1471:
	.ascii	"<7>usb: %s ver=0x%x vendor_id=0x%x\012\000"
	.align	2
.LC1472:
	.ascii	"<7>usb: %s failed usb_ep_queue\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_setup, %function
android_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r4, r3
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	stmib	sp, {r0, r3}
	add	r0, r0, #32
	bl	dev_get_drvdata
	mov	r2, r4
	mov	r7, r0
	ldr	r9, [r2, #3232]!
	cmp	r9, r2
	sub	r9, r9, #512
	bne	.L19072
	b	.L19071
.L19140:
	ldr	r9, [r9, #512]
	cmp	r9, r2
	sub	r9, r9, #512
	beq	.L19071
.L19072:
	ldr	r3, [r9, #8]
	cmp	r7, r3
	bne	.L19140
.L19071:
	ldr	r3, [r7, #4]
	movw	r2, #:lower16:composite_setup_complete
	mov	r0, #0
	movt	r2, #:upper16:composite_setup_complete
	mov	fp, r9
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	str	r0, [r3, #4]
	str	r2, [r3, #28]
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #4]
	str	r7, [r3]
	ldr	r10, [fp, #500]!
	cmp	fp, r10
	sub	r10, r10, #120
	beq	.L19073
	mvn	r5, #94
.L19077:
	mov	r6, r10
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L19074
.L19076:
	ldr	r0, [r4]
	mov	r2, r8
	mov	r1, r7
	ldr	r3, [r0, #48]
	cmp	r3, #0
	beq	.L19075
	blx	r3
	subs	r5, r0, #0
	bge	.L19074
.L19075:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L19076
.L19074:
	ldr	r10, [r10, #120]
	cmp	fp, r10
	sub	r10, r10, #120
	bne	.L19077
	ldr	r6, [r7, #12]
	subs	r6, r6, #0
	movne	r6, #1
	cmp	r5, #0
	blt	.L19079
.L19080:
	add	r4, r7, #60
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r9, #48]	@ zero_extendqisi2
	mov	r1, r0
	cmp	r3, #0
	beq	.L19141
	ldrb	r3, [r8, #1]	@ zero_extendqisi2
	cmp	r3, #9
	beq	.L19108
.L19139:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
.L19070:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L19141:
	mov	r3, #1
	mov	r0, r4
	strb	r3, [r9, #48]
	bl	_raw_spin_unlock_irqrestore
.L19107:
	add	r0, r9, #176
	bl	schedule_work
	b	.L19070
.L19073:
	ldr	r6, [r7, #12]
	subs	r6, r6, #0
	movne	r6, #1
.L19079:
	ldrb	r2, [r8]	@ zero_extendqisi2
	ldrh	ip, [r8, #4]	@ unaligned
	ldrh	r1, [r8, #2]	@ unaligned
	ldrb	r3, [r8, #1]	@ zero_extendqisi2
	and	r0, r2, #96
	cmp	r0, #64
	uxth	r10, ip
	uxth	fp, r1
	bne	.L19081
	cmp	r3, #240
	beq	.L19142
.L19081:
	ldr	r1, [sp, #8]
	cmp	r2, #64
	ldr	r4, [r1, #2488]
	beq	.L19143
	cmp	r3, #51
	cmpeq	r2, #192
	bne	.L19089
	ldr	r3, [r7, #4]
	mov	r5, #2
	mov	r1, #256
	add	r0, r4, #101
	ldr	r3, [r3]
	strh	r5, [r3]	@ movhi
	bl	__memzero
	add	r0, r4, #356
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #612
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #868
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #1120
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	add	r0, r4, #1376
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	mov	r2, #0
	mov	r3, r5
	str	r2, [r4, #1644]
	str	r2, [r4, #1648]
.L19084:
	ldr	r1, [r7, #4]
	mov	r2, #32
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	bfc	r0, #1, #1
	strb	r0, [r1, #26]
	ldr	r1, [r7, #4]
	str	r3, [r1, #4]
	ldr	r3, [r7]
	ldr	r1, [r7, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L19080
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC946
	ldr	r2, .L19153
	movt	r1, #:upper16:.LC946
	add	r0, r0, #32
	bl	dev_err
.L19089:
	mov	r1, r8
	ldr	r0, [sp, #4]
	bl	composite_setup
	mov	r5, r0
	b	.L19080
.L19143:
	cmp	r3, #53
	beq	.L19144
	ldrh	r2, [r8, #6]	@ unaligned
	cmp	r3, #52
	str	r2, [sp, #8]
	beq	.L19145
	orr	r2, r10, r2
	cmp	r3, #58
	cmpeq	r2, #0
	moveq	r3, #0
	streq	fp, [r4, #1648]
	beq	.L19084
	cmp	r3, #54
	beq	.L19146
	cmp	r3, #55
	beq	.L19147
	cmp	r3, #56
	beq	.L19148
	cmp	r3, #57
	bne	.L19089
	add	r10, r4, #88
	add	r4, r4, #1760
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #4]
	add	r4, r4, #4
	mov	r1, r0
	cmp	r4, r5
	bne	.L19105
	b	.L19103
.L19149:
	ldr	r5, [r5]
	cmp	r4, r5
	beq	.L19103
.L19105:
	ldr	r3, [r5, #16]
	cmp	fp, r3
	bne	.L19149
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	beq	.L19089
	ldr	r1, [r7, #4]
	movw	r2, #:lower16:acc_complete_send_hid_event
	ldr	r3, [sp, #8]
	movt	r2, #:upper16:acc_complete_send_hid_event
	str	r5, [r1, #32]
	ldr	r1, [r7, #4]
	str	r2, [r1, #28]
	b	.L19084
.L19108:
	ldr	r3, [r7, #12]
	cmp	r3, #0
	beq	.L19139
	cmp	r6, #0
	mov	r0, r4
	beq	.L19111
	bl	_raw_spin_unlock_irqrestore
	b	.L19070
.L19111:
	bl	_raw_spin_unlock_irqrestore
	b	.L19107
.L19145:
	str	r10, [r4, #1640]
	ldr	r1, [r7]
	mov	r3, r2
	movw	r2, #:lower16:acc_complete_set_string
	movt	r2, #:upper16:acc_complete_set_string
	ldr	r1, [r1, #4]
	str	r4, [r1]
	ldr	r1, [r7, #4]
	str	r2, [r1, #28]
	b	.L19084
.L19146:
	mov	r2, r10
	mov	r1, fp
	mov	r0, r4
	bl	acc_register_hid
	subs	r3, r0, #0
	blt	.L19089
	b	.L19084
.L19144:
	mov	r3, #1
	mov	r0, #200
	str	r3, [r4, #1644]
	bl	msecs_to_jiffies
	mov	r1, r0
	add	r0, r4, #1696
	add	r0, r0, #4
	bl	schedule_delayed_work
	mov	r3, #0
	b	.L19084
.L19147:
	add	r10, r4, #88
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1764]
	add	r2, r4, #1760
	mov	r5, r0
	add	r2, r2, #4
	cmp	r2, r3
	mov	r0, r3
	bne	.L19093
	b	.L19091
.L19150:
	ldr	r3, [r3]
	cmp	r2, r3
	mov	r0, r3
	beq	.L19091
.L19093:
	ldr	r1, [r3, #16]
	cmp	fp, r1
	bne	.L19150
	cmp	r3, #0
	beq	.L19091
.L19094:
	str	r0, [sp, #8]
	bl	__list_del_entry
	add	r1, r4, #1776
	ldr	r0, [sp, #8]
	add	r1, r1, #4
	ldr	r2, [r4, #1780]
	bl	__list_add
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #1744
	add	r0, r0, #4
	bl	schedule_work
	mov	r3, #0
	b	.L19084
.L19142:
	ldr	r4, .L19153+4
	movw	r10, #3666
	mov	r0, #1
	ldr	fp, [sp, #8]
	mov	r5, #0
	strh	r1, [r4]	@ movhi
	strh	ip, [fp, r10]	@ movhi
	bl	set_ncm_ready
	movw	r0, #:lower16:.LC1471
	ldrh	r3, [fp, r10]
	ldrh	r2, [r4]
	movt	r0, #:upper16:.LC1471
	ldr	r1, .L19153+8
	bl	printk
	ldr	r3, [r7, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r7, #4]
	str	r5, [r3, #4]
	ldr	r3, [r7]
	ldr	r1, [r7, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, r5
	bge	.L19080
	movw	r0, #:lower16:.LC1472
	ldr	r1, .L19153+8
	movt	r0, #:upper16:.LC1472
	bl	printk
	b	.L19080
.L19103:
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	b	.L19089
.L19148:
	add	r3, r4, #88
	add	r4, r4, #1760
	mov	r0, r3
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #12]
	add	r4, r4, #12
	mov	r1, r0
	ldr	r3, [sp, #12]
	cmp	r4, r5
	bne	.L19101
	b	.L19099
.L19151:
	ldr	r5, [r5]
	cmp	r4, r5
	beq	.L19099
.L19101:
	ldr	r2, [r5, #16]
	cmp	fp, r2
	bne	.L19151
	mov	r0, r3
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	beq	.L19089
	ldr	r3, [r5, #28]
	cmp	r10, r3
	bne	.L19089
	ldr	r0, [sp, #8]
	ldr	r3, [r5, #24]
	add	r10, r0, r10
	cmp	r10, r3
	bgt	.L19089
	ldr	r1, [r7, #4]
	movw	r2, #:lower16:acc_complete_set_hid_report_desc
	mov	r3, r0
	movt	r2, #:upper16:acc_complete_set_hid_report_desc
	str	r5, [r1, #32]
	ldr	r1, [r7, #4]
	str	r2, [r1, #28]
	b	.L19084
.L19091:
	ldr	r3, [r4, #1772]
	add	r2, r4, #1760
	add	r2, r2, #12
	cmp	r2, r3
	bne	.L19097
	b	.L19095
.L19152:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L19095
.L19097:
	ldr	r1, [r3, #16]
	cmp	fp, r1
	bne	.L19152
	cmp	r3, #0
	beq	.L19095
	mov	r0, r3
	b	.L19094
.L19099:
	mov	r0, r3
	bl	_raw_spin_unlock_irqrestore
	b	.L19089
.L19095:
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	b	.L19089
.L19154:
	.align	2
.L19153:
	.word	.LANCHOR5-1260
	.word	.LANCHOR1+3664
	.word	.LANCHOR5+3580
	.fnend
	.size	android_setup, .-android_setup
	.section	.rodata.str1.4
	.align	2
.LC1473:
	.ascii	"USB_CONNECTION=READY\000"
	.align	2
.LC1474:
	.ascii	"<6>%s: %s\012\000"
	.align	2
.LC1475:
	.ascii	"<6>%s: %s  canceling the work\012\000"
	.text
	.align	2
	.global	schedule_usb_gadget_connect_work
	.syntax unified
	.arm
	.fpu softvfp
	.type	schedule_usb_gadget_connect_work, %function
schedule_usb_gadget_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC1473
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, #0
	movt	r3, #:upper16:.LC1473
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	stm	sp, {r3, r5}
	bne	.L19167
.L19155:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19167:
	ldr	r2, .L19168
	movw	r0, #:lower16:.LC1474
	add	r6, r4, #448
	movt	r0, #:upper16:.LC1474
	mov	r1, r2
	bl	printk
	mov	r0, r6
	bl	work_busy
	cmp	r0, r5
	beq	.L19158
	add	r0, r4, #464
	bl	del_timer_sync
	cmp	r0, r5
	beq	.L19159
	mov	r0, r5
	mov	r1, r6
	bl	_clear_bit
.L19159:
	ldr	r2, .L19168
	movw	r0, #:lower16:.LC1475
	movt	r0, #:upper16:.LC1475
	mov	r1, r2
	bl	printk
.L19158:
	ldr	r0, [r4, #12]
	mov	r2, sp
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	mov	r3, #0
	mov	r0, #1
	str	r3, [r4, #496]
	bl	msecs_to_jiffies
	mov	r1, r0
	mov	r0, r6
	bl	schedule_delayed_work
	b	.L19155
.L19169:
	.align	2
.L19168:
	.word	.LANCHOR5+3604
	.fnend
	.size	schedule_usb_gadget_connect_work, .-schedule_usb_gadget_connect_work
	.section	.rodata.str1.4
	.align	2
.LC1476:
	.ascii	"<3>usb: %s MAC host is always disabled \012\000"
	.align	2
.LC1477:
	.ascii	"<6>usb: %s ignore!! usb30en(%d), value(%d)\012\000"
	.align	2
.LC1478:
	.ascii	"<7>usb: %s B4 disconectng gadget\012\000"
	.align	2
.LC1479:
	.ascii	"<7>usb: %s after usb_gadget_connect\012\000"
	.align	2
.LC1480:
	.ascii	"<3>usb: %s Failed to set the usb30_en value\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb30en_store, %function
usb30en_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r2
	str	r6, [sp, #8]
	mov	r6, r3
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	mov	r5, r0
	bl	get_host_os_type
	subs	r3, r0, #0
	beq	.L19190
	movw	r1, #:lower16:.LC450
	mov	r0, r4
	movt	r1, #:upper16:.LC450
	add	r2, sp, #4
	bl	sscanf
	cmp	r0, #1
	bne	.L19173
	ldr	r1, [r5, #8]
	cmp	r1, #0
	beq	.L19173
	movw	r4, #:lower16:.LANCHOR1
	ldr	r2, [sp, #4]
	movt	r4, #:upper16:.LANCHOR1
	ldrb	r3, [r4, #3226]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L19191
	uxtb	r2, r2
	strb	r2, [r4, #3226]
	ldr	r0, [r1]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L19175
	mov	r1, #0
	blx	r3
	ldr	r3, [r5, #8]
	ldrb	r2, [r4, #3226]	@ zero_extendqisi2
	ldr	r0, [r3]
.L19175:
	cmp	r2, #0
	movne	r1, #5
	moveq	r1, #3
	bl	sec_set_speedlimit
	movw	r0, #:lower16:.LC1478
	ldr	r1, .L19193
	movt	r0, #:upper16:.LC1478
	bl	printk
	mov	r0, #200
	bl	msleep
	ldrb	r3, [r4, #3226]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L19192
	ldr	r3, [r5, #8]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L19178
	mov	r1, #1
	blx	r3
.L19178:
	movw	r0, #:lower16:.LC1479
	ldr	r1, .L19193
	movt	r0, #:upper16:.LC1479
	bl	printk
.L19170:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19192:
	mov	r0, r5
	bl	schedule_usb_gadget_connect_work
	b	.L19178
.L19191:
	movw	r0, #:lower16:.LC1477
	ldr	r1, .L19193
	mov	r2, r3
	movt	r0, #:upper16:.LC1477
	bl	printk
	b	.L19170
.L19173:
	movw	r0, #:lower16:.LC1480
	ldr	r1, .L19193
	mvn	r6, #0
	movt	r0, #:upper16:.LC1480
	bl	printk
	b	.L19170
.L19190:
	movw	r2, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1476
	ldr	r1, .L19193
	movt	r2, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1476
	strb	r3, [r2, #3226]
	bl	printk
	b	.L19170
.L19194:
	.align	2
.L19193:
	.word	.LANCHOR5+3640
	.fnend
	.size	usb30en_store, .-usb30en_store
	.section	.rodata.str1.4
	.align	2
.LC1481:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/android.c\000"
	.align	2
.LC1482:
	.ascii	"<3>%s: %s: usb_add_config failed : err: %d\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_enable, %function
android_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r6, [r0, #8]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L19362
	sub	r5, r5, #1
	mov	r7, r0
	cmp	r5, #0
	str	r5, [r0, #20]
	movne	r5, #0
	bne	.L19195
	mov	r8, r7
	ldr	r4, [r8, #500]!
	cmp	r8, r4
	sub	r4, r4, #120
	beq	.L19198
	ldr	r9, .L19378
	movw	r3, #:lower16:.LC1077
	movt	r3, #:upper16:.LC1077
	str	r3, [sp, #20]
.L19236:
	ldrh	r2, [r9]
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L19363
.L19199:
	cmp	r3, #0
	beq	.L19364
	mov	r2, r6
	ldr	r1, [r2, #36]!
	cmp	r2, r1
	sub	r1, r1, #28
	bne	.L19205
	b	.L19203
.L19365:
	ldr	r1, [r1, #28]
	cmp	r2, r1
	sub	r1, r1, #28
	beq	.L19203
.L19205:
	ldrb	r0, [r1, #20]	@ zero_extendqisi2
	cmp	r0, r3
	bne	.L19365
	ldr	r2, .L19378+4
	ldrh	r2, [r2]
	tst	r2, #4
	beq	.L19366
	ldr	ip, [r6]
	mvn	r5, #15
.L19201:
	ldr	lr, [r4]
	movw	r2, #:lower16:.LC1080
	add	r1, ip, #32
	ldr	r0, .L19378+8
	movt	r2, #:upper16:.LC1080
	stm	sp, {r3, r5}
	mov	r3, lr
	bl	__dynamic_dev_dbg
.L19235:
	cmp	r5, #0
	blt	.L19202
.L19232:
	ldr	r4, [r4, #120]
	cmp	r8, r4
	sub	r4, r4, #120
	bne	.L19236
.L19198:
	mov	r0, r7
	bl	schedule_usb_gadget_connect_work
.L19195:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L19364:
	ldr	r2, .L19378+4
	mvn	r5, #21
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L19239
.L19202:
	ldr	r2, .L19378+12
	movw	r0, #:lower16:.LC1482
	mov	r3, r5
	movt	r0, #:upper16:.LC1482
	mov	r1, r2
	bl	printk
	b	.L19195
.L19203:
	add	r10, r4, #28
	str	r6, [r4, #24]
	ldr	r1, [r6, #40]
	mov	r0, r10
	mov	fp, #0
	bl	__list_add
	add	r2, r4, #36
	mov	r1, #64
	add	r0, r4, #48
	str	r2, [r4, #36]
	str	r2, [r4, #40]
	strb	fp, [r4, #44]
	bl	__memzero
	mov	r0, r4
	bl	android_bind_config
	subs	r5, r0, #0
	blt	.L19367
	ldr	r3, .L19378+16
	ldr	ip, [r6]
	ldrh	r3, [r3, #2]
	tst	r3, #4
	bne	.L19368
.L19209:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L19213
	ldr	r0, .L19378+20
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L19369
.L19213:
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L19214
	ldr	r0, .L19378+20
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L19370
.L19214:
	ldr	r3, [r4, #56]
	cmp	r3, #0
	beq	.L19215
	ldr	r0, .L19378+20
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L19371
.L19215:
	ldr	r3, [r4, #60]
	cmp	r3, #0
	beq	.L19216
	ldr	r0, .L19378+20
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L19372
.L19216:
	ldr	r3, [r4, #64]
	cmp	r3, #0
	beq	.L19217
	ldr	r0, .L19378+20
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L19373
.L19217:
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L19218
	ldr	r0, .L19378+20
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L19374
.L19218:
	ldr	r3, [r4, #72]
	cmp	r3, #0
	beq	.L19219
	ldr	r0, .L19378+20
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L19375
.L19220:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L19221
	ldr	r0, .L19378+20
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L19376
.L19222:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L19224
.L19225:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L19226
	ldr	r0, .L19378+20
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L19377
.L19227:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L19229
.L19230:
	mov	r0, ip
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	beq	.L19234
.L19207:
	mov	r1, #0
.L19233:
	ldr	r2, [r3, #12]
	str	r1, [r3]
	cmp	r0, r2
	sub	r3, r2, #12
	bne	.L19233
.L19234:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	cmp	r5, #0
	str	r2, [r3, #3584]
	beq	.L19232
	ldr	r3, .L19378+4
	ldrh	r3, [r3]
	tst	r3, #4
	beq	.L19235
	ldr	ip, [r6]
.L19238:
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	b	.L19201
.L19363:
	ldr	r1, [r6]
	str	r4, [sp, #4]
	ldr	ip, [r4]
	ldr	r0, .L19378+24
	ldr	r2, [sp, #20]
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	b	.L19199
.L19367:
	mov	r0, r10
	bl	list_del
	str	fp, [r4, #24]
	ldr	ip, [r6]
	mov	r0, ip
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	bne	.L19207
	ldr	r2, .L19378+4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	fp, [r3, #3584]
	ldrh	r3, [r2]
	tst	r3, #4
	bne	.L19238
	b	.L19202
.L19375:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, ip, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1079
	mov	r3, #6
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
.L19219:
	ldr	r3, [r4, #76]
	cmp	r3, #0
	beq	.L19220
	ldr	r0, .L19378+20
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L19220
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, ip, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1079
	mov	r3, #7
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L19220
.L19377:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, ip, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1079
	mov	r3, #12
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
.L19226:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L19228
	ldr	r0, .L19378+20
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L19227
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, ip, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1079
	mov	r3, #13
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
.L19228:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L19229
	ldr	r0, .L19378+20
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L19230
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, ip, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1079
	mov	r3, #14
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
.L19229:
	ldr	r3, [r4, #108]
	cmp	r3, #0
	beq	.L19230
	ldr	r0, .L19378+20
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L19230
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, ip, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1079
	mov	r3, #15
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L19230
.L19376:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, ip, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1079
	mov	r3, #8
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
.L19221:
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L19223
	ldr	r0, .L19378+20
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L19222
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, ip, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1079
	mov	r3, #9
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
.L19223:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L19224
	ldr	r0, .L19378+20
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L19225
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, ip, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1079
	mov	r3, #10
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
.L19224:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L19225
	ldr	r0, .L19378+20
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L19225
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, ip, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1079
	mov	r3, #11
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L19225
.L19239:
	ldr	ip, [r6]
	b	.L19201
.L19362:
	movw	r0, #:lower16:.LC1481
	mov	r1, #500
	movt	r0, #:upper16:.LC1481
	bl	warn_slowpath_null
	b	.L19195
.L19368:
	ldrb	fp, [r4, #45]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC888
	movw	lr, #:lower16:.LC1073
	movt	r2, #:upper16:.LC888
	movt	lr, #:upper16:.LC1073
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1074
	add	r1, ip, #32
	movt	r0, #:upper16:.LC1074
	tst	fp, #1
	moveq	lr, r2
	tst	fp, #2
	moveq	r0, r2
	tst	fp, #4
	moveq	ip, r2
	beq	.L19212
	ldr	fp, [ip, #20]
	movw	r2, #:lower16:.LC1076
	movw	ip, #:lower16:.LC1075
	movt	r2, #:upper16:.LC1076
	movt	ip, #:upper16:.LC1075
	cmp	fp, #2
	movls	ip, r2
.L19212:
	movw	r2, #:lower16:.LC1078
	stm	sp, {r4, lr}
	movt	r2, #:upper16:.LC1078
	str	r0, [sp, #8]
	ldr	r0, .L19378+28
	str	ip, [sp, #12]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L19209
.L19374:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, ip, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1079
	mov	r3, #5
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L19218
.L19373:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, ip, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1079
	mov	r3, #4
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L19217
.L19372:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, ip, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1079
	mov	r3, #3
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L19216
.L19371:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, ip, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1079
	mov	r3, #2
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L19215
.L19370:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, ip, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1079
	mov	r3, #1
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L19214
.L19369:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1079
	add	r1, ip, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1079
	mov	r3, #0
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L19213
.L19366:
	mvn	r5, #15
	b	.L19202
.L19379:
	.align	2
.L19378:
	.word	.LANCHOR4+4074
	.word	.LANCHOR8-4038
	.word	.LANCHOR8-4056
	.word	.LANCHOR5+3656
	.word	.LANCHOR4+4096
	.word	.LANCHOR8-4062
	.word	.LANCHOR4+4056
	.word	.LANCHOR4+4080
	.fnend
	.size	android_enable, .-android_enable
	.section	.rodata.str1.4
	.align	2
.LC1483:
	.ascii	"<6>usb: enabled: %d, dev->enabled: %d\012\000"
	.align	2
.LC1484:
	.ascii	"SAMSUNG_Android\000"
	.align	2
.LC1485:
	.ascii	"<7>usb: %s f_holder->f:%s\012\000"
	.align	2
.LC1486:
	.ascii	"acm\000"
	.align	2
.LC1487:
	.ascii	"<7>usb: acm is enabled. (bcdDevice=0x400)\012\000"
	.align	2
.LC1488:
	.ascii	"<7>usb: conn_gadget + kies (bcdDevice=0xC00)\012\000"
	.align	2
.LC1489:
	.ascii	"<7>usb: conn_gadget only (bcdDevice=0x800)\012\000"
	.align	2
.LC1490:
	.ascii	"<7>usb: %s vendor=%x,product=%x,bcdDevice=%x\000"
	.align	2
.LC1491:
	.ascii	"<7>,Class=%x,SubClass=%x,Protocol=%x\012\000"
	.align	2
.LC1492:
	.ascii	"<7>usb: %s next cmd : usb_add_config\012\000"
	.align	2
.LC1493:
	.ascii	"<3>%s: %s: android_enable failed\012\000"
	.align	2
.LC1494:
	.ascii	"<3>%s: android_usb: already %s\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	enable_store, %function
enable_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r3
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	bl	dev_get_drvdata
	ldr	r6, [r0, #8]
	mov	r3, #0
	str	r3, [sp, #28]
	cmp	r6, r3
	mvneq	r4, #18
	bne	.L19427
.L19380:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L19427:
	add	r10, r0, #24
	mov	r5, r0
	mov	r0, r10
	bl	mutex_lock
	movw	r1, #:lower16:.LC450
	add	r2, sp, #28
	movt	r1, #:upper16:.LC450
	mov	r0, r7
	bl	sscanf
	movw	r0, #:lower16:.LC1483
	ldrb	r2, [r5, #16]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1483
	ldr	r1, [sp, #28]
	bl	printk
	ldr	r3, [sp, #28]
	cmp	r3, #0
	beq	.L19382
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L19428
	ldr	r1, .L19433
	ldr	r0, .L19433+4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L19429
.L19398:
	mov	r0, r10
	bl	mutex_unlock
	b	.L19380
.L19382:
	ldrb	r1, [r5, #16]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L19430
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L19406
	blx	r3
.L19406:
	mov	r3, #0
	strb	r3, [r5, #16]
	b	.L19398
.L19430:
	mov	r0, r5
	mov	r8, r5
	bl	android_disable
	ldr	r7, [r8, #500]!
	sub	r7, r7, #120
.L19400:
	add	r3, r7, #120
	cmp	r3, r8
	beq	.L19406
	mov	r9, r7
	ldr	r6, [r9, #112]!
	cmp	r9, r6
	sub	r6, r6, #4
	beq	.L19404
.L19401:
	ldr	r0, [r6]
	ldr	r3, [r0, #36]
	cmp	r3, #0
	beq	.L19402
	blx	r3
	ldr	r6, [r6, #4]
	cmp	r9, r6
	sub	r6, r6, #4
	bne	.L19401
.L19404:
	ldr	r7, [r7, #120]
	sub	r7, r7, #120
	b	.L19400
.L19402:
	ldr	r6, [r6, #4]
	cmp	r9, r6
	sub	r6, r6, #4
	bne	.L19401
	b	.L19404
.L19428:
	movw	r3, #:lower16:.LANCHOR1
	movw	ip, #:lower16:.LC1485
	ldr	r0, .L19433+8
	movt	r3, #:upper16:.LANCHOR1
	movt	ip, #:upper16:.LC1485
	ldr	r3, [r3, #3568]
	movw	r1, #:lower16:.LC896
	mov	r2, #255
	movt	r1, #:upper16:.LC896
	str	ip, [sp, #8]
	movw	r9, #:lower16:.LANCHOR0
	movt	r9, #:upper16:.LANCHOR0
	mov	r8, r5
	strb	r3, [r6, #48]
	bl	strncpy
	movw	r1, #:lower16:.LC1484
	mov	r2, #255
	ldr	r0, .L19433+12
	movt	r1, #:upper16:.LC1484
	bl	strncpy
	movw	r3, #:lower16:.LC1486
	ldrb	r1, [r9, #140]	@ zero_extendqisi2
	str	r10, [sp, #16]
	movt	r3, #:upper16:.LC1486
	ldr	r2, [r9, #144]
	str	r3, [sp, #12]
	ldrh	r3, [r9, #148]
	strb	r1, [r6, #21]
	str	r2, [r6, #25]	@ unaligned
	strh	r3, [r6, #29]	@ unaligned
	ldr	r3, [r8, #500]!
	sub	fp, r3, #120
	b	.L19384
.L19391:
	mov	r10, fp
	ldr	r7, [r10, #112]!
	sub	r7, r7, #4
.L19385:
	add	r3, r7, #4
	cmp	r3, r10
	bne	.L19390
	ldr	fp, [fp, #120]
	sub	fp, fp, #120
.L19384:
	add	r3, fp, #120
	cmp	r8, r3
	bne	.L19391
	movw	r1, #:lower16:.LC896
	mov	r2, #255
	ldr	r0, .L19433+8
	movt	r1, #:upper16:.LC896
	ldr	r10, [sp, #16]
	bl	strncpy
	movw	r1, #:lower16:.LC1484
	mov	r2, #255
	ldr	r0, .L19433+12
	movt	r1, #:upper16:.LC1484
	bl	strncpy
	ldrb	lr, [r9, #141]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1490
	ldrh	ip, [r6, #29]	@ unaligned
	movt	r0, #:upper16:.LC1490
	ldrb	r1, [r9, #142]	@ zero_extendqisi2
	ldrh	r3, [r6, #27]	@ unaligned
	ldrh	r2, [r6, #25]	@ unaligned
	strb	lr, [r6, #22]
	strb	r1, [r6, #23]
	ldr	r1, .L19433
	str	ip, [sp]
	bl	printk
	movw	r0, #:lower16:.LC1491
	ldrb	r3, [r6, #23]	@ zero_extendqisi2
	ldrb	r2, [r6, #22]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1491
	ldrb	r1, [r6, #21]	@ zero_extendqisi2
	bl	printk
	movw	r0, #:lower16:.LC1492
	ldr	r1, .L19433
	movt	r0, #:upper16:.LC1492
	bl	printk
	ldr	r6, [r5, #500]
	sub	r6, r6, #120
.L19392:
	add	r3, r6, #120
	cmp	r8, r3
	beq	.L19431
	mov	r9, r6
	ldr	r7, [r9, #112]!
	sub	r7, r7, #4
.L19393:
	add	r3, r7, #4
	cmp	r3, r9
	beq	.L19432
	ldr	r0, [r7]
	ldr	r3, [r0, #32]
	cmp	r3, #0
	beq	.L19394
	blx	r3
.L19394:
	ldr	r7, [r7, #4]
	sub	r7, r7, #4
	b	.L19393
.L19429:
	ldrb	ip, [r5, #16]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC1334
	movw	r2, #:lower16:.LC1333
	movt	r3, #:upper16:.LC1334
	movw	r0, #:lower16:.LC1494
	ldr	r1, .L19433
	movt	r2, #:upper16:.LC1333
	movt	r0, #:upper16:.LC1494
	cmp	ip, #0
	moveq	r2, r3
	bl	printk
	b	.L19398
.L19390:
	ldr	r3, [r7]
	ldr	r1, .L19433
	ldr	r0, [sp, #8]
	ldr	r2, [r3]
	bl	printk
	ldr	r3, [r7]
	ldr	r1, [sp, #12]
	ldr	r3, [r3]
	mov	r0, r3
	str	r3, [sp, #20]
	bl	strcmp
	subs	r2, r0, #0
	ldr	r3, [sp, #20]
	bne	.L19386
	movw	r0, #:lower16:.LC1487
	str	r2, [sp, #20]
	movt	r0, #:upper16:.LC1487
	bl	printk
	ldr	r2, [sp, #20]
	mov	r3, #4
	movw	r1, #:lower16:.LC1053
	movt	r1, #:upper16:.LC1053
	strb	r2, [r6, #29]
	strb	r3, [r6, #30]
	ldr	r3, [r7]
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	bne	.L19388
.L19387:
	movw	r0, #:lower16:.LC1488
	movt	r0, #:upper16:.LC1488
	bl	printk
	mov	r2, #0
	mov	r3, #12
	strb	r2, [r6, #29]
	strb	r3, [r6, #30]
.L19388:
	ldr	r7, [r7, #4]
	sub	r7, r7, #4
	b	.L19385
.L19386:
	movw	r1, #:lower16:.LC1053
	mov	r0, r3
	movt	r1, #:upper16:.LC1053
	bl	strcmp
	subs	r3, r0, #0
	bne	.L19388
	ldrh	r2, [r6, #29]	@ unaligned
	cmp	r2, #1024
	beq	.L19387
	movw	r0, #:lower16:.LC1489
	str	r3, [sp, #20]
	movt	r0, #:upper16:.LC1489
	bl	printk
	ldr	r3, [sp, #20]
	mov	r2, #8
	strb	r3, [r6, #29]
	strb	r2, [r6, #30]
	b	.L19388
.L19431:
	mov	r0, r5
	bl	android_enable
	cmp	r0, #0
	bge	.L19397
	ldr	r2, .L19433
	movw	r0, #:lower16:.LC1493
	movt	r0, #:upper16:.LC1493
	mov	r1, r2
	bl	printk
	mov	r3, #0
	mov	r0, r10
	strb	r3, [r5, #16]
	strb	r3, [r5, #48]
	bl	mutex_unlock
	b	.L19380
.L19397:
	mov	r3, #1
	strb	r3, [r5, #16]
	b	.L19398
.L19432:
	ldr	r6, [r6, #120]
	sub	r6, r6, #120
	b	.L19392
.L19434:
	.align	2
.L19433:
	.word	.LANCHOR5+3672
	.word	.LANCHOR7-580
	.word	.LANCHOR1+2764
	.word	.LANCHOR1+2508
	.fnend
	.size	enable_store, .-enable_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_android_function_disable, %function
adb_android_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #0
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L19437
	bx	lr
.L19437:
	b	android_enable
	.fnend
	.size	adb_android_function_disable, .-adb_android_function_disable
	.section	.rodata.str1.4
	.align	2
.LC1495:
	.ascii	"<6>adb_open\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_open, %function
adb_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L19456
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	ldr	r1, .L19456+4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L19454
.L19439:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3404]
	cmp	r3, #0
	beq	.L19446
	add	r2, r3, #116
	.syntax divided
@ 61 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r1, r5, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	bne	.L19441
	ldr	r3, [r4, #3404]
	mov	r2, #0
	str	r3, [r6, #124]
	ldrb	r1, [r3, #161]	@ zero_extendqisi2
	str	r2, [r3, #104]
	cmp	r1, r2
	bne	.L19455
.L19443:
	mov	r2, #1
	mov	r0, #0
	strb	r2, [r3, #160]
.L19438:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L19455:
	movw	r1, #:lower16:.LANCHOR7
	strb	r2, [r3, #161]
	movt	r1, #:upper16:.LANCHOR7
	ldr	r7, [r1, #-2012]
	ldr	r6, [r1, #-1996]
	cmp	r6, #0
	strbeq	r5, [r7]
	streq	r6, [r7, #4]
	beq	.L19443
	add	r8, r6, #24
	mov	r0, r8
	bl	mutex_lock
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	strb	r5, [r7]
	str	r6, [r7, #4]
	cmp	r3, #0
	beq	.L19445
	mov	r0, r6
	bl	android_enable
.L19445:
	mov	r0, r8
	bl	mutex_unlock
	ldr	r3, [r4, #3404]
	b	.L19443
.L19441:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L19438
.L19446:
	mvn	r0, #18
	b	.L19438
.L19454:
	movw	r0, #:lower16:.LC1495
	movt	r0, #:upper16:.LC1495
	bl	printk
	b	.L19439
.L19457:
	.align	2
.L19456:
	.word	.LANCHOR7-556
	.word	.LANCHOR5+3688
	.fnend
	.size	adb_open, .-adb_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_disable, %function
ffs_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #0
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L19460
	bx	lr
.L19460:
	b	android_enable
	.fnend
	.size	ffs_function_disable, .-ffs_function_disable
	.section	.rodata.str1.4
	.align	2
.LC1496:
	.ascii	"<6>read descriptors\012\000"
	.align	2
.LC1497:
	.ascii	"<6>read strings\012\000"
	.align	2
.LC1498:
	.ascii	"&epfile->mutex\000"
	.align	2
.LC1499:
	.ascii	"&epfile->wait\000"
	.align	2
.LC1500:
	.ascii	"ep%u\000"
	.align	2
.LC1501:
	.ascii	"%s: start adbd only in ADB composition\012\000"
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_write, %function
ffs_ep0_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	mov	r9, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #44
	sub	sp, sp, #44
	add	r8, r4, #96
	.syntax divided
@ 193 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L19462:
	.syntax divided
@ 170 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r8]
	mov	r2, #0
	teq	r1, #2
	strexeq r2, r3, [r8]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L19462
	.syntax divided
@ 195 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #2
	beq	.L19526
	ldr	r3, [r0, #28]
	add	r7, r4, #4
	mov	r0, r7
	tst	r3, #2048
	bne	.L19585
	bl	mutex_lock_interruptible
	subs	r5, r0, #0
	blt	.L19461
.L19468:
	ldr	r3, [r4, #92]
	cmp	r3, #1
	bhi	.L19586
	cmp	r6, #15
	bls	.L19528
	mov	r0, r9
	mov	r1, r6
	bl	ffs_prepare_buffer
	cmn	r0, #4096
	mov	r8, r0
	bls	.L19469
	mov	r5, r0
.L19467:
	mov	r0, r7
	bl	mutex_unlock
.L19461:
	mov	r0, r5
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L19585:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L19468
	mvn	r5, #10
	b	.L19461
.L19586:
	cmp	r3, #2
	mvnne	r5, #76
	bne	.L19467
	add	fp, r4, #116
	mov	r0, fp
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L19513:
	.syntax divided
@ 170 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r8]
	mov	r10, #0
	teq	r1, #2
	strexeq r10, r3, [r8]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r10, #0
	bne	.L19513
	.syntax divided
@ 195 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #0
	beq	.L19535
	cmp	r1, #2
	bne	.L19587
	mov	r6, r10
.L19584:
	mvn	r5, #42
.L19514:
	mov	r0, fp
	bl	_raw_spin_unlock_irq
.L19520:
	mov	r0, r6
	bl	kfree
	b	.L19467
.L19587:
	ldrsb	r3, [r4, #108]
	cmp	r3, #0
	blt	.L19515
	mov	r0, fp
	bl	_raw_spin_unlock_irq
	ldrh	r3, [r4, #106]
	cmp	r3, #0
	bne	.L19588
	ldr	r0, .L19601
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	mvneq	r5, #2
	beq	.L19467
	movw	r1, #:lower16:.LC728
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC728
	mvn	r5, #2
	bl	__dynamic_pr_debug
	b	.L19467
.L19535:
	mov	r6, r1
	mvn	r5, #2
	b	.L19514
.L19588:
	ldr	r3, [r4]
	mov	r1, #1
	mvn	r5, #50
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	str	r10, [r4, #96]
	b	.L19467
.L19515:
	ldrh	r5, [r4, #114]
	mov	r0, fp
	cmp	r5, r6
	movcs	r5, r6
	bl	_raw_spin_unlock_irq
	mov	r1, r5
	mov	r0, r9
	bl	ffs_prepare_buffer
	cmn	r0, #4096
	mov	r6, r0
	movhi	r5, r0
	bhi	.L19467
	mov	r0, fp
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L19518:
	.syntax divided
@ 170 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r2, [r8]
	mov	r3, #0
	teq	r2, #2
	strexeq r3, r10, [r8]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L19518
	.syntax divided
@ 195 "/home/jprim/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #2
	beq	.L19584
	mov	r2, r5
	mov	r0, r4
	mov	r1, r6
	bl	__ffs_ep0_queue_wait
	mov	r5, r0
	b	.L19520
.L19528:
	mvn	r5, #21
	b	.L19467
.L19526:
	mvn	r5, #42
	b	.L19461
.L19469:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L19470
	movw	r0, #:lower16:.LC1496
	movt	r0, #:upper16:.LC1496
	bl	printk
	ldr	r3, [r8]	@ unaligned
	cmp	r3, #1
	beq	.L19589
.L19471:
	mvn	r5, #21
.L19473:
	mov	r0, r8
	bl	kfree
	b	.L19467
.L19470:
	movw	r0, #:lower16:.LC1497
	movt	r0, #:upper16:.LC1497
	bl	printk
	ldr	r3, [r8]	@ unaligned
	cmp	r3, #2
	beq	.L19590
.L19480:
	mov	r0, r8
	mvn	r5, #21
	bl	kfree
	b	.L19467
.L19589:
	ldr	r3, [r8, #4]	@ unaligned
	cmp	r6, r3
	bne	.L19471
	ldr	r10, [r8, #8]	@ unaligned
	add	r1, r8, #16
	sub	r2, r6, #16
	ldr	r9, [r8, #12]	@ unaligned
	cmp	r10, #0
	beq	.L19529
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r0, r10
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	str	r1, [sp, #12]
	str	r2, [sp, #16]
	bl	ffs_do_descs
	ldr	r1, [sp, #12]
	subs	r5, r0, #0
	ldr	r2, [sp, #16]
	strge	r5, [sp, #12]
	addge	r1, r1, r5
	subge	r2, r2, r5
	blt	.L19473
.L19472:
	cmp	r9, #0
	beq	.L19474
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r0, r9
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	str	r1, [sp, #16]
	str	r2, [sp, #20]
	bl	ffs_do_descs
	subs	r5, r0, #0
	ldr	r1, [sp, #16]
	ldr	r2, [sp, #20]
	blt	.L19473
	add	r0, r5, #8
	mov	r3, r5
	cmp	r0, r2
	add	r0, r1, r5
	bhi	.L19578
.L19524:
	ldr	ip, [r0]	@ unaligned
	movw	r0, #56924
	movt	r0, 85
	cmp	ip, r0
	bne	.L19471
	add	r0, r1, r3
	sub	r2, r2, #8
	ldr	fp, [r0, #4]	@ unaligned
	sub	r2, r2, r3
	orr	r0, r10, r9
	add	r3, r3, #8
	add	r1, r1, r3
	orrs	r3, r0, fp
	beq	.L19471
	cmp	fp, #0
	beq	.L19478
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r0, fp
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	str	r2, [sp, #16]
	bl	ffs_do_descs
	subs	r3, r0, #0
	ldr	r2, [sp, #16]
	bge	.L19573
	mov	r5, r3
	b	.L19473
.L19529:
	str	r10, [sp, #12]
	b	.L19472
.L19590:
	ldr	r3, [r8, #4]	@ unaligned
	cmp	r6, r3
	bne	.L19480
	ldr	r3, [r8, #8]	@ unaligned
	ldr	r10, [r8, #12]	@ unaligned
	clz	r1, r3
	clz	r2, r10
	lsr	r1, r1, #5
	lsr	r2, r2, #5
	cmp	r1, r2
	bne	.L19480
	ldrh	r2, [r4, #176]
	cmp	r2, r3
	str	r2, [sp, #16]
	bhi	.L19480
	cmp	r2, #0
	bne	.L19481
	mov	r0, r8
	bl	kfree
.L19482:
	ldrh	r3, [r4, #180]
	mov	r0, #56
	movw	r1, #32976
	mul	r0, r0, r3
	str	r3, [sp, #12]
	bl	__kmalloc
	subs	r8, r0, #0
	bne	.L19591
.L19489:
	mov	r3, #3
	mvn	r5, #11
	str	r3, [r4, #92]
	b	.L19467
.L19474:
	cmp	r2, #7
	bls	.L19476
	mov	r3, r9
	mov	r0, r1
	mov	r5, r9
	b	.L19524
.L19578:
	sub	r2, r2, r5
.L19478:
	cmp	r2, #0
	bne	.L19471
	ldr	r3, [sp, #12]
	str	r8, [r4, #144]
	str	r2, [r4, #160]
	str	r10, [r4, #164]
	str	r9, [r4, #168]
	add	r5, r5, r3
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r2, [r4, #172]
.L19521:
	mov	r3, #1
	mov	r5, r6
	str	r3, [r4, #92]
	b	.L19467
.L19476:
	cmp	r10, #0
	movne	r5, r9
	beq	.L19471
	b	.L19478
.L19481:
	str	r3, [sp, #12]
	ldr	r3, [sp, #16]
	add	r5, r10, #1
	mov	r1, #208
	add	r0, r3, #2
	mul	r0, r10, r0
	add	r0, r5, r0, lsl #1
	lsl	r0, r0, #2
	bl	__kmalloc
	subs	r9, r0, #0
	ldr	r3, [sp, #12]
	bne	.L19483
	mov	r0, r8
	mvn	r5, #11
	bl	kfree
	b	.L19467
.L19483:
	add	r1, r9, r5, lsl #2
	mov	r2, r10
	mov	lr, r9
	mov	r0, r1
.L19484:
	subs	r2, r2, #1
	str	r0, [lr], #4
	add	r0, r0, #8
	bne	.L19484
	add	r0, r1, #8
	add	r5, r5, r10, lsl #1
	str	r2, [r1, #-4]
	add	fp, r8, #16
	str	r0, [sp, #12]
	mov	r0, r3
	add	r5, r9, r5, lsl #2
	mov	r3, r9
	sub	r1, r6, #16
	mov	r9, r8
	mov	r2, r6
	mov	r8, r4
	mov	r4, r0
.L19488:
	cmp	r1, #2
	bhi	.L19592
	mov	r8, r9
	mov	r9, r3
.L19485:
	mov	r0, r9
	bl	kfree
	b	.L19480
.L19573:
	cmp	r3, r2
	bne	.L19471
	ldr	r3, [sp, #12]
	str	r8, [r4, #144]
	str	r2, [r4, #160]
	str	r10, [r4, #164]
	str	r9, [r4, #168]
	add	r5, r3, r5
	add	r1, r2, r5
	add	r3, r5, #24
	str	fp, [r4, #172]
	str	r1, [r4, #148]
	str	r5, [r4, #152]
	str	r3, [r4, #156]
	b	.L19521
.L19591:
	movw	r3, #:lower16:.LC1498
	movw	r2, #:lower16:.LC1499
	movt	r3, #:upper16:.LC1498
	movt	r2, #:upper16:.LC1499
	mov	r9, r8
	mov	r5, #1
	str	r3, [sp, #16]
	str	r2, [sp, #20]
.L19490:
	ldr	r3, [sp, #12]
	cmp	r3, r5
	bcc	.L19593
	ldr	r2, .L19601+4
	mov	r0, r9
	str	r4, [r9, #36]
	ldr	r1, [sp, #16]
	add	r10, r8, #48
	bl	__mutex_init
	ldr	r2, .L19601+4
	add	r0, r9, #20
	ldr	r1, [sp, #20]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC1500
	mov	r0, r10
	movt	r1, #:upper16:.LC1500
	mov	r2, r5
	bl	sprintf
	ldr	r3, [r4, #192]
	mov	r1, r10
	ldr	r0, [r3, #60]
	str	r3, [sp, #24]
	ldr	fp, [r3, #488]
	bl	d_alloc_name
	subs	r10, r0, #0
	ldr	r3, [sp, #24]
	bne	.L19594
.L19491:
	sub	r5, r5, #1
	mov	r6, r8
	mov	r9, #0
.L19494:
	cmp	r5, #0
	beq	.L19595
	ldr	r3, [r6]
	cmp	r3, #1
	beq	.L19596
.L19495:
	.syntax divided
@ 1521 "/home/jprim/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1521, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L19593:
	mov	r3, #2
	mov	r0, r7
	str	r3, [r4, #92]
	str	r8, [r4, #208]
	bl	mutex_unlock
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldr	r5, [r3, #-1944]
	cmp	r5, #0
	beq	.L19574
	add	r7, r5, #24
	ldr	r9, [r3, #-1960]
	mov	r0, r7
	bl	mutex_lock
	ldr	r3, [r4, #92]
	cmp	r3, #2
	beq	.L19597
.L19502:
	movw	r0, #:lower16:.LC31
	movw	r1, #1442
	movt	r0, #:upper16:.LC31
	mvn	r5, #76
	bl	warn_slowpath_null
.L19503:
	mov	r0, r7
	bl	mutex_unlock
	b	.L19512
.L19574:
	movw	r0, #:lower16:.LANCHOR8
	movt	r0, #:upper16:.LANCHOR8
	ldrh	r3, [r0, #-102]
	tst	r3, #4
	beq	.L19534
	movw	r1, #:lower16:.LC1501
	ldr	r2, .L19601+8
	sub	r0, r0, #120
	movt	r1, #:upper16:.LC1501
	mvn	r5, #18
	bl	__dynamic_pr_debug
.L19512:
	mov	r3, #3
	str	r3, [r4, #92]
	b	.L19461
.L19534:
	mvn	r5, #18
	b	.L19512
.L19597:
	add	r8, r4, #128
	mov	r0, #1
	ldr	r10, [r5, #8]
	mov	r1, r8
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L19502
	ldrh	r3, [r4, #176]
	cmp	r3, #254
	bls	.L19575
.L19532:
	mvn	r5, #18
	b	.L19503
.L19592:
	ldrb	ip, [fp, #1]	@ zero_extendqisi2
	sub	r1, r1, #2
	str	r10, [sp, #20]
	ldrb	r0, [fp], #2	@ zero_extendqisi2
	mov	r10, r3
	ldr	lr, [sp, #12]
	ldr	r6, [sp, #16]
	orr	r0, r0, ip, lsl #8
	strh	r0, [lr, #-8]	@ movhi
	str	r5, [lr, #-4]
.L19487:
	mov	r0, fp
	str	r1, [sp, #24]
	str	r2, [sp, #28]
	bl	strnlen
	ldr	r1, [sp, #24]
	ldr	r2, [sp, #28]
	cmp	r1, r0
	bne	.L19598
	mov	r8, r9
	mov	r9, r10
	b	.L19485
.L19598:
	cmp	r6, #0
	beq	.L19486
	sub	r6, r6, #1
	add	r5, r5, #8
	str	fp, [r5, #-4]
.L19486:
	subs	r4, r4, #1
	add	ip, r0, #1
	mvn	r0, r0
	add	fp, fp, ip
	add	r1, r1, r0
	bne	.L19487
	mov	r3, r10
	ldr	r0, [sp, #12]
	add	r5, r5, #8
	ldr	r10, [sp, #20]
	strb	r4, [r5, #-8]
	str	r4, [r5, #-4]
	add	r0, r0, #8
	subs	r10, r10, #1
	str	r0, [sp, #12]
	bne	.L19488
	cmp	r1, #0
	mov	r4, r8
	mov	r6, r2
	mov	r8, r9
	mov	r9, r3
	bne	.L19485
	strd	r8, [r4, #184]
	b	.L19482
.L19594:
	mov	r0, r3
	bl	new_inode
	subs	r1, r0, #0
	beq	.L19492
	add	r0, sp, #32
	str	r1, [sp, #24]
	add	r5, r5, #1
	bl	current_kernel_time
	bl	get_next_ino
	ldr	r1, [sp, #24]
	ldr	ip, .L19601+12
	str	r0, [r1, #40]
	ldrh	r3, [fp, #196]
	mov	r0, r10
	strh	r3, [r1]	@ movhi
	ldrd	r2, [sp, #32]
	ldr	lr, [fp, #200]
	str	lr, [r1, #4]
	ldr	lr, [fp, #204]
	str	lr, [r1, #8]
	strd	r2, [r1, #52]
	strd	r2, [r1, #60]
	strd	r2, [r1, #68]
	str	ip, [r1, #200]
	str	r9, [r1, #328]
	bl	d_instantiate
	mov	r0, r10
	bl	d_rehash
	cmn	r9, #44
	add	r9, r9, #56
	strne	r10, [r9, #-12]
	b	.L19490
.L19575:
	ldrb	fp, [r10, #48]	@ zero_extendqisi2
	add	r3, fp, r3
	cmp	r3, #254
	bhi	.L19532
	ldr	r2, [r10]
	strb	r3, [r10, #48]
	mov	r1, #208
	ldr	r0, [r2, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #28]
	bne	.L19599
	mvn	r5, #11
	b	.L19503
.L19595:
	mov	r0, r8
	bl	kfree
	b	.L19489
.L19492:
	mov	r0, r10
	bl	dput
	b	.L19491
.L19599:
	movw	r2, #:lower16:ffs_ep0_complete
	movt	r2, #:upper16:ffs_ep0_complete
	str	r2, [r0, #28]
	ldr	r3, [r4, #28]
	str	r4, [r3, #32]
	ldr	r3, [r4, #188]
	cmp	r3, #0
	subne	r3, r3, #4
	bne	.L19506
.L19505:
	ldr	r2, [r10]
	mov	r3, r4
	str	r2, [r3], #84
	.syntax divided
@ 45 "/home/jprim/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrb	r3, [r9, #1]	@ zero_extendqisi2
	mov	r2, #1
	strb	r2, [r9]
	strd	r4, [r9, #4]
	cmp	r3, #0
	beq	.L19508
	mov	r0, r5
	bl	android_enable
.L19508:
	mov	r0, r7
	mov	r5, r6
	bl	mutex_unlock
	mov	r1, r8
	mov	r0, #0
	bl	_set_bit
	b	.L19461
.L19600:
	ldr	r1, [r1, #4]
	mov	r2, fp
.L19509:
	ldr	r0, [r1, #4]
	add	r2, r2, #1
	add	r1, r1, #8
	uxtb	r2, r2
	cmp	r0, #0
	bne	.L19510
.L19506:
	ldr	r1, [r3, #4]!
	cmp	r1, #0
	bne	.L19600
	b	.L19505
.L19596:
	ldr	r2, [r6, #24]
	add	r3, r6, #24
	cmp	r2, r3
	bne	.L19495
	ldr	r0, [r6, #44]
	cmp	r0, #0
	beq	.L19497
	bl	d_delete
	ldr	r0, [r6, #44]
	bl	dput
	str	r9, [r6, #44]
.L19497:
	sub	r5, r5, #1
	add	r6, r6, #56
	b	.L19494
.L19510:
	strb	r2, [r1, #-8]
	b	.L19509
.L19602:
	.align	2
.L19601:
	.word	.LANCHOR4-868
	.word	.LANCHOR1+4076
	.word	.LANCHOR5+3808
	.word	.LANCHOR5+3700
	.fnend
	.size	ffs_ep0_write, .-ffs_ep0_write
	.section	.rodata.str1.4
	.align	2
.LC1502:
	.ascii	"SMUX_CONNECTED\000"
	.align	2
.LC1503:
	.ascii	"SMUX_DISCONNECTED\000"
	.align	2
.LC1504:
	.ascii	"SMUX_READ_DONE\000"
	.align	2
.LC1505:
	.ascii	"SMUX_READ_FAIL\000"
	.align	2
.LC1506:
	.ascii	"SMUX_WRITE_DONE\000"
	.align	2
.LC1507:
	.ascii	"SMUX_WRITE_FAIL\000"
	.align	2
.LC1508:
	.ascii	"SMUX_TIOCM_UPDATE\000"
	.align	2
.LC1509:
	.ascii	"SMUX_LOW_WM_HIT\000"
	.align	2
.LC1510:
	.ascii	"SMUX_HIGH_WM_HIT\000"
	.align	2
.LC1511:
	.ascii	"RNDIS_UNINITIALIZED\000"
	.align	2
.LC1512:
	.ascii	"RNDIS_INITIALIZED\000"
	.align	2
.LC1513:
	.ascii	"RNDIS_DATA_INITIALIZED\000"
	.align	2
.LC1514:
	.ascii	"DATA\000"
	.align	2
.LC1515:
	.ascii	"OPEN\000"
	.align	2
.LC1516:
	.ascii	"CLOSE\000"
	.align	2
.LC1517:
	.ascii	"NONE\000"
	.align	2
.LC1518:
	.ascii	"name of streaming function:%s\012\000"
	.align	2
.LC1519:
	.ascii	"%s: dload:%pK pid:%x serial_num:%s\012\000"
	.align	2
.LC1520:
	.ascii	"%s: unable to update PID and serial_no\012\000"
	.align	2
.LC1521:
	.ascii	"setting streaming_enabled to false.\012\000"
	.align	2
.LC1522:
	.ascii	"remote_wakeup\000"
	.align	2
.LC1523:
	.ascii	"state\000"
	.align	2
.LC1524:
	.ascii	"pm_qos\000"
	.align	2
.LC1525:
	.ascii	"enable\000"
	.align	2
.LC1526:
	.ascii	"functions\000"
	.align	2
.LC1527:
	.ascii	"macos\000"
	.align	2
.LC1528:
	.ascii	"ss_host_available\000"
	.align	2
.LC1529:
	.ascii	"usb30en\000"
	.align	2
.LC1530:
	.ascii	"bcdUSB\000"
	.align	2
.LC1531:
	.ascii	"iSerial\000"
	.align	2
.LC1532:
	.ascii	"iProduct\000"
	.align	2
.LC1533:
	.ascii	"iManufacturer\000"
	.align	2
.LC1534:
	.ascii	"bDeviceProtocol\000"
	.align	2
.LC1535:
	.ascii	"bDeviceSubClass\000"
	.align	2
.LC1536:
	.ascii	"bDeviceClass\000"
	.align	2
.LC1537:
	.ascii	"bcdDevice\000"
	.align	2
.LC1538:
	.ascii	"idProduct\000"
	.align	2
.LC1539:
	.ascii	"idVendor\000"
	.align	2
.LC1540:
	.ascii	"android_usb: %s remote wakeup\012\000"
	.align	2
.LC1541:
	.ascii	"func:%s is enabled.\012\000"
	.align	2
.LC1542:
	.ascii	"set streaming_enabled to true\012\000"
	.align	2
.LC1543:
	.ascii	"uasp\000"
	.align	2
.LC1544:
	.ascii	"UASP %s\012\000"
	.align	2
.LC1545:
	.ascii	"pcm\000"
	.align	2
.LC1546:
	.ascii	"mass_storage\000"
	.align	2
.LC1547:
	.ascii	"sua_version_info\000"
	.align	2
.LC1548:
	.ascii	"product_string\000"
	.align	2
.LC1549:
	.ascii	"vendor_string\000"
	.align	2
.LC1550:
	.ascii	"inquiry_string\000"
	.align	2
.LC1551:
	.ascii	"rndis_qc\000"
	.align	2
.LC1552:
	.ascii	"max_pkt_per_xfer\000"
	.align	2
.LC1553:
	.ascii	"vendorID\000"
	.align	2
.LC1554:
	.ascii	"ethaddr\000"
	.align	2
.LC1555:
	.ascii	"wceis\000"
	.align	2
.LC1556:
	.ascii	"manufacturer\000"
	.align	2
.LC1557:
	.ascii	"ptp\000"
	.align	2
.LC1558:
	.ascii	"diag\000"
	.align	2
.LC1559:
	.ascii	"clients\000"
	.align	2
.LC1560:
	.ascii	"mbim_transports\000"
	.align	2
.LC1561:
	.ascii	"%s: mbim transport is %s\000"
	.align	2
.LC1562:
	.ascii	"ecm_qc\000"
	.align	2
.LC1563:
	.ascii	"ecm_transports\000"
	.align	2
.LC1564:
	.ascii	"ecm_ethaddr\000"
	.align	2
.LC1565:
	.ascii	"%s: ecm_transport is %s\000"
	.align	2
.LC1566:
	.ascii	"transport_names\000"
	.align	2
.LC1567:
	.ascii	"transports\000"
	.align	2
.LC1568:
	.ascii	"rmnet_smd\000"
	.align	2
.LC1569:
	.ascii	"instances\000"
	.align	2
.LC1570:
	.ascii	"midi\000"
	.align	2
.LC1571:
	.ascii	"alsa\000"
	.align	2
.LC1572:
	.ascii	"start adbd only in ADB composition\012\000"
	.align	2
.LC1573:
	.ascii	"aliases\000"
	.align	2
.LC1574:
	.ascii	"terminal_version\000"
	.global	terminal_mode_vendor_id
	.global	terminal_mode_version
	.align	2
.LC1575:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_ncm.c\000"
	.align	2
.LC1576:
	.ascii	"CDC Network Control Model (NCM)\000"
	.align	2
.LC1577:
	.ascii	"CDC Network Data\000"
	.align	2
.LC1578:
	.ascii	"CDC NCM\000"
	.global	diag_dload
	.global	conn_gadget_function
	.align	2
.LC1579:
	.ascii	"in_max_packet_size\000"
	.align	2
.LC1580:
	.ascii	"out_max_packet_size\000"
	.align	2
.LC1581:
	.ascii	"usb_buffer_size\000"
	.align	2
.LC1582:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_conn_gad"
	.ascii	"get.c\000"
	.align	2
.LC1583:
	.ascii	"%s disabled\012\000"
	.align	2
.LC1584:
	.ascii	"%s: error %d\012\000"
	.align	2
.LC1585:
	.ascii	"%s: req_put\012\000"
	.align	2
.LC1586:
	.ascii	"usb_ep_autoconfig for conn_gadget ep_out got %s\012"
	.ascii	"\000"
	.global	usb30en
	.align	2
.LC1587:
	.ascii	"version\000"
	.align	2
.LC1588:
	.ascii	"1.0\000"
	.align	2
.LC1589:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_uac1.c\000"
	.align	2
.LC1590:
	.ascii	"Allocated %d requests\012\000"
	.align	2
.LC1591:
	.ascii	"intf %d, alt %d\012\000"
	.align	2
.LC1592:
	.ascii	"audio req %02x.%02x v%04x i%04x l%d\012\000"
	.align	2
.LC1593:
	.ascii	"USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_ENDPOINT\000"
	.align	2
.LC1594:
	.ascii	"USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_ENDPOINT\000"
	.align	2
.LC1595:
	.ascii	"USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_INTERFACE\000"
	.align	2
.LC1596:
	.ascii	"USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE\000"
	.align	2
.LC1597:
	.ascii	"bRequest 0x%x, w_value 0x%04x, len %d, ep %d\012\000"
	.align	2
.LC1598:
	.ascii	"bRequest 0x%x, w_value 0x%04x, len %d, endp %d, epn"
	.ascii	"um %d\012\000"
	.align	2
.LC1599:
	.ascii	"bRequest 0x%x, w_value 0x%04x, len %d, entity %d\012"
	.ascii	"\000"
	.align	2
.LC1600:
	.ascii	"Copy %d bytes\000"
	.align	2
.LC1601:
	.ascii	"copy_buf == 0\000"
	.align	2
.LC1602:
	.ascii	"Queue capture packet: size %d\000"
	.align	2
.LC1603:
	.ascii	"audio_playback_buf_size %d - copy_buf->actual %d, r"
	.ascii	"eq->actual %d\000"
	.align	2
.LC1604:
	.ascii	"play_buf->actual = %d\000"
	.align	2
.LC1605:
	.ascii	"Microphone Iso-IN Endpoint Control\000"
	.align	2
.LC1606:
	.ascii	"Microphone Sampling Frequency Control\000"
	.align	2
.LC1607:
	.ascii	"Speaker Iso-out Endpoint Control\000"
	.align	2
.LC1608:
	.ascii	"Speaker Sampling Frequency Control\000"
	.align	2
.LC1609:
	.ascii	"Microphone Feature Unit Controls\000"
	.align	2
.LC1610:
	.ascii	"Microphone Volume Control\000"
	.align	2
.LC1611:
	.ascii	"Microphone Mute Control\000"
	.align	2
.LC1612:
	.ascii	"Speaker Function Unit Controls\000"
	.align	2
.LC1613:
	.ascii	"Speaker Volume Control\000"
	.align	2
.LC1614:
	.ascii	"Speaker Mute Control\000"
	.global	speaker_output_terminal_desc
	.global	speaker_input_terminal_desc
	.global	uac1_ac_header_desc
	.global	uac1_ac_interface_desc
	.align	2
.LC1615:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/u_uac1.c\000"
	.align	2
.LC1616:
	.ascii	"Enter\000"
	.align	2
.LC1617:
	.ascii	"Initialized PCM playback device: %s\012\000"
	.align	2
.LC1618:
	.ascii	"Return %d\000"
	.align	2
.LC1619:
	.ascii	"frames = %d, count = %d\000"
	.align	2
.LC1620:
	.ascii	"Done. Sent %d frames\000"
	.align	2
.LC1621:
	.ascii	"runtime->frame_bits = %d, count = %d, frames = %d\000"
	.align	2
.LC1622:
	.ascii	"Initialized playback params\000"
	.align	2
.LC1623:
	.ascii	"Initialize hw params\000"
	.align	2
.LC1624:
	.ascii	"capture params: access %x, format %x, channels %d, "
	.ascii	"rate %d\012\000"
	.align	2
.LC1625:
	.ascii	"playback params: access %x, format %x, channels %d,"
	.ascii	" rate %d\012\000"
	.align	2
.LC1626:
	.ascii	"buffer_bytes = (%d,%d) omin=%d omax=%d int=%d empty"
	.ascii	"=%d\012\000"
	.align	2
.LC1627:
	.ascii	"/dev/snd/controlC0\000"
	.align	2
.LC1628:
	.ascii	"/dev/snd/pcmC0D6c\000"
	.align	2
.LC1629:
	.ascii	"/dev/snd/pcmC0D5p\000"
	.align	2
.LC1630:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/u_qc_ether"
	.ascii	".c\000"
	.align	2
.LC1631:
	.ascii	"using random host_mac ethernet address\012\000"
	.align	2
.LC1632:
	.ascii	"using random dev_mac ethernet address\012\000"
	.align	2
.LC1633:
	.ascii	"gadget\000"
	.align	2
.LC1634:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/u_ether.c\000"
	.align	2
.LC1635:
	.ascii	"req->length:%d header_len:%u\012skb->len:%d skb->da"
	.ascii	"ta_len:%d\012\000"
	.align	2
.LC1636:
	.ascii	"%s: size: %d\000"
	.align	2
.LC1637:
	.ascii	"android_rndis_qc\000"
	.align	2
.LC1638:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_qc_rndis"
	.ascii	".c\000"
	.align	2
.LC1639:
	.ascii	"Sent max packet size %d\000"
	.align	2
.LC1640:
	.ascii	"rndis_qc_unbind: free\000"
	.align	2
.LC1641:
	.ascii	"%s: rndis resumed\012\000"
	.align	2
.LC1642:
	.ascii	"%s: rndis suspended\012\000"
	.align	2
.LC1643:
	.ascii	"MaxTransferSize: %d\012\000"
	.align	2
.LC1644:
	.ascii	"dev:%pK. %s Disconnect BAM.\012\000"
	.global	_rndis_qc
	.align	2
.LC1645:
	.ascii	"RNDIS Communications Control\000"
	.align	2
.LC1646:
	.ascii	"RNDIS Ethernet Data\000"
	.align	2
.LC1647:
	.ascii	"RNDIS\000"
	.align	2
.LC1648:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_ecm.c\000"
	.align	2
.LC1649:
	.ascii	"CDC Ethernet Control Model (ECM)\000"
	.align	2
.LC1650:
	.ascii	"CDC Ethernet Data\000"
	.align	2
.LC1651:
	.ascii	"CDC ECM\000"
	.align	2
.LC1652:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/u_bam_data"
	.ascii	".c\000"
	.align	2
.LC1653:
	.ascii	"bam_data is already setup\000"
	.align	2
.LC1654:
	.ascii	"requested %d BAM2BAM ports\000"
	.align	2
.LC1655:
	.ascii	"bam_data_destroy: Freeing ports\012\000"
	.align	2
.LC1656:
	.ascii	"dev:%pK port#%d\012\000"
	.align	2
.LC1657:
	.ascii	"port:%pK portno:%d\012\000"
	.align	2
.LC1658:
	.ascii	"%s: Connect workqueue done\000"
	.align	2
.LC1659:
	.ascii	"%s: Connect workqueue started\000"
	.align	2
.LC1660:
	.ascii	"%s: status: %d\012\000"
	.global	bam2bam_data_ports
	.align	2
.LC1661:
	.ascii	"android_mbim\000"
	.align	2
.LC1662:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_mbim.c\000"
	.align	2
.LC1663:
	.ascii	"Received command %d\000"
	.align	2
.LC1664:
	.ascii	"Exit(%d)\000"
	.align	2
.LC1665:
	.ascii	"Enter(%d)\000"
	.align	2
.LC1666:
	.ascii	"copied %d bytes to user\012\000"
	.align	2
.LC1667:
	.ascii	"cpkt size:%d\012\000"
	.align	2
.LC1668:
	.ascii	"Received request packet\012\000"
	.align	2
.LC1669:
	.ascii	"Requests list is empty. Wait.\012\000"
	.align	2
.LC1670:
	.ascii	"Enter(%d)\012\000"
	.align	2
.LC1671:
	.ascii	"MBIM in configuration %d\000"
	.align	2
.LC1672:
	.ascii	"Activate mbim\012\000"
	.align	2
.LC1673:
	.ascii	"%02x.%02x v%04x i%04x l%u\000"
	.align	2
.LC1674:
	.ascii	"control request: %02x.%02x v%04x i%04x l%d\012\000"
	.align	2
.LC1675:
	.ascii	"USB_CDC_SET_NTB_FORMAT\000"
	.align	2
.LC1676:
	.ascii	"NTB FORMAT: sending %d\012\000"
	.align	2
.LC1677:
	.ascii	"USB_CDC_GET_NTB_FORMAT\000"
	.align	2
.LC1678:
	.ascii	"USB_CDC_SET_NTB_INPUT_SIZE\000"
	.align	2
.LC1679:
	.ascii	"Reply to host INPUT SIZE %d\012\000"
	.align	2
.LC1680:
	.ascii	"USB_CDC_GET_NTB_INPUT_SIZE\000"
	.align	2
.LC1681:
	.ascii	"USB_CDC_GET_NTB_PARAMETERS\000"
	.align	2
.LC1682:
	.ascii	"copied encapsulated_response %d bytes\000"
	.align	2
.LC1683:
	.ascii	"req%02x.%02x v%04x i%04x l%d\012\000"
	.align	2
.LC1684:
	.ascii	"USB_CDC_GET_ENCAPSULATED_RESPONSE\000"
	.align	2
.LC1685:
	.ascii	"w_length > req->length: %d > %d\000"
	.align	2
.LC1686:
	.ascii	"USB_CDC_SEND_ENCAPSULATED_COMMAND\000"
	.align	2
.LC1687:
	.ascii	"USB_CDC_RESET_FUNCTION\000"
	.align	2
.LC1688:
	.ascii	"Wake up read queue\000"
	.align	2
.LC1689:
	.ascii	"Add to cpkt_req_q packet with len = %d\012\000"
	.align	2
.LC1690:
	.ascii	"Set NTB INPUT SIZE %d\012\000"
	.align	2
.LC1691:
	.ascii	"%s: Exit\012\000"
	.align	2
.LC1692:
	.ascii	"notify_count = %d\000"
	.align	2
.LC1693:
	.ascii	"queue request: notify_count = %d\000"
	.align	2
.LC1694:
	.ascii	"notify_response_avaliable: done\000"
	.align	2
.LC1695:
	.ascii	"Notification %02x sent\012\000"
	.align	2
.LC1696:
	.ascii	"No pending notifications\012\000"
	.align	2
.LC1697:
	.ascii	"notify_state: %d\000"
	.align	2
.LC1698:
	.ascii	"Queue empty packet for QBI\000"
	.align	2
.LC1699:
	.ascii	"dev:%pK port_num#%d\012\000"
	.align	2
.LC1700:
	.ascii	"Successful Exit\000"
	.align	2
.LC1701:
	.ascii	"delay ep_queue: notifications queue is busy[%d]\000"
	.align	2
.LC1702:
	.ascii	"dev:%pK portno#%d\012\000"
	.align	2
.LC1703:
	.ascii	"MBIM Control\000"
	.align	2
.LC1704:
	.ascii	"MBIM Data\000"
	.align	2
.LC1705:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_qc_ecm.c"
	.ascii	"\000"
	.align	2
.LC1706:
	.ascii	"ecm_ipa successful created\000"
	.align	2
.LC1707:
	.ascii	"setting ecm_ipa, host_ethaddr=%pM, device_ethaddr=%"
	.ascii	"pM\000"
	.align	2
.LC1708:
	.ascii	"set xport = %d\000"
	.align	2
.LC1709:
	.ascii	"data transport type is %s\000"
	.align	2
.LC1710:
	.ascii	"ecm resumed\012\000"
	.align	2
.LC1711:
	.ascii	"ecm suspended\012\000"
	.align	2
.LC1712:
	.ascii	"dev:%pK. Disconnect BAM.\012\000"
	.align	2
.LC1713:
	.ascii	"ecm bam connected\012\000"
	.align	2
.LC1714:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/rndis.c\000"
	.align	2
.LC1715:
	.ascii	"%s: REMOTE_NDIS_KEEPALIVE_MSG\012\000"
	.align	2
.LC1716:
	.ascii	"%03d: %08x %08x %08x %08x\012\000"
	.align	2
.LC1717:
	.ascii	"set OID %08x value, len %d:\012\000"
	.align	2
.LC1718:
	.ascii	"%s: OID_GEN_RCV_ERROR\012\000"
	.align	2
.LC1719:
	.ascii	"%s: OID_GEN_XMIT_ERROR\012\000"
	.align	2
.LC1720:
	.ascii	"%s: OID_GEN_RCV_OK\012\000"
	.align	2
.LC1721:
	.ascii	"%s: OID_GEN_XMIT_OK\012\000"
	.align	2
.LC1722:
	.ascii	"%s: OID_GEN_MEDIA_CONNECT_STATUS\012\000"
	.align	2
.LC1723:
	.ascii	"%s: OID_GEN_LINK_SPEED\012\000"
	.align	2
.LC1724:
	.ascii	"query OID %08x value, len %d:\012\000"
	.global	rndis_ul_max_xfer_size_rcvd
	.global	rndis_ul_max_pkt_per_xfer_rcvd
	.align	2
.LC1725:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_rndis.c\000"
	.align	2
.LC1726:
	.ascii	"USB accessory\000"
	.align	2
.LC1727:
	.ascii	"usb_accessory\000"
	.align	2
.LC1728:
	.ascii	"Android Accessory Interface\000"
	.align	2
.LC1729:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_mtp.c\000"
	.global	mtp_ext_config_desc
	.align	2
.LC1730:
	.ascii	"MTP\000"
	.global	mtp_tx_reqs
	.global	mtp_tx_req_len
	.global	mtp_rx_req_len
	.align	2
.LC1731:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_midi.c\000"
	.align	2
.LC1732:
	.ascii	"MIDI function\000"
	.align	2
.LC1733:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_ccid.c\000"
	.align	2
.LC1734:
	.ascii	"ccid_ctrl\000"
	.align	2
.LC1735:
	.ascii	"ccid_bulk\000"
	.align	2
.LC1736:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_adb.c\000"
	.align	2
.LC1737:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_acm.c\000"
	.align	2
.LC1738:
	.ascii	"CDC Abstract Control Model (ACM)\000"
	.align	2
.LC1739:
	.ascii	"CDC ACM Data\000"
	.align	2
.LC1740:
	.ascii	"CDC Serial\000"
	.align	2
.LC1741:
	.ascii	"dun\000"
	.align	2
.LC1742:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/u_data_hsu"
	.ascii	"art.c\000"
	.global	ghsuart_data_stats_ops
	.align	2
.LC1743:
	.ascii	"%s: event type: %s \000"
	.align	2
.LC1744:
	.ascii	"%s: ep:%s head:%pK num:%d cb:%pK\000"
	.global	ghsuart_data_tx_intr_thld
	.align	2
.LC1745:
	.ascii	"SMUX_DUN_DATA_HSUART\000"
	.align	2
.LC1746:
	.ascii	"SMUX_RMNET_DATA_HSUART\000"
	.align	2
.LC1747:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/u_ctrl_hsu"
	.ascii	"art.c\000"
	.align	2
.LC1748:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/u_data_hsi"
	.ascii	"c.c\000"
	.global	ghsic_stats_ops
	.global	gdata_timestamp_ops
	.global	ghsic_data_tx_intr_thld
	.global	gctrl_dfile
	.global	gctrl_dent
	.global	gctrl_stats_ops
	.align	2
.LC1749:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/u_ctrl_hsi"
	.ascii	"c.c\000"
	.align	2
.LC1750:
	.ascii	"rmnet_ctrl\000"
	.align	2
.LC1751:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/u_rmnet_ct"
	.ascii	"rl_qti.c\000"
	.global	smd_ctrl_dfile
	.global	smd_ctrl_dent
	.global	gsmd_ctrl_stats_ops
	.align	2
.LC1752:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/u_rmnet_ct"
	.ascii	"rl_smd.c\000"
	.global	online_clients
	.align	2
.LC1753:
	.ascii	"DATA40_CNTL\000"
	.align	2
.LC1754:
	.ascii	"DATA39_CNTL\000"
	.align	2
.LC1755:
	.ascii	"DATA38_CNTL\000"
	.align	2
.LC1756:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/u_bam.c\000"
	.global	gbam_dent
	.global	gbam_stats_ops
	.global	bam2bam_ports
	.align	2
.LC1757:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/u_smd.c\000"
	.global	smd_pi
	.align	2
.LC1758:
	.ascii	"DS\000"
	.align	2
.LC1759:
	.ascii	"UNUSED\000"
	.align	2
.LC1760:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/u_sdio.c\000"
	.align	2
.LC1761:
	.ascii	"%s: USB is already open, start io\012\000"
	.align	2
.LC1762:
	.ascii	"%s: SDIO data:%s ctrl:%d are open\012\000"
	.align	2
.LC1763:
	.ascii	"%s: read_avail:%d port:%pK port#%d\012\000"
	.global	sport_info
	.align	2
.LC1764:
	.ascii	"SDIO_DUN\000"
	.align	2
.LC1765:
	.ascii	"SDIO_NMEA\000"
	.global	gs_dent
	.global	debug_adb_ops
	.global	debug_rst_ops
	.align	2
.LC1766:
	.ascii	"cdrom\000"
	.align	2
.LC1767:
	.ascii	"file\000"
	.align	2
.LC1768:
	.ascii	"nofua\000"
	.align	2
.LC1769:
	.ascii	"ro\000"
	.align	2
.LC1770:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/storage_co"
	.ascii	"mmon.c\000"
	.align	2
.LC1771:
	.ascii	"functionfs\000"
	.align	2
.LC1772:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_audio_so"
	.ascii	"urce.c\000"
	.align	2
.LC1773:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_rmnet.c\000"
	.align	2
.LC1774:
	.ascii	"RmNet\000"
	.align	2
.LC1775:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_rmnet_sm"
	.ascii	"d_sdio.c\000"
	.align	2
.LC1776:
	.ascii	"rmnet_mux_ctrl\000"
	.global	dent_rmnet_mux
	.global	rmnet_mux_svlte_debug_stats_ops
	.align	2
.LC1777:
	.ascii	"transport\000"
	.global	debug_rmnet_sdio_stats_ops
	.align	2
.LC1778:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_rmnet_sd"
	.ascii	"io.c\000"
	.align	2
.LC1779:
	.ascii	"rmnet_sdio_sts_callback: id: %d\012\000"
	.align	2
.LC1780:
	.ascii	"unable to allocate memory for QMI resp\012\000"
	.align	2
.LC1781:
	.ascii	"USB disconnected\012\000"
	.align	2
.LC1782:
	.ascii	"QMI RmNet\000"
	.global	sdio_rx_fctrl_dis_thld
	.global	sdio_rx_fctrl_en_thld
	.global	sdio_tx_pkt_drop_thld
	.global	dent_smd
	.global	rmnet_smd_debug_stats_ops
	.align	2
.LC1783:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_rmnet_sm"
	.ascii	"d.c\000"
	.align	2
.LC1784:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_qdss.c\000"
	.align	2
.LC1785:
	.ascii	"QDSS DATA\000"
	.align	2
.LC1786:
	.ascii	"QDSS CTRL\000"
	.align	2
.LC1787:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/u_qdss.c\000"
	.global	dent_diag
	.align	2
.LC1788:
	.ascii	"/home/jprim/hlte/lolz/drivers/usb/gadget/f_diag.c\000"
	.align	2
.LC1789:
	.ascii	"suspended\000"
	.align	2
.LC1790:
	.ascii	"HNP on another port\012\000"
	.align	2
.LC1791:
	.ascii	"HNP available\012\000"
	.section	.rodata
	.align	3
	.set	.LANCHOR3,. + 0
	.set	.LANCHOR5,. + 8184
	.type	__func__.38435, %object
	.size	__func__.38435, 24
__func__.38435:
	.ascii	"usb_rmnet_mux_ctrl_open\000"
	.type	__func__.57040, %object
	.size	__func__.57040, 13
__func__.57040:
	.ascii	"ecm_qc_setup\000"
	.space	3
	.type	__func__.58087, %object
	.size	__func__.58087, 27
__func__.58087:
	.ascii	"rndis_qc_response_complete\000"
	.space	1
	.type	__func__.58079, %object
	.size	__func__.58079, 28
__func__.58079:
	.ascii	"rndis_qc_response_available\000"
	.type	__func__.62037, %object
	.size	__func__.62037, 21
__func__.62037:
	.ascii	"f_audio_buffer_alloc\000"
	.space	3
	.type	__func__.63346, %object
	.size	__func__.63346, 10
__func__.63346:
	.ascii	"ncm_setup\000"
	.space	2
	.type	__func__.63330, %object
	.size	__func__.63330, 22
__func__.63330:
	.ascii	"ncm_setdgram_complete\000"
	.space	2
	.type	__func__.64332, %object
	.size	__func__.64332, 23
__func__.64332:
	.ascii	"sua_version_info_store\000"
	.space	1
	.type	__func__.58223, %object
	.size	__func__.58223, 21
__func__.58223:
	.ascii	"rndis_qc_release_dev\000"
	.space	3
	.type	__func__.58213, %object
	.size	__func__.58213, 18
__func__.58213:
	.ascii	"rndis_qc_open_dev\000"
	.space	2
	.type	__func__.57576, %object
	.size	__func__.57576, 13
__func__.57576:
	.ascii	"mbim_release\000"
	.space	3
	.type	__func__.57568, %object
	.size	__func__.57568, 10
__func__.57568:
	.ascii	"mbim_open\000"
	.space	2
	.type	__func__.48310, %object
	.size	__func__.48310, 16
__func__.48310:
	.ascii	"gsdio_open_work\000"
	.type	__func__.64689, %object
	.size	__func__.64689, 11
__func__.64689:
	.ascii	"state_show\000"
	.space	1
	.type	__func__.64604, %object
	.size	__func__.64604, 12
__func__.64604:
	.ascii	"enable_show\000"
	.type	__func__.45650, %object
	.size	__func__.45650, 18
__func__.45650:
	.ascii	"start_in_transfer\000"
	.space	2
	.type	dirletter.45985, %object
	.size	dirletter.45985, 4
dirletter.45985:
	.ascii	"uoin"
	.type	__func__.64322, %object
	.size	__func__.64322, 22
__func__.64322:
	.ascii	"sua_version_info_show\000"
	.space	2
	.type	__func__.48517, %object
	.size	__func__.48517, 14
__func__.48517:
	.ascii	"gsmd_start_rx\000"
	.space	2
	.type	__func__.49228, %object
	.size	__func__.49228, 21
__func__.49228:
	.ascii	"gbam_stop_endless_rx\000"
	.space	3
	.type	__func__.49235, %object
	.size	__func__.49235, 21
__func__.49235:
	.ascii	"gbam_stop_endless_tx\000"
	.space	3
	.type	__func__.49214, %object
	.size	__func__.49214, 22
__func__.49214:
	.ascii	"gbam_start_endless_rx\000"
	.space	2
	.type	__func__.49221, %object
	.size	__func__.49221, 22
__func__.49221:
	.ascii	"gbam_start_endless_tx\000"
	.space	2
	.type	__func__.49342, %object
	.size	__func__.49342, 13
__func__.49342:
	.ascii	"gbam_wake_cb\000"
	.space	3
	.type	__func__.49187, %object
	.size	__func__.49187, 25
__func__.49187:
	.ascii	"gbam_endless_tx_complete\000"
	.space	3
	.type	__func__.49180, %object
	.size	__func__.49180, 25
__func__.49180:
	.ascii	"gbam_endless_rx_complete\000"
	.space	3
	.type	__func__.50889, %object
	.size	__func__.50889, 24
__func__.50889:
	.ascii	"ghsic_send_cpkt_tomodem\000"
	.type	__func__.50954, %object
	.size	__func__.50954, 18
__func__.50954:
	.ascii	"ghsic_ctrl_status\000"
	.space	2
	.type	__func__.51900, %object
	.size	__func__.51900, 26
__func__.51900:
	.ascii	"ghsuart_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.57383, %object
	.size	__func__.57383, 21
__func__.57383:
	.ascii	"mbim_ep0out_complete\000"
	.space	3
	.type	__func__.57680, %object
	.size	__func__.57680, 25
__func__.57680:
	.ascii	"bam_data_stop_endless_rx\000"
	.space	3
	.type	__func__.57687, %object
	.size	__func__.57687, 25
__func__.57687:
	.ascii	"bam_data_stop_endless_tx\000"
	.space	3
	.type	__func__.57659, %object
	.size	__func__.57659, 29
__func__.57659:
	.ascii	"bam_data_endless_tx_complete\000"
	.space	3
	.type	__func__.57652, %object
	.size	__func__.57652, 29
__func__.57652:
	.ascii	"bam_data_endless_rx_complete\000"
	.space	3
	.type	__func__.62293, %object
	.size	__func__.62293, 14
__func__.62293:
	.ascii	"f_audio_setup\000"
	.space	2
	.type	__func__.62146, %object
	.size	__func__.62146, 19
__func__.62146:
	.ascii	"audio_set_intf_req\000"
	.space	1
	.type	__func__.62177, %object
	.size	__func__.62177, 19
__func__.62177:
	.ascii	"audio_get_intf_req\000"
	.space	1
	.type	__func__.62215, %object
	.size	__func__.62215, 23
__func__.62215:
	.ascii	"audio_set_endpoint_req\000"
	.space	1
	.type	__func__.62257, %object
	.size	__func__.62257, 23
__func__.62257:
	.ascii	"audio_get_endpoint_req\000"
	.space	1
	.type	__func__.64866, %object
	.size	__func__.64866, 22
__func__.64866:
	.ascii	"android_unbind_config\000"
	.space	2
	.type	__func__.64494, %object
	.size	__func__.64494, 24
__func__.64494:
	.ascii	"android_enable_function\000"
	.type	__func__.64480, %object
	.size	__func__.64480, 21
__func__.64480:
	.ascii	"check_streaming_func\000"
	.space	3
	.type	__func__.38916, %object
	.size	__func__.38916, 13
__func__.38916:
	.ascii	"frmnet_setup\000"
	.space	3
	.type	__func__.38884, %object
	.size	__func__.38884, 23
__func__.38884:
	.ascii	"frmnet_notify_complete\000"
	.space	1
	.type	__func__.57455, %object
	.size	__func__.57455, 17
__func__.57455:
	.ascii	"mbim_ctrlrequest\000"
	.space	3
	.type	__func__.44789, %object
	.size	__func__.44789, 13
__func__.44789:
	.ascii	"ffs_do_descs\000"
	.space	3
	.type	__func__.38751, %object
	.size	__func__.38751, 14
__func__.38751:
	.ascii	"frmnet_unbind\000"
	.space	2
	.type	__func__.47224, %object
	.size	__func__.47224, 12
__func__.47224:
	.ascii	"gs_start_rx\000"
	.type	__func__.58641, %object
	.size	__func__.58641, 12
__func__.58641:
	.ascii	"gether_init\000"
	.type	__func__.48209, %object
	.size	__func__.48209, 21
__func__.48209:
	.ascii	"gsdio_write_complete\000"
	.space	3
	.type	__func__.48283, %object
	.size	__func__.48283, 24
__func__.48283:
	.ascii	"gsdio_ctrl_notify_modem\000"
	.type	__func__.48600, %object
	.size	__func__.48600, 20
__func__.48600:
	.ascii	"gsmd_write_complete\000"
	.type	__func__.48593, %object
	.size	__func__.48593, 19
__func__.48593:
	.ascii	"gsmd_read_complete\000"
	.space	1
	.type	__func__.51957, %object
	.size	__func__.51957, 19
__func__.51957:
	.ascii	"ghsuart_ctrl_probe\000"
	.space	1
	.type	__func__.52426, %object
	.size	__func__.52426, 19
__func__.52426:
	.ascii	"ghsuart_data_probe\000"
	.space	1
	.type	CSWTCH.1793, %object
	.size	CSWTCH.1793, 40
CSWTCH.1793:
	.word	.LC625
	.word	.LC626
	.word	.LC627
	.word	.LC628
	.word	.LC629
	.word	.LC630
	.word	.LC631
	.word	.LC632
	.word	.LC633
	.word	.LC1517
	.type	__func__.49673, %object
	.size	__func__.49673, 29
__func__.49673:
	.ascii	"gsmd_ctrl_send_cbits_tomodem\000"
	.space	3
	.type	__func__.49644, %object
	.size	__func__.49644, 24
__func__.49644:
	.ascii	"grmnet_ctrl_smd_write_w\000"
	.type	__func__.48576, %object
	.size	__func__.48576, 13
__func__.48576:
	.ascii	"gsmd_tx_pull\000"
	.space	3
	.type	__func__.48660, %object
	.size	__func__.48660, 21
__func__.48660:
	.ascii	"gsmd_disconnect_work\000"
	.space	3
	.type	__func__.65052, %object
	.size	__func__.65052, 5
__func__.65052:
	.ascii	"init\000"
	.space	3
	.type	__func__.49616, %object
	.size	__func__.49616, 23
__func__.49616:
	.ascii	"grmnet_ctrl_smd_read_w\000"
	.space	1
	.type	__func__.57393, %object
	.size	__func__.57393, 19
__func__.57393:
	.ascii	"fmbim_cmd_complete\000"
	.space	1
	.type	__func__.63037, %object
	.size	__func__.63037, 29
__func__.63037:
	.ascii	"conn_gadget_function_disable\000"
	.space	3
	.type	__func__.62942, %object
	.size	__func__.62942, 18
__func__.62942:
	.ascii	"conn_gadget_flush\000"
	.space	2
	.type	__func__.54381, %object
	.size	__func__.54381, 16
__func__.54381:
	.ascii	"mtp_ctrlrequest\000"
	.type	__func__.38160, %object
	.size	__func__.38160, 27
__func__.38160:
	.ascii	"rmnet_mux_command_complete\000"
	.space	1
	.type	CSWTCH.1884, %object
	.size	CSWTCH.1884, 12
CSWTCH.1884:
	.word	.LC1514
	.word	.LC1515
	.word	.LC1516
	.type	__func__.49690, %object
	.size	__func__.49690, 23
__func__.49690:
	.ascii	"grmnet_ctrl_smd_notify\000"
	.space	1
	.type	__func__.51968, %object
	.size	__func__.51968, 20
__func__.51968:
	.ascii	"ghsuart_ctrl_remove\000"
	.type	gsmd_ctrl_stats_ops, %object
	.size	gsmd_ctrl_stats_ops, 108
gsmd_ctrl_stats_ops:
	.space	8
	.word	gsmd_ctrl_read_stats
	.word	gsmd_ctrl_reset_stats
	.space	92
	.type	gctrl_stats_ops, %object
	.size	gctrl_stats_ops, 108
gctrl_stats_ops:
	.space	8
	.word	gctrl_read_stats
	.word	gctrl_reset_stats
	.space	92
	.type	ghsic_stats_ops, %object
	.size	ghsic_stats_ops, 108
ghsic_stats_ops:
	.space	8
	.word	ghsic_data_read_stats
	.word	ghsic_data_reset_stats
	.space	92
	.type	gdata_timestamp_ops, %object
	.size	gdata_timestamp_ops, 108
gdata_timestamp_ops:
	.space	8
	.word	show_timestamp
	.space	96
	.type	ghsuart_ctrl_stats_ops, %object
	.size	ghsuart_ctrl_stats_ops, 108
ghsuart_ctrl_stats_ops:
	.space	8
	.word	ghsuart_ctrl_read_stats
	.word	ghsuart_ctrl_reset_stats
	.space	92
	.type	ghsuart_data_stats_ops, %object
	.size	ghsuart_data_stats_ops, 108
ghsuart_data_stats_ops:
	.space	8
	.word	ghsuart_data_read_stats
	.word	ghsuart_data_reset_stats
	.space	92
	.type	debug_fdiag_ops, %object
	.size	debug_fdiag_ops, 108
debug_fdiag_ops:
	.space	8
	.word	debug_read_stats
	.word	debug_reset_stats
	.space	28
	.word	debug_open
	.space	60
	.type	__func__.37347, %object
	.size	__func__.37347, 24
__func__.37347:
	.ascii	"rmnet_sdio_data_rx_work\000"
	.type	__func__.49087, %object
	.size	__func__.49087, 23
__func__.49087:
	.ascii	"gbam_write_data_tohost\000"
	.space	1
	.type	__func__.49158, %object
	.size	__func__.49158, 19
__func__.49158:
	.ascii	"gbam_epin_complete\000"
	.space	1
	.type	__func__.51340, %object
	.size	__func__.51340, 19
__func__.51340:
	.ascii	"ghsic_data_receive\000"
	.space	1
	.type	__func__.58516, %object
	.size	__func__.58516, 15
__func__.58516:
	.ascii	"eth_start_xmit\000"
	.space	1
	.type	__func__.49716, %object
	.size	__func__.49716, 26
__func__.49716:
	.ascii	"grmnet_ctrl_smd_connect_w\000"
	.space	2
	.type	__func__.49206, %object
	.size	__func__.49206, 14
__func__.49206:
	.ascii	"gbam_start_rx\000"
	.space	2
	.type	__func__.49173, %object
	.size	__func__.49173, 20
__func__.49173:
	.ascii	"gbam_epout_complete\000"
	.type	__func__.50037, %object
	.size	__func__.50037, 17
__func__.50037:
	.ascii	"rmnet_ctrl_ioctl\000"
	.space	3
	.type	__func__.58239, %object
	.size	__func__.58239, 15
__func__.58239:
	.ascii	"rndis_qc_ioctl\000"
	.space	1
	.type	__func__.57585, %object
	.size	__func__.57585, 11
__func__.57585:
	.ascii	"mbim_ioctl\000"
	.space	1
	.type	__func__.38459, %object
	.size	__func__.38459, 24
__func__.38459:
	.ascii	"usb_rmnet_mux_ctrl_read\000"
	.type	__func__.49991, %object
	.size	__func__.49991, 16
__func__.49991:
	.ascii	"rmnet_ctrl_read\000"
	.type	__func__.53424, %object
	.size	__func__.53424, 15
__func__.53424:
	.ascii	"ccid_ctrl_read\000"
	.space	1
	.type	__func__.38483, %object
	.size	__func__.38483, 25
__func__.38483:
	.ascii	"usb_rmnet_mux_ctrl_write\000"
	.space	3
	.type	__func__.50020, %object
	.size	__func__.50020, 17
__func__.50020:
	.ascii	"rmnet_ctrl_write\000"
	.space	3
	.type	__func__.64998, %object
	.size	__func__.64998, 35
__func__.64998:
	.ascii	"usb_diag_update_pid_and_serial_num\000"
	.space	5
	.type	audio_hw_info, %object
	.size	audio_hw_info, 64
audio_hw_info:
	.word	65811
	.space	4
	.word	4
	.word	0
	.space	4
	.word	44100
	.word	44100
	.word	2
	.word	2
	.word	1048576
	.word	64
	.word	524288
	.word	2
	.word	1024
	.space	8
	.type	__func__.48541, %object
	.size	__func__.48541, 13
__func__.48541:
	.ascii	"gsmd_rx_push\000"
	.space	3
	.type	__func__.48337, %object
	.size	__func__.48337, 15
__func__.48337:
	.ascii	"gsdio_ch_probe\000"
	.space	1
	.type	__func__.48719, %object
	.size	__func__.48719, 15
__func__.48719:
	.ascii	"gsmd_ch_remove\000"
	.space	1
	.type	__func__.48705, %object
	.size	__func__.48705, 14
__func__.48705:
	.ascii	"gsmd_ch_probe\000"
	.space	2
	.type	__func__.49381, %object
	.size	__func__.49381, 19
__func__.49381:
	.ascii	"gbam_data_ch_probe\000"
	.space	1
	.type	__func__.49783, %object
	.size	__func__.49783, 26
__func__.49783:
	.ascii	"grmnet_ctrl_smd_ch_remove\000"
	.space	2
	.type	__func__.49768, %object
	.size	__func__.49768, 25
__func__.49768:
	.ascii	"grmnet_ctrl_smd_ch_probe\000"
	.space	3
	.type	__func__.50983, %object
	.size	__func__.50983, 18
__func__.50983:
	.ascii	"ghsic_ctrl_remove\000"
	.space	2
	.type	__func__.48669, %object
	.size	__func__.48669, 18
__func__.48669:
	.ascii	"gsmd_notify_modem\000"
	.space	2
	.type	__func__.48650, %object
	.size	__func__.48650, 18
__func__.48650:
	.ascii	"gsmd_connect_work\000"
	.space	2
	.type	__func__.49138, %object
	.size	__func__.49138, 22
__func__.49138:
	.ascii	"gbam_data_write_tobam\000"
	.space	2
	.type	__func__.49360, %object
	.size	__func__.49360, 21
__func__.49360:
	.ascii	"gbam2bam_resume_work\000"
	.space	3
	.type	__func__.57825, %object
	.size	__func__.57825, 25
__func__.57825:
	.ascii	"bam2bam_data_resume_work\000"
	.space	3
	.type	__func__.49351, %object
	.size	__func__.49351, 22
__func__.49351:
	.ascii	"gbam2bam_suspend_work\000"
	.space	2
	.type	__func__.57816, %object
	.size	__func__.57816, 26
__func__.57816:
	.ascii	"bam2bam_data_suspend_work\000"
	.space	2
	.type	__func__.49329, %object
	.size	__func__.49329, 22
__func__.49329:
	.ascii	"gbam2bam_connect_work\000"
	.space	2
	.type	__func__.57718, %object
	.size	__func__.57718, 26
__func__.57718:
	.ascii	"bam2bam_data_connect_work\000"
	.space	2
	.type	__func__.57666, %object
	.size	__func__.57666, 26
__func__.57666:
	.ascii	"bam_data_start_endless_rx\000"
	.space	2
	.type	__func__.57673, %object
	.size	__func__.57673, 26
__func__.57673:
	.ascii	"bam_data_start_endless_tx\000"
	.space	2
	.type	__func__.49371, %object
	.size	__func__.49371, 19
__func__.49371:
	.ascii	"gbam_peer_reset_cb\000"
	.space	1
	.type	__func__.57695, %object
	.size	__func__.57695, 23
__func__.57695:
	.ascii	"bam_data_peer_reset_cb\000"
	.space	1
	.type	__func__.58255, %object
	.size	__func__.58255, 14
__func__.58255:
	.ascii	"rndis_qc_init\000"
	.space	2
	.type	__func__.38504, %object
	.size	__func__.38504, 27
__func__.38504:
	.ascii	"rmnet_mux_ctrl_device_init\000"
	.space	1
	.type	__func__.38520, %object
	.size	__func__.38520, 20
__func__.38520:
	.ascii	"rmnet_smd_sdio_init\000"
	.type	rmnet_mux_svlte_debug_stats_ops, %object
	.size	rmnet_mux_svlte_debug_stats_ops, 108
rmnet_mux_svlte_debug_stats_ops:
	.space	8
	.word	rmnet_mux_read_stats
	.word	rmnet_mux_reset_stats
	.space	28
	.word	dbg_rmnet_mux_open
	.space	60
	.type	__func__.58260, %object
	.size	__func__.58260, 17
__func__.58260:
	.ascii	"rndis_qc_cleanup\000"
	.space	3
	.type	__func__.57613, %object
	.size	__func__.57613, 14
__func__.57613:
	.ascii	"fmbim_cleanup\000"
	.space	2
	.type	__func__.58464, %object
	.size	__func__.58464, 12
__func__.58464:
	.ascii	"tx_complete\000"
	.type	__func__.56727, %object
	.size	__func__.56727, 13
__func__.56727:
	.ascii	"rndis_rm_hdr\000"
	.space	3
	.type	CSWTCH.2649, %object
	.size	CSWTCH.2649, 12
CSWTCH.2649:
	.word	.LC1511
	.word	.LC1512
	.word	.LC1513
	.type	__func__.61891, %object
	.size	__func__.61891, 21
__func__.61891:
	.ascii	"gaudio_close_snd_dev\000"
	.space	3
	.type	__func__.63114, %object
	.size	__func__.63114, 29
__func__.63114:
	.ascii	"conn_gadget_function_cleanup\000"
	.space	3
	.type	__func__.63105, %object
	.size	__func__.63105, 20
__func__.63105:
	.ascii	"conn_gadget_cleanup\000"
	.type	__func__.63110, %object
	.size	__func__.63110, 26
__func__.63110:
	.ascii	"conn_gadget_function_init\000"
	.space	2
	.type	__func__.63052, %object
	.size	__func__.63052, 18
__func__.63052:
	.ascii	"conn_gadget_setup\000"
	.space	2
	.type	__func__.63072, %object
	.size	__func__.63072, 34
__func__.63072:
	.ascii	"conn_gadget_usb_buffer_size_store\000"
	.space	2
	.type	__func__.64518, %object
	.size	__func__.64518, 20
__func__.64518:
	.ascii	"remote_wakeup_store\000"
	.type	__func__.64312, %object
	.size	__func__.64312, 27
__func__.64312:
	.ascii	"mass_storage_product_store\000"
	.space	1
	.type	__func__.64295, %object
	.size	__func__.64295, 26
__func__.64295:
	.ascii	"mass_storage_vendor_store\000"
	.space	2
	.type	__func__.63422, %object
	.size	__func__.63422, 13
__func__.63422:
	.ascii	"ncm_wrap_ntb\000"
	.space	3
	.type	__func__.63630, %object
	.size	__func__.63630, 24
__func__.63630:
	.ascii	"usb_gadget_connect_work\000"
	.type	__func__.63507, %object
	.size	__func__.63507, 9
__func__.63507:
	.ascii	"ncm_work\000"
	.space	3
	.type	__func__.64890, %object
	.size	__func__.64890, 19
__func__.64890:
	.ascii	"android_usb_unbind\000"
	.space	1
	.type	__func__.64845, %object
	.size	__func__.64845, 11
__func__.64845:
	.ascii	"macos_show\000"
	.space	1
	.type	__func__.64835, %object
	.size	__func__.64835, 23
__func__.64835:
	.ascii	"ss_host_available_show\000"
	.space	1
	.type	__func__.64984, %object
	.size	__func__.64984, 21
__func__.64984:
	.ascii	"alloc_android_config\000"
	.space	3
	.type	__func__.64587, %object
	.size	__func__.64587, 16
__func__.64587:
	.ascii	"functions_store\000"
	.type	__func__.45534, %object
	.size	__func__.45534, 13
__func__.45534:
	.ascii	"send_message\000"
	.space	3
	.type	__func__.64878, %object
	.size	__func__.64878, 13
__func__.64878:
	.ascii	"android_bind\000"
	.space	3
	.type	__func__.64422, %object
	.size	__func__.64422, 23
__func__.64422:
	.ascii	"android_init_functions\000"
	.space	1
	.type	longname, %object
	.size	longname, 15
longname:
	.ascii	"Gadget Android\000"
	.space	1
	.type	__func__.63621, %object
	.size	__func__.63621, 13
__func__.63621:
	.ascii	"android_work\000"
	.space	3
	.type	__func__.45618, %object
	.size	__func__.45618, 18
__func__.45618:
	.ascii	"bulk_out_complete\000"
	.space	2
	.type	__func__.45610, %object
	.size	__func__.45610, 17
__func__.45610:
	.ascii	"bulk_in_complete\000"
	.space	3
	.type	__func__.54309, %object
	.size	__func__.54309, 18
__func__.54309:
	.ascii	"receive_file_work\000"
	.space	2
	.type	__func__.57562, %object
	.size	__func__.57562, 11
__func__.57562:
	.ascii	"mbim_write\000"
	.space	1
	.type	__func__.57287, %object
	.size	__func__.57287, 25
__func__.57287:
	.ascii	"fmbim_send_cpkt_response\000"
	.space	3
	.type	__func__.57275, %object
	.size	__func__.57275, 30
__func__.57275:
	.ascii	"fmbim_ctrl_response_available\000"
	.space	2
	.type	__func__.62088, %object
	.size	__func__.62088, 29
__func__.62088:
	.ascii	"f_audio_playback_ep_complete\000"
	.space	3
	.type	__func__.62112, %object
	.size	__func__.62112, 28
__func__.62112:
	.ascii	"f_audio_capture_ep_complete\000"
	.type	__func__.62130, %object
	.size	__func__.62130, 17
__func__.62130:
	.ascii	"f_audio_complete\000"
	.space	3
	.type	__func__.25437, %object
	.size	__func__.25437, 15
__func__.25437:
	.ascii	"composite_bind\000"
	.space	1
	.type	__func__.48274, %object
	.size	__func__.48274, 14
__func__.48274:
	.ascii	"gsdio_ctrl_wq\000"
	.space	2
	.type	__func__.38844, %object
	.size	__func__.38844, 15
__func__.38844:
	.ascii	"frmnet_connect\000"
	.space	1
	.type	__func__.63095, %object
	.size	__func__.63095, 36
__func__.63095:
	.ascii	"conn_gadget_in_max_packet_size_show\000"
	.type	__func__.63083, %object
	.size	__func__.63083, 37
__func__.63083:
	.ascii	"conn_gadget_out_max_packet_size_show\000"
	.space	3
	.type	__func__.63062, %object
	.size	__func__.63062, 33
__func__.63062:
	.ascii	"conn_gadget_usb_buffer_size_show\000"
	.space	3
	.type	__func__.63557, %object
	.size	__func__.63557, 22
__func__.63557:
	.ascii	"terminal_version_show\000"
	.space	2
	.type	__func__.37430, %object
	.size	__func__.37430, 29
__func__.37430:
	.ascii	"rmnet_sdio_set_modem_cbits_w\000"
	.space	3
	.type	__func__.50049, %object
	.size	__func__.50049, 16
__func__.50049:
	.ascii	"rmnet_ctrl_poll\000"
	.type	__func__.50897, %object
	.size	__func__.50897, 25
__func__.50897:
	.ascii	"ghsic_send_cbits_tomodem\000"
	.space	3
	.type	__func__.50911, %object
	.size	__func__.50911, 21
__func__.50911:
	.ascii	"ghsic_ctrl_connect_w\000"
	.space	3
	.type	__func__.51910, %object
	.size	__func__.51910, 27
__func__.51910:
	.ascii	"ghsuart_send_cbits_tomodem\000"
	.space	1
	.type	__func__.57783, %object
	.size	__func__.57783, 17
__func__.57783:
	.ascii	"bam_data_wake_cb\000"
	.space	3
	.type	__func__.53403, %object
	.size	__func__.53403, 15
__func__.53403:
	.ascii	"ccid_ctrl_open\000"
	.space	1
	.type	__func__.53303, %object
	.size	__func__.53303, 15
__func__.53303:
	.ascii	"ccid_bulk_open\000"
	.space	1
	.type	__func__.38851, %object
	.size	__func__.38851, 18
__func__.38851:
	.ascii	"frmnet_disconnect\000"
	.space	2
	.type	__func__.38758, %object
	.size	__func__.38758, 23
__func__.38758:
	.ascii	"frmnet_purge_responses\000"
	.space	1
	.type	__func__.38873, %object
	.size	__func__.38873, 20
__func__.38873:
	.ascii	"frmnet_cmd_complete\000"
	.type	__func__.48198, %object
	.size	__func__.48198, 20
__func__.48198:
	.ascii	"gsdio_read_complete\000"
	.type	__func__.51306, %object
	.size	__func__.51306, 25
__func__.51306:
	.ascii	"ghsic_data_unthrottle_tx\000"
	.space	3
	.type	__func__.52250, %object
	.size	__func__.52250, 25
__func__.52250:
	.ascii	"ghsuart_data_write_tomdm\000"
	.space	3
	.type	__func__.52294, %object
	.size	__func__.52294, 22
__func__.52294:
	.ascii	"ghsuart_data_start_rx\000"
	.space	2
	.type	__func__.52234, %object
	.size	__func__.52234, 26
__func__.52234:
	.ascii	"ghsuart_data_write_tohost\000"
	.space	2
	.type	__func__.37457, %object
	.size	__func__.37457, 22
__func__.37457:
	.ascii	"rmnet_close_sdio_work\000"
	.space	2
	.type	__func__.49301, %object
	.size	__func__.49301, 25
__func__.49301:
	.ascii	"gbam2bam_disconnect_work\000"
	.space	3
	.type	__func__.57704, %object
	.size	__func__.57704, 29
__func__.57704:
	.ascii	"bam2bam_data_disconnect_work\000"
	.space	3
	.type	__func__.63515, %object
	.size	__func__.63515, 18
__func__.63515:
	.ascii	"ncm_function_init\000"
	.space	2
	.type	__func__.51455, %object
	.size	__func__.51455, 21
__func__.51455:
	.ascii	"ghsic_data_connect_w\000"
	.space	3
	.type	__func__.51920, %object
	.size	__func__.51920, 23
__func__.51920:
	.ascii	"ghsuart_ctrl_connect_w\000"
	.space	1
	.type	__func__.52397, %object
	.size	__func__.52397, 23
__func__.52397:
	.ascii	"ghsuart_data_connect_w\000"
	.space	1
	.type	__func__.44484, %object
	.size	__func__.44484, 14
__func__.44484:
	.ascii	"ffs_epfile_io\000"
	.space	2
	.type	__func__.38790, %object
	.size	__func__.38790, 14
__func__.38790:
	.ascii	"frmnet_resume\000"
	.space	2
	.type	__func__.49557, %object
	.size	__func__.49557, 12
__func__.49557:
	.ascii	"gbam_resume\000"
	.type	__func__.64448, %object
	.size	__func__.64448, 31
__func__.64448:
	.ascii	"android_bind_enabled_functions\000"
	.space	1
	.type	__func__.57598, %object
	.size	__func__.57598, 10
__func__.57598:
	.ascii	"mbim_init\000"
	.space	2
	.type	__func__.57485, %object
	.size	__func__.57485, 12
__func__.57485:
	.ascii	"mbim_resume\000"
	.type	__func__.57807, %object
	.size	__func__.57807, 16
__func__.57807:
	.ascii	"bam_data_resume\000"
	.type	__func__.57481, %object
	.size	__func__.57481, 13
__func__.57481:
	.ascii	"mbim_suspend\000"
	.space	3
	.type	__func__.57800, %object
	.size	__func__.57800, 17
__func__.57800:
	.ascii	"bam_data_suspend\000"
	.space	3
	.type	__func__.57741, %object
	.size	__func__.57741, 20
__func__.57741:
	.ascii	"bam_data_disconnect\000"
	.type	__func__.57754, %object
	.size	__func__.57754, 17
__func__.57754:
	.ascii	"bam_data_connect\000"
	.space	3
	.type	__func__.56445, %object
	.size	__func__.56445, 20
__func__.56445:
	.ascii	"gen_ndis_query_resp\000"
	.type	oid_supported_list, %object
	.size	oid_supported_list, 112
oid_supported_list:
	.word	65793
	.word	65794
	.word	65795
	.word	65796
	.word	65798
	.word	65799
	.word	65802
	.word	65803
	.word	65804
	.word	65805
	.word	65814
	.word	65806
	.word	65809
	.word	65812
	.word	66050
	.word	131329
	.word	131330
	.word	131331
	.word	131332
	.word	131333
	.word	16843009
	.word	16843010
	.word	16843011
	.word	16843013
	.word	16843012
	.word	16908545
	.word	16908546
	.word	16908547
	.type	__func__.53394, %object
	.size	__func__.53394, 22
__func__.53394:
	.ascii	"ccid_bulk_device_init\000"
	.space	2
	.type	__func__.53467, %object
	.size	__func__.53467, 11
__func__.53467:
	.ascii	"ccid_setup\000"
	.space	1
	.type	__func__.53454, %object
	.size	__func__.53454, 22
__func__.53454:
	.ascii	"ccid_ctrl_device_init\000"
	.space	2
	.type	__func__.52452, %object
	.size	__func__.52452, 33
__func__.52452:
	.ascii	"ghsuart_send_controlbits_tomodem\000"
	.space	3
	.type	__func__.52330, %object
	.size	__func__.52330, 23
__func__.52330:
	.ascii	"ghsuart_dunctrl_status\000"
	.space	1
	.type	__func__.49068, %object
	.size	__func__.49068, 20
__func__.49068:
	.ascii	"gbam_alloc_requests\000"
	.type	__func__.48492, %object
	.size	__func__.48492, 15
__func__.48492:
	.ascii	"gsmd_alloc_req\000"
	.space	1
	.type	__func__.47207, %object
	.size	__func__.47207, 12
__func__.47207:
	.ascii	"gs_start_tx\000"
	.type	__func__.47271, %object
	.size	__func__.47271, 18
__func__.47271:
	.ascii	"gs_write_complete\000"
	.space	2
	.type	__func__.38861, %object
	.size	__func__.38861, 26
__func__.38861:
	.ascii	"frmnet_send_cpkt_response\000"
	.space	2
	.type	__func__.38829, %object
	.size	__func__.38829, 31
__func__.38829:
	.ascii	"frmnet_ctrl_response_available\000"
	.space	1
	.type	__func__.49920, %object
	.size	__func__.49920, 34
__func__.49920:
	.ascii	"grmnet_ctrl_qti_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.49659, %object
	.size	__func__.49659, 34
__func__.49659:
	.ascii	"grmnet_ctrl_smd_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.37371, %object
	.size	__func__.37371, 26
__func__.37371:
	.ascii	"rmnet_sdio_complete_epout\000"
	.space	2
	.type	__func__.47529, %object
	.size	__func__.47529, 16
__func__.47529:
	.ascii	"gserial_cleanup\000"
	.type	__func__.62321, %object
	.size	__func__.62321, 16
__func__.62321:
	.ascii	"f_audio_set_alt\000"
	.type	__func__.51328, %object
	.size	__func__.51328, 24
__func__.51328:
	.ascii	"ghsic_data_write_tohost\000"
	.type	__func__.51493, %object
	.size	__func__.51493, 17
__func__.51493:
	.ascii	"ghsic_data_probe\000"
	.space	3
	.type	__func__.50970, %object
	.size	__func__.50970, 17
__func__.50970:
	.ascii	"ghsic_ctrl_probe\000"
	.space	3
	.type	__func__.62871, %object
	.size	__func__.62871, 17
__func__.62871:
	.ascii	"conn_gadget_poll\000"
	.space	3
	.type	__func__.51359, %object
	.size	__func__.51359, 23
__func__.51359:
	.ascii	"ghsic_data_write_tomdm\000"
	.space	1
	.type	__func__.51409, %object
	.size	__func__.51409, 20
__func__.51409:
	.ascii	"ghsic_data_start_rx\000"
	.type	__func__.45655, %object
	.size	__func__.45655, 19
__func__.45655:
	.ascii	"start_out_transfer\000"
	.space	1
	.type	ffs_sb_operations, %object
	.size	ffs_sb_operations, 104
ffs_sb_operations:
	.space	16
	.word	generic_delete_inode
	.space	24
	.word	simple_statfs
	.space	56
	.type	ffs_ep0_operations, %object
	.size	ffs_ep0_operations, 108
ffs_ep0_operations:
	.word	0
	.word	no_llseek
	.word	ffs_ep0_read
	.word	ffs_ep0_write
	.space	16
	.word	ffs_ep0_ioctl
	.space	8
	.word	ffs_ep0_open
	.space	4
	.word	ffs_ep0_release
	.space	52
	.type	__func__.57761, %object
	.size	__func__.57761, 17
__func__.57761:
	.ascii	"bam_data_destroy\000"
	.space	3
	.type	__func__.57081, %object
	.size	__func__.57081, 14
__func__.57081:
	.ascii	"ecm_qc_resume\000"
	.space	2
	.type	__func__.57076, %object
	.size	__func__.57076, 15
__func__.57076:
	.ascii	"ecm_qc_suspend\000"
	.space	1
	.type	__func__.58148, %object
	.size	__func__.58148, 17
__func__.58148:
	.ascii	"rndis_qc_suspend\000"
	.space	3
	.type	__func__.58153, %object
	.size	__func__.58153, 16
__func__.58153:
	.ascii	"rndis_qc_resume\000"
	.type	__func__.57521, %object
	.size	__func__.57521, 10
__func__.57521:
	.ascii	"mbim_read\000"
	.space	2
	.type	__func__.62825, %object
	.size	__func__.62825, 24
__func__.62825:
	.ascii	"conn_gadget_complete_in\000"
	.type	__func__.58350, %object
	.size	__func__.58350, 10
__func__.58350:
	.ascii	"rx_submit\000"
	.space	2
	.type	__func__.58434, %object
	.size	__func__.58434, 13
__func__.58434:
	.ascii	"process_rx_w\000"
	.space	3
	.type	__func__.61820, %object
	.size	__func__.61820, 20
__func__.61820:
	.ascii	"gaudio_open_streams\000"
	.type	__func__.61789, %object
	.size	__func__.61789, 24
__func__.61789:
	.ascii	"playback_prepare_params\000"
	.type	__func__.61801, %object
	.size	__func__.61801, 23
__func__.61801:
	.ascii	"capture_prepare_params\000"
	.space	1
	.type	__func__.61778, %object
	.size	__func__.61778, 16
__func__.61778:
	.ascii	"pcm_buffer_size\000"
	.type	__func__.62098, %object
	.size	__func__.62098, 21
__func__.62098:
	.ascii	"f_audio_capture_work\000"
	.space	3
	.type	__func__.61854, %object
	.size	__func__.61854, 16
__func__.61854:
	.ascii	"u_audio_capture\000"
	.type	__func__.62076, %object
	.size	__func__.62076, 22
__func__.62076:
	.ascii	"f_audio_playback_work\000"
	.space	2
	.type	__func__.61838, %object
	.size	__func__.61838, 17
__func__.61838:
	.ascii	"u_audio_playback\000"
	.space	3
	.type	__func__.56645, %object
	.size	__func__.56645, 17
__func__.56645:
	.ascii	"rndis_deregister\000"
	.space	3
	.type	__func__.62982, %object
	.size	__func__.62982, 18
__func__.62982:
	.ascii	"conn_gadget_ioctl\000"
	.space	2
	.type	__func__.62971, %object
	.size	__func__.62971, 37
__func__.62971:
	.ascii	"conn_gadget_bind_status_copy_to_user\000"
	.space	3
	.type	__func__.58160, %object
	.size	__func__.58160, 14
__func__.58160:
	.ascii	"rndis_qc_open\000"
	.space	2
	.type	__func__.56666, %object
	.size	__func__.56666, 23
__func__.56666:
	.ascii	"rndis_set_param_medium\000"
	.space	1
	.type	__func__.56353, %object
	.size	__func__.56353, 11
__func__.56353:
	.ascii	"rndis_open\000"
	.space	1
	.type	__func__.58185, %object
	.size	__func__.58185, 16
__func__.58185:
	.ascii	"rndis_qc_unbind\000"
	.type	__func__.51502, %object
	.size	__func__.51502, 18
__func__.51502:
	.ascii	"ghsic_data_remove\000"
	.space	2
	.type	__func__.52437, %object
	.size	__func__.52437, 20
__func__.52437:
	.ascii	"ghsuart_data_remove\000"
	.type	__func__.49398, %object
	.size	__func__.49398, 20
__func__.49398:
	.ascii	"gbam_data_ch_remove\000"
	.type	__func__.57409, %object
	.size	__func__.57409, 11
__func__.57409:
	.ascii	"mbim_setup\000"
	.space	1
	.type	__func__.62920, %object
	.size	__func__.62920, 18
__func__.62920:
	.ascii	"conn_gadget_write\000"
	.space	2
	.type	__func__.38774, %object
	.size	__func__.38774, 15
__func__.38774:
	.ascii	"frmnet_suspend\000"
	.space	1
	.type	__func__.49548, %object
	.size	__func__.49548, 13
__func__.49548:
	.ascii	"gbam_suspend\000"
	.space	3
	.type	f_midi_cin_length, %object
	.size	f_midi_cin_length, 16
f_midi_cin_length:
	.ascii	"\000\000\002\003\003\001\002\003\003\003\003\003\002"
	.ascii	"\002\003\001"
	.type	__func__.58123, %object
	.size	__func__.58123, 15
__func__.58123:
	.ascii	"rndis_qc_setup\000"
	.space	1
	.type	__func__.38308, %object
	.size	__func__.38308, 16
__func__.38308:
	.ascii	"transport_store\000"
	.type	__func__.37889, %object
	.size	__func__.37889, 24
__func__.37889:
	.ascii	"rmnet_mux_sdio_start_rx\000"
	.type	__func__.37293, %object
	.size	__func__.37293, 20
__func__.37293:
	.ascii	"rmnet_sdio_start_rx\000"
	.type	__func__.37518, %object
	.size	__func__.37518, 21
__func__.37518:
	.ascii	"rmnet_open_sdio_work\000"
	.space	3
	.type	__func__.25401, %object
	.size	__func__.25401, 21
__func__.25401:
	.ascii	"composite_disconnect\000"
	.space	3
	.type	__func__.57324, %object
	.size	__func__.57324, 26
__func__.57324:
	.ascii	"mbim_reset_function_queue\000"
	.space	2
	.type	__func__.57369, %object
	.size	__func__.57369, 21
__func__.57369:
	.ascii	"mbim_notify_complete\000"
	.space	3
	.type	__func__.57354, %object
	.size	__func__.57354, 15
__func__.57354:
	.ascii	"mbim_do_notify\000"
	.space	1
	.type	__func__.49314, %object
	.size	__func__.49314, 18
__func__.49314:
	.ascii	"gbam_connect_work\000"
	.space	2
	.type	__func__.49255, %object
	.size	__func__.49255, 14
__func__.49255:
	.ascii	"gbam_start_io\000"
	.space	2
	.type	__func__.48321, %object
	.size	__func__.48321, 16
__func__.48321:
	.ascii	"gsdio_ch_remove\000"
	.type	__func__.48291, %object
	.size	__func__.48291, 24
__func__.48291:
	.ascii	"gsdio_ctrl_modem_status\000"
	.type	__func__.45628, %object
	.size	__func__.45628, 10
__func__.45628:
	.ascii	"fsg_setup\000"
	.space	2
	.type	__func__.49907, %object
	.size	__func__.49907, 24
__func__.49907:
	.ascii	"rmnet_ctrl_queue_notify\000"
	.type	__func__.56359, %object
	.size	__func__.56359, 12
__func__.56359:
	.ascii	"rndis_close\000"
	.type	__func__.58166, %object
	.size	__func__.58166, 15
__func__.58166:
	.ascii	"rndis_qc_close\000"
	.space	1
	.type	__func__.53366, %object
	.size	__func__.53366, 16
__func__.53366:
	.ascii	"ccid_bulk_write\000"
	.type	__func__.48130, %object
	.size	__func__.48130, 21
__func__.48130:
	.ascii	"gsdio_alloc_requests\000"
	.space	3
	.type	__func__.48107, %object
	.size	__func__.48107, 16
__func__.48107:
	.ascii	"gsdio_alloc_req\000"
	.type	__func__.53331, %object
	.size	__func__.53331, 15
__func__.53331:
	.ascii	"ccid_bulk_read\000"
	.space	1
	.type	__func__.63459, %object
	.size	__func__.63459, 9
__func__.63459:
	.ascii	"ncm_open\000"
	.space	3
	.type	__func__.63465, %object
	.size	__func__.63465, 10
__func__.63465:
	.ascii	"ncm_close\000"
	.space	2
	.type	__func__.55679, %object
	.size	__func__.55679, 16
__func__.55679:
	.ascii	"acc_ctrlrequest\000"
	.type	__func__.57087, %object
	.size	__func__.57087, 12
__func__.57087:
	.ascii	"ecm_qc_open\000"
	.type	__func__.57093, %object
	.size	__func__.57093, 13
__func__.57093:
	.ascii	"ecm_qc_close\000"
	.space	3
	.type	__func__.57961, %object
	.size	__func__.57961, 10
__func__.57961:
	.ascii	"ecm_close\000"
	.space	2
	.type	__func__.57955, %object
	.size	__func__.57955, 9
__func__.57955:
	.ascii	"ecm_open\000"
	.space	3
	.type	__func__.25050, %object
	.size	__func__.25050, 11
__func__.25050:
	.ascii	"config_buf\000"
	.space	1
	.type	__func__.25127, %object
	.size	__func__.25127, 11
__func__.25127:
	.ascii	"set_config\000"
	.space	1
	.type	__func__.25329, %object
	.size	__func__.25329, 16
__func__.25329:
	.ascii	"composite_setup\000"
	.type	__func__.57104, %object
	.size	__func__.57104, 12
__func__.57104:
	.ascii	"ecm_qc_bind\000"
	.type	__func__.57494, %object
	.size	__func__.57494, 10
__func__.57494:
	.ascii	"mbim_bind\000"
	.space	2
	.type	__func__.61861, %object
	.size	__func__.61861, 30
__func__.61861:
	.ascii	"u_audio_get_playback_channels\000"
	.space	2
	.type	__func__.61871, %object
	.size	__func__.61871, 29
__func__.61871:
	.ascii	"u_audio_get_capture_channels\000"
	.space	3
	.type	__func__.61866, %object
	.size	__func__.61866, 26
__func__.61866:
	.ascii	"u_audio_get_playback_rate\000"
	.space	2
	.type	__func__.61876, %object
	.size	__func__.61876, 25
__func__.61876:
	.ascii	"u_audio_get_capture_rate\000"
	.space	3
	.type	__func__.62354, %object
	.size	__func__.62354, 13
__func__.62354:
	.ascii	"f_audio_bind\000"
	.space	3
	.type	__func__.53291, %object
	.size	__func__.53291, 19
__func__.53291:
	.ascii	"ccid_function_bind\000"
	.space	1
	.type	__func__.38941, %object
	.size	__func__.38941, 12
__func__.38941:
	.ascii	"frmnet_bind\000"
	.type	__func__.56636, %object
	.size	__func__.56636, 15
__func__.56636:
	.ascii	"rndis_register\000"
	.space	1
	.type	__func__.56672, %object
	.size	__func__.56672, 23
__func__.56672:
	.ascii	"rndis_set_max_pkt_xfer\000"
	.space	1
	.type	__func__.56659, %object
	.size	__func__.56659, 23
__func__.56659:
	.ascii	"rndis_set_param_vendor\000"
	.space	1
	.type	__func__.56678, %object
	.size	__func__.56678, 31
__func__.56678:
	.ascii	"rndis_set_pkt_alignment_factor\000"
	.space	1
	.type	__func__.58177, %object
	.size	__func__.58177, 14
__func__.58177:
	.ascii	"rndis_qc_bind\000"
	.space	2
	.type	__func__.37530, %object
	.size	__func__.37530, 19
__func__.37530:
	.ascii	"rmnet_sdio_set_alt\000"
	.space	1
	.type	__func__.53267, %object
	.size	__func__.53267, 22
__func__.53267:
	.ascii	"ccid_function_set_alt\000"
	.space	2
	.type	__func__.63119, %object
	.size	__func__.63119, 33
__func__.63119:
	.ascii	"conn_gadget_function_bind_config\000"
	.space	3
	.type	__func__.64046, %object
	.size	__func__.64046, 26
__func__.64046:
	.ascii	"qdss_function_bind_config\000"
	.space	2
	.type	__func__.63807, %object
	.size	__func__.63807, 25
__func__.63807:
	.ascii	"acm_function_bind_config\000"
	.space	3
	.type	__func__.25205, %object
	.size	__func__.25205, 18
__func__.25205:
	.ascii	"usb_remove_config\000"
	.space	2
	.type	__func__.53019, %object
	.size	__func__.53019, 12
__func__.53019:
	.ascii	"adb_release\000"
	.type	__func__.63766, %object
	.size	__func__.63766, 20
__func__.63766:
	.ascii	"adb_closed_callback\000"
	.type	__func__.63726, %object
	.size	__func__.63726, 27
__func__.63726:
	.ascii	"functionfs_closed_callback\000"
	.space	1
	.type	__func__.44630, %object
	.size	__func__.44630, 13
__func__.44630:
	.ascii	"ffs_data_put\000"
	.space	3
	.type	__func__.65016, %object
	.size	__func__.65016, 14
__func__.65016:
	.ascii	"android_probe\000"
	.space	2
	.type	__func__.63571, %object
	.size	__func__.63571, 26
__func__.63571:
	.ascii	"create_terminal_attribute\000"
	.space	2
	.type	__func__.25484, %object
	.size	__func__.25484, 29
__func__.25484:
	.ascii	"usb_composite_setup_continue\000"
	.space	3
	.type	__func__.46121, %object
	.size	__func__.46121, 17
__func__.46121:
	.ascii	"handle_exception\000"
	.space	3
	.type	__func__.46069, %object
	.size	__func__.46069, 17
__func__.46069:
	.ascii	"get_next_command\000"
	.space	3
	.type	__func__.45541, %object
	.size	__func__.45541, 14
__func__.45541:
	.ascii	"do_timer_stop\000"
	.space	2
	.type	__func__.45545, %object
	.size	__func__.45545, 15
__func__.45545:
	.ascii	"do_timer_reset\000"
	.space	1
	.type	__func__.45552, %object
	.size	__func__.45552, 17
__func__.45552:
	.ascii	"get_version_info\000"
	.space	3
	.type	__func__.45955, %object
	.size	__func__.45955, 13
__func__.45955:
	.ascii	"finish_reply\000"
	.space	3
	.type	__func__.25981, %object
	.size	__func__.25981, 14
__func__.25981:
	.ascii	"usb_diag_read\000"
	.space	2
	.type	__func__.25999, %object
	.size	__func__.25999, 15
__func__.25999:
	.ascii	"usb_diag_write\000"
	.space	1
	.type	__func__.64029, %object
	.size	__func__.64029, 26
__func__.64029:
	.ascii	"diag_function_bind_config\000"
	.space	2
	.type	__func__.30933, %object
	.size	__func__.30933, 25
__func__.30933:
	.ascii	"usb_qdss_disconnect_work\000"
	.space	3
	.type	rmnet_smd_debug_stats_ops, %object
	.size	rmnet_smd_debug_stats_ops, 108
rmnet_smd_debug_stats_ops:
	.space	8
	.word	rmnet_smd_debug_read_stats
	.word	rmnet_smd_debug_reset_stats
	.space	28
	.word	rmnet_smd_debug_open
	.space	60
	.type	debug_rmnet_sdio_stats_ops, %object
	.size	debug_rmnet_sdio_stats_ops, 108
debug_rmnet_sdio_stats_ops:
	.space	8
	.word	rmnet_sdio_read_stats
	.word	rmnet_sdio_reset_stats
	.space	28
	.word	debug_rmnet_sdio_open
	.space	60
	.type	__func__.47309, %object
	.size	__func__.47309, 12
__func__.47309:
	.ascii	"gs_start_io\000"
	.type	gs_tty_ops, %object
	.size	gs_tty_ops, 124
gs_tty_ops:
	.space	12
	.word	gs_open
	.word	gs_close
	.space	8
	.word	gs_write
	.word	gs_put_char
	.word	gs_flush_chars
	.word	gs_write_room
	.word	gs_chars_in_buffer
	.space	16
	.word	gs_unthrottle
	.space	12
	.word	gs_break_ctl
	.space	16
	.word	gs_tiocmget
	.word	gs_tiocmset
	.space	16
	.type	__func__.47495, %object
	.size	__func__.47495, 14
__func__.47495:
	.ascii	"gserial_setup\000"
	.space	2
	.type	debug_adb_ops, %object
	.size	debug_adb_ops, 108
debug_adb_ops:
	.space	8
	.word	debug_read_status
	.space	32
	.word	serial_debug_open
	.space	60
	.type	debug_rst_ops, %object
	.size	debug_rst_ops, 108
debug_rst_ops:
	.space	12
	.word	debug_write_reset
	.space	28
	.word	serial_debug_open
	.space	60
	.type	__func__.48634, %object
	.size	__func__.48634, 12
__func__.48634:
	.ascii	"gsmd_notify\000"
	.type	__func__.48606, %object
	.size	__func__.48606, 14
__func__.48606:
	.ascii	"gsmd_start_io\000"
	.space	2
	.type	__func__.48505, %object
	.size	__func__.48505, 20
__func__.48505:
	.ascii	"gsmd_alloc_requests\000"
	.type	__func__.48141, %object
	.size	__func__.48141, 15
__func__.48141:
	.ascii	"gsdio_start_rx\000"
	.space	1
	.type	__func__.48177, %object
	.size	__func__.48177, 14
__func__.48177:
	.ascii	"gsdio_rx_push\000"
	.space	2
	.type	__func__.48162, %object
	.size	__func__.48162, 12
__func__.48162:
	.ascii	"gsdio_write\000"
	.type	__func__.48224, %object
	.size	__func__.48224, 19
__func__.48224:
	.ascii	"gsdio_read_pending\000"
	.space	1
	.type	__func__.48237, %object
	.size	__func__.48237, 14
__func__.48237:
	.ascii	"gsdio_tx_pull\000"
	.space	2
	.type	__func__.48258, %object
	.size	__func__.48258, 15
__func__.48258:
	.ascii	"gsdio_start_io\000"
	.space	1
	.type	__func__.48267, %object
	.size	__func__.48267, 16
__func__.48267:
	.ascii	"gsdio_port_free\000"
	.type	__func__.48298, %object
	.size	__func__.48298, 16
__func__.48298:
	.ascii	"gsdio_ch_notify\000"
	.type	__func__.48349, %object
	.size	__func__.48349, 17
__func__.48349:
	.ascii	"gsdio_port_alloc\000"
	.space	3
	.type	__func__.48364, %object
	.size	__func__.48364, 14
__func__.48364:
	.ascii	"gsdio_connect\000"
	.space	2
	.type	__func__.48375, %object
	.size	__func__.48375, 17
__func__.48375:
	.ascii	"gsdio_disconnect\000"
	.space	3
	.type	__func__.48433, %object
	.size	__func__.48433, 12
__func__.48433:
	.ascii	"gsdio_setup\000"
	.type	debug_gsdio_ops, %object
	.size	debug_gsdio_ops, 108
debug_gsdio_ops:
	.space	8
	.word	debug_sdio_read_stats
	.word	debug_sdio_reset_stats
	.space	28
	.word	debug_sdio_open
	.space	60
	.type	__func__.48679, %object
	.size	__func__.48679, 13
__func__.48679:
	.ascii	"gsmd_connect\000"
	.space	3
	.type	__func__.48690, %object
	.size	__func__.48690, 16
__func__.48690:
	.ascii	"gsmd_disconnect\000"
	.type	__func__.48791, %object
	.size	__func__.48791, 11
__func__.48791:
	.ascii	"gsmd_setup\000"
	.space	1
	.type	__func__.48739, %object
	.size	__func__.48739, 16
__func__.48739:
	.ascii	"gsmd_port_alloc\000"
	.type	debug_gsmd_ops, %object
	.size	debug_gsmd_ops, 108
debug_gsmd_ops:
	.space	8
	.word	debug_smd_read_stats
	.word	debug_smd_reset_stats
	.space	28
	.word	debug_smd_open
	.space	60
	.type	__func__.49106, %object
	.size	__func__.49106, 18
__func__.49106:
	.ascii	"gbam_data_recv_cb\000"
	.space	2
	.type	__func__.49121, %object
	.size	__func__.49121, 21
__func__.49121:
	.ascii	"gbam_data_write_done\000"
	.space	3
	.type	__func__.49496, %object
	.size	__func__.49496, 16
__func__.49496:
	.ascii	"gbam_disconnect\000"
	.type	__func__.49512, %object
	.size	__func__.49512, 13
__func__.49512:
	.ascii	"gbam_connect\000"
	.space	3
	.type	__func__.49523, %object
	.size	__func__.49523, 11
__func__.49523:
	.ascii	"gbam_setup\000"
	.space	1
	.type	__func__.49427, %object
	.size	__func__.49427, 16
__func__.49427:
	.ascii	"gbam_port_alloc\000"
	.type	__func__.49440, %object
	.size	__func__.49440, 20
__func__.49440:
	.ascii	"gbam2bam_port_alloc\000"
	.type	gbam_stats_ops, %object
	.size	gbam_stats_ops, 108
gbam_stats_ops:
	.space	8
	.word	gbam_read_stats
	.word	gbam_reset_stats
	.space	92
	.type	__func__.49729, %object
	.size	__func__.49729, 18
__func__.49729:
	.ascii	"gsmd_ctrl_connect\000"
	.space	2
	.type	__func__.49751, %object
	.size	__func__.49751, 21
__func__.49751:
	.ascii	"gsmd_ctrl_disconnect\000"
	.space	3
	.type	__func__.49818, %object
	.size	__func__.49818, 16
__func__.49818:
	.ascii	"gsmd_ctrl_setup\000"
	.type	ctrl_names, %object
	.size	ctrl_names, 24
ctrl_names:
	.word	.LC1753
	.word	.LC1754
	.word	.LC1755
	.word	.LC1754
	.space	8
	.type	__func__.49807, %object
	.size	__func__.49807, 27
__func__.49807:
	.ascii	"grmnet_ctrl_smd_port_alloc\000"
	.space	1
	.type	__func__.49938, %object
	.size	__func__.49938, 18
__func__.49938:
	.ascii	"gqti_ctrl_connect\000"
	.space	2
	.type	__func__.49949, %object
	.size	__func__.49949, 21
__func__.49949:
	.ascii	"gqti_ctrl_disconnect\000"
	.space	3
	.type	__func__.50924, %object
	.size	__func__.50924, 19
__func__.50924:
	.ascii	"ghsic_ctrl_connect\000"
	.space	1
	.type	__func__.50943, %object
	.size	__func__.50943, 22
__func__.50943:
	.ascii	"ghsic_ctrl_disconnect\000"
	.space	2
	.type	__func__.51010, %object
	.size	__func__.51010, 25
__func__.51010:
	.ascii	"ghsic_ctrl_set_port_name\000"
	.space	3
	.type	__func__.51019, %object
	.size	__func__.51019, 17
__func__.51019:
	.ascii	"ghsic_ctrl_setup\000"
	.space	3
	.type	__func__.51000, %object
	.size	__func__.51000, 17
__func__.51000:
	.ascii	"gctrl_port_alloc\000"
	.space	3
	.type	__func__.51530, %object
	.size	__func__.51530, 22
__func__.51530:
	.ascii	"ghsic_data_disconnect\000"
	.space	2
	.type	__func__.51547, %object
	.size	__func__.51547, 19
__func__.51547:
	.ascii	"ghsic_data_connect\000"
	.space	1
	.type	__func__.51682, %object
	.size	__func__.51682, 25
__func__.51682:
	.ascii	"ghsic_data_set_port_name\000"
	.space	3
	.type	__func__.51691, %object
	.size	__func__.51691, 17
__func__.51691:
	.ascii	"ghsic_data_setup\000"
	.space	3
	.type	__func__.51515, %object
	.size	__func__.51515, 22
__func__.51515:
	.ascii	"ghsic_data_port_alloc\000"
	.space	2
	.type	__func__.51929, %object
	.size	__func__.51929, 21
__func__.51929:
	.ascii	"ghsuart_ctrl_connect\000"
	.space	3
	.type	__func__.51947, %object
	.size	__func__.51947, 24
__func__.51947:
	.ascii	"ghsuart_ctrl_disconnect\000"
	.type	__func__.51998, %object
	.size	__func__.51998, 19
__func__.51998:
	.ascii	"ghsuart_ctrl_setup\000"
	.space	1
	.type	__func__.51985, %object
	.size	__func__.51985, 24
__func__.51985:
	.ascii	"ghsuart_ctrl_port_alloc\000"
	.type	CSWTCH.3008, %object
	.size	CSWTCH.3008, 36
CSWTCH.3008:
	.word	.LC1502
	.word	.LC1503
	.word	.LC1504
	.word	.LC1505
	.word	.LC1506
	.word	.LC1507
	.word	.LC1508
	.word	.LC1509
	.word	.LC1510
	.type	__func__.52478, %object
	.size	__func__.52478, 24
__func__.52478:
	.ascii	"ghsuart_data_disconnect\000"
	.type	__func__.38804, %object
	.size	__func__.38804, 15
__func__.38804:
	.ascii	"frmnet_disable\000"
	.space	1
	.type	__func__.38729, %object
	.size	__func__.38729, 23
__func__.38729:
	.ascii	"gport_rmnet_disconnect\000"
	.space	1
	.type	__func__.52498, %object
	.size	__func__.52498, 21
__func__.52498:
	.ascii	"ghsuart_data_connect\000"
	.space	3
	.type	__func__.38815, %object
	.size	__func__.38815, 15
__func__.38815:
	.ascii	"frmnet_set_alt\000"
	.space	1
	.type	__func__.38706, %object
	.size	__func__.38706, 20
__func__.38706:
	.ascii	"gport_rmnet_connect\000"
	.type	__func__.52580, %object
	.size	__func__.52580, 19
__func__.52580:
	.ascii	"ghsuart_data_setup\000"
	.space	1
	.type	ghsuart_data_names, %object
	.size	ghsuart_data_names, 8
ghsuart_data_names:
	.word	.LC1745
	.word	.LC1746
	.type	__func__.52461, %object
	.size	__func__.52461, 24
__func__.52461:
	.ascii	"ghsuart_data_port_alloc\000"
	.type	__func__.38976, %object
	.size	__func__.38976, 17
__func__.38976:
	.ascii	"frmnet_init_port\000"
	.space	3
	.type	__func__.63873, %object
	.size	__func__.63873, 27
__func__.63873:
	.ascii	"rmnet_function_bind_config\000"
	.space	1
	.type	__func__.38679, %object
	.size	__func__.38679, 18
__func__.38679:
	.ascii	"rmnet_gport_setup\000"
	.space	2
	.type	__func__.38955, %object
	.size	__func__.38955, 19
__func__.38955:
	.ascii	"frmnet_bind_config\000"
	.space	1
	.type	__func__.56613, %object
	.size	__func__.56613, 17
__func__.56613:
	.ascii	"rndis_msg_parser\000"
	.space	3
	.type	__func__.56525, %object
	.size	__func__.56525, 18
__func__.56525:
	.ascii	"gen_ndis_set_resp\000"
	.space	2
	.type	__func__.56303, %object
	.size	__func__.56303, 23
__func__.56303:
	.ascii	"rndis_command_complete\000"
	.space	1
	.type	__func__.58101, %object
	.size	__func__.58101, 26
__func__.58101:
	.ascii	"rndis_qc_command_complete\000"
	.space	2
	.type	__func__.56652, %object
	.size	__func__.56652, 20
__func__.56652:
	.ascii	"rndis_set_param_dev\000"
	.type	__func__.56798, %object
	.size	__func__.56798, 11
__func__.56798:
	.ascii	"rndis_init\000"
	.space	1
	.type	rndis_proc_fops, %object
	.size	rndis_proc_fops, 108
rndis_proc_fops:
	.word	0
	.word	seq_lseek
	.word	seq_read
	.word	rndis_proc_write
	.space	28
	.word	rndis_proc_open
	.space	4
	.word	single_release
	.space	52
	.type	__func__.57302, %object
	.size	__func__.57302, 22
__func__.57302:
	.ascii	"mbim_configure_params\000"
	.space	2
	.type	__func__.57477, %object
	.size	__func__.57477, 13
__func__.57477:
	.ascii	"mbim_disable\000"
	.space	3
	.type	__func__.57315, %object
	.size	__func__.57315, 20
__func__.57315:
	.ascii	"mbim_bam_disconnect\000"
	.type	__func__.57465, %object
	.size	__func__.57465, 13
__func__.57465:
	.ascii	"mbim_set_alt\000"
	.space	3
	.type	__func__.57311, %object
	.size	__func__.57311, 17
__func__.57311:
	.ascii	"mbim_bam_connect\000"
	.space	3
	.type	__func__.57768, %object
	.size	__func__.57768, 15
__func__.57768:
	.ascii	"bam_data_setup\000"
	.space	1
	.type	__func__.57733, %object
	.size	__func__.57733, 24
__func__.57733:
	.ascii	"bam2bam_data_port_alloc\000"
	.type	__func__.56986, %object
	.size	__func__.56986, 17
__func__.56986:
	.ascii	"ecm_qc_bam_setup\000"
	.space	3
	.type	__func__.57119, %object
	.size	__func__.57119, 19
__func__.57119:
	.ascii	"ecm_qc_bind_config\000"
	.space	1
	.type	__func__.58736, %object
	.size	__func__.58736, 19
__func__.58736:
	.ascii	"gether_qc_get_macs\000"
	.space	1
	.type	__func__.57509, %object
	.size	__func__.57509, 17
__func__.57509:
	.ascii	"mbim_bind_config\000"
	.space	3
	.type	__func__.57296, %object
	.size	__func__.57296, 15
__func__.57296:
	.ascii	"mbim_bam_setup\000"
	.space	1
	.type	__func__.63975, %object
	.size	__func__.63975, 26
__func__.63975:
	.ascii	"mbim_function_bind_config\000"
	.space	2
	.type	__func__.58046, %object
	.size	__func__.58046, 19
__func__.58046:
	.ascii	"rndis_qc_bam_setup\000"
	.space	1
	.type	__func__.58205, %object
	.size	__func__.58205, 28
__func__.58205:
	.ascii	"rndis_qc_bind_config_vendor\000"
	.type	eth_netdev_ops, %object
	.size	eth_netdev_ops, 136
eth_netdev_ops:
	.space	8
	.word	eth_open
	.word	eth_stop
	.word	eth_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_change_mtu
	.space	84
	.type	ops, %object
	.size	ops, 164
ops:
	.space	8
	.word	eth_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	__func__.64115, %object
	.size	__func__.64115, 27
__func__.64115:
	.ascii	"rndis_function_bind_config\000"
	.space	1
	.type	__func__.64231, %object
	.size	__func__.64231, 25
__func__.64231:
	.ascii	"ecm_function_bind_config\000"
	.space	3
	.type	__func__.58615, %object
	.size	__func__.58615, 15
__func__.58615:
	.ascii	"gether_connect\000"
	.space	1
	.type	__func__.63388, %object
	.size	__func__.63388, 12
__func__.63388:
	.ascii	"ncm_set_alt\000"
	.type	eth_qc_netdev_ops, %object
	.size	eth_qc_netdev_ops, 136
eth_qc_netdev_ops:
	.space	8
	.word	eth_qc_open
	.word	eth_qc_stop
	.word	eth_qc_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_qc_change_mtu
	.space	84
	.type	qc_ethtool_ops, %object
	.size	qc_ethtool_ops, 164
qc_ethtool_ops:
	.space	8
	.word	eth_qc_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	__func__.64122, %object
	.size	__func__.64122, 30
__func__.64122:
	.ascii	"rndis_qc_function_bind_config\000"
	.space	2
	.type	__func__.63924, %object
	.size	__func__.63924, 28
__func__.63924:
	.ascii	"ecm_qc_function_bind_config\000"
	.type	__func__.57002, %object
	.size	__func__.57002, 22
__func__.57002:
	.ascii	"ecm_qc_bam_disconnect\000"
	.space	2
	.type	__func__.56996, %object
	.size	__func__.56996, 19
__func__.56996:
	.ascii	"ecm_qc_bam_connect\000"
	.space	1
	.type	__func__.58143, %object
	.size	__func__.58143, 17
__func__.58143:
	.ascii	"rndis_qc_disable\000"
	.space	3
	.type	__func__.58060, %object
	.size	__func__.58060, 24
__func__.58060:
	.ascii	"rndis_qc_bam_disconnect\000"
	.type	__func__.58055, %object
	.size	__func__.58055, 21
__func__.58055:
	.ascii	"rndis_qc_bam_connect\000"
	.space	3
	.type	__func__.61883, %object
	.size	__func__.61883, 20
__func__.61883:
	.ascii	"gaudio_open_snd_dev\000"
	.type	__func__.61808, %object
	.size	__func__.61808, 27
__func__.61808:
	.ascii	"playback_default_hw_params\000"
	.space	1
	.type	__func__.61814, %object
	.size	__func__.61814, 26
__func__.61814:
	.ascii	"capture_default_hw_params\000"
	.space	2
	.type	__func__.61896, %object
	.size	__func__.61896, 13
__func__.61896:
	.ascii	"gaudio_setup\000"
	.space	3
	.type	__func__.62383, %object
	.size	__func__.62383, 18
__func__.62383:
	.ascii	"audio_bind_config\000"
	.space	2
	.type	__func__.62796, %object
	.size	__func__.62796, 27
__func__.62796:
	.ascii	"conn_gadget_request_ep_out\000"
	.space	1
	.type	__func__.63028, %object
	.size	__func__.63028, 29
__func__.63028:
	.ascii	"conn_gadget_function_set_alt\000"
	.space	3
	.type	__func__.62936, %object
	.size	__func__.62936, 17
__func__.62936:
	.ascii	"conn_gadget_open\000"
	.space	3
	.type	__func__.62885, %object
	.size	__func__.62885, 17
__func__.62885:
	.ascii	"conn_gadget_read\000"
	.space	3
	.type	__func__.62855, %object
	.size	__func__.62855, 34
__func__.62855:
	.ascii	"conn_gadget_create_bulk_endpoints\000"
	.space	2
	.type	__func__.63010, %object
	.size	__func__.63010, 28
__func__.63010:
	.ascii	"conn_gadget_function_unbind\000"
	.type	__func__.62834, %object
	.size	__func__.62834, 25
__func__.62834:
	.ascii	"conn_gadget_complete_out\000"
	.space	3
	.type	__func__.63527, %object
	.size	__func__.63527, 25
__func__.63527:
	.ascii	"ncm_function_bind_config\000"
	.space	3
	.type	__func__.63542, %object
	.size	__func__.63542, 13
__func__.63542:
	.ascii	"is_ncm_ready\000"
	.space	3
	.type	__func__.63546, %object
	.size	__func__.63546, 26
__func__.63546:
	.ascii	"set_ncm_device_descriptor\000"
	.space	2
	.type	__func__.63550, %object
	.size	__func__.63550, 14
__func__.63550:
	.ascii	"set_ncm_ready\000"
	.space	2
	.type	__func__.63565, %object
	.size	__func__.63565, 23
__func__.63565:
	.ascii	"terminal_version_store\000"
	.space	1
	.type	__func__.63579, %object
	.size	__func__.63579, 22
__func__.63579:
	.ascii	"terminal_ctrl_request\000"
	.space	2
	.type	__func__.63635, %object
	.size	__func__.63635, 33
__func__.63635:
	.ascii	"schedule_usb_gadget_connect_work\000"
	.space	3
	.type	__func__.64825, %object
	.size	__func__.64825, 14
__func__.64825:
	.ascii	"usb30en_store\000"
	.space	2
	.type	__func__.63648, %object
	.size	__func__.63648, 15
__func__.63648:
	.ascii	"android_enable\000"
	.space	1
	.type	__func__.64628, %object
	.size	__func__.64628, 13
__func__.64628:
	.ascii	"enable_store\000"
	.space	3
	.type	__func__.53012, %object
	.size	__func__.53012, 9
__func__.53012:
	.ascii	"adb_open\000"
	.space	3
	.type	ffs_epfile_operations, %object
	.size	ffs_epfile_operations, 108
ffs_epfile_operations:
	.word	0
	.word	no_llseek
	.word	ffs_epfile_read
	.word	ffs_epfile_write
	.space	16
	.word	ffs_epfile_ioctl
	.space	8
	.word	ffs_epfile_open
	.space	4
	.word	ffs_epfile_release
	.space	52
	.type	__func__.63720, %object
	.size	__func__.63720, 26
__func__.63720:
	.ascii	"functionfs_ready_callback\000"
	.space	2
	.type	__func__.44382, %object
	.size	__func__.44382, 16
__func__.44382:
	.ascii	"__ffs_ep0_stall\000"
	.type	__func__.44761, %object
	.size	__func__.44761, 12
__func__.44761:
	.ascii	"ffs_do_desc\000"
	.type	__func__.38056, %object
	.size	__func__.38056, 27
__func__.38056:
	.ascii	"rmnet_mux_smd_data_rx_tlet\000"
	.space	1
	.type	__func__.38033, %object
	.size	__func__.38033, 27
__func__.38033:
	.ascii	"rmnet_mux_smd_data_tx_tlet\000"
	.space	1
	.type	__func__.38182, %object
	.size	__func__.38182, 16
__func__.38182:
	.ascii	"rmnet_mux_setup\000"
	.type	__func__.38510, %object
	.size	__func__.38510, 28
__func__.38510:
	.ascii	"rmnet_smd_sdio_function_add\000"
	.type	__func__.31081, %object
	.size	__func__.31081, 13
__func__.31081:
	.ascii	"qdss_cleanup\000"
	.space	3
	.type	__func__.30909, %object
	.size	__func__.30909, 10
__func__.30909:
	.ascii	"qdss_bind\000"
	.space	2
	.type	__func__.30899, %object
	.size	__func__.30899, 11
__func__.30899:
	.ascii	"clear_desc\000"
	.space	1
	.type	__func__.30893, %object
	.size	__func__.30893, 10
__func__.30893:
	.ascii	"clear_eps\000"
	.space	2
	.type	__func__.30918, %object
	.size	__func__.30918, 12
__func__.30918:
	.ascii	"qdss_unbind\000"
	.type	__func__.30963, %object
	.size	__func__.30963, 13
__func__.30963:
	.ascii	"qdss_set_alt\000"
	.space	3
	.type	__func__.30924, %object
	.size	__func__.30924, 17
__func__.30924:
	.ascii	"qdss_eps_disable\000"
	.space	3
	.type	__func__.30940, %object
	.size	__func__.30940, 13
__func__.30940:
	.ascii	"qdss_disable\000"
	.space	3
	.type	__func__.30952, %object
	.size	__func__.30952, 22
__func__.30952:
	.ascii	"usb_qdss_connect_work\000"
	.space	2
	.type	__func__.30788, %object
	.size	__func__.30788, 25
__func__.30788:
	.ascii	"set_qdss_data_connection\000"
	.space	3
	.type	__func__.30975, %object
	.size	__func__.30975, 17
__func__.30975:
	.ascii	"qdss_bind_config\000"
	.space	3
	.type	__func__.52958, %object
	.size	__func__.52958, 9
__func__.52958:
	.ascii	"adb_read\000"
	.space	3
	.type	__func__.52993, %object
	.size	__func__.52993, 10
__func__.52993:
	.ascii	"adb_write\000"
	.space	2
	.type	__func__.52937, %object
	.size	__func__.52937, 26
__func__.52937:
	.ascii	"adb_create_bulk_endpoints\000"
	.space	2
	.type	__func__.53031, %object
	.size	__func__.53031, 18
__func__.53031:
	.ascii	"adb_function_bind\000"
	.space	2
	.type	__func__.53051, %object
	.size	__func__.53051, 21
__func__.53051:
	.ascii	"adb_function_set_alt\000"
	.space	3
	.type	__func__.53058, %object
	.size	__func__.53058, 21
__func__.53058:
	.ascii	"adb_function_disable\000"
	.space	3
	.type	__func__.53316, %object
	.size	__func__.53316, 18
__func__.53316:
	.ascii	"ccid_bulk_release\000"
	.space	2
	.type	__func__.53244, %object
	.size	__func__.53244, 20
__func__.53244:
	.ascii	"ccid_function_setup\000"
	.type	__func__.53460, %object
	.size	__func__.53460, 17
__func__.53460:
	.ascii	"ccid_bind_config\000"
	.space	3
	.type	__func__.54281, %object
	.size	__func__.54281, 15
__func__.54281:
	.ascii	"send_file_work\000"
	.space	1
	.type	__func__.54217, %object
	.size	__func__.54217, 9
__func__.54217:
	.ascii	"mtp_read\000"
	.space	3
	.type	__func__.54250, %object
	.size	__func__.54250, 10
__func__.54250:
	.ascii	"mtp_write\000"
	.space	2
	.type	__func__.54332, %object
	.size	__func__.54332, 15
__func__.54332:
	.ascii	"mtp_send_event\000"
	.space	1
	.type	__func__.54358, %object
	.size	__func__.54358, 10
__func__.54358:
	.ascii	"mtp_ioctl\000"
	.space	2
	.type	__func__.54178, %object
	.size	__func__.54178, 26
__func__.54178:
	.ascii	"mtp_create_bulk_endpoints\000"
	.space	2
	.type	__func__.54402, %object
	.size	__func__.54402, 18
__func__.54402:
	.ascii	"mtp_function_bind\000"
	.space	2
	.type	__func__.54429, %object
	.size	__func__.54429, 21
__func__.54429:
	.ascii	"mtp_function_set_alt\000"
	.space	3
	.type	__func__.54436, %object
	.size	__func__.54436, 21
__func__.54436:
	.ascii	"mtp_function_disable\000"
	.space	3
	.type	__func__.45972, %object
	.size	__func__.45972, 12
__func__.45972:
	.ascii	"send_status\000"
	.type	__func__.45990, %object
	.size	__func__.45990, 14
__func__.45990:
	.ascii	"check_command\000"
	.space	2
	.type	__func__.45714, %object
	.size	__func__.45714, 11
__func__.45714:
	.ascii	"do_read_cd\000"
	.space	1
	.type	__func__.45769, %object
	.size	__func__.45769, 9
__func__.45769:
	.ascii	"do_write\000"
	.space	3
	.type	__func__.45807, %object
	.size	__func__.45807, 10
__func__.45807:
	.ascii	"do_verify\000"
	.space	2
	.type	__func__.45895, %object
	.size	__func__.45895, 14
__func__.45895:
	.ascii	"do_start_stop\000"
	.space	2
	.type	__func__.45740, %object
	.size	__func__.45740, 8
__func__.45740:
	.ascii	"do_read\000"
	.type	__func__.45587, %object
	.size	__func__.45587, 13
__func__.45587:
	.ascii	"fsg_set_halt\000"
	.space	3
	.type	__func__.45929, %object
	.size	__func__.45929, 23
__func__.45929:
	.ascii	"wedge_bulk_in_endpoint\000"
	.space	1
	.type	__func__.46056, %object
	.size	__func__.46056, 13
__func__.46056:
	.ascii	"received_cbw\000"
	.space	3
	.type	__func__.46083, %object
	.size	__func__.46083, 17
__func__.46083:
	.ascii	"do_set_interface\000"
	.space	3
	.type	__func__.46210, %object
	.size	__func__.46210, 16
__func__.46210:
	.ascii	"fsg_common_init\000"
	.type	__func__.45354, %object
	.size	__func__.45354, 14
__func__.45354:
	.ascii	"fsg_lun_close\000"
	.space	2
	.type	__func__.45435, %object
	.size	__func__.45435, 16
__func__.45435:
	.ascii	"fsg_store_cdrom\000"
	.type	__func__.45402, %object
	.size	__func__.45402, 13
__func__.45402:
	.ascii	"fsg_store_ro\000"
	.space	3
	.type	__func__.45349, %object
	.size	__func__.45349, 13
__func__.45349:
	.ascii	"fsg_lun_open\000"
	.space	3
	.type	__func__.45423, %object
	.size	__func__.45423, 15
__func__.45423:
	.ascii	"fsg_store_file\000"
	.space	1
	.type	__func__.46233, %object
	.size	__func__.46233, 11
__func__.46233:
	.ascii	"fsg_unbind\000"
	.space	1
	.type	__func__.55556, %object
	.size	__func__.55556, 9
__func__.55556:
	.ascii	"acc_read\000"
	.space	3
	.type	__func__.55590, %object
	.size	__func__.55590, 10
__func__.55590:
	.ascii	"acc_write\000"
	.space	2
	.type	__func__.55421, %object
	.size	__func__.55421, 16
__func__.55421:
	.ascii	"acc_complete_in\000"
	.type	__func__.55428, %object
	.size	__func__.55428, 17
__func__.55428:
	.ascii	"acc_complete_out\000"
	.space	3
	.type	__func__.55524, %object
	.size	__func__.55524, 22
__func__.55524:
	.ascii	"create_bulk_endpoints\000"
	.space	2
	.type	__func__.55690, %object
	.size	__func__.55690, 18
__func__.55690:
	.ascii	"acc_function_bind\000"
	.space	2
	.type	__func__.55780, %object
	.size	__func__.55780, 21
__func__.55780:
	.ascii	"acc_function_set_alt\000"
	.space	3
	.type	__func__.55787, %object
	.size	__func__.55787, 21
__func__.55787:
	.ascii	"acc_function_disable\000"
	.space	3
	.type	__func__.64385, %object
	.size	__func__.64385, 24
__func__.64385:
	.ascii	"android_uasp_connect_cb\000"
	.type	__func__.63305, %object
	.size	__func__.63305, 20
__func__.63305:
	.ascii	"ncm_notify_complete\000"
	.type	__func__.63283, %object
	.size	__func__.63283, 14
__func__.63283:
	.ascii	"ncm_do_notify\000"
	.space	2
	.type	__func__.63476, %object
	.size	__func__.63476, 9
__func__.63476:
	.ascii	"ncm_bind\000"
	.space	3
	.type	__func__.63483, %object
	.size	__func__.63483, 11
__func__.63483:
	.ascii	"ncm_unbind\000"
	.space	1
	.type	__func__.63315, %object
	.size	__func__.63315, 20
__func__.63315:
	.ascii	"ncm_ep0out_complete\000"
	.type	__func__.63453, %object
	.size	__func__.63453, 12
__func__.63453:
	.ascii	"ncm_disable\000"
	.type	__func__.58752, %object
	.size	__func__.58752, 21
__func__.58752:
	.ascii	"gether_qc_setup_name\000"
	.space	3
	.type	__func__.58606, %object
	.size	__func__.58606, 18
__func__.58606:
	.ascii	"gether_setup_name\000"
	.space	2
	.type	__func__.58136, %object
	.size	__func__.58136, 17
__func__.58136:
	.ascii	"rndis_qc_set_alt\000"
	.space	3
	.type	__func__.57903, %object
	.size	__func__.57903, 20
__func__.57903:
	.ascii	"ecm_notify_complete\000"
	.type	__func__.57972, %object
	.size	__func__.57972, 9
__func__.57972:
	.ascii	"ecm_bind\000"
	.space	3
	.type	__func__.57979, %object
	.size	__func__.57979, 11
__func__.57979:
	.ascii	"ecm_unbind\000"
	.space	1
	.type	__func__.57882, %object
	.size	__func__.57882, 14
__func__.57882:
	.ascii	"ecm_do_notify\000"
	.space	2
	.type	__func__.57934, %object
	.size	__func__.57934, 12
__func__.57934:
	.ascii	"ecm_set_alt\000"
	.type	__func__.57918, %object
	.size	__func__.57918, 10
__func__.57918:
	.ascii	"ecm_setup\000"
	.space	2
	.type	__func__.57949, %object
	.size	__func__.57949, 12
__func__.57949:
	.ascii	"ecm_disable\000"
	.type	__func__.57025, %object
	.size	__func__.57025, 23
__func__.57025:
	.ascii	"ecm_qc_notify_complete\000"
	.space	1
	.type	__func__.57111, %object
	.size	__func__.57111, 14
__func__.57111:
	.ascii	"ecm_qc_unbind\000"
	.space	2
	.type	__func__.56974, %object
	.size	__func__.56974, 17
__func__.56974:
	.ascii	"ecm_qc_do_notify\000"
	.space	3
	.type	__func__.57056, %object
	.size	__func__.57056, 15
__func__.57056:
	.ascii	"ecm_qc_set_alt\000"
	.space	1
	.type	__func__.57071, %object
	.size	__func__.57071, 15
__func__.57071:
	.ascii	"ecm_qc_disable\000"
	.space	1
	.type	__func__.56781, %object
	.size	__func__.56781, 17
__func__.56781:
	.ascii	"rndis_proc_write\000"
	.space	3
	.type	__func__.56268, %object
	.size	__func__.56268, 17
__func__.56268:
	.ascii	"rndis_add_header\000"
	.space	3
	.type	__func__.56278, %object
	.size	__func__.56278, 25
__func__.56278:
	.ascii	"rndis_response_available\000"
	.space	3
	.type	__func__.56370, %object
	.size	__func__.56370, 11
__func__.56370:
	.ascii	"rndis_bind\000"
	.space	1
	.type	__func__.56337, %object
	.size	__func__.56337, 14
__func__.56337:
	.ascii	"rndis_set_alt\000"
	.space	2
	.type	__func__.56291, %object
	.size	__func__.56291, 24
__func__.56291:
	.ascii	"rndis_response_complete\000"
	.type	__func__.56324, %object
	.size	__func__.56324, 12
__func__.56324:
	.ascii	"rndis_setup\000"
	.type	__func__.56346, %object
	.size	__func__.56346, 14
__func__.56346:
	.ascii	"rndis_disable\000"
	.space	2
	.type	__func__.53802, %object
	.size	__func__.53802, 14
__func__.53802:
	.ascii	"f_midi_unbind\000"
	.space	2
	.type	__func__.53765, %object
	.size	__func__.53765, 16
__func__.53765:
	.ascii	"f_midi_complete\000"
	.type	__func__.53793, %object
	.size	__func__.53793, 15
__func__.53793:
	.ascii	"f_midi_disable\000"
	.space	1
	.type	__func__.52785, %object
	.size	__func__.52785, 24
__func__.52785:
	.ascii	"acm_notify_serial_state\000"
	.type	__func__.52825, %object
	.size	__func__.52825, 9
__func__.52825:
	.ascii	"acm_bind\000"
	.space	3
	.type	__func__.52749, %object
	.size	__func__.52749, 12
__func__.52749:
	.ascii	"acm_set_alt\000"
	.type	__func__.52713, %object
	.size	__func__.52713, 29
__func__.52713:
	.ascii	"acm_complete_set_line_coding\000"
	.space	3
	.type	__func__.52738, %object
	.size	__func__.52738, 10
__func__.52738:
	.ascii	"acm_setup\000"
	.space	2
	.type	__func__.52757, %object
	.size	__func__.52757, 12
__func__.52757:
	.ascii	"acm_disable\000"
	.type	__func__.52594, %object
	.size	__func__.52594, 18
__func__.52594:
	.ascii	"ghsuart_data_init\000"
	.space	2
	.type	__func__.52210, %object
	.size	__func__.52210, 28
__func__.52210:
	.ascii	"ghsuart_data_alloc_requests\000"
	.type	__func__.52315, %object
	.size	__func__.52315, 22
__func__.52315:
	.ascii	"ghsuart_data_start_io\000"
	.space	2
	.type	__func__.52360, %object
	.size	__func__.52360, 21
__func__.52360:
	.ascii	"ghsuart_notify_event\000"
	.space	3
	.type	__func__.52056, %object
	.size	__func__.52056, 18
__func__.52056:
	.ascii	"ghsuart_ctrl_init\000"
	.space	2
	.type	__func__.51289, %object
	.size	__func__.51289, 26
__func__.51289:
	.ascii	"ghsic_data_alloc_requests\000"
	.space	2
	.type	__func__.51434, %object
	.size	__func__.51434, 20
__func__.51434:
	.ascii	"ghsic_data_start_io\000"
	.type	__func__.49964, %object
	.size	__func__.49964, 16
__func__.49964:
	.ascii	"rmnet_ctrl_open\000"
	.type	__func__.49976, %object
	.size	__func__.49976, 19
__func__.49976:
	.ascii	"rmnet_ctrl_release\000"
	.space	1
	.type	__func__.47542, %object
	.size	__func__.47542, 16
__func__.47542:
	.ascii	"gserial_connect\000"
	.type	__func__.47324, %object
	.size	__func__.47324, 8
__func__.47324:
	.ascii	"gs_open\000"
	.type	__func__.47343, %object
	.size	__func__.47343, 9
__func__.47343:
	.ascii	"gs_close\000"
	.space	3
	.type	__func__.40865, %object
	.size	__func__.40865, 20
__func__.40865:
	.ascii	"audio_data_complete\000"
	.type	__func__.40924, %object
	.size	__func__.40924, 14
__func__.40924:
	.ascii	"audio_set_alt\000"
	.space	2
	.type	__func__.40930, %object
	.size	__func__.40930, 14
__func__.40930:
	.ascii	"audio_disable\000"
	.space	2
	.type	__func__.40893, %object
	.size	__func__.40893, 30
__func__.40893:
	.ascii	"audio_source_get_endpoint_req\000"
	.space	2
	.type	__func__.40875, %object
	.size	__func__.40875, 30
__func__.40875:
	.ascii	"audio_source_set_endpoint_req\000"
	.space	2
	.type	__func__.40914, %object
	.size	__func__.40914, 12
__func__.40914:
	.ascii	"audio_setup\000"
	.type	__func__.37193, %object
	.size	__func__.37193, 26
__func__.37193:
	.ascii	"rmnet_sdio_ctl_receive_cb\000"
	.space	2
	.type	__func__.37214, %object
	.size	__func__.37214, 24
__func__.37214:
	.ascii	"rmnet_sdio_sts_callback\000"
	.type	__func__.37277, %object
	.size	__func__.37277, 17
__func__.37277:
	.ascii	"rmnet_sdio_setup\000"
	.space	3
	.type	__func__.31787, %object
	.size	__func__.31787, 22
__func__.31787:
	.ascii	"rmnet_control_rx_tlet\000"
	.space	2
	.type	__func__.31892, %object
	.size	__func__.31892, 19
__func__.31892:
	.ascii	"rmnet_data_rx_tlet\000"
	.space	1
	.type	__func__.31867, %object
	.size	__func__.31867, 19
__func__.31867:
	.ascii	"rmnet_data_tx_tlet\000"
	.space	1
	.type	__func__.31975, %object
	.size	__func__.31975, 19
__func__.31975:
	.ascii	"rmnet_smd_ch_probe\000"
	.space	1
	.type	__func__.31832, %object
	.size	__func__.31832, 16
__func__.31832:
	.ascii	"rmnet_smd_setup\000"
	.type	__func__.31068, %object
	.size	__func__.31068, 15
__func__.31068:
	.ascii	"usb_qdss_close\000"
	.space	1
	.type	__func__.31043, %object
	.size	__func__.31043, 14
__func__.31043:
	.ascii	"usb_qdss_open\000"
	.space	2
	.type	__func__.31020, %object
	.size	__func__.31020, 20
__func__.31020:
	.ascii	"usb_qdss_ctrl_write\000"
	.type	__func__.31003, %object
	.size	__func__.31003, 19
__func__.31003:
	.ascii	"usb_qdss_ctrl_read\000"
	.space	1
	.type	__func__.30836, %object
	.size	__func__.30836, 25
__func__.30836:
	.ascii	"qdss_ctrl_write_complete\000"
	.space	3
	.type	__func__.30848, %object
	.size	__func__.30848, 24
__func__.30848:
	.ascii	"qdss_ctrl_read_complete\000"
	.type	__func__.30880, %object
	.size	__func__.30880, 19
__func__.30880:
	.ascii	"usb_qdss_alloc_req\000"
	.space	1
	.type	__func__.30860, %object
	.size	__func__.30860, 18
__func__.30860:
	.ascii	"usb_qdss_free_req\000"
	.space	2
	.type	__func__.30796, %object
	.size	__func__.30796, 10
__func__.30796:
	.ascii	"init_data\000"
	.space	2
	.type	__func__.30778, %object
	.size	__func__.30778, 13
__func__.30778:
	.ascii	"send_sps_req\000"
	.space	3
	.type	__func__.26011, %object
	.size	__func__.26011, 22
__func__.26011:
	.ascii	"diag_function_disable\000"
	.space	2
	.type	__func__.26057, %object
	.size	__func__.26057, 18
__func__.26057:
	.ascii	"diag_function_add\000"
	.space	2
	.type	__func__.25444, %object
	.size	__func__.25444, 18
__func__.25444:
	.ascii	"composite_suspend\000"
	.space	2
	.type	__func__.25459, %object
	.size	__func__.25459, 17
__func__.25459:
	.ascii	"composite_resume\000"
	.space	3
	.type	__func__.25308, %object
	.size	__func__.25308, 25
__func__.25308:
	.ascii	"composite_setup_complete\000"
	.space	3
	.type	__func__.25195, %object
	.size	__func__.25195, 14
__func__.25195:
	.ascii	"unbind_config\000"
	.space	2
	.type	__func__.25108, %object
	.size	__func__.25108, 13
__func__.25108:
	.ascii	"reset_config\000"
	.space	3
	.type	__func__.25166, %object
	.size	__func__.25166, 15
__func__.25166:
	.ascii	"usb_add_config\000"
	.space	1
	.type	__func__.25005, %object
	.size	__func__.25005, 17
__func__.25005:
	.ascii	"usb_add_function\000"
	.space	3
	.type	mirrorlink_shortname, %object
	.size	mirrorlink_shortname, 8
mirrorlink_shortname:
	.ascii	"usb_ncm\000"
	.type	conn_gadget_fops, %object
	.size	conn_gadget_fops, 108
conn_gadget_fops:
	.word	0
	.space	4
	.word	conn_gadget_read
	.word	conn_gadget_write
	.space	12
	.word	conn_gadget_poll
	.word	conn_gadget_ioctl
	.space	8
	.word	conn_gadget_open
	.word	conn_gadget_flush
	.word	conn_gadget_release
	.space	52
	.type	conn_gadget_shortname, %object
	.size	conn_gadget_shortname, 17
conn_gadget_shortname:
	.ascii	"android_ssusbcon\000"
	.space	3
	.type	__param_str_audio_capture_buf_size, %object
	.size	__param_str_audio_capture_buf_size, 31
__param_str_audio_capture_buf_size:
	.ascii	"android.audio_capture_buf_size\000"
	.space	1
	.type	__param_str_req_capture_count, %object
	.size	__param_str_req_capture_count, 26
__param_str_req_capture_count:
	.ascii	"android.req_capture_count\000"
	.space	2
	.type	__param_str_req_capture_buf_size, %object
	.size	__param_str_req_capture_buf_size, 29
__param_str_req_capture_buf_size:
	.ascii	"android.req_capture_buf_size\000"
	.space	3
	.type	__param_str_audio_playback_buf_size, %object
	.size	__param_str_audio_playback_buf_size, 32
__param_str_audio_playback_buf_size:
	.ascii	"android.audio_playback_buf_size\000"
	.type	__param_str_req_playback_count, %object
	.size	__param_str_req_playback_count, 27
__param_str_req_playback_count:
	.ascii	"android.req_playback_count\000"
	.space	1
	.type	__param_str_req_playback_buf_size, %object
	.size	__param_str_req_playback_buf_size, 30
__param_str_req_playback_buf_size:
	.ascii	"android.req_playback_buf_size\000"
	.space	2
	.type	__param_str_fn_cntl, %object
	.size	__param_str_fn_cntl, 16
__param_str_fn_cntl:
	.ascii	"android.fn_cntl\000"
	.type	__param_str_fn_cap, %object
	.size	__param_str_fn_cap, 15
__param_str_fn_cap:
	.ascii	"android.fn_cap\000"
	.space	1
	.type	__param_str_fn_play, %object
	.size	__param_str_fn_play, 16
__param_str_fn_play:
	.ascii	"android.fn_play\000"
	.type	__param_str_qc_host_addr, %object
	.size	__param_str_qc_host_addr, 21
__param_str_qc_host_addr:
	.ascii	"android.qc_host_addr\000"
	.space	3
	.type	__param_str_qc_dev_addr, %object
	.size	__param_str_qc_dev_addr, 20
__param_str_qc_dev_addr:
	.ascii	"android.qc_dev_addr\000"
	.type	__param_str_host_addr, %object
	.size	__param_str_host_addr, 18
__param_str_host_addr:
	.ascii	"android.host_addr\000"
	.space	2
	.type	__param_str_dev_addr, %object
	.size	__param_str_dev_addr, 17
__param_str_dev_addr:
	.ascii	"android.dev_addr\000"
	.space	3
	.type	__param_str_qmult, %object
	.size	__param_str_qmult, 14
__param_str_qmult:
	.ascii	"android.qmult\000"
	.space	2
	.type	rndis_qc_fops, %object
	.size	rndis_qc_fops, 108
rndis_qc_fops:
	.word	0
	.space	28
	.word	rndis_qc_ioctl
	.space	8
	.word	rndis_qc_open_dev
	.space	4
	.word	rndis_qc_release_dev
	.space	52
	.type	mbim_fops, %object
	.size	mbim_fops, 108
mbim_fops:
	.word	0
	.space	4
	.word	mbim_read
	.word	mbim_write
	.space	16
	.word	mbim_ioctl
	.space	8
	.word	mbim_open
	.space	4
	.word	mbim_release
	.space	52
	.type	__param_str_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_str_rndis_ul_max_xfer_size_rcvd, 36
__param_str_rndis_ul_max_xfer_size_rcvd:
	.ascii	"android.rndis_ul_max_xfer_size_rcvd\000"
	.type	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, 39
__param_str_rndis_ul_max_pkt_per_xfer_rcvd:
	.ascii	"android.rndis_ul_max_pkt_per_xfer_rcvd\000"
	.space	1
	.type	__param_str_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer, 34
__param_str_rndis_ul_max_pkt_per_xfer:
	.ascii	"android.rndis_ul_max_pkt_per_xfer\000"
	.space	2
	.type	__param_str_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_str_rndis_dl_max_pkt_per_xfer, 34
__param_str_rndis_dl_max_pkt_per_xfer:
	.ascii	"android.rndis_dl_max_pkt_per_xfer\000"
	.space	2
	.type	acc_hid_table, %object
	.size	acc_hid_table, 32
acc_hid_table:
	.short	3
	.space	2
	.word	-1
	.word	-1
	.space	4
	.space	16
	.type	acc_fops, %object
	.size	acc_fops, 108
acc_fops:
	.word	0
	.space	4
	.word	acc_read
	.word	acc_write
	.space	16
	.word	acc_ioctl
	.space	8
	.word	acc_open
	.space	4
	.word	acc_release
	.space	52
	.type	mtp_fops, %object
	.size	mtp_fops, 108
mtp_fops:
	.word	0
	.space	4
	.word	mtp_read
	.word	mtp_write
	.space	16
	.word	mtp_ioctl
	.space	8
	.word	mtp_open
	.space	4
	.word	mtp_release
	.space	52
	.type	mtp_shortname, %object
	.size	mtp_shortname, 8
mtp_shortname:
	.ascii	"mtp_usb\000"
	.type	__param_str_mtp_tx_reqs, %object
	.size	__param_str_mtp_tx_reqs, 20
__param_str_mtp_tx_reqs:
	.ascii	"android.mtp_tx_reqs\000"
	.type	__param_str_mtp_tx_req_len, %object
	.size	__param_str_mtp_tx_req_len, 23
__param_str_mtp_tx_req_len:
	.ascii	"android.mtp_tx_req_len\000"
	.space	1
	.type	__param_str_mtp_rx_req_len, %object
	.size	__param_str_mtp_rx_req_len, 23
__param_str_mtp_rx_req_len:
	.ascii	"android.mtp_rx_req_len\000"
	.space	1
	.type	ccid_ctrl_fops, %object
	.size	ccid_ctrl_fops, 108
ccid_ctrl_fops:
	.word	0
	.space	4
	.word	ccid_ctrl_read
	.space	20
	.word	ccid_ctrl_ioctl
	.space	8
	.word	ccid_ctrl_open
	.space	4
	.word	ccid_ctrl_release
	.space	52
	.type	ccid_bulk_fops, %object
	.size	ccid_bulk_fops, 108
ccid_bulk_fops:
	.word	0
	.space	4
	.word	ccid_bulk_read
	.word	ccid_bulk_write
	.space	28
	.word	ccid_bulk_open
	.space	4
	.word	ccid_bulk_release
	.space	52
	.type	adb_fops, %object
	.size	adb_fops, 108
adb_fops:
	.word	0
	.space	4
	.word	adb_read
	.word	adb_write
	.space	28
	.word	adb_open
	.space	4
	.word	adb_release
	.space	52
	.type	adb_shortname, %object
	.size	adb_shortname, 12
adb_shortname:
	.ascii	"android_adb\000"
	.type	modem_fops, %object
	.size	modem_fops, 108
modem_fops:
	.word	0
	.word	no_llseek
	.word	modem_read
	.space	16
	.word	modem_poll
	.word	modem_ioctl
	.space	8
	.word	modem_open
	.space	4
	.word	modem_close
	.space	52
	.type	__param_str_ghsuart_data_tx_intr_thld, %object
	.size	__param_str_ghsuart_data_tx_intr_thld, 34
__param_str_ghsuart_data_tx_intr_thld:
	.ascii	"android.ghsuart_data_tx_intr_thld\000"
	.space	2
	.type	__param_str_ghsuart_data_rx_req_size, %object
	.size	__param_str_ghsuart_data_rx_req_size, 33
__param_str_ghsuart_data_rx_req_size:
	.ascii	"android.ghsuart_data_rx_req_size\000"
	.space	3
	.type	__param_str_ghsuart_data_serial_rx_q_size, %object
	.size	__param_str_ghsuart_data_serial_rx_q_size, 38
__param_str_ghsuart_data_serial_rx_q_size:
	.ascii	"android.ghsuart_data_serial_rx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_serial_tx_q_size, %object
	.size	__param_str_ghsuart_data_serial_tx_q_size, 38
__param_str_ghsuart_data_serial_tx_q_size:
	.ascii	"android.ghsuart_data_serial_tx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_rx_q_size, 37
__param_str_ghsuart_data_rmnet_rx_q_size:
	.ascii	"android.ghsuart_data_rmnet_rx_q_size\000"
	.space	3
	.type	__param_str_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_tx_q_size, 37
__param_str_ghsuart_data_rmnet_tx_q_size:
	.ascii	"android.ghsuart_data_rmnet_tx_q_size\000"
	.space	3
	.type	__param_str_record_timestamp, %object
	.size	__param_str_record_timestamp, 25
__param_str_record_timestamp:
	.ascii	"android.record_timestamp\000"
	.space	3
	.type	__param_str_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_str_ghsic_data_pend_limit_with_bridge, 42
__param_str_ghsic_data_pend_limit_with_bridge:
	.ascii	"android.ghsic_data_pend_limit_with_bridge\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_dis_thld, %object
	.size	__param_str_ghsic_data_fctrl_dis_thld, 34
__param_str_ghsic_data_fctrl_dis_thld:
	.ascii	"android.ghsic_data_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_en_thld, %object
	.size	__param_str_ghsic_data_fctrl_en_thld, 33
__param_str_ghsic_data_fctrl_en_thld:
	.ascii	"android.ghsic_data_fctrl_en_thld\000"
	.space	3
	.type	__param_str_ghsic_data_fctrl_support, %object
	.size	__param_str_ghsic_data_fctrl_support, 33
__param_str_ghsic_data_fctrl_support:
	.ascii	"android.ghsic_data_fctrl_support\000"
	.space	3
	.type	__param_str_ghsic_data_tx_intr_thld, %object
	.size	__param_str_ghsic_data_tx_intr_thld, 32
__param_str_ghsic_data_tx_intr_thld:
	.ascii	"android.ghsic_data_tx_intr_thld\000"
	.type	__param_str_ghsic_data_rx_req_size, %object
	.size	__param_str_ghsic_data_rx_req_size, 31
__param_str_ghsic_data_rx_req_size:
	.ascii	"android.ghsic_data_rx_req_size\000"
	.space	1
	.type	__param_str_ghsic_data_serial_rx_q_size, %object
	.size	__param_str_ghsic_data_serial_rx_q_size, 36
__param_str_ghsic_data_serial_rx_q_size:
	.ascii	"android.ghsic_data_serial_rx_q_size\000"
	.type	__param_str_ghsic_data_serial_tx_q_size, %object
	.size	__param_str_ghsic_data_serial_tx_q_size, 36
__param_str_ghsic_data_serial_tx_q_size:
	.ascii	"android.ghsic_data_serial_tx_q_size\000"
	.type	__param_str_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_rx_q_size, 35
__param_str_ghsic_data_rmnet_rx_q_size:
	.ascii	"android.ghsic_data_rmnet_rx_q_size\000"
	.space	1
	.type	__param_str_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_tx_q_size, 35
__param_str_ghsic_data_rmnet_tx_q_size:
	.ascii	"android.ghsic_data_rmnet_tx_q_size\000"
	.space	1
	.type	rmnet_ctrl_fops, %object
	.size	rmnet_ctrl_fops, 108
rmnet_ctrl_fops:
	.word	0
	.space	4
	.word	rmnet_ctrl_read
	.word	rmnet_ctrl_write
	.space	12
	.word	rmnet_ctrl_poll
	.word	rmnet_ctrl_ioctl
	.space	8
	.word	rmnet_ctrl_open
	.space	4
	.word	rmnet_ctrl_release
	.space	52
	.type	__param_str_dl_intr_threshold, %object
	.size	__param_str_dl_intr_threshold, 26
__param_str_dl_intr_threshold:
	.ascii	"android.dl_intr_threshold\000"
	.space	2
	.type	__param_str_bam_mux_rx_req_size, %object
	.size	__param_str_bam_mux_rx_req_size, 28
__param_str_bam_mux_rx_req_size:
	.ascii	"android.bam_mux_rx_req_size\000"
	.type	__param_str_bam_mux_rx_q_size, %object
	.size	__param_str_bam_mux_rx_q_size, 26
__param_str_bam_mux_rx_q_size:
	.ascii	"android.bam_mux_rx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_tx_q_size, %object
	.size	__param_str_bam_mux_tx_q_size, 26
__param_str_bam_mux_tx_q_size:
	.ascii	"android.bam_mux_tx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_dis_thld, 34
__param_str_bam_mux_rx_fctrl_dis_thld:
	.ascii	"android.bam_mux_rx_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_support, %object
	.size	__param_str_bam_mux_rx_fctrl_support, 33
__param_str_bam_mux_rx_fctrl_support:
	.ascii	"android.bam_mux_rx_fctrl_support\000"
	.space	3
	.type	__param_str_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_en_thld, 33
__param_str_bam_mux_rx_fctrl_en_thld:
	.ascii	"android.bam_mux_rx_fctrl_en_thld\000"
	.space	3
	.type	__param_str_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_str_bam_mux_tx_pkt_drop_thld, 33
__param_str_bam_mux_tx_pkt_drop_thld:
	.ascii	"android.bam_mux_tx_pkt_drop_thld\000"
	.space	3
	.type	__param_str_bam_pending_limit, %object
	.size	__param_str_bam_pending_limit, 26
__param_str_bam_pending_limit:
	.ascii	"android.bam_pending_limit\000"
	.space	2
	.type	fsg_string_interface, %object
	.size	fsg_string_interface, 13
fsg_string_interface:
	.ascii	"Mass Storage\000"
	.space	3
	.type	rmnet_mux_ctrl_fops, %object
	.size	rmnet_mux_ctrl_fops, 108
rmnet_mux_ctrl_fops:
	.word	0
	.space	4
	.word	usb_rmnet_mux_ctrl_read
	.word	usb_rmnet_mux_ctrl_write
	.space	16
	.word	usb_rmnet_mux_ctrl_ioctl
	.space	8
	.word	usb_rmnet_mux_ctrl_open
	.space	4
	.word	usb_rmnet_mux_ctrl_release
	.space	52
	.type	__param_str_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_dis_thld, 35
__param_str_mux_sdio_rx_fctrl_dis_thld:
	.ascii	"android.mux_sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_en_thld, 34
__param_str_mux_sdio_rx_fctrl_en_thld:
	.ascii	"android.mux_sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_mux_sdio_tx_pkt_drop_thld, 34
__param_str_mux_sdio_tx_pkt_drop_thld:
	.ascii	"android.mux_sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_mux_smd_data_ch, %object
	.size	__param_str_rmnet_mux_smd_data_ch, 30
__param_str_rmnet_mux_smd_data_ch:
	.ascii	"android.rmnet_mux_smd_data_ch\000"
	.space	2
	.type	__param_str_rmnet_mux_sdio_data_ch, %object
	.size	__param_str_rmnet_mux_sdio_data_ch, 31
__param_str_rmnet_mux_sdio_data_ch:
	.ascii	"android.rmnet_mux_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_str_rmnet_mux_sdio_ctl_ch, 30
__param_str_rmnet_mux_sdio_ctl_ch:
	.ascii	"android.rmnet_mux_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_sdio_rx_fctrl_dis_thld, 31
__param_str_sdio_rx_fctrl_dis_thld:
	.ascii	"android.sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_sdio_rx_fctrl_en_thld, 30
__param_str_sdio_rx_fctrl_en_thld:
	.ascii	"android.sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_sdio_tx_pkt_drop_thld, 30
__param_str_sdio_tx_pkt_drop_thld:
	.ascii	"android.sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_sdio_data_ch, %object
	.size	__param_str_rmnet_sdio_data_ch, 27
__param_str_rmnet_sdio_data_ch:
	.ascii	"android.rmnet_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_sdio_ctl_ch, %object
	.size	__param_str_rmnet_sdio_ctl_ch, 26
__param_str_rmnet_sdio_ctl_ch:
	.ascii	"android.rmnet_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_rmnet_data_ch, %object
	.size	__param_str_rmnet_data_ch, 22
__param_str_rmnet_data_ch:
	.ascii	"android.rmnet_data_ch\000"
	.space	2
	.type	__param_str_rmnet_ctl_ch, %object
	.size	__param_str_rmnet_ctl_ch, 21
__param_str_rmnet_ctl_ch:
	.ascii	"android.rmnet_ctl_ch\000"
	.space	3
	.type	__param_str_iSerialNumber, %object
	.size	__param_str_iSerialNumber, 22
__param_str_iSerialNumber:
	.ascii	"android.iSerialNumber\000"
	.space	2
	.type	__param_str_iProduct, %object
	.size	__param_str_iProduct, 17
__param_str_iProduct:
	.ascii	"android.iProduct\000"
	.space	3
	.type	__param_str_iManufacturer, %object
	.size	__param_str_iManufacturer, 22
__param_str_iManufacturer:
	.ascii	"android.iManufacturer\000"
	.space	2
	.type	__param_str_bcdDevice, %object
	.size	__param_str_bcdDevice, 18
__param_str_bcdDevice:
	.ascii	"android.bcdDevice\000"
	.space	2
	.type	__param_str_idProduct, %object
	.size	__param_str_idProduct, 18
__param_str_idProduct:
	.ascii	"android.idProduct\000"
	.space	2
	.type	__param_str_idVendor, %object
	.size	__param_str_idVendor, 17
__param_str_idVendor:
	.ascii	"android.idVendor\000"
	.data
	.align	3
	.set	.LANCHOR0,. + 0
	.set	.LANCHOR7,. + 8184
	.type	usb_diag_ch_list, %object
	.size	usb_diag_ch_list, 8
usb_diag_ch_list:
	.word	usb_diag_ch_list
	.word	usb_diag_ch_list
	.type	uac1_ac_header_desc, %object
	.size	uac1_ac_header_desc, 10
uac1_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	52
	.byte	2
	.space	2
	.space	2
	.type	ntb_parameters, %object
	.size	ntb_parameters, 28
ntb_parameters:
	.short	28
	.short	3
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.type	ndp16_opts, %object
	.size	ndp16_opts, 44
ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	ndp32_opts, %object
	.size	ndp32_opts, 44
ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	device_desc, %object
	.size	device_desc, 18
device_desc:
	.byte	18
	.byte	1
	.short	512
	.byte	0
	.space	3
	.short	6353
	.short	1
	.short	-1
	.space	3
	.byte	1
	.space	2
	.type	_rs.51902, %object
	.size	_rs.51902, 24
_rs.51902:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	mbim_ntb_parameters, %object
	.size	mbim_ntb_parameters, 28
mbim_ntb_parameters:
	.short	28
	.short	1
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	4096
	.short	4
	.short	0
	.short	4
	.short	0
	.type	mbim_ext_config_desc, %object
	.size	mbim_ext_config_desc, 40
mbim_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.ascii	"ALTRCFG\000"
	.space	14
	.type	mbim_os_string, %object
	.size	mbim_os_string, 18
mbim_os_string:
	.ascii	"\022\003M\000S\000F\000T\0001\0000\0000\000\245\000"
	.space	2
	.type	usb_qdss_ch_list, %object
	.size	usb_qdss_ch_list, 8
usb_qdss_ch_list:
	.word	usb_qdss_ch_list
	.word	usb_qdss_ch_list
	.type	android_platform_driver, %object
	.size	android_platform_driver, 80
android_platform_driver:
	.word	android_probe
	.word	android_remove
	.space	12
	.word	.LC1096
	.space	16
	.word	usb_android_dt_match
	.space	32
	.word	android_id_table
	.type	composite_driver, %object
	.size	composite_driver, 88
composite_driver:
	.space	8
	.word	composite_unbind
	.word	composite_setup
	.word	composite_disconnect
	.word	composite_suspend
	.word	composite_resume
	.space	8
	.word	0
	.space	44
	.space	4
	.type	rmnet_ctl_ch, %object
	.size	rmnet_ctl_ch, 4
rmnet_ctl_ch:
	.word	.LC888
	.type	rmnet_data_ch, %object
	.size	rmnet_data_ch, 4
rmnet_data_ch:
	.word	.LC888
	.type	mtp_os_string, %object
	.size	mtp_os_string, 18
mtp_os_string:
	.ascii	"\022\003M\000S\000F\000T\0001\0000\0000\000\001\000"
	.space	2
	.type	mtp_ext_config_desc, %object
	.size	mtp_ext_config_desc, 40
mtp_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.ascii	"MTP\000"
	.space	4
	.space	14
	.type	ccid_class_desc, %object
	.size	ccid_class_desc, 54
ccid_class_desc:
	.byte	54
	.byte	33
	.short	272
	.byte	0
	.byte	2
	.4byte	1
	.4byte	3580
	.4byte	3580
	.byte	0
	.4byte	9600
	.4byte	9600
	.byte	0
	.word	0
	.word	0
	.word	0
	.word	131198
	.word	512
	.byte	0
	.byte	0
	.short	0
	.byte	0
	.byte	1
	.space	2
	.type	_rs.38158, %object
	.size	_rs.38158, 24
_rs.38158:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	dl_intr_threshold, %object
	.size	dl_intr_threshold, 4
dl_intr_threshold:
	.word	20
	.type	ghsic_data_fctrl_support, %object
	.size	ghsic_data_fctrl_support, 4
ghsic_data_fctrl_support:
	.word	1
	.type	ghsic_data_fctrl_en_thld, %object
	.size	ghsic_data_fctrl_en_thld, 4
ghsic_data_fctrl_en_thld:
	.word	500
	.type	qmult, %object
	.size	qmult, 4
qmult:
	.word	10
	.type	mux_sdio_rx_fctrl_en_thld, %object
	.size	mux_sdio_rx_fctrl_en_thld, 4
mux_sdio_rx_fctrl_en_thld:
	.word	1000
	.type	bam_mux_rx_fctrl_support, %object
	.size	bam_mux_rx_fctrl_support, 4
bam_mux_rx_fctrl_support:
	.word	1
	.type	bam_mux_rx_fctrl_en_thld, %object
	.size	bam_mux_rx_fctrl_en_thld, 4
bam_mux_rx_fctrl_en_thld:
	.word	500
	.type	bam_mux_rx_req_size, %object
	.size	bam_mux_rx_req_size, 4
bam_mux_rx_req_size:
	.word	2048
	.type	mtp_rx_req_len, %object
	.size	mtp_rx_req_len, 4
mtp_rx_req_len:
	.word	16384
	.type	bam_pending_limit, %object
	.size	bam_pending_limit, 4
bam_pending_limit:
	.word	220
	.type	bam_mux_rx_fctrl_dis_thld, %object
	.size	bam_mux_rx_fctrl_dis_thld, 4
bam_mux_rx_fctrl_dis_thld:
	.word	300
	.type	rmnet_device, %object
	.size	rmnet_device, 36
rmnet_device:
	.word	255
	.word	.LC1750
	.word	rmnet_ctrl_fops
	.space	24
	.type	acc_device, %object
	.size	acc_device, 36
acc_device:
	.word	255
	.word	.LC1727
	.word	acc_fops
	.space	24
	.type	rndis_qc_device, %object
	.size	rndis_qc_device, 36
rndis_qc_device:
	.word	255
	.word	.LC1637
	.word	rndis_qc_fops
	.space	24
	.type	mtp_device, %object
	.size	mtp_device, 36
mtp_device:
	.word	255
	.word	mtp_shortname
	.word	mtp_fops
	.space	24
	.type	adb_device, %object
	.size	adb_device, 36
adb_device:
	.word	255
	.word	adb_shortname
	.word	adb_fops
	.space	24
	.type	rmnet_mux_ctrl_dev, %object
	.size	rmnet_mux_ctrl_dev, 36
rmnet_mux_ctrl_dev:
	.word	255
	.word	.LC1776
	.word	rmnet_mux_ctrl_fops
	.space	24
	.type	mirrorlink_device, %object
	.size	mirrorlink_device, 36
mirrorlink_device:
	.word	255
	.word	mirrorlink_shortname
	.space	28
	.type	ccid_bulk_device, %object
	.size	ccid_bulk_device, 36
ccid_bulk_device:
	.word	255
	.word	.LC1735
	.word	ccid_bulk_fops
	.space	24
	.type	ccid_ctrl_device, %object
	.size	ccid_ctrl_device, 36
ccid_ctrl_device:
	.word	255
	.word	.LC1734
	.word	ccid_ctrl_fops
	.space	24
	.type	mbim_device, %object
	.size	mbim_device, 36
mbim_device:
	.word	255
	.word	.LC1661
	.word	mbim_fops
	.space	24
	.type	ops.53907, %object
	.size	ops.53907, 12
ops.53907:
	.word	f_midi_snd_free
	.space	8
	.type	gmidi_in_ops, %object
	.size	gmidi_in_ops, 16
gmidi_in_ops:
	.word	f_midi_in_open
	.word	f_midi_in_close
	.word	f_midi_in_trigger
	.space	4
	.type	gmidi_out_ops, %object
	.size	gmidi_out_ops, 16
gmidi_out_ops:
	.word	f_midi_out_open
	.word	f_midi_out_close
	.word	f_midi_out_trigger
	.space	4
	.type	conn_gadget_device, %object
	.size	conn_gadget_device, 36
conn_gadget_device:
	.word	255
	.word	conn_gadget_shortname
	.word	conn_gadget_fops
	.space	24
	.type	strings_dev, %object
	.size	strings_dev, 32
strings_dev:
	.space	4
	.word	manufacturer_string
	.space	4
	.word	product_string
	.space	4
	.word	serial_string
	.space	8
	.type	last_vote.63599, %object
	.size	last_vote.63599, 4
last_vote.63599:
	.word	-1
	.type	acc_hid_ll_driver, %object
	.size	acc_hid_ll_driver, 28
acc_hid_ll_driver:
	.word	acc_hid_start
	.word	acc_hid_stop
	.word	acc_hid_open
	.word	acc_hid_close
	.space	8
	.word	acc_hid_parse
	.type	ffs_fs_type, %object
	.size	ffs_fs_type, 36
ffs_fs_type:
	.word	.LC1771
	.space	4
	.word	ffs_fs_mount
	.space	8
	.word	ffs_fs_kill_sb
	.word	0
	.space	8
	.type	audio_playback_buf_size, %object
	.size	audio_playback_buf_size, 4
audio_playback_buf_size:
	.word	8192
	.type	audio_capture_buf_size, %object
	.size	audio_capture_buf_size, 4
audio_capture_buf_size:
	.word	8192
	.type	dev_attr_suspended, %object
	.size	dev_attr_suspended, 16
dev_attr_suspended:
	.word	.LC1789
	.short	292
	.space	2
	.word	composite_show_suspended
	.word	0
	.type	_rs.52252, %object
	.size	_rs.52252, 24
_rs.52252:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsuart_data_rx_req_size, %object
	.size	ghsuart_data_rx_req_size, 4
ghsuart_data_rx_req_size:
	.word	2048
	.type	_rs.52304, %object
	.size	_rs.52304, 24
_rs.52304:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsuart_data_tx_intr_thld, %object
	.size	ghsuart_data_tx_intr_thld, 4
ghsuart_data_tx_intr_thld:
	.word	1
	.type	sdio_rx_fctrl_en_thld, %object
	.size	sdio_rx_fctrl_en_thld, 4
sdio_rx_fctrl_en_thld:
	.word	1000
	.type	req_capture_buf_size, %object
	.size	req_capture_buf_size, 4
req_capture_buf_size:
	.word	32
	.type	req_playback_count, %object
	.size	req_playback_count, 4
req_playback_count:
	.word	48
	.type	req_playback_buf_size, %object
	.size	req_playback_buf_size, 4
req_playback_buf_size:
	.word	32
	.type	ghsic_data_tx_intr_thld, %object
	.size	ghsic_data_tx_intr_thld, 4
ghsic_data_tx_intr_thld:
	.word	20
	.type	ghsic_data_fctrl_dis_thld, %object
	.size	ghsic_data_fctrl_dis_thld, 4
ghsic_data_fctrl_dis_thld:
	.word	300
	.type	android_usb_attributes, %object
	.size	android_usb_attributes, 76
android_usb_attributes:
	.word	dev_attr_idVendor
	.word	dev_attr_idProduct
	.word	dev_attr_bcdDevice
	.word	dev_attr_bDeviceClass
	.word	dev_attr_bDeviceSubClass
	.word	dev_attr_bDeviceProtocol
	.word	dev_attr_iManufacturer
	.word	dev_attr_iProduct
	.word	dev_attr_iSerial
	.word	dev_attr_functions
	.word	dev_attr_enable
	.word	dev_attr_pm_qos
	.word	dev_attr_state
	.word	dev_attr_bcdUSB
	.word	dev_attr_usb30en
	.word	dev_attr_ss_host_available
	.word	dev_attr_macos
	.word	dev_attr_remote_wakeup
	.word	0
	.type	android_usb_driver, %object
	.size	android_usb_driver, 44
android_usb_driver:
	.word	.LC1096
	.space	8
	.word	device_desc
	.word	dev_strings
	.word	5
	.space	4
	.word	android_usb_unbind
	.space	12
	.type	_rs.51364, %object
	.size	_rs.51364, 24
_rs.51364:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsic_data_pend_limit_with_bridge, %object
	.size	ghsic_data_pend_limit_with_bridge, 4
ghsic_data_pend_limit_with_bridge:
	.word	500
	.type	ghsic_data_rx_req_size, %object
	.size	ghsic_data_rx_req_size, 4
ghsic_data_rx_req_size:
	.word	2048
	.type	_rs.51422, %object
	.size	_rs.51422, 24
_rs.51422:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ecm_qc_string_defs, %object
	.size	ecm_qc_string_defs, 32
ecm_qc_string_defs:
	.space	4
	.word	.LC1649
	.space	4
	.word	0
	.space	4
	.word	.LC1650
	.space	8
	.type	ecm_string_defs, %object
	.size	ecm_string_defs, 40
ecm_string_defs:
	.space	4
	.word	.LC1649
	.space	4
	.word	0
	.space	4
	.word	.LC1650
	.space	4
	.word	.LC1651
	.space	8
	.type	ncm_string_defs, %object
	.size	ncm_string_defs, 40
ncm_string_defs:
	.space	4
	.word	.LC1576
	.space	4
	.word	0
	.space	4
	.word	.LC1577
	.space	4
	.word	.LC1578
	.space	8
	.type	acc_hid_driver, %object
	.size	acc_hid_driver, 132
acc_hid_driver:
	.word	.LC1726
	.word	acc_hid_table
	.space	12
	.word	acc_hid_probe
	.space	108
	.type	mbim_ndp16_opts, %object
	.size	mbim_ndp16_opts, 44
mbim_ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	mbim_ndp32_opts, %object
	.size	mbim_ndp32_opts, 44
mbim_ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	mtp_tx_req_len, %object
	.size	mtp_tx_req_len, 4
mtp_tx_req_len:
	.word	16384
	.type	dev_attr_cdrom, %object
	.size	dev_attr_cdrom, 16
dev_attr_cdrom:
	.word	.LC1766
	.short	420
	.space	2
	.word	fsg_show_cdrom
	.word	fsg_store_cdrom
	.type	dev_attr_nofua, %object
	.size	dev_attr_nofua, 16
dev_attr_nofua:
	.word	.LC1768
	.short	420
	.space	2
	.word	fsg_show_nofua
	.word	fsg_store_nofua
	.type	dev_attr_ro, %object
	.size	dev_attr_ro, 16
dev_attr_ro:
	.word	.LC1769
	.short	420
	.space	2
	.word	fsg_show_ro
	.word	fsg_store_ro
	.type	dev_attr_file, %object
	.size	dev_attr_file, 16
dev_attr_file:
	.word	.LC1767
	.short	420
	.space	2
	.word	fsg_show_file
	.word	fsg_store_file
	.type	bam_mux_rx_q_size, %object
	.size	bam_mux_rx_q_size, 4
bam_mux_rx_q_size:
	.word	16
	.type	bam_mux_tx_q_size, %object
	.size	bam_mux_tx_q_size, 4
bam_mux_tx_q_size:
	.word	200
	.type	ccid_fs_descs, %object
	.size	ccid_fs_descs, 24
ccid_fs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_fs_notify_desc
	.word	ccid_fs_in_desc
	.word	ccid_fs_out_desc
	.word	0
	.type	ccid_hs_descs, %object
	.size	ccid_hs_descs, 24
ccid_hs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_hs_notify_desc
	.word	ccid_hs_in_desc
	.word	ccid_hs_out_desc
	.word	0
	.type	rmnet_mux_strings, %object
	.size	rmnet_mux_strings, 8
rmnet_mux_strings:
	.word	rmnet_mux_string_table
	.word	0
	.type	rmnet_mux_fs_function, %object
	.size	rmnet_mux_fs_function, 20
rmnet_mux_fs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_fs_notify_desc
	.word	rmnet_mux_fs_in_desc
	.word	rmnet_mux_fs_out_desc
	.word	0
	.type	rmnet_mux_hs_function, %object
	.size	rmnet_mux_hs_function, 20
rmnet_mux_hs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_hs_notify_desc
	.word	rmnet_mux_hs_in_desc
	.word	rmnet_mux_hs_out_desc
	.word	0
	.type	fsg_strings, %object
	.size	fsg_strings, 16
fsg_strings:
	.byte	0
	.space	3
	.word	fsg_string_interface
	.space	8
	.type	fsg_intf_desc, %object
	.size	fsg_intf_desc, 9
fsg_intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	8
	.byte	6
	.byte	80
	.byte	0
	.space	3
	.type	fsg_strings_array, %object
	.size	fsg_strings_array, 8
fsg_strings_array:
	.word	fsg_stringtab
	.word	0
	.type	intf_desc, %object
	.size	intf_desc, 9
intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	-1
	.byte	16
	.byte	1
	.space	1
	.space	3
	.type	fs_bulk_in_desc, %object
	.size	fs_bulk_in_desc, 9
fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_bulk_out_desc, %object
	.size	fs_bulk_out_desc, 9
fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_diag_desc, %object
	.size	fs_diag_desc, 16
fs_diag_desc:
	.word	intf_desc
	.word	fs_bulk_in_desc
	.word	fs_bulk_out_desc
	.word	0
	.type	hs_bulk_in_desc, %object
	.size	hs_bulk_in_desc, 9
hs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_bulk_out_desc, %object
	.size	hs_bulk_out_desc, 9
hs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_diag_desc, %object
	.size	hs_diag_desc, 16
hs_diag_desc:
	.word	intf_desc
	.word	hs_bulk_in_desc
	.word	hs_bulk_out_desc
	.word	0
	.type	ss_bulk_in_desc, %object
	.size	ss_bulk_in_desc, 9
ss_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_bulk_out_desc, %object
	.size	ss_bulk_out_desc, 9
ss_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_diag_desc, %object
	.size	ss_diag_desc, 24
ss_diag_desc:
	.word	intf_desc
	.word	ss_bulk_in_desc
	.word	ss_bulk_in_comp_desc
	.word	ss_bulk_out_desc
	.word	ss_bulk_out_comp_desc
	.word	0
	.type	rmnet_smd_interface_desc, %object
	.size	rmnet_smd_interface_desc, 9
rmnet_smd_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_smd_fs_in_desc, %object
	.size	rmnet_smd_fs_in_desc, 9
rmnet_smd_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_out_desc, %object
	.size	rmnet_smd_fs_out_desc, 9
rmnet_smd_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_notify_desc, %object
	.size	rmnet_smd_fs_notify_desc, 9
rmnet_smd_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_smd_hs_in_desc, %object
	.size	rmnet_smd_hs_in_desc, 9
rmnet_smd_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_out_desc, %object
	.size	rmnet_smd_hs_out_desc, 9
rmnet_smd_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_notify_desc, %object
	.size	rmnet_smd_hs_notify_desc, 9
rmnet_smd_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_sdio_interface_desc, %object
	.size	rmnet_sdio_interface_desc, 9
rmnet_sdio_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_sdio_fs_in_desc, %object
	.size	rmnet_sdio_fs_in_desc, 9
rmnet_sdio_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_out_desc, %object
	.size	rmnet_sdio_fs_out_desc, 9
rmnet_sdio_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_notify_desc, %object
	.size	rmnet_sdio_fs_notify_desc, 9
rmnet_sdio_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_sdio_hs_in_desc, %object
	.size	rmnet_sdio_hs_in_desc, 9
rmnet_sdio_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_out_desc, %object
	.size	rmnet_sdio_hs_out_desc, 9
rmnet_sdio_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_notify_desc, %object
	.size	rmnet_sdio_hs_notify_desc, 9
rmnet_sdio_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	input_terminal_desc, %object
	.size	input_terminal_desc, 12
input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	0
	.space	1
	.short	3
	.space	2
	.type	as_type_i_desc, %object
	.size	as_type_i_desc, 11
as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	audio_source_ac_interface_desc, %object
	.size	audio_source_ac_interface_desc, 9
audio_source_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	as_interface_alt_0_desc, %object
	.size	as_interface_alt_0_desc, 9
as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	as_interface_alt_1_desc, %object
	.size	as_interface_alt_1_desc, 9
as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	fs_as_in_ep_desc, %object
	.size	fs_as_in_ep_desc, 9
fs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	1
	.space	2
	.space	3
	.type	hs_as_in_ep_desc, %object
	.size	hs_as_in_ep_desc, 9
hs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	4
	.space	2
	.space	3
	.type	ecm_qc_control_intf, %object
	.size	ecm_qc_control_intf, 9
ecm_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_union_desc, %object
	.size	ecm_qc_union_desc, 5
ecm_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_qc_data_nop_intf, %object
	.size	ecm_qc_data_nop_intf, 9
ecm_qc_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_data_intf, %object
	.size	ecm_qc_data_intf, 9
ecm_qc_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_fs_in_desc, %object
	.size	ecm_qc_fs_in_desc, 9
ecm_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_out_desc, %object
	.size	ecm_qc_fs_out_desc, 9
ecm_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_notify_desc, %object
	.size	ecm_qc_fs_notify_desc, 9
ecm_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	ecm_qc_fs_function, %object
	.size	ecm_qc_fs_function, 40
ecm_qc_fs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_fs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_fs_in_desc
	.word	ecm_qc_fs_out_desc
	.word	0
	.type	ecm_qc_hs_in_desc, %object
	.size	ecm_qc_hs_in_desc, 9
ecm_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_out_desc, %object
	.size	ecm_qc_hs_out_desc, 9
ecm_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_notify_desc, %object
	.size	ecm_qc_hs_notify_desc, 9
ecm_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_hs_function, %object
	.size	ecm_qc_hs_function, 40
ecm_qc_hs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_hs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_hs_in_desc
	.word	ecm_qc_hs_out_desc
	.word	0
	.type	ecm_qc_ss_in_desc, %object
	.size	ecm_qc_ss_in_desc, 9
ecm_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_out_desc, %object
	.size	ecm_qc_ss_out_desc, 9
ecm_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_notify_desc, %object
	.size	ecm_qc_ss_notify_desc, 9
ecm_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_ss_function, %object
	.size	ecm_qc_ss_function, 52
ecm_qc_ss_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_ss_notify_desc
	.word	ecm_qc_ss_notify_comp_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_ss_in_desc
	.word	ecm_qc_ss_in_comp_desc
	.word	ecm_qc_ss_out_desc
	.word	ecm_qc_ss_out_comp_desc
	.word	0
	.type	mbim_iad_desc, %object
	.size	mbim_iad_desc, 8
mbim_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.type	mbim_control_intf, %object
	.size	mbim_control_intf, 9
mbim_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.space	3
	.type	mbim_union_desc, %object
	.size	mbim_union_desc, 5
mbim_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	mbim_data_nop_intf, %object
	.size	mbim_data_nop_intf, 9
mbim_data_nop_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	mbim_data_intf, %object
	.size	mbim_data_intf, 9
mbim_data_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	fs_mbim_in_desc, %object
	.size	fs_mbim_in_desc, 9
fs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_out_desc, %object
	.size	fs_mbim_out_desc, 9
fs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_notify_desc, %object
	.size	fs_mbim_notify_desc, 9
fs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	32
	.space	2
	.space	3
	.type	mbb_desc, %object
	.size	mbb_desc, 12
mbb_desc:
	.byte	12
	.byte	36
	.byte	27
	.2byte	256
	.2byte	4096
	.byte	32
	.byte	-128
	.2byte	4064
	.byte	32
	.type	mbim_fs_function, %object
	.size	mbim_fs_function, 48
mbim_fs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	fs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	fs_mbim_in_desc
	.word	fs_mbim_out_desc
	.word	0
	.type	hs_mbim_in_desc, %object
	.size	hs_mbim_in_desc, 9
hs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_out_desc, %object
	.size	hs_mbim_out_desc, 9
hs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_notify_desc, %object
	.size	hs_mbim_notify_desc, 9
hs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	mbim_hs_function, %object
	.size	mbim_hs_function, 48
mbim_hs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	hs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	hs_mbim_in_desc
	.word	hs_mbim_out_desc
	.word	0
	.type	ss_mbim_in_desc, %object
	.size	ss_mbim_in_desc, 9
ss_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_out_desc, %object
	.size	ss_mbim_out_desc, 9
ss_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_notify_desc, %object
	.size	ss_mbim_notify_desc, 9
ss_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	mbim_ss_function, %object
	.size	mbim_ss_function, 60
mbim_ss_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	ss_mbim_notify_desc
	.word	ss_mbim_notify_comp_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	ss_mbim_in_desc
	.word	ss_mbim_in_comp_desc
	.word	ss_mbim_out_desc
	.word	ss_mbim_out_comp_desc
	.word	0
	.type	ecm_iad_descriptor, %object
	.size	ecm_iad_descriptor, 8
ecm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	ecm_control_intf, %object
	.size	ecm_control_intf, 9
ecm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_union_desc, %object
	.size	ecm_union_desc, 5
ecm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_data_nop_intf, %object
	.size	ecm_data_nop_intf, 9
ecm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_data_intf, %object
	.size	ecm_data_intf, 9
ecm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_ecm_in_desc, %object
	.size	fs_ecm_in_desc, 9
fs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_out_desc, %object
	.size	fs_ecm_out_desc, 9
fs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_notify_desc, %object
	.size	fs_ecm_notify_desc, 9
fs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ecm_in_desc, %object
	.size	hs_ecm_in_desc, 9
hs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_out_desc, %object
	.size	hs_ecm_out_desc, 9
hs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_notify_desc, %object
	.size	hs_ecm_notify_desc, 9
hs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ss_ecm_in_desc, %object
	.size	ss_ecm_in_desc, 9
ss_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_out_desc, %object
	.size	ss_ecm_out_desc, 9
ss_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_notify_desc, %object
	.size	ss_ecm_notify_desc, 9
ss_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_fs_function, %object
	.size	ecm_fs_function, 44
ecm_fs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	fs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	fs_ecm_in_desc
	.word	fs_ecm_out_desc
	.word	0
	.type	ecm_hs_function, %object
	.size	ecm_hs_function, 44
ecm_hs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	hs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	hs_ecm_in_desc
	.word	hs_ecm_out_desc
	.word	0
	.type	ecm_ss_function, %object
	.size	ecm_ss_function, 52
ecm_ss_function:
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	ss_ecm_notify_desc
	.word	ss_ecm_intr_comp_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	ss_ecm_in_desc
	.word	ss_ecm_bulk_comp_desc
	.word	ss_ecm_out_desc
	.word	ss_ecm_bulk_comp_desc
	.word	0
	.type	speaker_input_terminal_desc, %object
	.size	speaker_input_terminal_desc, 12
speaker_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	3
	.short	257
	.byte	4
	.space	1
	.short	3
	.space	2
	.type	speaker_as_type_i_desc, %object
	.size	speaker_as_type_i_desc, 11
speaker_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	microphone_input_terminal_desc, %object
	.size	microphone_input_terminal_desc, 12
microphone_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	2
	.byte	1
	.short	3
	.space	2
	.type	microphone_as_type_i_desc, %object
	.size	microphone_as_type_i_desc, 11
microphone_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.byte	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	uac1_ac_interface_desc, %object
	.size	uac1_ac_interface_desc, 9
uac1_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	microphone_as_interface_alt_0_desc, %object
	.size	microphone_as_interface_alt_0_desc, 9
microphone_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_interface_alt_1_desc, %object
	.size	microphone_as_interface_alt_1_desc, 9
microphone_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_0_desc, %object
	.size	speaker_as_interface_alt_0_desc, 9
speaker_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_1_desc, %object
	.size	speaker_as_interface_alt_1_desc, 9
speaker_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_ep_in_desc, %object
	.size	microphone_as_ep_in_desc, 9
microphone_as_ep_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	5
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	speaker_as_ep_out_desc, %object
	.size	speaker_as_ep_out_desc, 9
speaker_as_ep_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	9
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	microphone_as_iso_in, %object
	.size	microphone_as_iso_in, 32
microphone_as_iso_in:
	.word	microphone_as_iso_in
	.word	microphone_as_iso_in
	.space	12
	.word	.LC1605
	.byte	1
	.space	3
	.word	microphone_as_iso_in_desc
	.type	speaker_as_iso_out, %object
	.size	speaker_as_iso_out, 32
speaker_as_iso_out:
	.word	speaker_as_iso_out
	.word	speaker_as_iso_out
	.space	12
	.word	.LC1607
	.byte	1
	.space	3
	.word	speaker_as_iso_out_desc
	.type	f_audio_desc, %object
	.size	f_audio_desc, 76
f_audio_desc:
	.word	uac1_ac_interface_desc
	.word	uac1_ac_header_desc
	.word	microphone_input_terminal_desc
	.word	microphone_output_terminal_desc
	.word	speaker_input_terminal_desc
	.word	speaker_output_terminal_desc
	.word	microphone_as_interface_alt_0_desc
	.word	microphone_as_interface_alt_1_desc
	.word	microphone_as_header_desc
	.word	microphone_as_type_i_desc
	.word	microphone_as_ep_in_desc
	.word	microphone_as_iso_in_desc
	.word	speaker_as_interface_alt_0_desc
	.word	speaker_as_interface_alt_1_desc
	.word	speaker_as_header_desc
	.word	speaker_as_type_i_desc
	.word	speaker_as_ep_out_desc
	.word	speaker_as_iso_out_desc
	.word	0
	.type	ncm_iad_desc, %object
	.size	ncm_iad_desc, 8
ncm_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.type	ncm_control_intf, %object
	.size	ncm_control_intf, 9
ncm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.space	3
	.type	ncm_union_desc, %object
	.size	ncm_union_desc, 5
ncm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ncm_data_nop_intf, %object
	.size	ncm_data_nop_intf, 9
ncm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	ncm_data_intf, %object
	.size	ncm_data_intf, 9
ncm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	fs_ncm_in_desc, %object
	.size	fs_ncm_in_desc, 9
fs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_out_desc, %object
	.size	fs_ncm_out_desc, 9
fs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_notify_desc, %object
	.size	fs_ncm_notify_desc, 9
fs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ncm_in_desc, %object
	.size	hs_ncm_in_desc, 9
hs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_out_desc, %object
	.size	hs_ncm_out_desc, 9
hs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_notify_desc, %object
	.size	hs_ncm_notify_desc, 9
hs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ncm_fs_function, %object
	.size	ncm_fs_function, 48
ncm_fs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	fs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	fs_ncm_in_desc
	.word	fs_ncm_out_desc
	.word	0
	.type	ncm_hs_function, %object
	.size	ncm_hs_function, 48
ncm_hs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	hs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	hs_ncm_in_desc
	.word	hs_ncm_out_desc
	.word	0
	.type	fsg_fs_bulk_in_desc, %object
	.size	fsg_fs_bulk_in_desc, 9
fsg_fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fsg_fs_bulk_out_desc, %object
	.size	fsg_fs_bulk_out_desc, 9
fsg_fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fsg_hs_bulk_in_desc, %object
	.size	fsg_hs_bulk_in_desc, 9
fsg_hs_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	fsg_hs_bulk_out_desc, %object
	.size	fsg_hs_bulk_out_desc, 9
fsg_hs_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.byte	1
	.space	2
	.space	3
	.type	fsg_ss_bulk_in_desc, %object
	.size	fsg_ss_bulk_in_desc, 9
fsg_ss_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_in_comp_desc, %object
	.size	fsg_ss_bulk_in_comp_desc, 6
fsg_ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_ss_bulk_out_desc, %object
	.size	fsg_ss_bulk_out_desc, 9
fsg_ss_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_out_comp_desc, %object
	.size	fsg_ss_bulk_out_comp_desc, 6
fsg_ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_fs_function, %object
	.size	fsg_fs_function, 16
fsg_fs_function:
	.word	fsg_intf_desc
	.word	fsg_fs_bulk_in_desc
	.word	fsg_fs_bulk_out_desc
	.word	0
	.type	fsg_hs_function, %object
	.size	fsg_hs_function, 16
fsg_hs_function:
	.word	fsg_intf_desc
	.word	fsg_hs_bulk_in_desc
	.word	fsg_hs_bulk_out_desc
	.word	0
	.type	fsg_ss_function, %object
	.size	fsg_ss_function, 24
fsg_ss_function:
	.word	fsg_intf_desc
	.word	fsg_ss_bulk_in_desc
	.word	fsg_ss_bulk_in_comp_desc
	.word	fsg_ss_bulk_out_desc
	.word	fsg_ss_bulk_out_comp_desc
	.word	0
	.type	ccid_interface_desc, %object
	.size	ccid_interface_desc, 9
ccid_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	11
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ccid_fs_notify_desc, %object
	.size	ccid_fs_notify_desc, 9
ccid_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	32
	.space	2
	.space	3
	.type	ccid_fs_in_desc, %object
	.size	ccid_fs_in_desc, 9
ccid_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_fs_out_desc, %object
	.size	ccid_fs_out_desc, 9
ccid_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_hs_in_desc, %object
	.size	ccid_hs_in_desc, 9
ccid_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_out_desc, %object
	.size	ccid_hs_out_desc, 9
ccid_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_notify_desc, %object
	.size	ccid_hs_notify_desc, 9
ccid_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	9
	.space	2
	.space	3
	.type	qdss_data_intf_desc, %object
	.size	qdss_data_intf_desc, 9
qdss_data_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	1
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_ctrl_intf_desc, %object
	.size	qdss_ctrl_intf_desc, 9
qdss_ctrl_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	2
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_data_ep_comp_desc, %object
	.size	qdss_data_ep_comp_desc, 6
qdss_data_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	1
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_data_desc, %object
	.size	qdss_ss_data_desc, 9
qdss_ss_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_in_ep_comp_desc, %object
	.size	qdss_ctrl_in_ep_comp_desc, 6
qdss_ctrl_in_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_in_desc, %object
	.size	qdss_ss_ctrl_in_desc, 9
qdss_ss_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_out_ep_comp_desc, %object
	.size	qdss_ctrl_out_ep_comp_desc, 6
qdss_ctrl_out_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_out_desc, %object
	.size	qdss_ss_ctrl_out_desc, 9
qdss_ss_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_hs_data_desc, %object
	.size	qdss_hs_data_desc, 9
qdss_hs_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_in_desc, %object
	.size	qdss_hs_ctrl_in_desc, 9
qdss_hs_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_out_desc, %object
	.size	qdss_hs_ctrl_out_desc, 9
qdss_hs_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_desc, %object
	.size	qdss_hs_desc, 24
qdss_hs_desc:
	.word	qdss_data_intf_desc
	.word	qdss_hs_data_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_hs_ctrl_in_desc
	.word	qdss_hs_ctrl_out_desc
	.word	0
	.type	qdss_ss_desc, %object
	.size	qdss_ss_desc, 36
qdss_ss_desc:
	.word	qdss_data_intf_desc
	.word	qdss_ss_data_desc
	.word	qdss_data_ep_comp_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_ss_ctrl_in_desc
	.word	qdss_ctrl_in_ep_comp_desc
	.word	qdss_ss_ctrl_out_desc
	.word	qdss_ctrl_out_ep_comp_desc
	.word	0
	.type	rmnet_mux_interface_desc, %object
	.size	rmnet_mux_interface_desc, 9
rmnet_mux_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_mux_fs_in_desc, %object
	.size	rmnet_mux_fs_in_desc, 9
rmnet_mux_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_out_desc, %object
	.size	rmnet_mux_fs_out_desc, 9
rmnet_mux_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_notify_desc, %object
	.size	rmnet_mux_fs_notify_desc, 9
rmnet_mux_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_mux_hs_in_desc, %object
	.size	rmnet_mux_hs_in_desc, 9
rmnet_mux_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_out_desc, %object
	.size	rmnet_mux_hs_out_desc, 9
rmnet_mux_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_notify_desc, %object
	.size	rmnet_mux_hs_notify_desc, 9
rmnet_mux_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	midi_string_defs, %object
	.size	midi_string_defs, 16
midi_string_defs:
	.space	4
	.word	.LC1732
	.space	8
	.type	midi_ac_interface_desc, %object
	.size	midi_ac_interface_desc, 9
midi_ac_interface_desc:
	.byte	9
	.byte	4
	.space	3
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	midi_ms_interface_desc, %object
	.size	midi_ms_interface_desc, 9
midi_ms_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	1
	.byte	3
	.space	2
	.space	3
	.type	midi_ac_header_desc, %object
	.size	midi_ac_header_desc, 9
midi_ac_header_desc:
	.byte	9
	.byte	36
	.byte	1
	.2byte	256
	.2byte	9
	.byte	1
	.space	1
	.space	3
	.type	midi_bulk_in_desc, %object
	.size	midi_bulk_in_desc, 9
midi_bulk_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	midi_bulk_out_desc, %object
	.size	midi_bulk_out_desc, 9
midi_bulk_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	midi_ms_header_desc, %object
	.size	midi_ms_header_desc, 7
midi_ms_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.2byte	256
	.space	2
	.space	1
	.type	midi_ms_in_desc, %object
	.size	midi_ms_in_desc, 20
midi_ms_in_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	midi_ms_out_desc, %object
	.size	midi_ms_out_desc, 20
midi_ms_out_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	rmnet_interface_desc, %object
	.size	rmnet_interface_desc, 9
rmnet_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-32
	.byte	0
	.space	1
	.space	3
	.type	rmnet_fs_in_desc, %object
	.size	rmnet_fs_in_desc, 9
rmnet_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_out_desc, %object
	.size	rmnet_fs_out_desc, 9
rmnet_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_notify_desc, %object
	.size	rmnet_fs_notify_desc, 9
rmnet_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_fs_function, %object
	.size	rmnet_fs_function, 20
rmnet_fs_function:
	.word	rmnet_interface_desc
	.word	rmnet_fs_notify_desc
	.word	rmnet_fs_in_desc
	.word	rmnet_fs_out_desc
	.word	0
	.type	rmnet_hs_in_desc, %object
	.size	rmnet_hs_in_desc, 9
rmnet_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_out_desc, %object
	.size	rmnet_hs_out_desc, 9
rmnet_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_notify_desc, %object
	.size	rmnet_hs_notify_desc, 9
rmnet_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_hs_function, %object
	.size	rmnet_hs_function, 20
rmnet_hs_function:
	.word	rmnet_interface_desc
	.word	rmnet_hs_notify_desc
	.word	rmnet_hs_in_desc
	.word	rmnet_hs_out_desc
	.word	0
	.type	rmnet_ss_in_desc, %object
	.size	rmnet_ss_in_desc, 9
rmnet_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_out_desc, %object
	.size	rmnet_ss_out_desc, 9
rmnet_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_notify_desc, %object
	.size	rmnet_ss_notify_desc, 9
rmnet_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_ss_function, %object
	.size	rmnet_ss_function, 32
rmnet_ss_function:
	.word	rmnet_interface_desc
	.word	rmnet_ss_notify_desc
	.word	rmnet_ss_notify_comp_desc
	.word	rmnet_ss_in_desc
	.word	rmnet_ss_in_comp_desc
	.word	rmnet_ss_out_desc
	.word	rmnet_ss_out_comp_desc
	.word	0
	.type	rndis_iad_descriptor, %object
	.size	rndis_iad_descriptor, 8
rndis_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_control_intf, %object
	.size	rndis_control_intf, 9
rndis_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_union_desc, %object
	.size	rndis_union_desc, 5
rndis_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_data_intf, %object
	.size	rndis_data_intf, 9
rndis_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_in_desc, %object
	.size	fs_in_desc, 9
fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_out_desc, %object
	.size	fs_out_desc, 9
fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_notify_desc, %object
	.size	fs_notify_desc, 9
fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	hs_in_desc, %object
	.size	hs_in_desc, 9
hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_out_desc, %object
	.size	hs_out_desc, 9
hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_notify_desc, %object
	.size	hs_notify_desc, 9
hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	ss_in_desc, %object
	.size	ss_in_desc, 9
ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_out_desc, %object
	.size	ss_out_desc, 9
ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_notify_desc, %object
	.size	ss_notify_desc, 9
ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_fs_function, %object
	.size	eth_fs_function, 44
eth_fs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	fs_notify_desc
	.word	rndis_data_intf
	.word	fs_in_desc
	.word	fs_out_desc
	.word	0
	.type	eth_hs_function, %object
	.size	eth_hs_function, 44
eth_hs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	hs_notify_desc
	.word	rndis_data_intf
	.word	hs_in_desc
	.word	hs_out_desc
	.word	0
	.type	eth_ss_function, %object
	.size	eth_ss_function, 56
eth_ss_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	ss_notify_desc
	.word	ss_intr_comp_desc
	.word	rndis_data_intf
	.word	ss_in_desc
	.word	ss_bulk_comp_desc
	.word	ss_out_desc
	.word	ss_bulk_comp_desc
	.word	0
	.type	rndis_ul_max_pkt_per_xfer, %object
	.size	rndis_ul_max_pkt_per_xfer, 4
rndis_ul_max_pkt_per_xfer:
	.word	3
	.type	rndis_qc_iad_descriptor, %object
	.size	rndis_qc_iad_descriptor, 8
rndis_qc_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_qc_control_intf, %object
	.size	rndis_qc_control_intf, 9
rndis_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_qc_union_desc, %object
	.size	rndis_qc_union_desc, 5
rndis_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_qc_data_intf, %object
	.size	rndis_qc_data_intf, 9
rndis_qc_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	rndis_qc_fs_in_desc, %object
	.size	rndis_qc_fs_in_desc, 9
rndis_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_out_desc, %object
	.size	rndis_qc_fs_out_desc, 9
rndis_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_notify_desc, %object
	.size	rndis_qc_fs_notify_desc, 9
rndis_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	eth_qc_fs_function, %object
	.size	eth_qc_fs_function, 44
eth_qc_fs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_fs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_fs_in_desc
	.word	rndis_qc_fs_out_desc
	.word	0
	.type	rndis_qc_hs_in_desc, %object
	.size	rndis_qc_hs_in_desc, 9
rndis_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_out_desc, %object
	.size	rndis_qc_hs_out_desc, 9
rndis_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_notify_desc, %object
	.size	rndis_qc_hs_notify_desc, 9
rndis_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_qc_hs_function, %object
	.size	eth_qc_hs_function, 44
eth_qc_hs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_hs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_hs_in_desc
	.word	rndis_qc_hs_out_desc
	.word	0
	.type	rndis_qc_ss_in_desc, %object
	.size	rndis_qc_ss_in_desc, 9
rndis_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_out_desc, %object
	.size	rndis_qc_ss_out_desc, 9
rndis_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_notify_desc, %object
	.size	rndis_qc_ss_notify_desc, 9
rndis_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_qc_ss_function, %object
	.size	eth_qc_ss_function, 56
eth_qc_ss_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_ss_notify_desc
	.word	rndis_qc_ss_intr_comp_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_ss_in_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	rndis_qc_ss_out_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	0
	.type	acc_interface_desc, %object
	.size	acc_interface_desc, 9
acc_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	acc_fullspeed_in_desc, %object
	.size	acc_fullspeed_in_desc, 9
acc_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acc_fullspeed_out_desc, %object
	.size	acc_fullspeed_out_desc, 9
acc_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acc_highspeed_in_desc, %object
	.size	acc_highspeed_in_desc, 9
acc_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_highspeed_out_desc, %object
	.size	acc_highspeed_out_desc, 9
acc_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_superspeed_in_desc, %object
	.size	acc_superspeed_in_desc, 9
acc_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acc_superspeed_out_desc, %object
	.size	acc_superspeed_out_desc, 9
acc_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_interface_desc, %object
	.size	mtp_interface_desc, 9
mtp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	mtp_fullspeed_in_desc, %object
	.size	mtp_fullspeed_in_desc, 9
mtp_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	mtp_fullspeed_out_desc, %object
	.size	mtp_fullspeed_out_desc, 9
mtp_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	mtp_intr_desc, %object
	.size	mtp_intr_desc, 9
mtp_intr_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	28
	.byte	6
	.space	2
	.space	3
	.type	mtp_tx_reqs, %object
	.size	mtp_tx_reqs, 4
mtp_tx_reqs:
	.word	8
	.type	mtp_highspeed_in_desc, %object
	.size	mtp_highspeed_in_desc, 9
mtp_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_highspeed_out_desc, %object
	.size	mtp_highspeed_out_desc, 9
mtp_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_superspeed_in_desc, %object
	.size	mtp_superspeed_in_desc, 9
mtp_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_superspeed_out_desc, %object
	.size	mtp_superspeed_out_desc, 9
mtp_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_interface_desc, %object
	.size	adb_interface_desc, 9
adb_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	66
	.byte	1
	.space	1
	.space	3
	.type	adb_fullspeed_in_desc, %object
	.size	adb_fullspeed_in_desc, 9
adb_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	adb_fullspeed_out_desc, %object
	.size	adb_fullspeed_out_desc, 9
adb_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	adb_highspeed_in_desc, %object
	.size	adb_highspeed_in_desc, 9
adb_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_highspeed_out_desc, %object
	.size	adb_highspeed_out_desc, 9
adb_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_superspeed_in_desc, %object
	.size	adb_superspeed_in_desc, 9
adb_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_superspeed_out_desc, %object
	.size	adb_superspeed_out_desc, 9
adb_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fs_conn_gadget_descs, %object
	.size	fs_conn_gadget_descs, 16
fs_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_fullspeed_in_desc
	.word	conn_gadget_fullspeed_out_desc
	.word	0
	.type	hs_conn_gadget_descs, %object
	.size	hs_conn_gadget_descs, 16
hs_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_highspeed_in_desc
	.word	conn_gadget_highspeed_out_desc
	.word	0
	.type	ss_conn_gadget_descs, %object
	.size	ss_conn_gadget_descs, 24
ss_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_superspeed_in_desc
	.word	conn_gadget_superspeed_bulk_comp_desc
	.word	conn_gadget_superspeed_out_desc
	.word	conn_gadget_superspeed_bulk_comp_desc
	.word	0
	.type	fs_adb_descs, %object
	.size	fs_adb_descs, 16
fs_adb_descs:
	.word	adb_interface_desc
	.word	adb_fullspeed_in_desc
	.word	adb_fullspeed_out_desc
	.word	0
	.type	hs_adb_descs, %object
	.size	hs_adb_descs, 16
hs_adb_descs:
	.word	adb_interface_desc
	.word	adb_highspeed_in_desc
	.word	adb_highspeed_out_desc
	.word	0
	.type	ss_adb_descs, %object
	.size	ss_adb_descs, 24
ss_adb_descs:
	.word	adb_interface_desc
	.word	adb_superspeed_in_desc
	.word	adb_superspeed_in_comp_desc
	.word	adb_superspeed_out_desc
	.word	adb_superspeed_out_comp_desc
	.word	0
	.type	acc_string_defs, %object
	.size	acc_string_defs, 16
acc_string_defs:
	.space	4
	.word	.LC1728
	.space	8
	.type	acc_strings, %object
	.size	acc_strings, 8
acc_strings:
	.word	acc_string_table
	.word	0
	.type	fs_acc_descs, %object
	.size	fs_acc_descs, 16
fs_acc_descs:
	.word	acc_interface_desc
	.word	acc_fullspeed_in_desc
	.word	acc_fullspeed_out_desc
	.word	0
	.type	hs_acc_descs, %object
	.size	hs_acc_descs, 16
hs_acc_descs:
	.word	acc_interface_desc
	.word	acc_highspeed_in_desc
	.word	acc_highspeed_out_desc
	.word	0
	.type	ss_acc_descs, %object
	.size	ss_acc_descs, 24
ss_acc_descs:
	.word	acc_interface_desc
	.word	acc_superspeed_in_desc
	.word	acc_superspeed_in_comp_desc
	.word	acc_superspeed_out_desc
	.word	acc_superspeed_out_comp_desc
	.word	0
	.type	mtp_string_defs, %object
	.size	mtp_string_defs, 16
mtp_string_defs:
	.space	4
	.word	.LC1730
	.space	8
	.type	mtp_strings, %object
	.size	mtp_strings, 8
mtp_strings:
	.word	mtp_string_table
	.word	0
	.type	fs_ptp_descs, %object
	.size	fs_ptp_descs, 20
fs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_ptp_descs, %object
	.size	hs_ptp_descs, 20
hs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_ptp_descs, %object
	.size	ss_ptp_descs, 32
ss_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	fs_mtp_descs, %object
	.size	fs_mtp_descs, 20
fs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_mtp_descs, %object
	.size	hs_mtp_descs, 20
hs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_mtp_descs, %object
	.size	ss_mtp_descs, 32
ss_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	midi_strings, %object
	.size	midi_strings, 8
midi_strings:
	.word	midi_stringtab
	.word	0
	.type	qdss_string_defs, %object
	.size	qdss_string_defs, 24
qdss_string_defs:
	.space	4
	.word	.LC1785
	.space	4
	.word	.LC1786
	.space	8
	.type	qdss_strings, %object
	.size	qdss_strings, 8
qdss_strings:
	.word	qdss_string_table
	.word	0
	.type	acm_string_defs, %object
	.size	acm_string_defs, 32
acm_string_defs:
	.space	4
	.word	.LC1738
	.space	4
	.word	.LC1739
	.space	4
	.word	.LC1740
	.space	8
	.type	acm_control_interface_desc, %object
	.size	acm_control_interface_desc, 9
acm_control_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.space	3
	.type	acm_data_interface_desc, %object
	.size	acm_data_interface_desc, 9
acm_data_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	acm_iad_descriptor, %object
	.size	acm_iad_descriptor, 8
acm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.type	acm_strings, %object
	.size	acm_strings, 8
acm_strings:
	.word	acm_string_table
	.word	0
	.type	_audio_dev, %object
	.size	_audio_dev, 160
_audio_dev:
	.word	.LC1071
	.space	4
	.word	hs_audio_desc
	.space	4
	.word	fs_audio_desc
	.space	12
	.word	audio_bind
	.word	audio_unbind
	.word	audio_set_alt
	.space	4
	.word	audio_disable
	.word	audio_setup
	.space	28
	.space	12
	.word	_audio_dev+96
	.word	_audio_dev+96
	.space	4
	.word	0
	.space	48
	.type	audio_playback_ops, %object
	.size	audio_playback_ops, 56
audio_playback_ops:
	.word	audio_pcm_open
	.word	audio_pcm_close
	.word	snd_pcm_lib_ioctl
	.word	audio_pcm_hw_params
	.word	audio_pcm_hw_free
	.word	audio_pcm_prepare
	.word	audio_pcm_playback_trigger
	.word	audio_pcm_pointer
	.space	12
	.word	audio_pcm_mmap
	.space	8
	.type	rl.53017, %object
	.size	rl.53017, 24
rl.53017:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	adb_function, %object
	.size	adb_function, 52
adb_function:
	.word	.LC1055
	.space	20
	.word	adb_function_init
	.word	adb_function_cleanup
	.word	adb_android_function_enable
	.word	adb_android_function_disable
	.word	adb_function_bind_config
	.space	8
	.type	ffs_function, %object
	.size	ffs_function, 52
ffs_function:
	.word	.LC486
	.space	12
	.word	ffs_function_attributes
	.space	4
	.word	ffs_function_init
	.word	ffs_function_cleanup
	.word	ffs_function_enable
	.word	ffs_function_disable
	.word	ffs_function_bind_config
	.space	8
	.type	supported_functions, %object
	.size	supported_functions, 104
supported_functions:
	.word	ffs_function
	.word	mbim_function
	.word	ecm_qc_function
	.word	audio_function
	.word	rmnet_smd_function
	.word	rmnet_sdio_function
	.word	rmnet_smd_sdio_function
	.word	rmnet_function
	.word	diag_function
	.word	qdss_function
	.word	adb_function
	.word	midi_function
	.word	ccid_function
	.word	acm_function
	.word	mtp_function
	.word	ptp_function
	.word	rndis_function
	.word	rndis_qc_function
	.word	ecm_function
	.word	ncm_function
	.word	mass_storage_function
	.word	accessory_function
	.word	conn_gadget_function
	.word	audio_source_function
	.word	uasp_function
	.word	0
	.type	dev_attr_terminal_version, %object
	.size	dev_attr_terminal_version, 16
dev_attr_terminal_version:
	.word	.LC1574
	.short	420
	.space	2
	.word	terminal_version_show
	.word	terminal_version_store
	.type	modem_device, %object
	.size	modem_device, 36
modem_device:
	.word	123
	.word	.LC1741
	.word	modem_fops
	.space	24
	.type	rl.25976, %object
	.size	rl.25976, 24
rl.25976:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rl.25994, %object
	.size	rl.25994, 24
rl.25994:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rmnet_smd_strings, %object
	.size	rmnet_smd_strings, 8
rmnet_smd_strings:
	.word	rmnet_smd_string_table
	.word	0
	.type	rmnet_smd_fs_function, %object
	.size	rmnet_smd_fs_function, 20
rmnet_smd_fs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_fs_notify_desc
	.word	rmnet_smd_fs_in_desc
	.word	rmnet_smd_fs_out_desc
	.word	0
	.type	rmnet_smd_hs_function, %object
	.size	rmnet_smd_hs_function, 20
rmnet_smd_hs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_hs_notify_desc
	.word	rmnet_smd_hs_in_desc
	.word	rmnet_smd_hs_out_desc
	.word	0
	.type	rmnet_sdio_strings, %object
	.size	rmnet_sdio_strings, 8
rmnet_sdio_strings:
	.word	rmnet_sdio_string_table
	.word	0
	.type	rmnet_sdio_fs_function, %object
	.size	rmnet_sdio_fs_function, 20
rmnet_sdio_fs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_fs_notify_desc
	.word	rmnet_sdio_fs_in_desc
	.word	rmnet_sdio_fs_out_desc
	.word	0
	.type	rmnet_sdio_hs_function, %object
	.size	rmnet_sdio_hs_function, 20
rmnet_sdio_hs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_hs_notify_desc
	.word	rmnet_sdio_hs_in_desc
	.word	rmnet_sdio_hs_out_desc
	.word	0
	.type	sport_info, %object
	.size	sport_info, 24
sport_info:
	.word	.LC1764
	.space	4
	.word	9
	.word	.LC1765
	.space	4
	.word	10
	.type	smd_pi, %object
	.size	smd_pi, 24
smd_pi:
	.space	4
	.word	.LC1758
	.space	4
	.space	4
	.word	.LC1759
	.space	4
	.type	bam_mux_tx_pkt_drop_thld, %object
	.size	bam_mux_tx_pkt_drop_thld, 4
bam_mux_tx_pkt_drop_thld:
	.word	1000
	.type	ghsic_data_serial_tx_q_size, %object
	.size	ghsic_data_serial_tx_q_size, 4
ghsic_data_serial_tx_q_size:
	.word	20
	.type	ghsic_data_serial_rx_q_size, %object
	.size	ghsic_data_serial_rx_q_size, 4
ghsic_data_serial_rx_q_size:
	.word	10
	.type	ghsic_data_rmnet_tx_q_size, %object
	.size	ghsic_data_rmnet_tx_q_size, 4
ghsic_data_rmnet_tx_q_size:
	.word	300
	.type	ghsic_data_rmnet_rx_q_size, %object
	.size	ghsic_data_rmnet_rx_q_size, 4
ghsic_data_rmnet_rx_q_size:
	.word	50
	.type	ghsuart_data_serial_tx_q_size, %object
	.size	ghsuart_data_serial_tx_q_size, 4
ghsuart_data_serial_tx_q_size:
	.word	5
	.type	ghsuart_data_serial_rx_q_size, %object
	.size	ghsuart_data_serial_rx_q_size, 4
ghsuart_data_serial_rx_q_size:
	.word	5
	.type	ghsuart_data_rmnet_tx_q_size, %object
	.size	ghsuart_data_rmnet_tx_q_size, 4
ghsuart_data_rmnet_tx_q_size:
	.word	20
	.type	ghsuart_data_rmnet_rx_q_size, %object
	.size	ghsuart_data_rmnet_rx_q_size, 4
ghsuart_data_rmnet_rx_q_size:
	.word	10
	.type	rmnet_string_defs, %object
	.size	rmnet_string_defs, 16
rmnet_string_defs:
	.space	4
	.word	.LC1774
	.space	8
	.type	rmnet_strings, %object
	.size	rmnet_strings, 8
rmnet_strings:
	.word	rmnet_string_table
	.word	0
	.type	acm_union_desc, %object
	.size	acm_union_desc, 5
acm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	acm_call_mgmt_descriptor, %object
	.size	acm_call_mgmt_descriptor, 5
acm_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.space	1
	.space	3
	.type	acm_fs_in_desc, %object
	.size	acm_fs_in_desc, 9
acm_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_out_desc, %object
	.size	acm_fs_out_desc, 9
acm_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_notify_desc, %object
	.size	acm_fs_notify_desc, 9
acm_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	32
	.space	2
	.space	3
	.type	acm_hs_function, %object
	.size	acm_hs_function, 44
acm_hs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_hs_in_desc
	.word	acm_hs_out_desc
	.word	0
	.type	acm_ss_function, %object
	.size	acm_ss_function, 56
acm_ss_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_data_interface_desc
	.word	acm_ss_in_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_ss_out_desc
	.word	acm_ss_bulk_comp_desc
	.word	0
	.type	acm_hs_in_desc, %object
	.size	acm_hs_in_desc, 9
acm_hs_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_out_desc, %object
	.size	acm_hs_out_desc, 9
acm_hs_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_notify_desc, %object
	.size	acm_hs_notify_desc, 9
acm_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	acm_ss_in_desc, %object
	.size	acm_ss_in_desc, 9
acm_ss_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_ss_out_desc, %object
	.size	acm_ss_out_desc, 9
acm_ss_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_fs_function, %object
	.size	acm_fs_function, 44
acm_fs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_fs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_fs_in_desc
	.word	acm_fs_out_desc
	.word	0
	.type	rndis_dl_max_pkt_per_xfer, %object
	.size	rndis_dl_max_pkt_per_xfer, 4
rndis_dl_max_pkt_per_xfer:
	.word	3
	.type	rndis_string_defs, %object
	.size	rndis_string_defs, 32
rndis_string_defs:
	.space	4
	.word	.LC1645
	.space	4
	.word	.LC1646
	.space	4
	.word	.LC1647
	.space	8
	.type	rndis_strings, %object
	.size	rndis_strings, 8
rndis_strings:
	.word	rndis_string_table
	.word	0
	.type	ecm_qc_desc, %object
	.size	ecm_qc_desc, 13
ecm_qc_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_qc_strings, %object
	.size	ecm_qc_strings, 8
ecm_qc_strings:
	.word	ecm_qc_string_table
	.word	0
	.type	mbim_string_defs, %object
	.size	mbim_string_defs, 24
mbim_string_defs:
	.space	4
	.word	.LC1703
	.space	4
	.word	.LC1704
	.space	8
	.type	mbim_strings, %object
	.size	mbim_strings, 8
mbim_strings:
	.word	mbim_string_table
	.word	0
	.type	ecm_desc, %object
	.size	ecm_desc, 13
ecm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_strings, %object
	.size	ecm_strings, 8
ecm_strings:
	.word	ecm_string_table
	.word	0
	.type	rndis_qc_string_defs, %object
	.size	rndis_qc_string_defs, 32
rndis_qc_string_defs:
	.space	4
	.word	.LC1645
	.space	4
	.word	.LC1646
	.space	4
	.word	.LC1647
	.space	8
	.type	rndis_qc_strings, %object
	.size	rndis_qc_strings, 8
rndis_qc_strings:
	.word	rndis_qc_string_table
	.word	0
	.type	gadget_type, %object
	.size	gadget_type, 24
gadget_type:
	.word	.LC1633
	.space	20
	.type	qc_gadget_type, %object
	.size	qc_gadget_type, 24
qc_gadget_type:
	.word	.LC1633
	.space	20
	.type	fn_cntl, %object
	.size	fn_cntl, 4
fn_cntl:
	.word	.LC1627
	.type	fn_play, %object
	.size	fn_play, 4
fn_play:
	.word	.LC1629
	.type	fn_cap, %object
	.size	fn_cap, 4
fn_cap:
	.word	.LC1628
	.type	microphone_fu_controls, %object
	.size	microphone_fu_controls, 32
microphone_fu_controls:
	.word	microphone_fu_controls
	.word	microphone_fu_controls
	.space	12
	.word	.LC1609
	.space	8
	.type	speaker_fu_controls, %object
	.size	speaker_fu_controls, 32
speaker_fu_controls:
	.word	speaker_fu_controls
	.word	speaker_fu_controls
	.space	12
	.word	.LC1612
	.space	8
	.type	microphone_mute_control, %object
	.size	microphone_mute_control, 44
microphone_mute_control:
	.word	microphone_mute_control
	.word	microphone_mute_control
	.word	.LC1611
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_volume_control, %object
	.size	microphone_volume_control, 44
microphone_volume_control:
	.word	microphone_volume_control
	.word	microphone_volume_control
	.word	.LC1610
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_mute_control, %object
	.size	speaker_mute_control, 44
speaker_mute_control:
	.word	speaker_mute_control
	.word	speaker_mute_control
	.word	.LC1614
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_volume_control, %object
	.size	speaker_volume_control, 44
speaker_volume_control:
	.word	speaker_volume_control
	.word	speaker_volume_control
	.word	.LC1613
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_sample_freq_control, %object
	.size	microphone_sample_freq_control, 44
microphone_sample_freq_control:
	.word	microphone_sample_freq_control
	.word	microphone_sample_freq_control
	.word	.LC1606
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_sample_freq_control, %object
	.size	speaker_sample_freq_control, 44
speaker_sample_freq_control:
	.word	speaker_sample_freq_control
	.word	speaker_sample_freq_control
	.word	.LC1608
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	audio_strings, %object
	.size	audio_strings, 8
audio_strings:
	.word	audio_stringtab_dev
	.word	0
	.type	conn_gadget_interface_desc, %object
	.size	conn_gadget_interface_desc, 9
conn_gadget_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	64
	.byte	1
	.space	1
	.space	3
	.type	conn_gadget_fullspeed_in_desc, %object
	.size	conn_gadget_fullspeed_in_desc, 9
conn_gadget_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	conn_gadget_fullspeed_out_desc, %object
	.size	conn_gadget_fullspeed_out_desc, 9
conn_gadget_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	conn_gadget_highspeed_in_desc, %object
	.size	conn_gadget_highspeed_in_desc, 9
conn_gadget_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	conn_gadget_highspeed_out_desc, %object
	.size	conn_gadget_highspeed_out_desc, 9
conn_gadget_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	conn_gadget_superspeed_in_desc, %object
	.size	conn_gadget_superspeed_in_desc, 9
conn_gadget_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	conn_gadget_superspeed_out_desc, %object
	.size	conn_gadget_superspeed_out_desc, 9
conn_gadget_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	necm_desc, %object
	.size	necm_desc, 13
necm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	9014
	.short	0
	.byte	0
	.space	3
	.type	ncm_strings, %object
	.size	ncm_strings, 8
ncm_strings:
	.word	ncm_string_table
	.word	0
	.type	rl.64617, %object
	.size	rl.64617, 24
rl.64617:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rl.53010, %object
	.size	rl.53010, 24
rl.53010:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	usb_android_dt_match, %object
	.size	usb_android_dt_match, 392
usb_android_dt_match:
	.space	64
	.ascii	"qcom,android-usb\000"
	.space	111
	.space	4
	.space	196
	.type	dev_attr_remote_wakeup, %object
	.size	dev_attr_remote_wakeup, 16
dev_attr_remote_wakeup:
	.word	.LC1522
	.short	420
	.space	2
	.word	remote_wakeup_show
	.word	remote_wakeup_store
	.type	dev_attr_state, %object
	.size	dev_attr_state, 16
dev_attr_state:
	.word	.LC1523
	.short	292
	.space	2
	.word	state_show
	.word	0
	.type	dev_attr_pm_qos, %object
	.size	dev_attr_pm_qos, 16
dev_attr_pm_qos:
	.word	.LC1524
	.short	420
	.space	2
	.word	pm_qos_show
	.word	pm_qos_store
	.type	dev_attr_enable, %object
	.size	dev_attr_enable, 16
dev_attr_enable:
	.word	.LC1525
	.short	420
	.space	2
	.word	enable_show
	.word	enable_store
	.type	dev_attr_functions, %object
	.size	dev_attr_functions, 16
dev_attr_functions:
	.word	.LC1526
	.short	420
	.space	2
	.word	functions_show
	.word	functions_store
	.type	dev_attr_macos, %object
	.size	dev_attr_macos, 16
dev_attr_macos:
	.word	.LC1527
	.short	420
	.space	2
	.word	macos_show
	.word	0
	.type	dev_attr_ss_host_available, %object
	.size	dev_attr_ss_host_available, 16
dev_attr_ss_host_available:
	.word	.LC1528
	.short	420
	.space	2
	.word	ss_host_available_show
	.word	0
	.type	dev_attr_usb30en, %object
	.size	dev_attr_usb30en, 16
dev_attr_usb30en:
	.word	.LC1529
	.short	420
	.space	2
	.word	usb30en_show
	.word	usb30en_store
	.type	dev_attr_bcdUSB, %object
	.size	dev_attr_bcdUSB, 16
dev_attr_bcdUSB:
	.word	.LC1530
	.short	420
	.space	2
	.word	bcdUSB_show
	.word	0
	.type	dev_attr_iSerial, %object
	.size	dev_attr_iSerial, 16
dev_attr_iSerial:
	.word	.LC1531
	.short	420
	.space	2
	.word	iSerial_show
	.word	iSerial_store
	.type	dev_attr_iProduct, %object
	.size	dev_attr_iProduct, 16
dev_attr_iProduct:
	.word	.LC1532
	.short	420
	.space	2
	.word	iProduct_show
	.word	iProduct_store
	.type	dev_attr_iManufacturer, %object
	.size	dev_attr_iManufacturer, 16
dev_attr_iManufacturer:
	.word	.LC1533
	.short	420
	.space	2
	.word	iManufacturer_show
	.word	iManufacturer_store
	.type	dev_attr_bDeviceProtocol, %object
	.size	dev_attr_bDeviceProtocol, 16
dev_attr_bDeviceProtocol:
	.word	.LC1534
	.short	420
	.space	2
	.word	bDeviceProtocol_show
	.word	bDeviceProtocol_store
	.type	dev_attr_bDeviceSubClass, %object
	.size	dev_attr_bDeviceSubClass, 16
dev_attr_bDeviceSubClass:
	.word	.LC1535
	.short	420
	.space	2
	.word	bDeviceSubClass_show
	.word	bDeviceSubClass_store
	.type	dev_attr_bDeviceClass, %object
	.size	dev_attr_bDeviceClass, 16
dev_attr_bDeviceClass:
	.word	.LC1536
	.short	420
	.space	2
	.word	bDeviceClass_show
	.word	bDeviceClass_store
	.type	dev_attr_bcdDevice, %object
	.size	dev_attr_bcdDevice, 16
dev_attr_bcdDevice:
	.word	.LC1537
	.short	420
	.space	2
	.word	bcdDevice_show
	.word	bcdDevice_store
	.type	dev_attr_idProduct, %object
	.size	dev_attr_idProduct, 16
dev_attr_idProduct:
	.word	.LC1538
	.short	420
	.space	2
	.word	idProduct_show
	.word	idProduct_store
	.type	dev_attr_idVendor, %object
	.size	dev_attr_idVendor, 16
dev_attr_idVendor:
	.word	.LC1539
	.short	420
	.space	2
	.word	idVendor_show
	.word	idVendor_store
	.type	uasp_function, %object
	.size	uasp_function, 52
uasp_function:
	.word	.LC1543
	.space	20
	.word	uasp_function_init
	.word	uasp_function_cleanup
	.space	8
	.word	uasp_function_bind_config
	.space	8
	.type	audio_source_function, %object
	.size	audio_source_function, 52
audio_source_function:
	.word	.LC1071
	.space	12
	.word	audio_source_function_attributes
	.space	4
	.word	audio_source_function_init
	.word	audio_source_function_cleanup
	.space	8
	.word	audio_source_function_bind_config
	.word	audio_source_function_unbind_config
	.space	4
	.type	audio_source_function_attributes, %object
	.size	audio_source_function_attributes, 8
audio_source_function_attributes:
	.word	dev_attr_pcm
	.word	0
	.type	dev_attr_pcm, %object
	.size	dev_attr_pcm, 16
dev_attr_pcm:
	.word	.LC1545
	.short	420
	.space	2
	.word	audio_source_pcm_show
	.word	0
	.type	accessory_function, %object
	.size	accessory_function, 52
accessory_function:
	.word	.LC1057
	.space	20
	.word	accessory_function_init
	.word	accessory_function_cleanup
	.space	8
	.word	accessory_function_bind_config
	.space	4
	.word	accessory_function_ctrlrequest
	.type	mass_storage_function, %object
	.size	mass_storage_function, 52
mass_storage_function:
	.word	.LC1546
	.space	12
	.word	mass_storage_function_attributes
	.space	4
	.word	mass_storage_function_init
	.word	mass_storage_function_cleanup
	.space	8
	.word	mass_storage_function_bind_config
	.space	8
	.type	mass_storage_function_attributes, %object
	.size	mass_storage_function_attributes, 20
mass_storage_function_attributes:
	.word	dev_attr_inquiry_string
	.word	dev_attr_vendor_string
	.word	dev_attr_product_string
	.word	dev_attr_sua_version_info
	.word	0
	.type	dev_attr_sua_version_info, %object
	.size	dev_attr_sua_version_info, 16
dev_attr_sua_version_info:
	.word	.LC1547
	.short	420
	.space	2
	.word	sua_version_info_show
	.word	sua_version_info_store
	.type	dev_attr_product_string, %object
	.size	dev_attr_product_string, 16
dev_attr_product_string:
	.word	.LC1548
	.short	420
	.space	2
	.word	mass_storage_product_show
	.word	mass_storage_product_store
	.type	dev_attr_vendor_string, %object
	.size	dev_attr_vendor_string, 16
dev_attr_vendor_string:
	.word	.LC1549
	.short	420
	.space	2
	.word	mass_storage_vendor_show
	.word	mass_storage_vendor_store
	.type	dev_attr_inquiry_string, %object
	.size	dev_attr_inquiry_string, 16
dev_attr_inquiry_string:
	.word	.LC1550
	.short	420
	.space	2
	.word	mass_storage_inquiry_show
	.word	mass_storage_inquiry_store
	.type	ecm_function, %object
	.size	ecm_function, 52
ecm_function:
	.word	.LC1405
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_function_bind_config
	.word	ecm_function_unbind_config
	.space	4
	.type	rndis_qc_function, %object
	.size	rndis_qc_function, 52
rndis_qc_function:
	.word	.LC1551
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_qc_function_init
	.word	rndis_qc_function_cleanup
	.space	8
	.word	rndis_qc_function_bind_config
	.word	rndis_qc_function_unbind_config
	.space	4
	.type	rndis_function, %object
	.size	rndis_function, 52
rndis_function:
	.word	.LC1342
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_function_init
	.word	rndis_function_cleanup
	.space	8
	.word	rndis_function_bind_config
	.word	rndis_function_unbind_config
	.space	4
	.type	rndis_function_attributes, %object
	.size	rndis_function_attributes, 24
rndis_function_attributes:
	.word	dev_attr_manufacturer
	.word	dev_attr_wceis
	.word	dev_attr_ethaddr
	.word	dev_attr_vendorID
	.word	dev_attr_max_pkt_per_xfer
	.word	0
	.type	dev_attr_max_pkt_per_xfer, %object
	.size	dev_attr_max_pkt_per_xfer, 16
dev_attr_max_pkt_per_xfer:
	.word	.LC1552
	.short	420
	.space	2
	.word	rndis_max_pkt_per_xfer_show
	.word	rndis_max_pkt_per_xfer_store
	.type	dev_attr_vendorID, %object
	.size	dev_attr_vendorID, 16
dev_attr_vendorID:
	.word	.LC1553
	.short	420
	.space	2
	.word	rndis_vendorID_show
	.word	rndis_vendorID_store
	.type	dev_attr_ethaddr, %object
	.size	dev_attr_ethaddr, 16
dev_attr_ethaddr:
	.word	.LC1554
	.short	420
	.space	2
	.word	rndis_ethaddr_show
	.word	rndis_ethaddr_store
	.type	dev_attr_wceis, %object
	.size	dev_attr_wceis, 16
dev_attr_wceis:
	.word	.LC1555
	.short	420
	.space	2
	.word	rndis_wceis_show
	.word	rndis_wceis_store
	.type	dev_attr_manufacturer, %object
	.size	dev_attr_manufacturer, 16
dev_attr_manufacturer:
	.word	.LC1556
	.short	420
	.space	2
	.word	rndis_manufacturer_show
	.word	rndis_manufacturer_store
	.type	ptp_function, %object
	.size	ptp_function, 52
ptp_function:
	.word	.LC1557
	.space	20
	.word	ptp_function_init
	.word	ptp_function_cleanup
	.space	8
	.word	ptp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	mtp_function, %object
	.size	mtp_function, 52
mtp_function:
	.word	.LC1059
	.space	20
	.word	mtp_function_init
	.word	mtp_function_cleanup
	.space	8
	.word	mtp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	ccid_function, %object
	.size	ccid_function, 52
ccid_function:
	.word	.LC936
	.space	20
	.word	ccid_function_init
	.word	ccid_function_cleanup
	.space	8
	.word	ccid_function_bind_config
	.space	8
	.type	qdss_function, %object
	.size	qdss_function, 52
qdss_function:
	.word	.LC1062
	.space	20
	.word	qdss_function_init
	.word	qdss_function_cleanup
	.space	8
	.word	qdss_function_bind_config
	.space	8
	.type	diag_function, %object
	.size	diag_function, 52
diag_function:
	.word	.LC1558
	.space	12
	.word	diag_function_attributes
	.space	4
	.word	diag_function_init
	.word	diag_function_cleanup
	.space	8
	.word	diag_function_bind_config
	.space	8
	.type	diag_function_attributes, %object
	.size	diag_function_attributes, 8
diag_function_attributes:
	.word	dev_attr_clients
	.word	0
	.type	dev_attr_clients, %object
	.size	dev_attr_clients, 16
dev_attr_clients:
	.word	.LC1559
	.short	128
	.space	2
	.word	0
	.word	clients_store
	.type	audio_function, %object
	.size	audio_function, 52
audio_function:
	.word	.LC1439
	.space	36
	.word	audio_function_bind_config
	.space	8
	.type	mbim_function, %object
	.size	mbim_function, 52
mbim_function:
	.word	.LC1388
	.space	12
	.word	mbim_function_attributes
	.space	4
	.word	mbim_function_init
	.word	mbim_function_cleanup
	.space	8
	.word	mbim_function_bind_config
	.space	4
	.word	mbim_function_ctrlrequest
	.type	mbim_function_attributes, %object
	.size	mbim_function_attributes, 8
mbim_function_attributes:
	.word	dev_attr_mbim_transports
	.word	0
	.type	dev_attr_mbim_transports, %object
	.size	dev_attr_mbim_transports, 16
dev_attr_mbim_transports:
	.word	.LC1560
	.short	420
	.space	2
	.word	mbim_transports_show
	.word	mbim_transports_store
	.type	ecm_qc_function, %object
	.size	ecm_qc_function, 52
ecm_qc_function:
	.word	.LC1562
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_qc_function_bind_config
	.word	ecm_qc_function_unbind_config
	.space	4
	.type	ecm_function_attributes, %object
	.size	ecm_function_attributes, 12
ecm_function_attributes:
	.word	dev_attr_ecm_transports
	.word	dev_attr_ecm_ethaddr
	.word	0
	.type	dev_attr_ecm_transports, %object
	.size	dev_attr_ecm_transports, 16
dev_attr_ecm_transports:
	.word	.LC1563
	.short	420
	.space	2
	.word	ecm_transports_show
	.word	ecm_transports_store
	.type	dev_attr_ecm_ethaddr, %object
	.size	dev_attr_ecm_ethaddr, 16
dev_attr_ecm_ethaddr:
	.word	.LC1564
	.short	420
	.space	2
	.word	ecm_ethaddr_show
	.word	ecm_ethaddr_store
	.type	rmnet_function, %object
	.size	rmnet_function, 52
rmnet_function:
	.word	.LC1197
	.space	12
	.word	rmnet_function_attributes
	.space	8
	.word	rmnet_function_cleanup
	.space	8
	.word	rmnet_function_bind_config
	.space	8
	.type	rmnet_function_attributes, %object
	.size	rmnet_function_attributes, 12
rmnet_function_attributes:
	.word	dev_attr_rmnet_transports
	.word	dev_attr_rmnet_xport_names
	.word	0
	.type	dev_attr_rmnet_xport_names, %object
	.size	dev_attr_rmnet_xport_names, 16
dev_attr_rmnet_xport_names:
	.word	.LC1566
	.short	420
	.space	2
	.word	rmnet_xport_names_show
	.word	rmnet_xport_names_store
	.type	dev_attr_rmnet_transports, %object
	.size	dev_attr_rmnet_transports, 16
dev_attr_rmnet_transports:
	.word	.LC1567
	.short	420
	.space	2
	.word	rmnet_transports_show
	.word	rmnet_transports_store
	.type	rmnet_smd_sdio_function, %object
	.size	rmnet_smd_sdio_function, 52
rmnet_smd_sdio_function:
	.word	.LC940
	.space	12
	.word	rmnet_smd_sdio_attributes
	.space	4
	.word	rmnet_smd_sdio_function_init
	.word	rmnet_smd_sdio_function_cleanup
	.space	8
	.word	rmnet_smd_sdio_bind_config
	.space	8
	.type	rmnet_smd_sdio_attributes, %object
	.size	rmnet_smd_sdio_attributes, 8
rmnet_smd_sdio_attributes:
	.word	dev_attr_transport
	.word	0
	.type	rmnet_sdio_function, %object
	.size	rmnet_sdio_function, 52
rmnet_sdio_function:
	.word	.LC1199
	.space	36
	.word	rmnet_sdio_function_bind_config
	.space	8
	.type	rmnet_smd_function, %object
	.size	rmnet_smd_function, 52
rmnet_smd_function:
	.word	.LC1568
	.space	36
	.word	rmnet_smd_function_bind_config
	.space	8
	.type	acm_function, %object
	.size	acm_function, 52
acm_function:
	.word	.LC1486
	.space	12
	.word	acm_function_attributes
	.space	4
	.word	acm_function_init
	.word	acm_function_cleanup
	.space	8
	.word	acm_function_bind_config
	.space	8
	.type	acm_function_attributes, %object
	.size	acm_function_attributes, 8
acm_function_attributes:
	.word	dev_attr_instances
	.word	0
	.type	dev_attr_instances, %object
	.size	dev_attr_instances, 16
dev_attr_instances:
	.word	.LC1569
	.short	420
	.space	2
	.word	acm_instances_show
	.word	acm_instances_store
	.type	midi_function, %object
	.size	midi_function, 52
midi_function:
	.word	.LC1570
	.space	12
	.word	midi_function_attributes
	.space	4
	.word	midi_function_init
	.word	midi_function_cleanup
	.space	8
	.word	midi_function_bind_config
	.space	8
	.type	midi_function_attributes, %object
	.size	midi_function_attributes, 8
midi_function_attributes:
	.word	dev_attr_alsa
	.word	0
	.type	dev_attr_alsa, %object
	.size	dev_attr_alsa, 16
dev_attr_alsa:
	.word	.LC1571
	.short	292
	.space	2
	.word	midi_alsa_show
	.word	0
	.type	ffs_function_attributes, %object
	.size	ffs_function_attributes, 8
ffs_function_attributes:
	.word	dev_attr_aliases
	.word	0
	.type	dev_attr_aliases, %object
	.size	dev_attr_aliases, 16
dev_attr_aliases:
	.word	.LC1573
	.short	420
	.space	2
	.word	ffs_aliases_show
	.word	ffs_aliases_store
	.type	dev_strings, %object
	.size	dev_strings, 8
dev_strings:
	.word	stringtab_dev
	.word	0
	.type	stringtab_dev, %object
	.size	stringtab_dev, 8
stringtab_dev:
	.short	1033
	.space	2
	.word	strings_dev
	.type	ncm_function, %object
	.size	ncm_function, 52
ncm_function:
	.word	.LC765
	.space	20
	.word	ncm_function_init
	.word	ncm_function_cleanup
	.space	8
	.word	ncm_function_bind_config
	.word	ncm_function_unbind_config
	.space	4
	.type	ncm_string_table, %object
	.size	ncm_string_table, 8
ncm_string_table:
	.short	1033
	.space	2
	.word	ncm_string_defs
	.type	ncm_desc, %object
	.size	ncm_desc, 6
ncm_desc:
	.byte	6
	.byte	36
	.byte	26
	.2byte	256
	.byte	9
	.space	2
	.type	ncm_header_desc, %object
	.size	ncm_header_desc, 5
ncm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	conn_gadget_function, %object
	.size	conn_gadget_function, 52
conn_gadget_function:
	.word	.LC1053
	.space	12
	.word	conn_gadget_function_attributes
	.space	4
	.word	conn_gadget_function_init
	.word	conn_gadget_function_cleanup
	.space	8
	.word	conn_gadget_function_bind_config
	.space	8
	.type	conn_gadget_function_attributes, %object
	.size	conn_gadget_function_attributes, 16
conn_gadget_function_attributes:
	.word	dev_attr_usb_buffer_size
	.word	dev_attr_out_max_packet_size
	.word	dev_attr_in_max_packet_size
	.word	0
	.type	dev_attr_in_max_packet_size, %object
	.size	dev_attr_in_max_packet_size, 16
dev_attr_in_max_packet_size:
	.word	.LC1579
	.short	420
	.space	2
	.word	conn_gadget_in_max_packet_size_show
	.word	conn_gadget_in_max_packet_size_store
	.type	dev_attr_out_max_packet_size, %object
	.size	dev_attr_out_max_packet_size, 16
dev_attr_out_max_packet_size:
	.word	.LC1580
	.short	420
	.space	2
	.word	conn_gadget_out_max_packet_size_show
	.word	conn_gadget_out_max_packet_size_store
	.type	dev_attr_usb_buffer_size, %object
	.size	dev_attr_usb_buffer_size, 16
dev_attr_usb_buffer_size:
	.word	.LC1581
	.short	420
	.space	2
	.word	conn_gadget_usb_buffer_size_show
	.word	conn_gadget_usb_buffer_size_store
	.type	conn_gadget_superspeed_bulk_comp_desc, %object
	.size	conn_gadget_superspeed_bulk_comp_desc, 6
conn_gadget_superspeed_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	___modver_attr, %object
	.size	___modver_attr, 36
___modver_attr:
	.word	.LC1587
	.short	292
	.space	2
	.word	__modver_version_show
	.space	16
	.word	.LC1013
	.word	.LC1588
	.type	audio_stringtab_dev, %object
	.size	audio_stringtab_dev, 8
audio_stringtab_dev:
	.short	1033
	.space	2
	.word	audio_string_defs
	.type	microphone_as_iso_in_desc, %object
	.size	microphone_as_iso_in_desc, 7
microphone_as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_as_header_desc, %object
	.size	microphone_as_header_desc, 7
microphone_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	2
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_iso_out_desc, %object
	.size	speaker_as_iso_out_desc, 7
speaker_as_iso_out_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_header_desc, %object
	.size	speaker_as_header_desc, 7
speaker_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	3
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_output_terminal_desc, %object
	.size	microphone_output_terminal_desc, 9
microphone_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	2
	.short	257
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	speaker_output_terminal_desc, %object
	.size	speaker_output_terminal_desc, 9
speaker_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	4
	.short	769
	.byte	3
	.byte	3
	.space	1
	.space	3
	.type	req_capture_count, %object
	.size	req_capture_count, 4
req_capture_count:
	.word	48
	.type	rndis_qc_string_table, %object
	.size	rndis_qc_string_table, 8
rndis_qc_string_table:
	.short	1033
	.space	2
	.word	rndis_qc_string_defs
	.type	rndis_qc_ss_bulk_comp_desc, %object
	.size	rndis_qc_ss_bulk_comp_desc, 6
rndis_qc_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rndis_qc_ss_intr_comp_desc, %object
	.size	rndis_qc_ss_intr_comp_desc, 6
rndis_qc_ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_qc_acm_descriptor, %object
	.size	rndis_qc_acm_descriptor, 4
rndis_qc_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	rndis_qc_call_mgmt_descriptor, %object
	.size	rndis_qc_call_mgmt_descriptor, 5
rndis_qc_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	rndis_qc_header_desc, %object
	.size	rndis_qc_header_desc, 5
rndis_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_string_table, %object
	.size	ecm_string_table, 8
ecm_string_table:
	.short	1033
	.space	2
	.word	ecm_string_defs
	.type	ss_ecm_bulk_comp_desc, %object
	.size	ss_ecm_bulk_comp_desc, 6
ss_ecm_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_ecm_intr_comp_desc, %object
	.size	ss_ecm_intr_comp_desc, 6
ss_ecm_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_header_desc, %object
	.size	ecm_header_desc, 5
ecm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	mbim_string_table, %object
	.size	mbim_string_table, 8
mbim_string_table:
	.short	1033
	.space	2
	.word	mbim_string_defs
	.type	ss_mbim_out_comp_desc, %object
	.size	ss_mbim_out_comp_desc, 6
ss_mbim_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_in_comp_desc, %object
	.size	ss_mbim_in_comp_desc, 6
ss_mbim_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_notify_comp_desc, %object
	.size	ss_mbim_notify_comp_desc, 6
ss_mbim_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	64
	.space	2
	.type	ext_mbb_desc, %object
	.size	ext_mbb_desc, 8
ext_mbb_desc:
	.byte	8
	.byte	36
	.byte	28
	.2byte	256
	.byte	64
	.short	1500
	.type	mbim_header_desc, %object
	.size	mbim_header_desc, 5
mbim_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_qc_string_table, %object
	.size	ecm_qc_string_table, 8
ecm_qc_string_table:
	.short	1033
	.space	2
	.word	ecm_qc_string_defs
	.type	ecm_qc_ss_out_comp_desc, %object
	.size	ecm_qc_ss_out_comp_desc, 6
ecm_qc_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_in_comp_desc, %object
	.size	ecm_qc_ss_in_comp_desc, 6
ecm_qc_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_notify_comp_desc, %object
	.size	ecm_qc_ss_notify_comp_desc, 6
ecm_qc_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_qc_header_desc, %object
	.size	ecm_qc_header_desc, 5
ecm_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	rndis_string_table, %object
	.size	rndis_string_table, 8
rndis_string_table:
	.short	1033
	.space	2
	.word	rndis_string_defs
	.type	ss_bulk_comp_desc, %object
	.size	ss_bulk_comp_desc, 6
ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_intr_comp_desc, %object
	.size	ss_intr_comp_desc, 6
ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_acm_descriptor, %object
	.size	rndis_acm_descriptor, 4
rndis_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	call_mgmt_descriptor, %object
	.size	call_mgmt_descriptor, 5
call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	header_desc, %object
	.size	header_desc, 5
header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	acc_string_table, %object
	.size	acc_string_table, 8
acc_string_table:
	.short	1033
	.space	2
	.word	acc_string_defs
	.type	acc_superspeed_out_comp_desc, %object
	.size	acc_superspeed_out_comp_desc, 6
acc_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acc_superspeed_in_comp_desc, %object
	.size	acc_superspeed_in_comp_desc, 6
acc_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	mtp_string_table, %object
	.size	mtp_string_table, 8
mtp_string_table:
	.short	1033
	.space	2
	.word	mtp_string_defs
	.type	mtp_superspeed_intr_comp_desc, %object
	.size	mtp_superspeed_intr_comp_desc, 6
mtp_superspeed_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	28
	.space	2
	.type	mtp_superspeed_out_comp_desc, %object
	.size	mtp_superspeed_out_comp_desc, 6
mtp_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	mtp_superspeed_in_comp_desc, %object
	.size	mtp_superspeed_in_comp_desc, 6
mtp_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	ptp_interface_desc, %object
	.size	ptp_interface_desc, 9
ptp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	6
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	midi_stringtab, %object
	.size	midi_stringtab, 8
midi_stringtab:
	.short	1033
	.space	2
	.word	midi_string_defs
	.type	adb_superspeed_out_comp_desc, %object
	.size	adb_superspeed_out_comp_desc, 6
adb_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	adb_superspeed_in_comp_desc, %object
	.size	adb_superspeed_in_comp_desc, 6
adb_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_string_table, %object
	.size	acm_string_table, 8
acm_string_table:
	.short	1033
	.space	2
	.word	acm_string_defs
	.type	acm_ss_bulk_comp_desc, %object
	.size	acm_ss_bulk_comp_desc, 6
acm_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_descriptor, %object
	.size	acm_descriptor, 4
acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	2
	.type	acm_header_desc, %object
	.size	acm_header_desc, 5
acm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	fsg_stringtab, %object
	.size	fsg_stringtab, 8
fsg_stringtab:
	.short	1033
	.space	2
	.word	fsg_strings
	.type	fs_audio_desc, %object
	.size	fs_audio_desc, 48
fs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	fs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	hs_audio_desc, %object
	.size	hs_audio_desc, 48
hs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	hs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	as_iso_in_desc, %object
	.size	as_iso_in_desc, 7
as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	as_header_desc, %object
	.size	as_header_desc, 7
as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	output_terminal_desc, %object
	.size	output_terminal_desc, 9
output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	3
	.short	257
	.byte	2
	.byte	2
	.space	1
	.space	3
	.type	feature_unit_desc, %object
	.size	feature_unit_desc, 9
feature_unit_desc:
	.byte	9
	.byte	36
	.byte	6
	.byte	2
	.byte	1
	.byte	2
	.space	3
	.space	3
	.type	audio_source_ac_header_desc, %object
	.size	audio_source_ac_header_desc, 10
audio_source_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	40
	.byte	2
	.ascii	"\000\001"
	.space	2
	.type	rmnet_string_table, %object
	.size	rmnet_string_table, 8
rmnet_string_table:
	.short	1033
	.space	2
	.word	rmnet_string_defs
	.type	rmnet_ss_out_comp_desc, %object
	.size	rmnet_ss_out_comp_desc, 6
rmnet_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_in_comp_desc, %object
	.size	rmnet_ss_in_comp_desc, 6
rmnet_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_notify_comp_desc, %object
	.size	rmnet_ss_notify_comp_desc, 6
rmnet_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	dev_attr_transport, %object
	.size	dev_attr_transport, 16
dev_attr_transport:
	.word	.LC1777
	.short	420
	.space	2
	.word	0
	.word	transport_store
	.type	rmnet_mux_string_table, %object
	.size	rmnet_mux_string_table, 8
rmnet_mux_string_table:
	.short	1033
	.space	2
	.word	rmnet_mux_string_defs
	.type	rmnet_mux_string_defs, %object
	.size	rmnet_mux_string_defs, 16
rmnet_mux_string_defs:
	.space	4
	.word	.LC1774
	.space	8
	.type	mux_sdio_rx_fctrl_dis_thld, %object
	.size	mux_sdio_rx_fctrl_dis_thld, 4
mux_sdio_rx_fctrl_dis_thld:
	.word	500
	.type	mux_sdio_tx_pkt_drop_thld, %object
	.size	mux_sdio_tx_pkt_drop_thld, 4
mux_sdio_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_sdio_string_table, %object
	.size	rmnet_sdio_string_table, 8
rmnet_sdio_string_table:
	.short	1033
	.space	2
	.word	rmnet_sdio_string_defs
	.type	rmnet_sdio_string_defs, %object
	.size	rmnet_sdio_string_defs, 16
rmnet_sdio_string_defs:
	.space	4
	.word	.LC1782
	.space	8
	.type	sdio_rx_fctrl_dis_thld, %object
	.size	sdio_rx_fctrl_dis_thld, 4
sdio_rx_fctrl_dis_thld:
	.word	500
	.type	sdio_tx_pkt_drop_thld, %object
	.size	sdio_tx_pkt_drop_thld, 4
sdio_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_smd_string_table, %object
	.size	rmnet_smd_string_table, 8
rmnet_smd_string_table:
	.short	1033
	.space	2
	.word	rmnet_smd_string_defs
	.type	rmnet_smd_string_defs, %object
	.size	rmnet_smd_string_defs, 16
rmnet_smd_string_defs:
	.space	4
	.word	.LC1782
	.space	8
	.type	qdss_string_table, %object
	.size	qdss_string_table, 8
qdss_string_table:
	.short	1033
	.space	2
	.word	qdss_string_defs
	.type	ss_bulk_out_comp_desc, %object
	.size	ss_bulk_out_comp_desc, 6
ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_bulk_in_comp_desc, %object
	.size	ss_bulk_in_comp_desc, 6
ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.bss
	.align	2
	.set	.LANCHOR1,. + 0
	.type	n_sdio_ports, %object
	.size	n_sdio_ports, 4
n_sdio_ports:
	.space	4
	.type	sdio_ports, %object
	.size	sdio_ports, 208
sdio_ports:
	.space	208
	.type	n_smd_ports, %object
	.size	n_smd_ports, 4
n_smd_ports:
	.space	4
	.type	smd_ports, %object
	.size	smd_ports, 208
smd_ports:
	.space	208
	.type	n_bam_ports, %object
	.size	n_bam_ports, 4
n_bam_ports:
	.space	4
	.type	bam_ports, %object
	.size	bam_ports, 84
bam_ports:
	.space	84
	.type	ctrl_smd_ports, %object
	.size	ctrl_smd_ports, 504
ctrl_smd_ports:
	.space	504
	.type	no_ctrl_ports, %object
	.size	no_ctrl_ports, 4
no_ctrl_ports:
	.space	4
	.type	gctrl_ports, %object
	.size	gctrl_ports, 416
gctrl_ports:
	.space	416
	.type	no_data_ports, %object
	.size	no_data_ports, 4
no_data_ports:
	.space	4
	.type	gdata_ports, %object
	.size	gdata_ports, 416
gdata_ports:
	.space	416
	.type	num_ctrl_ports, %object
	.size	num_ctrl_ports, 4
num_ctrl_ports:
	.space	4
	.type	ghsuart_ctrl_ports, %object
	.size	ghsuart_ctrl_ports, 168
ghsuart_ctrl_ports:
	.space	168
	.type	num_data_ports, %object
	.size	num_data_ports, 4
num_data_ports:
	.space	4
	.type	ghsuart_data_ports, %object
	.size	ghsuart_data_ports, 168
ghsuart_data_ports:
	.space	168
	.type	read_state, %object
	.size	read_state, 4
read_state:
	.space	4
	.type	modem_wait_q, %object
	.size	modem_wait_q, 12
modem_wait_q:
	.space	12
	.type	audio_reinit, %object
	.size	audio_reinit, 1
audio_reinit:
	.space	1
	.space	3
	.type	serial_string, %object
	.size	serial_string, 256
serial_string:
	.space	256
	.type	composite, %object
	.size	composite, 4
composite:
	.space	4
	.type	rmux_dev, %object
	.size	rmux_dev, 4
rmux_dev:
	.space	4
	.type	_conn_gadget_dev, %object
	.size	_conn_gadget_dev, 4
_conn_gadget_dev:
	.space	4
	.type	_acc_dev, %object
	.size	_acc_dev, 4
_acc_dev:
	.space	4
	.type	rndis_lock, %object
	.size	rndis_lock, 4
rndis_lock:
	.space	4
	.type	_rndis_qc, %object
	.size	_rndis_qc, 4
_rndis_qc:
	.space	4
	.type	_mtp_dev, %object
	.size	_mtp_dev, 4
_mtp_dev:
	.space	4
	.type	_mbim_dev, %object
	.size	_mbim_dev, 4
_mbim_dev:
	.space	4
	.type	product_string, %object
	.size	product_string, 256
product_string:
	.space	256
	.type	manufacturer_string, %object
	.size	manufacturer_string, 256
manufacturer_string:
	.space	256
	.type	ecm_transports, %object
	.size	ecm_transports, 50
ecm_transports:
	.space	50
	.space	2
	.type	rmnet_xport_names, %object
	.size	rmnet_xport_names, 50
rmnet_xport_names:
	.space	50
	.space	2
	.type	rmnet_transports, %object
	.size	rmnet_transports, 50
rmnet_transports:
	.space	50
	.space	2
	.type	mbim_transports, %object
	.size	mbim_transports, 50
mbim_transports:
	.space	50
	.type	usb30en, %object
	.size	usb30en, 1
usb30en:
	.space	1
	.space	1
	.type	ctrl_port, %object
	.size	ctrl_port, 4
ctrl_port:
	.space	4
	.type	android_dev_list, %object
	.size	android_dev_list, 8
android_dev_list:
	.space	8
	.type	rmnet_ports, %object
	.size	rmnet_ports, 72
rmnet_ports:
	.space	72
	.type	uether_wq, %object
	.size	uether_wq, 4
uether_wq:
	.space	4
	.type	rmnet_smd, %object
	.size	rmnet_smd, 4
rmnet_smd:
	.space	4
	.type	gserial_wq, %object
	.size	gserial_wq, 4
gserial_wq:
	.space	4
	.type	gsdio_wq, %object
	.size	gsdio_wq, 4
gsdio_wq:
	.space	4
	.type	gsmd_wq, %object
	.size	gsmd_wq, 4
gsmd_wq:
	.space	4
	.type	d_lock, %object
	.size	d_lock, 4
d_lock:
	.space	4
	.type	dent_smd, %object
	.size	dent_smd, 4
dent_smd:
	.space	4
	.type	ghsuart_ctrl_dent, %object
	.size	ghsuart_ctrl_dent, 4
ghsuart_ctrl_dent:
	.space	4
	.type	ghsuart_data_dent, %object
	.size	ghsuart_data_dent, 4
ghsuart_data_dent:
	.space	4
	.type	dent_diag, %object
	.size	dent_diag, 4
dent_diag:
	.space	4
	.type	ch_lock, %object
	.size	ch_lock, 4
ch_lock:
	.space	4
	.type	nr_rmnet_ports, %object
	.size	nr_rmnet_ports, 4
nr_rmnet_ports:
	.space	4
	.type	gbam_dent, %object
	.size	gbam_dent, 4
gbam_dent:
	.space	4
	.type	no_ctrl_smd_ports, %object
	.size	no_ctrl_smd_ports, 4
no_ctrl_smd_ports:
	.space	4
	.type	no_ctrl_qti_ports, %object
	.size	no_ctrl_qti_ports, 4
no_ctrl_qti_ports:
	.space	4
	.type	no_data_bam_ports, %object
	.size	no_data_bam_ports, 4
no_data_bam_ports:
	.space	4
	.type	no_data_bam2bam_ports, %object
	.size	no_data_bam2bam_ports, 4
no_data_bam2bam_ports:
	.space	4
	.type	no_ctrl_hsic_ports, %object
	.size	no_ctrl_hsic_ports, 4
no_ctrl_hsic_ports:
	.space	4
	.type	no_data_hsic_ports, %object
	.size	no_data_hsic_ports, 4
no_data_hsic_ports:
	.space	4
	.type	no_ctrl_hsuart_ports, %object
	.size	no_ctrl_hsuart_ports, 4
no_ctrl_hsuart_ports:
	.space	4
	.type	no_data_hsuart_ports, %object
	.size	no_data_hsuart_ports, 4
no_data_hsuart_ports:
	.space	4
	.type	android_dev_count, %object
	.size	android_dev_count, 4
android_dev_count:
	.space	4
	.type	_ccid_dev, %object
	.size	_ccid_dev, 4
_ccid_dev:
	.space	4
	.type	_adb_dev, %object
	.size	_adb_dev, 4
_adb_dev:
	.space	4
	.type	control_line_state, %object
	.size	control_line_state, 4
control_line_state:
	.space	4
	.type	grmnet_ctrl_wq, %object
	.size	grmnet_ctrl_wq, 4
grmnet_ctrl_wq:
	.space	4
	.type	smd_ctrl_dent, %object
	.size	smd_ctrl_dent, 4
smd_ctrl_dent:
	.space	4
	.type	smd_ctrl_dfile, %object
	.size	smd_ctrl_dfile, 4
smd_ctrl_dfile:
	.space	4
	.type	online_clients, %object
	.size	online_clients, 1
online_clients:
	.space	1
	.space	3
	.type	gctrl_dent, %object
	.size	gctrl_dent, 4
gctrl_dent:
	.space	4
	.type	gctrl_dfile, %object
	.size	gctrl_dfile, 4
gctrl_dfile:
	.space	4
	.type	gdata_dent, %object
	.size	gdata_dent, 4
gdata_dent:
	.space	4
	.type	gdata_dfile_stats, %object
	.size	gdata_dfile_stats, 4
gdata_dfile_stats:
	.space	4
	.type	gdata_dfile_tstamp, %object
	.size	gdata_dfile_tstamp, 4
gdata_dfile_tstamp:
	.space	4
	.type	diag_dev_list, %object
	.size	diag_dev_list, 8
diag_dev_list:
	.space	8
	.type	n_tx_req_queued, %object
	.size	n_tx_req_queued, 4
n_tx_req_queued:
	.space	4
	.type	gbam_wq, %object
	.size	gbam_wq, 4
gbam_wq:
	.space	4
	.type	retry_cnt.38278, %object
	.size	retry_cnt.38278, 4
retry_cnt.38278:
	.space	4
	.type	diag_dload, %object
	.size	diag_dload, 4
diag_dload:
	.space	4
	.type	diag_clients, %object
	.size	diag_clients, 32
diag_clients:
	.space	32
	.type	ipa_params, %object
	.size	ipa_params, 28
ipa_params:
	.space	28
	.type	__key.50062, %object
	.size	__key.50062, 0
__key.50062:
	.type	__key.55800, %object
	.size	__key.55800, 0
__key.55800:
	.type	__key.55801, %object
	.size	__key.55801, 0
__key.55801:
	.type	__key.54450, %object
	.size	__key.54450, 0
__key.54450:
	.type	__key.54451, %object
	.size	__key.54451, 0
__key.54451:
	.type	__key.54452, %object
	.size	__key.54452, 0
__key.54452:
	.type	__key.53070, %object
	.size	__key.53070, 0
__key.53070:
	.type	__key.53071, %object
	.size	__key.53071, 0
__key.53071:
	.type	__key.38375, %object
	.size	__key.38375, 0
__key.38375:
	.type	__key.38503, %object
	.size	__key.38503, 0
__key.38503:
	.type	dent_rmnet_mux, %object
	.size	dent_rmnet_mux, 4
dent_rmnet_mux:
	.space	4
	.type	_ncm_dev, %object
	.size	_ncm_dev, 4
_ncm_dev:
	.space	4
	.type	mbim_ports, %object
	.size	mbim_ports, 8
mbim_ports:
	.space	8
	.type	nr_mbim_ports, %object
	.size	nr_mbim_ports, 4
nr_mbim_ports:
	.space	4
	.type	rndis_ul_max_xfer_size_rcvd, %object
	.size	rndis_ul_max_xfer_size_rcvd, 4
rndis_ul_max_xfer_size_rcvd:
	.space	4
	.type	rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	rndis_ul_max_pkt_per_xfer_rcvd, 4
rndis_ul_max_pkt_per_xfer_rcvd:
	.space	4
	.type	__key.63049, %object
	.size	__key.63049, 0
__key.63049:
	.type	__key.63050, %object
	.size	__key.63050, 0
__key.63050:
	.type	__key.63051, %object
	.size	__key.63051, 0
__key.63051:
	.type	ncm_connect, %object
	.size	ncm_connect, 1
ncm_connect:
	.space	1
	.space	3
	.type	android_class, %object
	.size	android_class, 4
android_class:
	.space	4
	.type	__key.45535, %object
	.size	__key.45535, 0
__key.45535:
	.type	composite_string_index, %object
	.size	composite_string_index, 4
composite_string_index:
	.space	4
	.type	next_state.63615, %object
	.size	next_state.63615, 4
next_state.63615:
	.space	4
	.type	last_uevent.63614, %object
	.size	last_uevent.63614, 4
last_uevent.63614:
	.space	4
	.type	write_error_after_csw_sent, %object
	.size	write_error_after_csw_sent, 4
write_error_after_csw_sent:
	.space	4
	.type	epnum, %object
	.size	epnum, 4
epnum:
	.space	4
	.type	composite_gadget_bind, %object
	.size	composite_gadget_bind, 4
composite_gadget_bind:
	.space	4
	.type	idVendor, %object
	.size	idVendor, 2
idVendor:
	.space	2
	.type	idProduct, %object
	.size	idProduct, 2
idProduct:
	.space	2
	.type	bcdDevice, %object
	.size	bcdDevice, 2
bcdDevice:
	.space	2
	.space	2
	.type	iManufacturer, %object
	.size	iManufacturer, 4
iManufacturer:
	.space	4
	.type	composite_manufacturer, %object
	.size	composite_manufacturer, 50
composite_manufacturer:
	.space	50
	.space	2
	.type	iProduct, %object
	.size	iProduct, 4
iProduct:
	.space	4
	.type	iSerialNumber, %object
	.size	iSerialNumber, 4
iSerialNumber:
	.space	4
	.type	terminal_mode_version, %object
	.size	terminal_mode_version, 2
terminal_mode_version:
	.space	2
	.type	terminal_mode_vendor_id, %object
	.size	terminal_mode_vendor_id, 2
terminal_mode_vendor_id:
	.space	2
	.type	record_timestamp, %object
	.size	record_timestamp, 4
record_timestamp:
	.space	4
	.type	bam2bam_ports, %object
	.size	bam2bam_ports, 12
bam2bam_ports:
	.space	12
	.type	__key.57601, %object
	.size	__key.57601, 0
__key.57601:
	.type	__key.57602, %object
	.size	__key.57602, 0
__key.57602:
	.type	bam2bam_data_ports, %object
	.size	bam2bam_data_ports, 4
bam2bam_data_ports:
	.space	4
	.type	bam_data_wq, %object
	.size	bam_data_wq, 4
bam_data_wq:
	.space	4
	.type	n_bam2bam_data_ports, %object
	.size	n_bam2bam_data_ports, 4
n_bam2bam_data_ports:
	.space	4
	.type	rndis_per_dev_params, %object
	.size	rndis_per_dev_params, 60
rndis_per_dev_params:
	.space	60
	.type	__key.53392, %object
	.size	__key.53392, 0
__key.53392:
	.type	__key.53393, %object
	.size	__key.53393, 0
__key.53393:
	.type	__key.53453, %object
	.size	__key.53453, 0
__key.53453:
	.type	prev_len.47200, %object
	.size	prev_len.47200, 4
prev_len.47200:
	.space	4
	.type	n_ports, %object
	.size	n_ports, 4
n_ports:
	.space	4
	.type	gs_dent, %object
	.size	gs_dent, 4
gs_dent:
	.space	4
	.type	gs_tty_driver, %object
	.size	gs_tty_driver, 4
gs_tty_driver:
	.space	4
	.type	ports, %object
	.size	ports, 192
ports:
	.space	192
	.type	csw_hack_sent, %object
	.size	csw_hack_sent, 4
csw_hack_sent:
	.space	4
	.type	__key.44638, %object
	.size	__key.44638, 0
__key.44638:
	.type	__key.44640, %object
	.size	__key.44640, 0
__key.44640:
	.type	__key.8256, %object
	.size	__key.8256, 0
__key.8256:
	.type	the_dev, %object
	.size	the_dev, 4
the_dev:
	.space	4
	.type	acm_data, %object
	.size	acm_data, 4
acm_data:
	.space	4
	.type	the_card, %object
	.size	the_card, 4
the_card:
	.space	4
	.type	rndis_initialized, %object
	.size	rndis_initialized, 1
rndis_initialized:
	.space	1
	.space	3
	.type	rmnet_mux_smd_data_ch, %object
	.size	rmnet_mux_smd_data_ch, 4
rmnet_mux_smd_data_ch:
	.space	4
	.type	retry_cnt.37517, %object
	.size	retry_cnt.37517, 4
retry_cnt.37517:
	.space	4
	.type	__key.46195, %object
	.size	__key.46195, 0
__key.46195:
	.type	__key.46204, %object
	.size	__key.46204, 0
__key.46204:
	.type	__key.65023, %object
	.size	__key.65023, 0
__key.65023:
	.type	__key.65028, %object
	.size	__key.65028, 0
__key.65028:
	.type	__key.52656, %object
	.size	__key.52656, 0
__key.52656:
	.type	new_product_name.45817, %object
	.size	new_product_name.45817, 17
new_product_name.45817:
	.space	17
	.space	3
	.type	unknown.46011, %object
	.size	unknown.46011, 16
unknown.46011:
	.space	16
	.type	bam_info, %object
	.size	bam_info, 16
bam_info:
	.space	16
	.type	__key.32095, %object
	.size	__key.32095, 0
__key.32095:
	.type	__key.32096, %object
	.size	__key.32096, 0
__key.32096:
	.type	__key.47491, %object
	.size	__key.47491, 0
__key.47491:
	.type	__key.47437, %object
	.size	__key.47437, 0
__key.47437:
	.type	__key.47438, %object
	.size	__key.47438, 0
__key.47438:
	.type	__key.48434, %object
	.size	__key.48434, 0
__key.48434:
	.type	__key.48792, %object
	.size	__key.48792, 0
__key.48792:
	.type	n_bam2bam_ports, %object
	.size	n_bam2bam_ports, 4
n_bam2bam_ports:
	.space	4
	.type	__key.49802, %object
	.size	__key.49802, 0
__key.49802:
	.type	__key.49803, %object
	.size	__key.49803, 0
__key.49803:
	.type	port_num.51009, %object
	.size	port_num.51009, 4
port_num.51009:
	.space	4
	.type	port_num.51681, %object
	.size	port_num.51681, 4
port_num.51681:
	.space	4
	.type	rmnet_initialized.63871, %object
	.size	rmnet_initialized.63871, 4
rmnet_initialized.63871:
	.space	4
	.type	ports.63872, %object
	.size	ports.63872, 4
ports.63872:
	.space	4
	.type	qc_dev_addr, %object
	.size	qc_dev_addr, 4
qc_dev_addr:
	.space	4
	.type	qc_host_addr, %object
	.size	qc_host_addr, 4
qc_host_addr:
	.space	4
	.type	dev_addr, %object
	.size	dev_addr, 4
dev_addr:
	.space	4
	.type	__key.44675, %object
	.size	__key.44675, 0
__key.44675:
	.type	__key.44676, %object
	.size	__key.44676, 0
__key.44676:
	.type	audio_string_defs, %object
	.size	audio_string_defs, 8
audio_string_defs:
	.space	8
	.type	host_addr, %object
	.size	host_addr, 4
host_addr:
	.space	4
	.type	dbg_data, %object
	.size	dbg_data, 4104
dbg_data:
	.space	4104
	.type	rmnet_mux_sdio_data_ch, %object
	.size	rmnet_mux_sdio_data_ch, 4
rmnet_mux_sdio_data_ch:
	.space	4
	.type	rmnet_mux_sdio_ctl_ch, %object
	.size	rmnet_mux_sdio_ctl_ch, 4
rmnet_mux_sdio_ctl_ch:
	.space	4
	.type	rmnet_sdio_data_ch, %object
	.size	rmnet_sdio_data_ch, 4
rmnet_sdio_data_ch:
	.space	4
	.type	rmnet_sdio_ctl_ch, %object
	.size	rmnet_sdio_ctl_ch, 4
rmnet_sdio_ctl_ch:
	.space	4
	.type	debug_buffer, %object
	.size	debug_buffer, 4096
debug_buffer:
	.space	4096
	.section	.data.unlikely,"aw"
	.set	.LANCHOR6,. + 0
	.type	__warned.11082, %object
	.size	__warned.11082, 1
__warned.11082:
	.space	1
	.section	.devinit.rodata,"a"
	.align	2
	.type	android_id_table, %object
	.size	android_id_table, 48
android_id_table:
	.ascii	"android_usb\000"
	.space	8
	.space	4
	.ascii	"android_usb_hsic\000"
	.space	3
	.space	4
	.section	.exitcall.exit,"aw"
	.align	2
	.type	__exitcall_cleanup, %object
	.size	__exitcall_cleanup, 4
__exitcall_cleanup:
	.word	cleanup
	.type	__exitcall_gether_exit, %object
	.size	__exitcall_gether_exit, 4
__exitcall_gether_exit:
	.word	gether_exit
	.type	__exitcall_ghsuart_data_exit, %object
	.size	__exitcall_ghsuart_data_exit, 4
__exitcall_ghsuart_data_exit:
	.word	ghsuart_data_exit
	.type	__exitcall_ghsuart_ctrl_exit, %object
	.size	__exitcall_ghsuart_ctrl_exit, 4
__exitcall_ghsuart_ctrl_exit:
	.word	ghsuart_ctrl_exit
	.type	__exitcall_ghsic_data_exit, %object
	.size	__exitcall_ghsic_data_exit, 4
__exitcall_ghsic_data_exit:
	.word	ghsic_data_exit
	.type	__exitcall_gctrl_exit, %object
	.size	__exitcall_gctrl_exit, 4
__exitcall_gctrl_exit:
	.word	gctrl_exit
	.type	__exitcall_gqti_ctrl_cleanup, %object
	.size	__exitcall_gqti_ctrl_cleanup, 4
__exitcall_gqti_ctrl_cleanup:
	.word	gqti_ctrl_cleanup
	.type	__exitcall_gsmd_ctrl_exit, %object
	.size	__exitcall_gsmd_ctrl_exit, 4
__exitcall_gsmd_ctrl_exit:
	.word	gsmd_ctrl_exit
	.section	.initcall6.init,"aw"
	.align	2
	.type	__initcall_init6, %object
	.size	__initcall_init6, 4
__initcall_init6:
	.word	init
	.type	__initcall_gether_init6, %object
	.size	__initcall_gether_init6, 4
__initcall_gether_init6:
	.word	gether_init
	.type	__initcall_ghsuart_data_init6, %object
	.size	__initcall_ghsuart_data_init6, 4
__initcall_ghsuart_data_init6:
	.word	ghsuart_data_init
	.type	__initcall_ghsuart_ctrl_init6, %object
	.size	__initcall_ghsuart_ctrl_init6, 4
__initcall_ghsuart_ctrl_init6:
	.word	ghsuart_ctrl_init
	.type	__initcall_ghsic_data_init6, %object
	.size	__initcall_ghsic_data_init6, 4
__initcall_ghsic_data_init6:
	.word	ghsic_data_init
	.type	__initcall_gctrl_init6, %object
	.size	__initcall_gctrl_init6, 4
__initcall_gctrl_init6:
	.word	gctrl_init
	.type	__initcall_gqti_ctrl_init6, %object
	.size	__initcall_gqti_ctrl_init6, 4
__initcall_gqti_ctrl_init6:
	.word	gqti_ctrl_init
	.type	__initcall_gsmd_ctrl_init6, %object
	.size	__initcall_gsmd_ctrl_init6, 4
__initcall_gsmd_ctrl_init6:
	.word	gsmd_ctrl_init
	.section	__modver,"a"
	.align	2
	.type	__modver_attr, %object
	.size	__modver_attr, 4
__modver_attr:
	.word	___modver_attr
	.section	__param,"a"
	.align	2
	.type	__param_audio_capture_buf_size, %object
	.size	__param_audio_capture_buf_size, 16
__param_audio_capture_buf_size:
	.word	__param_str_audio_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_capture_buf_size
	.type	__param_req_capture_count, %object
	.size	__param_req_capture_count, 16
__param_req_capture_count:
	.word	__param_str_req_capture_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_count
	.type	__param_req_capture_buf_size, %object
	.size	__param_req_capture_buf_size, 16
__param_req_capture_buf_size:
	.word	__param_str_req_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_buf_size
	.type	__param_audio_playback_buf_size, %object
	.size	__param_audio_playback_buf_size, 16
__param_audio_playback_buf_size:
	.word	__param_str_audio_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_playback_buf_size
	.type	__param_req_playback_count, %object
	.size	__param_req_playback_count, 16
__param_req_playback_count:
	.word	__param_str_req_playback_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_count
	.type	__param_req_playback_buf_size, %object
	.size	__param_req_playback_buf_size, 16
__param_req_playback_buf_size:
	.word	__param_str_req_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_buf_size
	.type	__param_fn_cntl, %object
	.size	__param_fn_cntl, 16
__param_fn_cntl:
	.word	__param_str_fn_cntl
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cntl
	.type	__param_fn_cap, %object
	.size	__param_fn_cap, 16
__param_fn_cap:
	.word	__param_str_fn_cap
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cap
	.type	__param_fn_play, %object
	.size	__param_fn_play, 16
__param_fn_play:
	.word	__param_str_fn_play
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_play
	.type	__param_qc_host_addr, %object
	.size	__param_qc_host_addr, 16
__param_qc_host_addr:
	.word	__param_str_qc_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_host_addr
	.type	__param_qc_dev_addr, %object
	.size	__param_qc_dev_addr, 16
__param_qc_dev_addr:
	.word	__param_str_qc_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_dev_addr
	.type	__param_host_addr, %object
	.size	__param_host_addr, 16
__param_host_addr:
	.word	__param_str_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	host_addr
	.type	__param_dev_addr, %object
	.size	__param_dev_addr, 16
__param_dev_addr:
	.word	__param_str_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	dev_addr
	.type	__param_qmult, %object
	.size	__param_qmult, 16
__param_qmult:
	.word	__param_str_qmult
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	qmult
	.type	__param_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_rndis_ul_max_xfer_size_rcvd, 16
__param_rndis_ul_max_xfer_size_rcvd:
	.word	__param_str_rndis_ul_max_xfer_size_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_xfer_size_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_rndis_ul_max_pkt_per_xfer_rcvd, 16
__param_rndis_ul_max_pkt_per_xfer_rcvd:
	.word	__param_str_rndis_ul_max_pkt_per_xfer_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_rndis_ul_max_pkt_per_xfer, 16
__param_rndis_ul_max_pkt_per_xfer:
	.word	__param_str_rndis_ul_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer
	.type	__param_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_rndis_dl_max_pkt_per_xfer, 16
__param_rndis_dl_max_pkt_per_xfer:
	.word	__param_str_rndis_dl_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_dl_max_pkt_per_xfer
	.type	__param_mtp_tx_reqs, %object
	.size	__param_mtp_tx_reqs, 16
__param_mtp_tx_reqs:
	.word	__param_str_mtp_tx_reqs
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_reqs
	.type	__param_mtp_tx_req_len, %object
	.size	__param_mtp_tx_req_len, 16
__param_mtp_tx_req_len:
	.word	__param_str_mtp_tx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_req_len
	.type	__param_mtp_rx_req_len, %object
	.size	__param_mtp_rx_req_len, 16
__param_mtp_rx_req_len:
	.word	__param_str_mtp_rx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_rx_req_len
	.type	__param_ghsuart_data_tx_intr_thld, %object
	.size	__param_ghsuart_data_tx_intr_thld, 16
__param_ghsuart_data_tx_intr_thld:
	.word	__param_str_ghsuart_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_tx_intr_thld
	.type	__param_ghsuart_data_rx_req_size, %object
	.size	__param_ghsuart_data_rx_req_size, 16
__param_ghsuart_data_rx_req_size:
	.word	__param_str_ghsuart_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rx_req_size
	.type	__param_ghsuart_data_serial_rx_q_size, %object
	.size	__param_ghsuart_data_serial_rx_q_size, 16
__param_ghsuart_data_serial_rx_q_size:
	.word	__param_str_ghsuart_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_rx_q_size
	.type	__param_ghsuart_data_serial_tx_q_size, %object
	.size	__param_ghsuart_data_serial_tx_q_size, 16
__param_ghsuart_data_serial_tx_q_size:
	.word	__param_str_ghsuart_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_tx_q_size
	.type	__param_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_ghsuart_data_rmnet_rx_q_size, 16
__param_ghsuart_data_rmnet_rx_q_size:
	.word	__param_str_ghsuart_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_rx_q_size
	.type	__param_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_ghsuart_data_rmnet_tx_q_size, 16
__param_ghsuart_data_rmnet_tx_q_size:
	.word	__param_str_ghsuart_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_tx_q_size
	.type	__param_record_timestamp, %object
	.size	__param_record_timestamp, 16
__param_record_timestamp:
	.word	__param_str_record_timestamp
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	record_timestamp
	.type	__param_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_ghsic_data_pend_limit_with_bridge, 16
__param_ghsic_data_pend_limit_with_bridge:
	.word	__param_str_ghsic_data_pend_limit_with_bridge
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_pend_limit_with_bridge
	.type	__param_ghsic_data_fctrl_dis_thld, %object
	.size	__param_ghsic_data_fctrl_dis_thld, 16
__param_ghsic_data_fctrl_dis_thld:
	.word	__param_str_ghsic_data_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_dis_thld
	.type	__param_ghsic_data_fctrl_en_thld, %object
	.size	__param_ghsic_data_fctrl_en_thld, 16
__param_ghsic_data_fctrl_en_thld:
	.word	__param_str_ghsic_data_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_en_thld
	.type	__param_ghsic_data_fctrl_support, %object
	.size	__param_ghsic_data_fctrl_support, 16
__param_ghsic_data_fctrl_support:
	.word	__param_str_ghsic_data_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_support
	.type	__param_ghsic_data_tx_intr_thld, %object
	.size	__param_ghsic_data_tx_intr_thld, 16
__param_ghsic_data_tx_intr_thld:
	.word	__param_str_ghsic_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_tx_intr_thld
	.type	__param_ghsic_data_rx_req_size, %object
	.size	__param_ghsic_data_rx_req_size, 16
__param_ghsic_data_rx_req_size:
	.word	__param_str_ghsic_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rx_req_size
	.type	__param_ghsic_data_serial_rx_q_size, %object
	.size	__param_ghsic_data_serial_rx_q_size, 16
__param_ghsic_data_serial_rx_q_size:
	.word	__param_str_ghsic_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_rx_q_size
	.type	__param_ghsic_data_serial_tx_q_size, %object
	.size	__param_ghsic_data_serial_tx_q_size, 16
__param_ghsic_data_serial_tx_q_size:
	.word	__param_str_ghsic_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_tx_q_size
	.type	__param_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_ghsic_data_rmnet_rx_q_size, 16
__param_ghsic_data_rmnet_rx_q_size:
	.word	__param_str_ghsic_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_rx_q_size
	.type	__param_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_ghsic_data_rmnet_tx_q_size, 16
__param_ghsic_data_rmnet_tx_q_size:
	.word	__param_str_ghsic_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_tx_q_size
	.type	__param_dl_intr_threshold, %object
	.size	__param_dl_intr_threshold, 16
__param_dl_intr_threshold:
	.word	__param_str_dl_intr_threshold
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	dl_intr_threshold
	.type	__param_bam_mux_rx_req_size, %object
	.size	__param_bam_mux_rx_req_size, 16
__param_bam_mux_rx_req_size:
	.word	__param_str_bam_mux_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_req_size
	.type	__param_bam_mux_rx_q_size, %object
	.size	__param_bam_mux_rx_q_size, 16
__param_bam_mux_rx_q_size:
	.word	__param_str_bam_mux_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_q_size
	.type	__param_bam_mux_tx_q_size, %object
	.size	__param_bam_mux_tx_q_size, 16
__param_bam_mux_tx_q_size:
	.word	__param_str_bam_mux_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_q_size
	.type	__param_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_bam_mux_rx_fctrl_dis_thld, 16
__param_bam_mux_rx_fctrl_dis_thld:
	.word	__param_str_bam_mux_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_dis_thld
	.type	__param_bam_mux_rx_fctrl_support, %object
	.size	__param_bam_mux_rx_fctrl_support, 16
__param_bam_mux_rx_fctrl_support:
	.word	__param_str_bam_mux_rx_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_support
	.type	__param_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_bam_mux_rx_fctrl_en_thld, 16
__param_bam_mux_rx_fctrl_en_thld:
	.word	__param_str_bam_mux_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_en_thld
	.type	__param_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_bam_mux_tx_pkt_drop_thld, 16
__param_bam_mux_tx_pkt_drop_thld:
	.word	__param_str_bam_mux_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_pkt_drop_thld
	.type	__param_bam_pending_limit, %object
	.size	__param_bam_pending_limit, 16
__param_bam_pending_limit:
	.word	__param_str_bam_pending_limit
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_pending_limit
	.type	__param_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_mux_sdio_rx_fctrl_dis_thld, 16
__param_mux_sdio_rx_fctrl_dis_thld:
	.word	__param_str_mux_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_dis_thld
	.type	__param_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_mux_sdio_rx_fctrl_en_thld, 16
__param_mux_sdio_rx_fctrl_en_thld:
	.word	__param_str_mux_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_en_thld
	.type	__param_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_mux_sdio_tx_pkt_drop_thld, 16
__param_mux_sdio_tx_pkt_drop_thld:
	.word	__param_str_mux_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_tx_pkt_drop_thld
	.type	__param_rmnet_mux_smd_data_ch, %object
	.size	__param_rmnet_mux_smd_data_ch, 16
__param_rmnet_mux_smd_data_ch:
	.word	__param_str_rmnet_mux_smd_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_mux_smd_data_ch
	.type	__param_rmnet_mux_sdio_data_ch, %object
	.size	__param_rmnet_mux_sdio_data_ch, 16
__param_rmnet_mux_sdio_data_ch:
	.word	__param_str_rmnet_mux_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_data_ch
	.type	__param_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_rmnet_mux_sdio_ctl_ch, 16
__param_rmnet_mux_sdio_ctl_ch:
	.word	__param_str_rmnet_mux_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_ctl_ch
	.type	__param_sdio_rx_fctrl_dis_thld, %object
	.size	__param_sdio_rx_fctrl_dis_thld, 16
__param_sdio_rx_fctrl_dis_thld:
	.word	__param_str_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_dis_thld
	.type	__param_sdio_rx_fctrl_en_thld, %object
	.size	__param_sdio_rx_fctrl_en_thld, 16
__param_sdio_rx_fctrl_en_thld:
	.word	__param_str_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_en_thld
	.type	__param_sdio_tx_pkt_drop_thld, %object
	.size	__param_sdio_tx_pkt_drop_thld, 16
__param_sdio_tx_pkt_drop_thld:
	.word	__param_str_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_tx_pkt_drop_thld
	.type	__param_rmnet_sdio_data_ch, %object
	.size	__param_rmnet_sdio_data_ch, 16
__param_rmnet_sdio_data_ch:
	.word	__param_str_rmnet_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_data_ch
	.type	__param_rmnet_sdio_ctl_ch, %object
	.size	__param_rmnet_sdio_ctl_ch, 16
__param_rmnet_sdio_ctl_ch:
	.word	__param_str_rmnet_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_ctl_ch
	.type	__param_rmnet_data_ch, %object
	.size	__param_rmnet_data_ch, 16
__param_rmnet_data_ch:
	.word	__param_str_rmnet_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_data_ch
	.type	__param_rmnet_ctl_ch, %object
	.size	__param_rmnet_ctl_ch, 16
__param_rmnet_ctl_ch:
	.word	__param_str_rmnet_ctl_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_ctl_ch
	.type	__param_iSerialNumber, %object
	.size	__param_iSerialNumber, 16
__param_iSerialNumber:
	.word	__param_str_iSerialNumber
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iSerialNumber
	.type	__param_iProduct, %object
	.size	__param_iProduct, 16
__param_iProduct:
	.word	__param_str_iProduct
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iProduct
	.type	__param_iManufacturer, %object
	.size	__param_iManufacturer, 16
__param_iManufacturer:
	.word	__param_str_iManufacturer
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iManufacturer
	.type	__param_bcdDevice, %object
	.size	__param_bcdDevice, 16
__param_bcdDevice:
	.word	__param_str_bcdDevice
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	bcdDevice
	.type	__param_idProduct, %object
	.size	__param_idProduct, 16
__param_idProduct:
	.word	__param_str_idProduct
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idProduct
	.type	__param_idVendor, %object
	.size	__param_idVendor, 16
__param_idVendor:
	.word	__param_str_idVendor
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idVendor
	.section	__verbose,"aw"
	.align	3
	.set	.LANCHOR2,. + 0
	.set	.LANCHOR4,. + 8184
	.set	.LANCHOR8,. + 16368
	.type	descriptor.25307, %object
	.size	descriptor.25307, 24
descriptor.25307:
	.word	.LC1013
	.word	__func__.25308
	.word	.LC583
	.word	.LC5
	.byte	132
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25458, %object
	.size	descriptor.25458, 24
descriptor.25458:
	.word	.LC1013
	.word	__func__.25459
	.word	.LC583
	.word	.LC6
	.byte	197
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25443, %object
	.size	descriptor.25443, 24
descriptor.25443:
	.word	.LC1013
	.word	__func__.25444
	.word	.LC583
	.word	.LC7
	.byte	172
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.26010, %object
	.size	descriptor.26010, 24
descriptor.26010:
	.word	.LC1013
	.word	__func__.26011
	.word	.LC1788
	.word	.LC8
	.byte	27
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52712, %object
	.size	descriptor.52712, 24
descriptor.52712:
	.word	.LC1013
	.word	__func__.52713
	.word	.LC1737
	.word	.LC9
	.byte	203
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52714, %object
	.size	descriptor.52714, 24
descriptor.52714:
	.word	.LC1013
	.word	__func__.52713
	.word	.LC1737
	.word	.LC10
	.byte	210
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53792, %object
	.size	descriptor.53792, 24
descriptor.53792:
	.word	.LC1013
	.word	__func__.53793
	.word	.LC1731
	.word	.LC11
	.byte	138
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56290, %object
	.size	descriptor.56290, 24
descriptor.56290:
	.word	.LC1013
	.word	__func__.56291
	.word	.LC1725
	.word	.LC12
	.byte	1
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56293, %object
	.size	descriptor.56293, 24
descriptor.56293:
	.word	.LC1013
	.word	__func__.56291
	.word	.LC1725
	.word	.LC13
	.byte	17
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56277, %object
	.size	descriptor.56277, 24
descriptor.56277:
	.word	.LC1013
	.word	__func__.56278
	.word	.LC1725
	.word	.LC14
	.byte	231
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57917, %object
	.size	descriptor.57917, 24
descriptor.57917:
	.word	.LC1013
	.word	__func__.57918
	.word	.LC1648
	.word	.LC15
	.byte	230
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57922, %object
	.size	descriptor.57922, 24
descriptor.57922:
	.word	.LC1013
	.word	__func__.57918
	.word	.LC1648
	.word	.LC17
	.byte	1
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57921, %object
	.size	descriptor.57921, 24
descriptor.57921:
	.word	.LC1013
	.word	__func__.57918
	.word	.LC1648
	.word	.LC16
	.byte	250
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63314, %object
	.size	descriptor.63314, 24
descriptor.63314:
	.word	.LC1013
	.word	__func__.63315
	.word	.LC1575
	.word	.LC19
	.byte	100
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63317, %object
	.size	descriptor.63317, 24
descriptor.63317:
	.word	.LC1013
	.word	__func__.63315
	.word	.LC1575
	.word	.LC20
	.byte	107
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63304, %object
	.size	descriptor.63304, 24
descriptor.63304:
	.word	.LC1013
	.word	__func__.63305
	.word	.LC1575
	.word	.LC23
	.byte	81
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63282, %object
	.size	descriptor.63282, 24
descriptor.63282:
	.word	.LC1013
	.word	__func__.63283
	.word	.LC1575
	.word	.LC24
	.byte	7
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63286, %object
	.size	descriptor.63286, 24
descriptor.63286:
	.word	.LC1013
	.word	__func__.63283
	.word	.LC1575
	.word	.LC25
	.byte	23
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63287, %object
	.size	descriptor.63287, 24
descriptor.63287:
	.word	.LC1013
	.word	__func__.63283
	.word	.LC1575
	.word	.LC26
	.byte	41
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38181, %object
	.size	descriptor.38181, 24
descriptor.38181:
	.word	.LC1013
	.word	__func__.38182
	.word	.LC1775
	.word	.LC28
	.byte	87
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38190, %object
	.size	descriptor.38190, 24
descriptor.38190:
	.word	.LC1013
	.word	__func__.38182
	.word	.LC1775
	.word	.LC16
	.byte	133
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57039, %object
	.size	descriptor.57039, 24
descriptor.57039:
	.word	.LC1013
	.word	__func__.57040
	.word	.LC1705
	.word	.LC15
	.byte	53
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57044, %object
	.size	descriptor.57044, 24
descriptor.57044:
	.word	.LC1013
	.word	__func__.57040
	.word	.LC1705
	.word	.LC17
	.byte	80
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57043, %object
	.size	descriptor.57043, 24
descriptor.57043:
	.word	.LC1013
	.word	__func__.57040
	.word	.LC1705
	.word	.LC16
	.byte	73
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58093, %object
	.size	descriptor.58093, 24
descriptor.58093:
	.word	.LC1013
	.word	__func__.58087
	.word	.LC1638
	.word	.LC13
	.byte	62
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63345, %object
	.size	descriptor.63345, 24
descriptor.63345:
	.word	.LC1013
	.word	__func__.63346
	.word	.LC1575
	.word	.LC15
	.byte	187
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63358, %object
	.size	descriptor.63358, 24
descriptor.63358:
	.word	.LC1013
	.word	__func__.63346
	.word	.LC1575
	.word	.LC41
	.byte	7
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63361, %object
	.size	descriptor.63361, 24
descriptor.63361:
	.word	.LC1013
	.word	__func__.63346
	.word	.LC1575
	.word	.LC42
	.byte	11
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63369, %object
	.size	descriptor.63369, 24
descriptor.63369:
	.word	.LC1013
	.word	__func__.63346
	.word	.LC1575
	.word	.LC43
	.byte	44
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63372, %object
	.size	descriptor.63372, 24
descriptor.63372:
	.word	.LC1013
	.word	__func__.63346
	.word	.LC1575
	.word	.LC44
	.byte	49
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63377, %object
	.size	descriptor.63377, 24
descriptor.63377:
	.word	.LC1013
	.word	__func__.63346
	.word	.LC1575
	.word	.LC16
	.byte	94
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63378, %object
	.size	descriptor.63378, 24
descriptor.63378:
	.word	.LC1013
	.word	__func__.63346
	.word	.LC1575
	.word	.LC46
	.byte	101
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45989, %object
	.size	descriptor.45989, 24
descriptor.45989:
	.word	.LC1013
	.word	__func__.45990
	.word	.LC87
	.word	.LC95
	.byte	39
	.byte	9
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45991, %object
	.size	descriptor.45991, 24
descriptor.45991:
	.word	.LC1013
	.word	__func__.45990
	.word	.LC87
	.word	.LC96
	.byte	51
	.byte	9
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45992, %object
	.size	descriptor.45992, 24
descriptor.45992:
	.word	.LC1013
	.word	__func__.45990
	.word	.LC87
	.word	.LC97
	.byte	71
	.byte	9
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30847, %object
	.size	descriptor.30847, 24
descriptor.30847:
	.word	.LC1013
	.word	__func__.30848
	.word	.LC1784
	.word	.LC103
	.byte	209
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30835, %object
	.size	descriptor.30835, 24
descriptor.30835:
	.word	.LC1013
	.word	__func__.30836
	.word	.LC1784
	.word	.LC104
	.byte	175
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48521, %object
	.size	descriptor.48521, 24
descriptor.48521:
	.word	.LC1013
	.word	__func__.48517
	.word	.LC1757
	.word	.LC106
	.byte	181
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49229, %object
	.size	descriptor.49229, 24
descriptor.49229:
	.word	.LC1013
	.word	__func__.49228
	.word	.LC1756
	.word	.LC109
	.byte	97
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49236, %object
	.size	descriptor.49236, 24
descriptor.49236:
	.word	.LC1013
	.word	__func__.49235
	.word	.LC1756
	.word	.LC109
	.byte	117
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49215, %object
	.size	descriptor.49215, 24
descriptor.49215:
	.word	.LC1013
	.word	__func__.49214
	.word	.LC1756
	.word	.LC111
	.byte	59
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49222, %object
	.size	descriptor.49222, 24
descriptor.49222:
	.word	.LC1013
	.word	__func__.49221
	.word	.LC1756
	.word	.LC111
	.byte	78
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49341, %object
	.size	descriptor.49341, 24
descriptor.49341:
	.word	.LC1013
	.word	__func__.49342
	.word	.LC1756
	.word	.LC113
	.byte	169
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49186, %object
	.size	descriptor.49186, 24
descriptor.49186:
	.word	.LC1013
	.word	__func__.49187
	.word	.LC1756
	.word	.LC114
	.byte	244
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49179, %object
	.size	descriptor.49179, 24
descriptor.49179:
	.word	.LC1013
	.word	__func__.49180
	.word	.LC1756
	.word	.LC114
	.byte	237
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49975, %object
	.size	descriptor.49975, 24
descriptor.49975:
	.word	.LC1013
	.word	__func__.49976
	.word	.LC1751
	.word	.LC115
	.byte	230
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49963, %object
	.size	descriptor.49963, 24
descriptor.49963:
	.word	.LC1013
	.word	__func__.49964
	.word	.LC1751
	.word	.LC116
	.byte	209
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49965, %object
	.size	descriptor.49965, 24
descriptor.49965:
	.word	.LC1013
	.word	__func__.49964
	.word	.LC1751
	.word	.LC117
	.byte	212
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50890, %object
	.size	descriptor.50890, 24
descriptor.50890:
	.word	.LC1013
	.word	__func__.50889
	.word	.LC1749
	.word	.LC119
	.byte	130
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50953, %object
	.size	descriptor.50953, 24
descriptor.50953:
	.word	.LC1013
	.word	__func__.50954
	.word	.LC1749
	.word	.LC120
	.byte	62
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51901, %object
	.size	descriptor.51901, 24
descriptor.51901:
	.word	.LC1013
	.word	__func__.51900
	.word	.LC1747
	.word	.LC119
	.byte	183
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57385, %object
	.size	descriptor.57385, 24
descriptor.57385:
	.word	.LC1013
	.word	__func__.57383
	.word	.LC1662
	.word	.LC1690
	.byte	233
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57679, %object
	.size	descriptor.57679, 24
descriptor.57679:
	.word	.LC1013
	.word	__func__.57680
	.word	.LC1652
	.word	.LC109
	.byte	128
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57686, %object
	.size	descriptor.57686, 24
descriptor.57686:
	.word	.LC1013
	.word	__func__.57687
	.word	.LC1652
	.word	.LC109
	.byte	142
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57658, %object
	.size	descriptor.57658, 24
descriptor.57658:
	.word	.LC1013
	.word	__func__.57659
	.word	.LC1652
	.word	.LC1660
	.byte	89
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57651, %object
	.size	descriptor.57651, 24
descriptor.57651:
	.word	.LC1013
	.word	__func__.57652
	.word	.LC1652
	.word	.LC1660
	.byte	81
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62292, %object
	.size	descriptor.62292, 24
descriptor.62292:
	.word	.LC1013
	.word	__func__.62293
	.word	.LC1589
	.word	.LC1596
	.byte	74
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62145, %object
	.size	descriptor.62145, 24
descriptor.62145:
	.word	.LC1013
	.word	__func__.62146
	.word	.LC1589
	.word	.LC1599
	.byte	136
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62296, %object
	.size	descriptor.62296, 24
descriptor.62296:
	.word	.LC1013
	.word	__func__.62293
	.word	.LC1589
	.word	.LC1595
	.byte	79
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62176, %object
	.size	descriptor.62176, 24
descriptor.62176:
	.word	.LC1013
	.word	__func__.62177
	.word	.LC1589
	.word	.LC1599
	.byte	173
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62298, %object
	.size	descriptor.62298, 24
descriptor.62298:
	.word	.LC1013
	.word	__func__.62293
	.word	.LC1589
	.word	.LC1594
	.byte	84
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62214, %object
	.size	descriptor.62214, 24
descriptor.62214:
	.word	.LC1013
	.word	__func__.62215
	.word	.LC1589
	.word	.LC1598
	.byte	227
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62300, %object
	.size	descriptor.62300, 24
descriptor.62300:
	.word	.LC1013
	.word	__func__.62293
	.word	.LC1589
	.word	.LC1593
	.byte	89
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62256, %object
	.size	descriptor.62256, 24
descriptor.62256:
	.word	.LC1013
	.word	__func__.62257
	.word	.LC1589
	.word	.LC1597
	.byte	25
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62302, %object
	.size	descriptor.62302, 24
descriptor.62302:
	.word	.LC1013
	.word	__func__.62293
	.word	.LC1589
	.word	.LC1592
	.byte	102
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64865, %object
	.size	descriptor.64865, 24
descriptor.64865:
	.word	.LC1013
	.word	__func__.64866
	.word	.LC1481
	.word	.LC1521
	.byte	91
	.byte	13
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64495, %object
	.size	descriptor.64495, 24
descriptor.64495:
	.word	.LC1013
	.word	__func__.64494
	.word	.LC1481
	.word	.LC1541
	.byte	222
	.byte	10
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64479, %object
	.size	descriptor.64479, 24
descriptor.64479:
	.word	.LC1013
	.word	__func__.64480
	.word	.LC1481
	.word	.LC1542
	.byte	188
	.byte	10
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53315, %object
	.size	descriptor.53315, 24
descriptor.53315:
	.word	.LC1013
	.word	__func__.53316
	.word	.LC1733
	.word	.LC147
	.byte	91
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38915, %object
	.size	descriptor.38915, 24
descriptor.38915:
	.word	.LC1013
	.word	__func__.38916
	.word	.LC1773
	.word	.LC148
	.byte	222
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38917, %object
	.size	descriptor.38917, 24
descriptor.38917:
	.word	.LC1013
	.word	__func__.38916
	.word	.LC1773
	.word	.LC149
	.byte	225
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38931, %object
	.size	descriptor.38931, 24
descriptor.38931:
	.word	.LC1013
	.word	__func__.38916
	.word	.LC1773
	.word	.LC16
	.byte	25
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38883, %object
	.size	descriptor.38883, 24
descriptor.38883:
	.word	.LC1013
	.word	__func__.38884
	.word	.LC1773
	.word	.LC152
	.byte	153
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38896, %object
	.size	descriptor.38896, 24
descriptor.38896:
	.word	.LC1013
	.word	__func__.38884
	.word	.LC1773
	.word	.LC154
	.byte	178
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38902, %object
	.size	descriptor.38902, 24
descriptor.38902:
	.word	.LC1013
	.word	__func__.38884
	.word	.LC1773
	.word	.LC156
	.byte	204
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57454, %object
	.size	descriptor.57454, 24
descriptor.57454:
	.word	.LC1013
	.word	__func__.57455
	.word	.LC1662
	.word	.LC1673
	.byte	251
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44788, %object
	.size	descriptor.44788, 24
descriptor.44788:
	.word	.LC1013
	.word	__func__.44789
	.word	.LC31
	.word	.LC159
	.byte	37
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44760, %object
	.size	descriptor.44760, 24
descriptor.44760:
	.word	.LC1013
	.word	__func__.44761
	.word	.LC31
	.word	.LC160
	.byte	210
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44762, %object
	.size	descriptor.44762, 24
descriptor.44762:
	.word	.LC1013
	.word	__func__.44761
	.word	.LC31
	.word	.LC161
	.byte	212
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44766, %object
	.size	descriptor.44766, 24
descriptor.44766:
	.word	.LC1013
	.word	__func__.44761
	.word	.LC31
	.word	.LC162
	.byte	222
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44770, %object
	.size	descriptor.44770, 24
descriptor.44770:
	.word	.LC1013
	.word	__func__.44761
	.word	.LC31
	.word	.LC161
	.byte	237
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44790, %object
	.size	descriptor.44790, 24
descriptor.44790:
	.word	.LC1013
	.word	__func__.44789
	.word	.LC31
	.word	.LC163
	.byte	47
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38750, %object
	.size	descriptor.38750, 24
descriptor.38750:
	.word	.LC1013
	.word	__func__.38751
	.word	.LC1773
	.word	.LC164
	.byte	73
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47223, %object
	.size	descriptor.47223, 24
descriptor.47223:
	.word	.LC1013
	.word	__func__.47224
	.word	.LC709
	.word	.LC166
	.byte	0
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31974, %object
	.size	descriptor.31974, 24
descriptor.31974:
	.word	.LC1013
	.word	__func__.31975
	.word	.LC1783
	.word	.LC169
	.byte	170
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37276, %object
	.size	descriptor.37276, 24
descriptor.37276:
	.word	.LC1013
	.word	__func__.37277
	.word	.LC1778
	.word	.LC16
	.byte	89
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48208, %object
	.size	descriptor.48208, 24
descriptor.48208:
	.word	.LC1013
	.word	__func__.48209
	.word	.LC1760
	.word	.LC171
	.byte	159
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48217, %object
	.size	descriptor.48217, 24
descriptor.48217:
	.word	.LC1013
	.word	__func__.48209
	.word	.LC1760
	.word	.LC173
	.byte	182
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48284, %object
	.size	descriptor.48284, 24
descriptor.48284:
	.word	.LC1013
	.word	__func__.48283
	.word	.LC1760
	.word	.LC176
	.byte	157
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48599, %object
	.size	descriptor.48599, 24
descriptor.48599:
	.word	.LC1013
	.word	__func__.48600
	.word	.LC1757
	.word	.LC171
	.byte	133
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48592, %object
	.size	descriptor.48592, 24
descriptor.48592:
	.word	.LC1013
	.word	__func__.48593
	.word	.LC1757
	.word	.LC171
	.byte	107
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51956, %object
	.size	descriptor.51956, 24
descriptor.51956:
	.word	.LC1013
	.word	__func__.51957
	.word	.LC1747
	.word	.LC178
	.byte	89
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52425, %object
	.size	descriptor.52425, 24
descriptor.52425:
	.word	.LC1013
	.word	__func__.52426
	.word	.LC1742
	.word	.LC179
	.byte	155
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31080, %object
	.size	descriptor.31080, 24
descriptor.31080:
	.word	.LC1013
	.word	__func__.31081
	.word	.LC1784
	.word	.LC207
	.byte	79
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49674, %object
	.size	descriptor.49674, 24
descriptor.49674:
	.word	.LC1013
	.word	__func__.49673
	.word	.LC1752
	.word	.LC209
	.byte	46
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31891, %object
	.size	descriptor.31891, 24
descriptor.31891:
	.word	.LC1013
	.word	__func__.31892
	.word	.LC1783
	.word	.LC215
	.byte	200
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31786, %object
	.size	descriptor.31786, 24
descriptor.31786:
	.word	.LC1013
	.word	__func__.31787
	.word	.LC1783
	.word	.LC217
	.byte	194
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38055, %object
	.size	descriptor.38055, 24
descriptor.38055:
	.word	.LC1013
	.word	__func__.38056
	.word	.LC1775
	.word	.LC219
	.byte	236
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31831, %object
	.size	descriptor.31831, 24
descriptor.31831:
	.word	.LC1013
	.word	__func__.31832
	.word	.LC1783
	.word	.LC16
	.byte	93
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31866, %object
	.size	descriptor.31866, 24
descriptor.31866:
	.word	.LC1013
	.word	__func__.31867
	.word	.LC1783
	.word	.LC225
	.byte	159
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48575, %object
	.size	descriptor.48575, 24
descriptor.48575:
	.word	.LC1013
	.word	__func__.48576
	.word	.LC1757
	.word	.LC228
	.byte	47
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48577, %object
	.size	descriptor.48577, 24
descriptor.48577:
	.word	.LC1013
	.word	__func__.48576
	.word	.LC1757
	.word	.LC229
	.byte	53
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38032, %object
	.size	descriptor.38032, 24
descriptor.38032:
	.word	.LC1013
	.word	__func__.38033
	.word	.LC1775
	.word	.LC231
	.byte	193
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48659, %object
	.size	descriptor.48659, 24
descriptor.48659:
	.word	.LC1013
	.word	__func__.48660
	.word	.LC1757
	.word	.LC232
	.byte	89
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57394, %object
	.size	descriptor.57394, 24
descriptor.57394:
	.word	.LC1013
	.word	__func__.57393
	.word	.LC1662
	.word	.LC1656
	.byte	7
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57395, %object
	.size	descriptor.57395, 24
descriptor.57395:
	.word	.LC1013
	.word	__func__.57393
	.word	.LC1662
	.word	.LC1689
	.byte	15
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57396, %object
	.size	descriptor.57396, 24
descriptor.57396:
	.word	.LC1013
	.word	__func__.57393
	.word	.LC1662
	.word	.LC1688
	.byte	24
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63036, %object
	.size	descriptor.63036, 24
descriptor.63036:
	.word	.LC1013
	.word	__func__.63037
	.word	.LC1582
	.word	.LC1584
	.byte	239
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63038, %object
	.size	descriptor.63038, 24
descriptor.63038:
	.word	.LC1013
	.word	__func__.63037
	.word	.LC1582
	.word	.LC1583
	.byte	250
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55786, %object
	.size	descriptor.55786, 24
descriptor.55786:
	.word	.LC1013
	.word	__func__.55787
	.word	.LC56
	.word	.LC250
	.byte	163
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55427, %object
	.size	descriptor.55427, 24
descriptor.55427:
	.word	.LC1013
	.word	__func__.55428
	.word	.LC56
	.word	.LC251
	.byte	68
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54380, %object
	.size	descriptor.54380, 24
descriptor.54380:
	.word	.LC1013
	.word	__func__.54381
	.word	.LC1729
	.word	.LC252
	.byte	123
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54382, %object
	.size	descriptor.54382, 24
descriptor.54382:
	.word	.LC1013
	.word	__func__.54381
	.word	.LC1729
	.word	.LC253
	.byte	134
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54383, %object
	.size	descriptor.54383, 24
descriptor.54383:
	.word	.LC1013
	.word	__func__.54381
	.word	.LC1729
	.word	.LC254
	.byte	139
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54388, %object
	.size	descriptor.54388, 24
descriptor.54388:
	.word	.LC1013
	.word	__func__.54381
	.word	.LC1729
	.word	.LC255
	.byte	160
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54435, %object
	.size	descriptor.54435, 24
descriptor.54435:
	.word	.LC1013
	.word	__func__.54436
	.word	.LC1729
	.word	.LC257
	.byte	50
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53243, %object
	.size	descriptor.53243, 24
descriptor.53243:
	.word	.LC1013
	.word	__func__.53244
	.word	.LC1733
	.word	.LC16
	.byte	76
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53245, %object
	.size	descriptor.53245, 24
descriptor.53245:
	.word	.LC1013
	.word	__func__.53244
	.word	.LC1733
	.word	.LC258
	.byte	83
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53057, %object
	.size	descriptor.53057, 24
descriptor.53057:
	.word	.LC1013
	.word	__func__.53058
	.word	.LC1736
	.word	.LC260
	.byte	131
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52737, %object
	.size	descriptor.52737, 24
descriptor.52737:
	.word	.LC1013
	.word	__func__.52738
	.word	.LC1737
	.word	.LC264
	.byte	55
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49689, %object
	.size	descriptor.49689, 24
descriptor.49689:
	.word	.LC1013
	.word	__func__.49690
	.word	.LC1752
	.word	.LC266
	.byte	73
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51967, %object
	.size	descriptor.51967, 24
descriptor.51967:
	.word	.LC1013
	.word	__func__.51968
	.word	.LC1747
	.word	.LC178
	.byte	109
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52055, %object
	.size	descriptor.52055, 24
descriptor.52055:
	.word	.LC1013
	.word	__func__.52056
	.word	.LC1747
	.word	.LC273
	.byte	74
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52593, %object
	.size	descriptor.52593, 24
descriptor.52593:
	.word	.LC1013
	.word	__func__.52594
	.word	.LC1742
	.word	.LC275
	.byte	125
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51339, %object
	.size	descriptor.51339, 24
descriptor.51339:
	.word	.LC1013
	.word	__func__.51340
	.word	.LC1748
	.word	.LC281
	.byte	13
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58515, %object
	.size	descriptor.58515, 24
descriptor.58515:
	.word	.LC1013
	.word	__func__.58516
	.word	.LC1634
	.word	.LC1635
	.byte	12
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49715, %object
	.size	descriptor.49715, 24
descriptor.49715:
	.word	.LC1013
	.word	__func__.49716
	.word	.LC1752
	.word	.LC285
	.byte	122
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49717, %object
	.size	descriptor.49717, 24
descriptor.49717:
	.word	.LC1013
	.word	__func__.49716
	.word	.LC1752
	.word	.LC286
	.byte	136
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50036, %object
	.size	descriptor.50036, 24
descriptor.50036:
	.word	.LC1013
	.word	__func__.50037
	.word	.LC1751
	.word	.LC292
	.byte	136
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50039, %object
	.size	descriptor.50039, 24
descriptor.50039:
	.word	.LC1013
	.word	__func__.50037
	.word	.LC1751
	.word	.LC294
	.byte	149
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58244, %object
	.size	descriptor.58244, 24
descriptor.58244:
	.word	.LC1013
	.word	__func__.58239
	.word	.LC1638
	.word	.LC1639
	.byte	196
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57584, %object
	.size	descriptor.57584, 24
descriptor.57584:
	.word	.LC1013
	.word	__func__.57585
	.word	.LC1662
	.word	.LC1663
	.byte	162
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38458, %object
	.size	descriptor.38458, 24
descriptor.38458:
	.word	.LC1013
	.word	__func__.38459
	.word	.LC1775
	.word	.LC304
	.byte	41
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49990, %object
	.size	descriptor.49990, 24
descriptor.49990:
	.word	.LC1013
	.word	__func__.49991
	.word	.LC1751
	.word	.LC306
	.byte	249
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49996, %object
	.size	descriptor.49996, 24
descriptor.49996:
	.word	.LC1013
	.word	__func__.49991
	.word	.LC1751
	.word	.LC309
	.byte	13
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50003, %object
	.size	descriptor.50003, 24
descriptor.50003:
	.word	.LC1013
	.word	__func__.49991
	.word	.LC1751
	.word	.LC310
	.byte	17
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50007, %object
	.size	descriptor.50007, 24
descriptor.50007:
	.word	.LC1013
	.word	__func__.49991
	.word	.LC1751
	.word	.LC312
	.byte	36
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50008, %object
	.size	descriptor.50008, 24
descriptor.50008:
	.word	.LC1013
	.word	__func__.49991
	.word	.LC1751
	.word	.LC314
	.byte	46
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55555, %object
	.size	descriptor.55555, 24
descriptor.55555:
	.word	.LC1013
	.word	__func__.55556
	.word	.LC56
	.word	.LC315
	.byte	94
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55557, %object
	.size	descriptor.55557, 24
descriptor.55557:
	.word	.LC1013
	.word	__func__.55556
	.word	.LC56
	.word	.LC316
	.byte	97
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55558, %object
	.size	descriptor.55558, 24
descriptor.55558:
	.word	.LC1013
	.word	__func__.55556
	.word	.LC56
	.word	.LC317
	.byte	105
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55568, %object
	.size	descriptor.55568, 24
descriptor.55568:
	.word	.LC1013
	.word	__func__.55556
	.word	.LC56
	.word	.LC318
	.byte	128
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55575, %object
	.size	descriptor.55575, 24
descriptor.55575:
	.word	.LC1013
	.word	__func__.55556
	.word	.LC56
	.word	.LC319
	.byte	139
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55576, %object
	.size	descriptor.55576, 24
descriptor.55576:
	.word	.LC1013
	.word	__func__.55556
	.word	.LC56
	.word	.LC320
	.byte	151
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55577, %object
	.size	descriptor.55577, 24
descriptor.55577:
	.word	.LC1013
	.word	__func__.55556
	.word	.LC56
	.word	.LC321
	.byte	160
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54216, %object
	.size	descriptor.54216, 24
descriptor.54216:
	.word	.LC1013
	.word	__func__.54217
	.word	.LC1729
	.word	.LC322
	.byte	52
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54218, %object
	.size	descriptor.54218, 24
descriptor.54218:
	.word	.LC1013
	.word	__func__.54217
	.word	.LC1729
	.word	.LC323
	.byte	60
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54227, %object
	.size	descriptor.54227, 24
descriptor.54227:
	.word	.LC1013
	.word	__func__.54217
	.word	.LC1729
	.word	.LC318
	.byte	87
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54234, %object
	.size	descriptor.54234, 24
descriptor.54234:
	.word	.LC1013
	.word	__func__.54217
	.word	.LC1729
	.word	.LC320
	.byte	112
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54235, %object
	.size	descriptor.54235, 24
descriptor.54235:
	.word	.LC1013
	.word	__func__.54217
	.word	.LC1729
	.word	.LC324
	.byte	128
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53423, %object
	.size	descriptor.53423, 24
descriptor.53423:
	.word	.LC1013
	.word	__func__.53424
	.word	.LC1733
	.word	.LC304
	.byte	83
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53431, %object
	.size	descriptor.53431, 24
descriptor.53431:
	.word	.LC1013
	.word	__func__.53424
	.word	.LC1733
	.word	.LC304
	.byte	96
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52957, %object
	.size	descriptor.52957, 24
descriptor.52957:
	.word	.LC1013
	.word	__func__.52958
	.word	.LC1736
	.word	.LC325
	.byte	64
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52959, %object
	.size	descriptor.52959, 24
descriptor.52959:
	.word	.LC1013
	.word	__func__.52958
	.word	.LC1736
	.word	.LC326
	.byte	76
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52971, %object
	.size	descriptor.52971, 24
descriptor.52971:
	.word	.LC1013
	.word	__func__.52958
	.word	.LC1736
	.word	.LC327
	.byte	97
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52972, %object
	.size	descriptor.52972, 24
descriptor.52972:
	.word	.LC1013
	.word	__func__.52958
	.word	.LC1736
	.word	.LC318
	.byte	102
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52979, %object
	.size	descriptor.52979, 24
descriptor.52979:
	.word	.LC1013
	.word	__func__.52958
	.word	.LC1736
	.word	.LC320
	.byte	120
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52980, %object
	.size	descriptor.52980, 24
descriptor.52980:
	.word	.LC1013
	.word	__func__.52958
	.word	.LC1736
	.word	.LC328
	.byte	133
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38482, %object
	.size	descriptor.38482, 24
descriptor.38482:
	.word	.LC1013
	.word	__func__.38483
	.word	.LC1775
	.word	.LC304
	.byte	95
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50019, %object
	.size	descriptor.50019, 24
descriptor.50019:
	.word	.LC1013
	.word	__func__.50020
	.word	.LC1751
	.word	.LC335
	.byte	64
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50021, %object
	.size	descriptor.50021, 24
descriptor.50021:
	.word	.LC1013
	.word	__func__.50020
	.word	.LC1751
	.word	.LC336
	.byte	67
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50022, %object
	.size	descriptor.50022, 24
descriptor.50022:
	.word	.LC1013
	.word	__func__.50020
	.word	.LC1751
	.word	.LC337
	.byte	72
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50023, %object
	.size	descriptor.50023, 24
descriptor.50023:
	.word	.LC1013
	.word	__func__.50020
	.word	.LC1751
	.word	.LC339
	.byte	83
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50027, %object
	.size	descriptor.50027, 24
descriptor.50027:
	.word	.LC1013
	.word	__func__.50020
	.word	.LC1751
	.word	.LC344
	.byte	125
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64997, %object
	.size	descriptor.64997, 24
descriptor.64997:
	.word	.LC1013
	.word	__func__.64998
	.word	.LC1481
	.word	.LC1520
	.byte	156
	.byte	14
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64999, %object
	.size	descriptor.64999, 24
descriptor.64999:
	.word	.LC1013
	.word	__func__.64998
	.word	.LC1481
	.word	.LC1519
	.byte	160
	.byte	14
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48540, %object
	.size	descriptor.48540, 24
descriptor.48540:
	.word	.LC1013
	.word	__func__.48541
	.word	.LC1757
	.word	.LC353
	.byte	216
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48547, %object
	.size	descriptor.48547, 24
descriptor.48547:
	.word	.LC1013
	.word	__func__.48541
	.word	.LC1757
	.word	.LC354
	.byte	229
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48336, %object
	.size	descriptor.48336, 24
descriptor.48336:
	.word	.LC1013
	.word	__func__.48337
	.word	.LC1760
	.word	.LC178
	.byte	68
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48338, %object
	.size	descriptor.48338, 24
descriptor.48338:
	.word	.LC1013
	.word	__func__.48337
	.word	.LC1760
	.word	.LC360
	.byte	74
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48718, %object
	.size	descriptor.48718, 24
descriptor.48718:
	.word	.LC1013
	.word	__func__.48719
	.word	.LC1757
	.word	.LC178
	.byte	18
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48704, %object
	.size	descriptor.48704, 24
descriptor.48704:
	.word	.LC1013
	.word	__func__.48705
	.word	.LC1757
	.word	.LC178
	.byte	249
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49380, %object
	.size	descriptor.49380, 24
descriptor.49380:
	.word	.LC1013
	.word	__func__.49381
	.word	.LC1756
	.word	.LC178
	.byte	23
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49782, %object
	.size	descriptor.49782, 24
descriptor.49782:
	.word	.LC1013
	.word	__func__.49783
	.word	.LC1752
	.word	.LC178
	.byte	41
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49767, %object
	.size	descriptor.49767, 24
descriptor.49767:
	.word	.LC1013
	.word	__func__.49768
	.word	.LC1752
	.word	.LC178
	.byte	8
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50982, %object
	.size	descriptor.50982, 24
descriptor.50982:
	.word	.LC1013
	.word	__func__.50983
	.word	.LC1749
	.word	.LC178
	.byte	126
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48649, %object
	.size	descriptor.48649, 24
descriptor.48649:
	.word	.LC1013
	.word	__func__.48650
	.word	.LC1757
	.word	.LC232
	.byte	60
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48651, %object
	.size	descriptor.48651, 24
descriptor.48651:
	.word	.LC1013
	.word	__func__.48650
	.word	.LC1757
	.word	.LC286
	.byte	70
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49137, %object
	.size	descriptor.49137, 24
descriptor.49137:
	.word	.LC1013
	.word	__func__.49138
	.word	.LC1756
	.word	.LC362
	.byte	86
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49142, %object
	.size	descriptor.49142, 24
descriptor.49142:
	.word	.LC1013
	.word	__func__.49138
	.word	.LC1756
	.word	.LC363
	.byte	94
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49359, %object
	.size	descriptor.49359, 24
descriptor.49359:
	.word	.LC1013
	.word	__func__.49360
	.word	.LC1756
	.word	.LC364
	.byte	193
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57824, %object
	.size	descriptor.57824, 24
descriptor.57824:
	.word	.LC1013
	.word	__func__.57825
	.word	.LC1652
	.word	.LC364
	.byte	116
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49350, %object
	.size	descriptor.49350, 24
descriptor.49350:
	.word	.LC1013
	.word	__func__.49351
	.word	.LC1756
	.word	.LC366
	.byte	179
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57815, %object
	.size	descriptor.57815, 24
descriptor.57815:
	.word	.LC1013
	.word	__func__.57816
	.word	.LC1652
	.word	.LC366
	.byte	100
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49333, %object
	.size	descriptor.49333, 24
descriptor.49333:
	.word	.LC1013
	.word	__func__.49329
	.word	.LC1756
	.word	.LC371
	.byte	104
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49334, %object
	.size	descriptor.49334, 24
descriptor.49334:
	.word	.LC1013
	.word	__func__.49329
	.word	.LC1756
	.word	.LC374
	.byte	157
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57717, %object
	.size	descriptor.57717, 24
descriptor.57717:
	.word	.LC1013
	.word	__func__.57718
	.word	.LC1652
	.word	.LC1659
	.byte	207
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57665, %object
	.size	descriptor.57665, 24
descriptor.57665:
	.word	.LC1013
	.word	__func__.57666
	.word	.LC1652
	.word	.LC111
	.byte	100
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57672, %object
	.size	descriptor.57672, 24
descriptor.57672:
	.word	.LC1013
	.word	__func__.57673
	.word	.LC1652
	.word	.LC111
	.byte	114
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57719, %object
	.size	descriptor.57719, 24
descriptor.57719:
	.word	.LC1013
	.word	__func__.57718
	.word	.LC1652
	.word	.LC1658
	.byte	81
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49370, %object
	.size	descriptor.49370, 24
descriptor.49370:
	.word	.LC1013
	.word	__func__.49371
	.word	.LC1756
	.word	.LC384
	.byte	214
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57694, %object
	.size	descriptor.57694, 24
descriptor.57694:
	.word	.LC1013
	.word	__func__.57695
	.word	.LC1652
	.word	.LC384
	.byte	156
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38519, %object
	.size	descriptor.38519, 24
descriptor.38519:
	.word	.LC1013
	.word	__func__.38520
	.word	.LC1775
	.word	.LC407
	.byte	238
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61890, %object
	.size	descriptor.61890, 24
descriptor.61890:
	.word	.LC1013
	.word	__func__.61891
	.word	.LC1615
	.word	.LC1616
	.byte	132
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45348, %object
	.size	descriptor.45348, 24
descriptor.45348:
	.word	.LC1013
	.word	__func__.45349
	.word	.LC1770
	.word	.LC437
	.byte	221
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64517, %object
	.size	descriptor.64517, 24
descriptor.64517:
	.word	.LC1013
	.word	__func__.64518
	.word	.LC1481
	.word	.LC1540
	.byte	13
	.byte	11
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45533, %object
	.size	descriptor.45533, 24
descriptor.45533:
	.word	.LC1013
	.word	__func__.45534
	.word	.LC87
	.word	.LC490
	.byte	219
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45537, %object
	.size	descriptor.45537, 24
descriptor.45537:
	.word	.LC1013
	.word	__func__.45534
	.word	.LC87
	.word	.LC495
	.byte	240
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45401, %object
	.size	descriptor.45401, 24
descriptor.45401:
	.word	.LC1013
	.word	__func__.45402
	.word	.LC1770
	.word	.LC545
	.byte	130
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45403, %object
	.size	descriptor.45403, 24
descriptor.45403:
	.word	.LC1013
	.word	__func__.45402
	.word	.LC1770
	.word	.LC546
	.byte	135
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45434, %object
	.size	descriptor.45434, 24
descriptor.45434:
	.word	.LC1013
	.word	__func__.45435
	.word	.LC1770
	.word	.LC547
	.byte	221
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45436, %object
	.size	descriptor.45436, 24
descriptor.45436:
	.word	.LC1013
	.word	__func__.45435
	.word	.LC1770
	.word	.LC548
	.byte	225
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45617, %object
	.size	descriptor.45617, 24
descriptor.45617:
	.word	.LC1013
	.word	__func__.45618
	.word	.LC87
	.word	.LC549
	.byte	171
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45609, %object
	.size	descriptor.45609, 24
descriptor.45609:
	.word	.LC1013
	.word	__func__.45610
	.word	.LC87
	.word	.LC549
	.byte	150
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45971, %object
	.size	descriptor.45971, 24
descriptor.45971:
	.word	.LC1013
	.word	__func__.45972
	.word	.LC87
	.word	.LC550
	.byte	187
	.byte	8
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45973, %object
	.size	descriptor.45973, 24
descriptor.45973:
	.word	.LC1013
	.word	__func__.45972
	.word	.LC87
	.word	.LC551
	.byte	191
	.byte	8
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45739, %object
	.size	descriptor.45739, 24
descriptor.45739:
	.word	.LC1013
	.word	__func__.45740
	.word	.LC87
	.word	.LC552
	.byte	161
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45741, %object
	.size	descriptor.45741, 24
descriptor.45741:
	.word	.LC1013
	.word	__func__.45740
	.word	.LC87
	.word	.LC553
	.byte	164
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54308, %object
	.size	descriptor.54308, 24
descriptor.54308:
	.word	.LC1013
	.word	__func__.54309
	.word	.LC1729
	.word	.LC554
	.byte	100
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54310, %object
	.size	descriptor.54310, 24
descriptor.54310:
	.word	.LC1013
	.word	__func__.54309
	.word	.LC1729
	.word	.LC555
	.byte	102
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54312, %object
	.size	descriptor.54312, 24
descriptor.54312:
	.word	.LC1013
	.word	__func__.54309
	.word	.LC1729
	.word	.LC320
	.byte	125
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54313, %object
	.size	descriptor.54313, 24
descriptor.54313:
	.word	.LC1013
	.word	__func__.54309
	.word	.LC1729
	.word	.LC556
	.byte	128
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54320, %object
	.size	descriptor.54320, 24
descriptor.54320:
	.word	.LC1013
	.word	__func__.54309
	.word	.LC1729
	.word	.LC557
	.byte	166
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54323, %object
	.size	descriptor.54323, 24
descriptor.54323:
	.word	.LC1013
	.word	__func__.54309
	.word	.LC1729
	.word	.LC558
	.byte	175
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57561, %object
	.size	descriptor.57561, 24
descriptor.57561:
	.word	.LC1013
	.word	__func__.57562
	.word	.LC1662
	.word	.LC1665
	.byte	66
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57288, %object
	.size	descriptor.57288, 24
descriptor.57288:
	.word	.LC1013
	.word	__func__.57287
	.word	.LC1662
	.word	.LC1699
	.byte	186
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57274, %object
	.size	descriptor.57274, 24
descriptor.57274:
	.word	.LC1013
	.word	__func__.57275
	.word	.LC1662
	.word	.LC1702
	.byte	125
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57279, %object
	.size	descriptor.57279, 24
descriptor.57279:
	.word	.LC1013
	.word	__func__.57275
	.word	.LC1662
	.word	.LC1701
	.byte	148
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57280, %object
	.size	descriptor.57280, 24
descriptor.57280:
	.word	.LC1013
	.word	__func__.57275
	.word	.LC1662
	.word	.LC1700
	.byte	171
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57563, %object
	.size	descriptor.57563, 24
descriptor.57563:
	.word	.LC1013
	.word	__func__.57562
	.word	.LC1662
	.word	.LC1664
	.byte	114
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62087, %object
	.size	descriptor.62087, 24
descriptor.62087:
	.word	.LC1013
	.word	__func__.62088
	.word	.LC1589
	.word	.LC1603
	.byte	10
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62111, %object
	.size	descriptor.62111, 24
descriptor.62111:
	.word	.LC1013
	.word	__func__.62112
	.word	.LC1589
	.word	.LC1601
	.byte	66
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62119, %object
	.size	descriptor.62119, 24
descriptor.62119:
	.word	.LC1013
	.word	__func__.62112
	.word	.LC1589
	.word	.LC1600
	.byte	80
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25194, %object
	.size	descriptor.25194, 24
descriptor.25194:
	.word	.LC1013
	.word	__func__.25195
	.word	.LC583
	.word	.LC581
	.byte	97
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25199, %object
	.size	descriptor.25199, 24
descriptor.25199:
	.word	.LC1013
	.word	__func__.25195
	.word	.LC583
	.word	.LC582
	.byte	103
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37429, %object
	.size	descriptor.37429, 24
descriptor.37429:
	.word	.LC1013
	.word	__func__.37430
	.word	.LC1778
	.word	.LC594
	.byte	220
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40929, %object
	.size	descriptor.40929, 24
descriptor.40929:
	.word	.LC1013
	.word	__func__.40930
	.word	.LC1772
	.word	.LC595
	.byte	69
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50053, %object
	.size	descriptor.50053, 24
descriptor.50053:
	.word	.LC1013
	.word	__func__.50049
	.word	.LC1751
	.word	.LC597
	.byte	178
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50898, %object
	.size	descriptor.50898, 24
descriptor.50898:
	.word	.LC1013
	.word	__func__.50897
	.word	.LC1749
	.word	.LC598
	.byte	163
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50910, %object
	.size	descriptor.50910, 24
descriptor.50910:
	.word	.LC1013
	.word	__func__.50911
	.word	.LC1749
	.word	.LC599
	.byte	181
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51911, %object
	.size	descriptor.51911, 24
descriptor.51911:
	.word	.LC1013
	.word	__func__.51910
	.word	.LC1747
	.word	.LC598
	.byte	222
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57782, %object
	.size	descriptor.57782, 24
descriptor.57782:
	.word	.LC1013
	.word	__func__.57783
	.word	.LC1652
	.word	.LC113
	.byte	27
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53402, %object
	.size	descriptor.53402, 24
descriptor.53402:
	.word	.LC1013
	.word	__func__.53403
	.word	.LC1733
	.word	.LC304
	.byte	49
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53404, %object
	.size	descriptor.53404, 24
descriptor.53404:
	.word	.LC1013
	.word	__func__.53403
	.word	.LC1733
	.word	.LC605
	.byte	53
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53302, %object
	.size	descriptor.53302, 24
descriptor.53302:
	.word	.LC1013
	.word	__func__.53303
	.word	.LC1733
	.word	.LC606
	.byte	66
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53304, %object
	.size	descriptor.53304, 24
descriptor.53304:
	.word	.LC1013
	.word	__func__.53303
	.word	.LC1733
	.word	.LC304
	.byte	68
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53305, %object
	.size	descriptor.53305, 24
descriptor.53305:
	.word	.LC1013
	.word	__func__.53303
	.word	.LC1733
	.word	.LC607
	.byte	73
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30923, %object
	.size	descriptor.30923, 24
descriptor.30923:
	.word	.LC1013
	.word	__func__.30924
	.word	.LC1784
	.word	.LC608
	.byte	175
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30939, %object
	.size	descriptor.30939, 24
descriptor.30939:
	.word	.LC1013
	.word	__func__.30940
	.word	.LC1784
	.word	.LC609
	.byte	222
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38852, %object
	.size	descriptor.38852, 24
descriptor.38852:
	.word	.LC1013
	.word	__func__.38851
	.word	.LC1773
	.word	.LC610
	.byte	61
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38757, %object
	.size	descriptor.38757, 24
descriptor.38757:
	.word	.LC1013
	.word	__func__.38758
	.word	.LC1773
	.word	.LC612
	.byte	91
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38874, %object
	.size	descriptor.38874, 24
descriptor.38874:
	.word	.LC1013
	.word	__func__.38873
	.word	.LC1773
	.word	.LC152
	.byte	136
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48197, %object
	.size	descriptor.48197, 24
descriptor.48197:
	.word	.LC1013
	.word	__func__.48198
	.word	.LC1760
	.word	.LC171
	.byte	138
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51305, %object
	.size	descriptor.51305, 24
descriptor.51305:
	.word	.LC1013
	.word	__func__.51306
	.word	.LC1748
	.word	.LC614
	.byte	184
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52249, %object
	.size	descriptor.52249, 24
descriptor.52249:
	.word	.LC1013
	.word	__func__.52250
	.word	.LC1742
	.word	.LC615
	.byte	247
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52293, %object
	.size	descriptor.52293, 24
descriptor.52293:
	.word	.LC1013
	.word	__func__.52294
	.word	.LC1742
	.word	.LC599
	.byte	92
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37456, %object
	.size	descriptor.37456, 24
descriptor.37456:
	.word	.LC1013
	.word	__func__.37457
	.word	.LC1778
	.word	.LC285
	.byte	23
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51454, %object
	.size	descriptor.51454, 24
descriptor.51454:
	.word	.LC1013
	.word	__func__.51455
	.word	.LC1748
	.word	.LC599
	.byte	18
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51919, %object
	.size	descriptor.51919, 24
descriptor.51919:
	.word	.LC1013
	.word	__func__.51920
	.word	.LC1747
	.word	.LC599
	.byte	236
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52396, %object
	.size	descriptor.52396, 24
descriptor.52396:
	.word	.LC1013
	.word	__func__.52397
	.word	.LC1742
	.word	.LC599
	.byte	85
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44483, %object
	.size	descriptor.44483, 24
descriptor.44483:
	.word	.LC1013
	.word	__func__.44484
	.word	.LC31
	.word	.LC634
	.byte	5
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38789, %object
	.size	descriptor.38789, 24
descriptor.38789:
	.word	.LC1013
	.word	__func__.38790
	.word	.LC1773
	.word	.LC635
	.byte	144
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49556, %object
	.size	descriptor.49556, 24
descriptor.49556:
	.word	.LC1013
	.word	__func__.49557
	.word	.LC1756
	.word	.LC636
	.byte	45
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56267, %object
	.size	descriptor.56267, 24
descriptor.56267:
	.word	.LC1013
	.word	__func__.56268
	.word	.LC1725
	.word	.LC638
	.byte	188
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57806, %object
	.size	descriptor.57806, 24
descriptor.57806:
	.word	.LC1013
	.word	__func__.57807
	.word	.LC1652
	.word	.LC636
	.byte	89
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57799, %object
	.size	descriptor.57799, 24
descriptor.57799:
	.word	.LC1013
	.word	__func__.57800
	.word	.LC1652
	.word	.LC854
	.byte	75
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57740, %object
	.size	descriptor.57740, 24
descriptor.57740:
	.word	.LC1013
	.word	__func__.57741
	.word	.LC1652
	.word	.LC1656
	.byte	121
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57753, %object
	.size	descriptor.57753, 24
descriptor.57753:
	.word	.LC1013
	.word	__func__.57754
	.word	.LC1652
	.word	.LC1656
	.byte	166
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56451, %object
	.size	descriptor.56451, 24
descriptor.56451:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC654
	.byte	214
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56457, %object
	.size	descriptor.56457, 24
descriptor.56457:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC655
	.byte	224
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56459, %object
	.size	descriptor.56459, 24
descriptor.56459:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC656
	.byte	237
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56461, %object
	.size	descriptor.56461, 24
descriptor.56461:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC657
	.byte	244
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56463, %object
	.size	descriptor.56463, 24
descriptor.56463:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC658
	.byte	252
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56467, %object
	.size	descriptor.56467, 24
descriptor.56467:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC659
	.byte	19
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56469, %object
	.size	descriptor.56469, 24
descriptor.56469:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC660
	.byte	29
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56471, %object
	.size	descriptor.56471, 24
descriptor.56471:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC661
	.byte	39
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56473, %object
	.size	descriptor.56473, 24
descriptor.56473:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC662
	.byte	47
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56475, %object
	.size	descriptor.56475, 24
descriptor.56475:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC663
	.byte	61
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56477, %object
	.size	descriptor.56477, 24
descriptor.56477:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC664
	.byte	69
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56479, %object
	.size	descriptor.56479, 24
descriptor.56479:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC665
	.byte	76
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56483, %object
	.size	descriptor.56483, 24
descriptor.56483:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC666
	.byte	91
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56485, %object
	.size	descriptor.56485, 24
descriptor.56485:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC667
	.byte	101
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56495, %object
	.size	descriptor.56495, 24
descriptor.56495:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC668
	.byte	154
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56497, %object
	.size	descriptor.56497, 24
descriptor.56497:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC669
	.byte	165
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56499, %object
	.size	descriptor.56499, 24
descriptor.56499:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC670
	.byte	177
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56501, %object
	.size	descriptor.56501, 24
descriptor.56501:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC671
	.byte	189
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56503, %object
	.size	descriptor.56503, 24
descriptor.56503:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC672
	.byte	197
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56505, %object
	.size	descriptor.56505, 24
descriptor.56505:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC673
	.byte	204
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56507, %object
	.size	descriptor.56507, 24
descriptor.56507:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC674
	.byte	213
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56509, %object
	.size	descriptor.56509, 24
descriptor.56509:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC675
	.byte	222
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56511, %object
	.size	descriptor.56511, 24
descriptor.56511:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC676
	.byte	229
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52784, %object
	.size	descriptor.52784, 24
descriptor.52784:
	.word	.LC1013
	.word	__func__.52785
	.word	.LC1737
	.word	.LC683
	.byte	217
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52329, %object
	.size	descriptor.52329, 24
descriptor.52329:
	.word	.LC1013
	.word	__func__.52330
	.word	.LC1742
	.word	.LC120
	.byte	193
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52454, %object
	.size	descriptor.52454, 24
descriptor.52454:
	.word	.LC1013
	.word	__func__.52452
	.word	.LC1742
	.word	.LC598
	.byte	11
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49067, %object
	.size	descriptor.49067, 24
descriptor.49067:
	.word	.LC1013
	.word	__func__.49068
	.word	.LC1756
	.word	.LC687
	.byte	172
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49069, %object
	.size	descriptor.49069, 24
descriptor.49069:
	.word	.LC1013
	.word	__func__.49068
	.word	.LC1756
	.word	.LC688
	.byte	178
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47208, %object
	.size	descriptor.47208, 24
descriptor.47208:
	.word	.LC1013
	.word	__func__.47207
	.word	.LC709
	.word	.LC166
	.byte	192
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40874, %object
	.size	descriptor.40874, 24
descriptor.40874:
	.word	.LC1013
	.word	__func__.40875
	.word	.LC1772
	.word	.LC701
	.byte	199
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40892, %object
	.size	descriptor.40892, 24
descriptor.40892:
	.word	.LC1013
	.word	__func__.40893
	.word	.LC1772
	.word	.LC701
	.byte	226
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40913, %object
	.size	descriptor.40913, 24
descriptor.40913:
	.word	.LC1013
	.word	__func__.40914
	.word	.LC1772
	.word	.LC702
	.byte	18
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38862, %object
	.size	descriptor.38862, 24
descriptor.38862:
	.word	.LC1013
	.word	__func__.38861
	.word	.LC1773
	.word	.LC152
	.byte	108
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38828, %object
	.size	descriptor.38828, 24
descriptor.38828:
	.word	.LC1013
	.word	__func__.38829
	.word	.LC1773
	.word	.LC705
	.byte	243
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38836, %object
	.size	descriptor.38836, 24
descriptor.38836:
	.word	.LC1013
	.word	__func__.38829
	.word	.LC1773
	.word	.LC154
	.byte	16
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38839, %object
	.size	descriptor.38839, 24
descriptor.38839:
	.word	.LC1013
	.word	__func__.38829
	.word	.LC1773
	.word	.LC156
	.byte	27
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49921, %object
	.size	descriptor.49921, 24
descriptor.49921:
	.word	.LC1013
	.word	__func__.49920
	.word	.LC1751
	.word	.LC243
	.byte	107
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49925, %object
	.size	descriptor.49925, 24
descriptor.49925:
	.word	.LC1013
	.word	__func__.49920
	.word	.LC1751
	.word	.LC244
	.byte	122
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47528, %object
	.size	descriptor.47528, 24
descriptor.47528:
	.word	.LC1013
	.word	__func__.47529
	.word	.LC709
	.word	.LC710
	.byte	209
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56780, %object
	.size	descriptor.56780, 24
descriptor.56780:
	.word	.LC1013
	.word	__func__.56781
	.word	.LC1714
	.word	.LC711
	.byte	187
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62320, %object
	.size	descriptor.62320, 24
descriptor.62320:
	.word	.LC1013
	.word	__func__.62321
	.word	.LC1589
	.word	.LC1591
	.byte	139
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62334, %object
	.size	descriptor.62334, 24
descriptor.62334:
	.word	.LC1013
	.word	__func__.62321
	.word	.LC1589
	.word	.LC1590
	.byte	227
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46082, %object
	.size	descriptor.46082, 24
descriptor.46082:
	.word	.LC1013
	.word	__func__.46083
	.word	.LC87
	.word	.LC723
	.byte	72
	.byte	11
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51492, %object
	.size	descriptor.51492, 24
descriptor.51492:
	.word	.LC1013
	.word	__func__.51493
	.word	.LC1748
	.word	.LC725
	.byte	96
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50969, %object
	.size	descriptor.50969, 24
descriptor.50969:
	.word	.LC1013
	.word	__func__.50970
	.word	.LC1749
	.word	.LC178
	.byte	98
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55420, %object
	.size	descriptor.55420, 24
descriptor.55420:
	.word	.LC1013
	.word	__func__.55421
	.word	.LC56
	.word	.LC727
	.byte	53
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44381, %object
	.size	descriptor.44381, 24
descriptor.44381:
	.word	.LC1013
	.word	__func__.44382
	.word	.LC31
	.word	.LC728
	.byte	150
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40864, %object
	.size	descriptor.40864, 24
descriptor.40864:
	.word	.LC1013
	.word	__func__.40865
	.word	.LC1772
	.word	.LC730
	.byte	175
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55589, %object
	.size	descriptor.55589, 24
descriptor.55589:
	.word	.LC1013
	.word	__func__.55590
	.word	.LC56
	.word	.LC731
	.byte	172
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55591, %object
	.size	descriptor.55591, 24
descriptor.55591:
	.word	.LC1013
	.word	__func__.55590
	.word	.LC56
	.word	.LC732
	.byte	175
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55592, %object
	.size	descriptor.55592, 24
descriptor.55592:
	.word	.LC1013
	.word	__func__.55590
	.word	.LC56
	.word	.LC733
	.byte	181
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55600, %object
	.size	descriptor.55600, 24
descriptor.55600:
	.word	.LC1013
	.word	__func__.55590
	.word	.LC56
	.word	.LC734
	.byte	214
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55603, %object
	.size	descriptor.55603, 24
descriptor.55603:
	.word	.LC1013
	.word	__func__.55590
	.word	.LC56
	.word	.LC735
	.byte	229
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51358, %object
	.size	descriptor.51358, 24
descriptor.51358:
	.word	.LC1013
	.word	__func__.51359
	.word	.LC1748
	.word	.LC615
	.byte	57
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51408, %object
	.size	descriptor.51408, 24
descriptor.51408:
	.word	.LC1013
	.word	__func__.51409
	.word	.LC1748
	.word	.LC599
	.byte	165
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30917, %object
	.size	descriptor.30917, 24
descriptor.30917:
	.word	.LC1013
	.word	__func__.30918
	.word	.LC1784
	.word	.LC736
	.byte	160
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30892, %object
	.size	descriptor.30892, 24
descriptor.30892:
	.word	.LC1013
	.word	__func__.30893
	.word	.LC1784
	.word	.LC737
	.byte	41
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30898, %object
	.size	descriptor.30898, 24
descriptor.30898:
	.word	.LC1013
	.word	__func__.30899
	.word	.LC1784
	.word	.LC738
	.byte	53
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45768, %object
	.size	descriptor.45768, 24
descriptor.45768:
	.word	.LC1013
	.word	__func__.45769
	.word	.LC87
	.word	.LC740
	.byte	126
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45770, %object
	.size	descriptor.45770, 24
descriptor.45770:
	.word	.LC1013
	.word	__func__.45769
	.word	.LC87
	.word	.LC741
	.byte	130
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57110, %object
	.size	descriptor.57110, 24
descriptor.57110:
	.word	.LC1013
	.word	__func__.57111
	.word	.LC1705
	.word	.LC746
	.byte	169
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57760, %object
	.size	descriptor.57760, 24
descriptor.57760:
	.word	.LC1013
	.word	__func__.57761
	.word	.LC1652
	.word	.LC1655
	.byte	225
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57080, %object
	.size	descriptor.57080, 24
descriptor.57080:
	.word	.LC1013
	.word	__func__.57081
	.word	.LC1705
	.word	.LC1710
	.byte	228
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57075, %object
	.size	descriptor.57075, 24
descriptor.57075:
	.word	.LC1013
	.word	__func__.57076
	.word	.LC1705
	.word	.LC1711
	.byte	221
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58147, %object
	.size	descriptor.58147, 24
descriptor.58147:
	.word	.LC1013
	.word	__func__.58148
	.word	.LC1638
	.word	.LC1642
	.byte	6
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58152, %object
	.size	descriptor.58152, 24
descriptor.58152:
	.word	.LC1013
	.word	__func__.58153
	.word	.LC1638
	.word	.LC1641
	.byte	13
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57520, %object
	.size	descriptor.57520, 24
descriptor.57520:
	.word	.LC1013
	.word	__func__.57521
	.word	.LC1662
	.word	.LC1670
	.byte	235
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57534, %object
	.size	descriptor.57534, 24
descriptor.57534:
	.word	.LC1013
	.word	__func__.57521
	.word	.LC1662
	.word	.LC1669
	.byte	16
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57541, %object
	.size	descriptor.57541, 24
descriptor.57541:
	.word	.LC1013
	.word	__func__.57521
	.word	.LC1662
	.word	.LC1668
	.byte	25
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57550, %object
	.size	descriptor.57550, 24
descriptor.57550:
	.word	.LC1013
	.word	__func__.57521
	.word	.LC1662
	.word	.LC1667
	.byte	39
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57551, %object
	.size	descriptor.57551, 24
descriptor.57551:
	.word	.LC1013
	.word	__func__.57521
	.word	.LC1662
	.word	.LC1666
	.byte	50
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62824, %object
	.size	descriptor.62824, 24
descriptor.62824:
	.word	.LC1013
	.word	__func__.62825
	.word	.LC1582
	.word	.LC1584
	.byte	88
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58349, %object
	.size	descriptor.58349, 24
descriptor.58349:
	.word	.LC1013
	.word	__func__.58350
	.word	.LC1634
	.word	.LC1636
	.byte	245
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53801, %object
	.size	descriptor.53801, 24
descriptor.53801:
	.word	.LC1013
	.word	__func__.53802
	.word	.LC1731
	.word	.LC766
	.byte	154
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45586, %object
	.size	descriptor.45586, 24
descriptor.45586:
	.word	.LC1013
	.word	__func__.45587
	.word	.LC87
	.word	.LC768
	.byte	83
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57978, %object
	.size	descriptor.57978, 24
descriptor.57978:
	.word	.LC1013
	.word	__func__.57979
	.word	.LC1648
	.word	.LC746
	.byte	35
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63482, %object
	.size	descriptor.63482, 24
descriptor.63482:
	.word	.LC1013
	.word	__func__.63483
	.word	.LC1575
	.word	.LC770
	.byte	154
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52992, %object
	.size	descriptor.52992, 24
descriptor.52992:
	.word	.LC1013
	.word	__func__.52993
	.word	.LC1736
	.word	.LC771
	.byte	147
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52994, %object
	.size	descriptor.52994, 24
descriptor.52994:
	.word	.LC1013
	.word	__func__.52993
	.word	.LC1736
	.word	.LC772
	.byte	154
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53002, %object
	.size	descriptor.53002, 24
descriptor.53002:
	.word	.LC1013
	.word	__func__.52993
	.word	.LC1736
	.word	.LC773
	.byte	183
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53005, %object
	.size	descriptor.53005, 24
descriptor.53005:
	.word	.LC1013
	.word	__func__.52993
	.word	.LC1736
	.word	.LC774
	.byte	204
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61821, %object
	.size	descriptor.61821, 24
descriptor.61821:
	.word	.LC1013
	.word	__func__.61820
	.word	.LC1615
	.word	.LC1623
	.byte	143
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61790, %object
	.size	descriptor.61790, 24
descriptor.61790:
	.word	.LC1013
	.word	__func__.61789
	.word	.LC1615
	.word	.LC1625
	.byte	199
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61822, %object
	.size	descriptor.61822, 24
descriptor.61822:
	.word	.LC1013
	.word	__func__.61820
	.word	.LC1615
	.word	.LC1622
	.byte	153
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61777, %object
	.size	descriptor.61777, 24
descriptor.61777:
	.word	.LC1013
	.word	__func__.61778
	.word	.LC1615
	.word	.LC1626
	.byte	128
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61802, %object
	.size	descriptor.61802, 24
descriptor.61802:
	.word	.LC1013
	.word	__func__.61801
	.word	.LC1615
	.word	.LC1624
	.byte	38
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61856, %object
	.size	descriptor.61856, 24
descriptor.61856:
	.word	.LC1013
	.word	__func__.61854
	.word	.LC1615
	.word	.LC1619
	.byte	19
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62099, %object
	.size	descriptor.62099, 24
descriptor.62099:
	.word	.LC1013
	.word	__func__.62098
	.word	.LC1589
	.word	.LC1602
	.byte	51
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62079, %object
	.size	descriptor.62079, 24
descriptor.62079:
	.word	.LC1013
	.word	__func__.62076
	.word	.LC1589
	.word	.LC1604
	.byte	245
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61840, %object
	.size	descriptor.61840, 24
descriptor.61840:
	.word	.LC1013
	.word	__func__.61838
	.word	.LC1615
	.word	.LC1621
	.byte	219
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61841, %object
	.size	descriptor.61841, 24
descriptor.61841:
	.word	.LC1013
	.word	__func__.61838
	.word	.LC1615
	.word	.LC1620
	.byte	232
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56644, %object
	.size	descriptor.56644, 24
descriptor.56644:
	.word	.LC1013
	.word	__func__.56645
	.word	.LC1714
	.word	.LC285
	.byte	166
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45422, %object
	.size	descriptor.45422, 24
descriptor.45422:
	.word	.LC1013
	.word	__func__.45423
	.word	.LC1770
	.word	.LC817
	.byte	176
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45353, %object
	.size	descriptor.45353, 24
descriptor.45353:
	.word	.LC1013
	.word	__func__.45354
	.word	.LC1770
	.word	.LC818
	.byte	233
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58159, %object
	.size	descriptor.58159, 24
descriptor.58159:
	.word	.LC1013
	.word	__func__.58160
	.word	.LC1638
	.word	.LC80
	.byte	32
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56665, %object
	.size	descriptor.56665, 24
descriptor.56665:
	.word	.LC1013
	.word	__func__.56666
	.word	.LC1714
	.word	.LC819
	.byte	203
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56352, %object
	.size	descriptor.56352, 24
descriptor.56352:
	.word	.LC1013
	.word	__func__.56353
	.word	.LC1725
	.word	.LC80
	.byte	237
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58184, %object
	.size	descriptor.58184, 24
descriptor.58184:
	.word	.LC1013
	.word	__func__.58185
	.word	.LC1638
	.word	.LC1640
	.byte	221
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51501, %object
	.size	descriptor.51501, 24
descriptor.51501:
	.word	.LC1013
	.word	__func__.51502
	.word	.LC1748
	.word	.LC178
	.byte	123
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52436, %object
	.size	descriptor.52436, 24
descriptor.52436:
	.word	.LC1013
	.word	__func__.52437
	.word	.LC1742
	.word	.LC178
	.byte	183
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49397, %object
	.size	descriptor.49397, 24
descriptor.49397:
	.word	.LC1013
	.word	__func__.49398
	.word	.LC1756
	.word	.LC178
	.byte	58
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47342, %object
	.size	descriptor.47342, 24
descriptor.47342:
	.word	.LC1013
	.word	__func__.47343
	.word	.LC709
	.word	.LC823
	.byte	143
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47350, %object
	.size	descriptor.47350, 24
descriptor.47350:
	.word	.LC1013
	.word	__func__.47343
	.word	.LC709
	.word	.LC824
	.byte	181
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57411, %object
	.size	descriptor.57411, 24
descriptor.57411:
	.word	.LC1013
	.word	__func__.57409
	.word	.LC1662
	.word	.LC1687
	.byte	56
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57414, %object
	.size	descriptor.57414, 24
descriptor.57414:
	.word	.LC1013
	.word	__func__.57409
	.word	.LC1662
	.word	.LC1686
	.byte	65
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57415, %object
	.size	descriptor.57415, 24
descriptor.57415:
	.word	.LC1013
	.word	__func__.57409
	.word	.LC1662
	.word	.LC1685
	.byte	68
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57417, %object
	.size	descriptor.57417, 24
descriptor.57417:
	.word	.LC1013
	.word	__func__.57409
	.word	.LC1662
	.word	.LC1684
	.byte	79
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57418, %object
	.size	descriptor.57418, 24
descriptor.57418:
	.word	.LC1013
	.word	__func__.57409
	.word	.LC1662
	.word	.LC1683
	.byte	86
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57424, %object
	.size	descriptor.57424, 24
descriptor.57424:
	.word	.LC1013
	.word	__func__.57409
	.word	.LC1662
	.word	.LC1682
	.byte	106
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57426, %object
	.size	descriptor.57426, 24
descriptor.57426:
	.word	.LC1013
	.word	__func__.57409
	.word	.LC1662
	.word	.LC1681
	.byte	114
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57428, %object
	.size	descriptor.57428, 24
descriptor.57428:
	.word	.LC1013
	.word	__func__.57409
	.word	.LC1662
	.word	.LC1680
	.byte	127
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57429, %object
	.size	descriptor.57429, 24
descriptor.57429:
	.word	.LC1013
	.word	__func__.57409
	.word	.LC1662
	.word	.LC1679
	.byte	134
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57431, %object
	.size	descriptor.57431, 24
descriptor.57431:
	.word	.LC1013
	.word	__func__.57409
	.word	.LC1662
	.word	.LC1678
	.byte	141
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57434, %object
	.size	descriptor.57434, 24
descriptor.57434:
	.word	.LC1013
	.word	__func__.57409
	.word	.LC1662
	.word	.LC1677
	.byte	163
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57435, %object
	.size	descriptor.57435, 24
descriptor.57435:
	.word	.LC1013
	.word	__func__.57409
	.word	.LC1662
	.word	.LC1676
	.byte	171
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57437, %object
	.size	descriptor.57437, 24
descriptor.57437:
	.word	.LC1013
	.word	__func__.57409
	.word	.LC1662
	.word	.LC1675
	.byte	178
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57439, %object
	.size	descriptor.57439, 24
descriptor.57439:
	.word	.LC1013
	.word	__func__.57409
	.word	.LC1662
	.word	.LC41
	.byte	185
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57442, %object
	.size	descriptor.57442, 24
descriptor.57442:
	.word	.LC1013
	.word	__func__.57409
	.word	.LC1662
	.word	.LC42
	.byte	189
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57445, %object
	.size	descriptor.57445, 24
descriptor.57445:
	.word	.LC1013
	.word	__func__.57409
	.word	.LC1662
	.word	.LC1674
	.byte	210
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62928, %object
	.size	descriptor.62928, 24
descriptor.62928:
	.word	.LC1013
	.word	__func__.62920
	.word	.LC1582
	.word	.LC1584
	.byte	115
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62931, %object
	.size	descriptor.62931, 24
descriptor.62931:
	.word	.LC1013
	.word	__func__.62920
	.word	.LC1582
	.word	.LC1585
	.byte	130
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38773, %object
	.size	descriptor.38773, 24
descriptor.38773:
	.word	.LC1013
	.word	__func__.38774
	.word	.LC1773
	.word	.LC635
	.byte	111
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49547, %object
	.size	descriptor.49547, 24
descriptor.49547:
	.word	.LC1013
	.word	__func__.49548
	.word	.LC1756
	.word	.LC854
	.byte	28
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53764, %object
	.size	descriptor.53764, 24
descriptor.53764:
	.word	.LC1013
	.word	__func__.53765
	.word	.LC1731
	.word	.LC856
	.byte	38
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54280, %object
	.size	descriptor.54280, 24
descriptor.54280:
	.word	.LC1013
	.word	__func__.54281
	.word	.LC1729
	.word	.LC858
	.byte	249
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54289, %object
	.size	descriptor.54289, 24
descriptor.54289:
	.word	.LC1013
	.word	__func__.54281
	.word	.LC1729
	.word	.LC859
	.byte	54
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54292, %object
	.size	descriptor.54292, 24
descriptor.54292:
	.word	.LC1013
	.word	__func__.54281
	.word	.LC1729
	.word	.LC860
	.byte	70
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54249, %object
	.size	descriptor.54249, 24
descriptor.54249:
	.word	.LC1013
	.word	__func__.54250
	.word	.LC1729
	.word	.LC861
	.byte	142
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54251, %object
	.size	descriptor.54251, 24
descriptor.54251:
	.word	.LC1013
	.word	__func__.54250
	.word	.LC1729
	.word	.LC862
	.byte	170
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54259, %object
	.size	descriptor.54259, 24
descriptor.54259:
	.word	.LC1013
	.word	__func__.54250
	.word	.LC1729
	.word	.LC863
	.byte	197
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54262, %object
	.size	descriptor.54262, 24
descriptor.54262:
	.word	.LC1013
	.word	__func__.54250
	.word	.LC1729
	.word	.LC864
	.byte	219
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58122, %object
	.size	descriptor.58122, 24
descriptor.58122:
	.word	.LC1013
	.word	__func__.58123
	.word	.LC1638
	.word	.LC865
	.byte	147
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56323, %object
	.size	descriptor.56323, 24
descriptor.56323:
	.word	.LC1013
	.word	__func__.56324
	.word	.LC1725
	.word	.LC865
	.byte	119
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38309, %object
	.size	descriptor.38309, 24
descriptor.38309:
	.word	.LC1013
	.word	__func__.38308
	.word	.LC1775
	.word	.LC870
	.byte	190
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38351, %object
	.size	descriptor.38351, 24
descriptor.38351:
	.word	.LC1013
	.word	__func__.38308
	.word	.LC1775
	.word	.LC871
	.byte	14
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37888, %object
	.size	descriptor.37888, 24
descriptor.37888:
	.word	.LC1013
	.word	__func__.37889
	.word	.LC1775
	.word	.LC872
	.byte	125
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37519, %object
	.size	descriptor.37519, 24
descriptor.37519:
	.word	.LC1013
	.word	__func__.37518
	.word	.LC1778
	.word	.LC875
	.byte	210
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25107, %object
	.size	descriptor.25107, 24
descriptor.25107:
	.word	.LC1013
	.word	__func__.25108
	.word	.LC583
	.word	.LC878
	.byte	109
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46209, %object
	.size	descriptor.46209, 24
descriptor.46209:
	.word	.LC1013
	.word	__func__.46210
	.word	.LC87
	.word	.LC902
	.byte	177
	.byte	13
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57323, %object
	.size	descriptor.57323, 24
descriptor.57323:
	.word	.LC1013
	.word	__func__.57324
	.word	.LC1662
	.word	.LC1698
	.byte	52
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57325, %object
	.size	descriptor.57325, 24
descriptor.57325:
	.word	.LC1013
	.word	__func__.57324
	.word	.LC1662
	.word	.LC244
	.byte	66
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57368, %object
	.size	descriptor.57368, 24
descriptor.57368:
	.word	.LC1013
	.word	__func__.57369
	.word	.LC1662
	.word	.LC1692
	.byte	170
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57353, %object
	.size	descriptor.57353, 24
descriptor.57353:
	.word	.LC1013
	.word	__func__.57354
	.word	.LC1662
	.word	.LC1697
	.byte	105
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57356, %object
	.size	descriptor.57356, 24
descriptor.57356:
	.word	.LC1013
	.word	__func__.57354
	.word	.LC1662
	.word	.LC1696
	.byte	118
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57358, %object
	.size	descriptor.57358, 24
descriptor.57358:
	.word	.LC1013
	.word	__func__.57354
	.word	.LC1662
	.word	.LC1695
	.byte	123
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57359, %object
	.size	descriptor.57359, 24
descriptor.57359:
	.word	.LC1013
	.word	__func__.57354
	.word	.LC1662
	.word	.LC1694
	.byte	126
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57360, %object
	.size	descriptor.57360, 24
descriptor.57360:
	.word	.LC1013
	.word	__func__.57354
	.word	.LC1662
	.word	.LC1693
	.byte	150
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57374, %object
	.size	descriptor.57374, 24
descriptor.57374:
	.word	.LC1013
	.word	__func__.57369
	.word	.LC1662
	.word	.LC1691
	.byte	194
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49254, %object
	.size	descriptor.49254, 24
descriptor.49254:
	.word	.LC1013
	.word	__func__.49255
	.word	.LC1756
	.word	.LC599
	.byte	151
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49315, %object
	.size	descriptor.49315, 24
descriptor.49315:
	.word	.LC1013
	.word	__func__.49314
	.word	.LC1756
	.word	.LC374
	.byte	35
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48320, %object
	.size	descriptor.48320, 24
descriptor.48320:
	.word	.LC1013
	.word	__func__.48321
	.word	.LC1760
	.word	.LC178
	.byte	18
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48290, %object
	.size	descriptor.48290, 24
descriptor.48290:
	.word	.LC1013
	.word	__func__.48291
	.word	.LC1760
	.word	.LC920
	.byte	181
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45631, %object
	.size	descriptor.45631, 24
descriptor.45631:
	.word	.LC1013
	.word	__func__.45628
	.word	.LC87
	.word	.LC921
	.byte	216
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49906, %object
	.size	descriptor.49906, 24
descriptor.49906:
	.word	.LC1013
	.word	__func__.49907
	.word	.LC1751
	.word	.LC922
	.byte	61
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49911, %object
	.size	descriptor.49911, 24
descriptor.49911:
	.word	.LC1013
	.word	__func__.49907
	.word	.LC1751
	.word	.LC244
	.byte	81
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46232, %object
	.size	descriptor.46232, 24
descriptor.46232:
	.word	.LC1013
	.word	__func__.46233
	.word	.LC87
	.word	.LC766
	.byte	243
	.byte	13
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56358, %object
	.size	descriptor.56358, 24
descriptor.56358:
	.word	.LC1013
	.word	__func__.56359
	.word	.LC1725
	.word	.LC80
	.byte	248
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58165, %object
	.size	descriptor.58165, 24
descriptor.58165:
	.word	.LC1013
	.word	__func__.58166
	.word	.LC1638
	.word	.LC80
	.byte	43
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53365, %object
	.size	descriptor.53365, 24
descriptor.53365:
	.word	.LC1013
	.word	__func__.53366
	.word	.LC1733
	.word	.LC927
	.byte	196
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53367, %object
	.size	descriptor.53367, 24
descriptor.53367:
	.word	.LC1013
	.word	__func__.53366
	.word	.LC1733
	.word	.LC304
	.byte	199
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53375, %object
	.size	descriptor.53375, 24
descriptor.53375:
	.word	.LC1013
	.word	__func__.53366
	.word	.LC1733
	.word	.LC304
	.byte	231
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53376, %object
	.size	descriptor.53376, 24
descriptor.53376:
	.word	.LC1013
	.word	__func__.53366
	.word	.LC1733
	.word	.LC930
	.byte	244
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53380, %object
	.size	descriptor.53380, 24
descriptor.53380:
	.word	.LC1013
	.word	__func__.53366
	.word	.LC1733
	.word	.LC304
	.byte	251
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53384, %object
	.size	descriptor.53384, 24
descriptor.53384:
	.word	.LC1013
	.word	__func__.53366
	.word	.LC1733
	.word	.LC931
	.byte	6
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53459, %object
	.size	descriptor.53459, 24
descriptor.53459:
	.word	.LC1013
	.word	__func__.53460
	.word	.LC1733
	.word	.LC935
	.byte	176
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25004, %object
	.size	descriptor.25004, 24
descriptor.25004:
	.word	.LC1013
	.word	__func__.25005
	.word	.LC583
	.word	.LC937
	.byte	223
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25007, %object
	.size	descriptor.25007, 24
descriptor.25007:
	.word	.LC1013
	.word	__func__.25005
	.word	.LC583
	.word	.LC938
	.byte	1
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38509, %object
	.size	descriptor.38509, 24
descriptor.38509:
	.word	.LC1013
	.word	__func__.38510
	.word	.LC1775
	.word	.LC939
	.byte	196
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48129, %object
	.size	descriptor.48129, 24
descriptor.48129:
	.word	.LC1013
	.word	__func__.48130
	.word	.LC1760
	.word	.LC941
	.byte	156
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48131, %object
	.size	descriptor.48131, 24
descriptor.48131:
	.word	.LC1013
	.word	__func__.48130
	.word	.LC1760
	.word	.LC688
	.byte	162
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53330, %object
	.size	descriptor.53330, 24
descriptor.53330:
	.word	.LC1013
	.word	__func__.53331
	.word	.LC1733
	.word	.LC942
	.byte	106
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53337, %object
	.size	descriptor.53337, 24
descriptor.53337:
	.word	.LC1013
	.word	__func__.53331
	.word	.LC1733
	.word	.LC304
	.byte	123
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53347, %object
	.size	descriptor.53347, 24
descriptor.53347:
	.word	.LC1013
	.word	__func__.53331
	.word	.LC1733
	.word	.LC304
	.byte	152
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53351, %object
	.size	descriptor.53351, 24
descriptor.53351:
	.word	.LC1013
	.word	__func__.53331
	.word	.LC1733
	.word	.LC304
	.byte	173
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53352, %object
	.size	descriptor.53352, 24
descriptor.53352:
	.word	.LC1013
	.word	__func__.53331
	.word	.LC1733
	.word	.LC945
	.byte	182
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63458, %object
	.size	descriptor.63458, 24
descriptor.63458:
	.word	.LC1013
	.word	__func__.63459
	.word	.LC1575
	.word	.LC80
	.byte	18
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63464, %object
	.size	descriptor.63464, 24
descriptor.63464:
	.word	.LC1013
	.word	__func__.63465
	.word	.LC1575
	.word	.LC80
	.byte	30
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54331, %object
	.size	descriptor.54331, 24
descriptor.54331:
	.word	.LC1013
	.word	__func__.54332
	.word	.LC1729
	.word	.LC949
	.byte	187
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54357, %object
	.size	descriptor.54357, 24
descriptor.54357:
	.word	.LC1013
	.word	__func__.54358
	.word	.LC1729
	.word	.LC950
	.byte	55
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57086, %object
	.size	descriptor.57086, 24
descriptor.57086:
	.word	.LC1013
	.word	__func__.57087
	.word	.LC1705
	.word	.LC80
	.byte	0
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56973, %object
	.size	descriptor.56973, 24
descriptor.56973:
	.word	.LC1013
	.word	__func__.56974
	.word	.LC1705
	.word	.LC24
	.byte	143
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56978, %object
	.size	descriptor.56978, 24
descriptor.56978:
	.word	.LC1013
	.word	__func__.56974
	.word	.LC1705
	.word	.LC26
	.byte	170
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57092, %object
	.size	descriptor.57092, 24
descriptor.57092:
	.word	.LC1013
	.word	__func__.57093
	.word	.LC1705
	.word	.LC80
	.byte	10
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57960, %object
	.size	descriptor.57960, 24
descriptor.57960:
	.word	.LC1013
	.word	__func__.57961
	.word	.LC1648
	.word	.LC80
	.byte	159
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57881, %object
	.size	descriptor.57881, 24
descriptor.57881:
	.word	.LC1013
	.word	__func__.57882
	.word	.LC1648
	.word	.LC24
	.byte	144
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57886, %object
	.size	descriptor.57886, 24
descriptor.57886:
	.word	.LC1013
	.word	__func__.57882
	.word	.LC1648
	.word	.LC26
	.byte	171
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57954, %object
	.size	descriptor.57954, 24
descriptor.57954:
	.word	.LC1013
	.word	__func__.57955
	.word	.LC1648
	.word	.LC80
	.byte	149
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57024, %object
	.size	descriptor.57024, 24
descriptor.57024:
	.word	.LC1013
	.word	__func__.57025
	.word	.LC1705
	.word	.LC23
	.byte	23
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56977, %object
	.size	descriptor.56977, 24
descriptor.56977:
	.word	.LC1013
	.word	__func__.56974
	.word	.LC1705
	.word	.LC25
	.byte	159
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57902, %object
	.size	descriptor.57902, 24
descriptor.57902:
	.word	.LC1013
	.word	__func__.57903
	.word	.LC1648
	.word	.LC23
	.byte	201
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57885, %object
	.size	descriptor.57885, 24
descriptor.57885:
	.word	.LC1013
	.word	__func__.57882
	.word	.LC1648
	.word	.LC25
	.byte	160
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25328, %object
	.size	descriptor.25328, 24
descriptor.25328:
	.word	.LC1013
	.word	__func__.25329
	.word	.LC583
	.word	.LC951
	.byte	192
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25330, %object
	.size	descriptor.25330, 24
descriptor.25330:
	.word	.LC1013
	.word	__func__.25329
	.word	.LC583
	.word	.LC952
	.byte	195
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25331, %object
	.size	descriptor.25331, 24
descriptor.25331:
	.word	.LC1013
	.word	__func__.25329
	.word	.LC583
	.word	.LC953
	.byte	199
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25126, %object
	.size	descriptor.25126, 24
descriptor.25126:
	.word	.LC1013
	.word	__func__.25127
	.word	.LC583
	.word	.LC956
	.byte	135
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25152, %object
	.size	descriptor.25152, 24
descriptor.25152:
	.word	.LC1013
	.word	__func__.25127
	.word	.LC583
	.word	.LC962
	.byte	233
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25153, %object
	.size	descriptor.25153, 24
descriptor.25153:
	.word	.LC1013
	.word	__func__.25127
	.word	.LC583
	.word	.LC963
	.byte	241
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25154, %object
	.size	descriptor.25154, 24
descriptor.25154:
	.word	.LC1013
	.word	__func__.25127
	.word	.LC583
	.word	.LC964
	.byte	245
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25366, %object
	.size	descriptor.25366, 24
descriptor.25366:
	.word	.LC1013
	.word	__func__.25329
	.word	.LC583
	.word	.LC963
	.byte	75
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25367, %object
	.size	descriptor.25367, 24
descriptor.25367:
	.word	.LC1013
	.word	__func__.25329
	.word	.LC583
	.word	.LC964
	.byte	79
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25390, %object
	.size	descriptor.25390, 24
descriptor.25390:
	.word	.LC1013
	.word	__func__.25329
	.word	.LC583
	.word	.LC963
	.byte	196
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25391, %object
	.size	descriptor.25391, 24
descriptor.25391:
	.word	.LC1013
	.word	__func__.25329
	.word	.LC583
	.word	.LC964
	.byte	200
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25393, %object
	.size	descriptor.25393, 24
descriptor.25393:
	.word	.LC1013
	.word	__func__.25329
	.word	.LC583
	.word	.LC969
	.byte	213
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57103, %object
	.size	descriptor.57103, 24
descriptor.57103:
	.word	.LC1013
	.word	__func__.57104
	.word	.LC1705
	.word	.LC977
	.byte	131
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57496, %object
	.size	descriptor.57496, 24
descriptor.57496:
	.word	.LC1013
	.word	__func__.57494
	.word	.LC1662
	.word	.LC1671
	.byte	74
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57971, %object
	.size	descriptor.57971, 24
descriptor.57971:
	.word	.LC1013
	.word	__func__.57972
	.word	.LC1648
	.word	.LC977
	.byte	4
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61860, %object
	.size	descriptor.61860, 24
descriptor.61860:
	.word	.LC1013
	.word	__func__.61861
	.word	.LC1615
	.word	.LC1618
	.byte	35
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61870, %object
	.size	descriptor.61870, 24
descriptor.61870:
	.word	.LC1013
	.word	__func__.61871
	.word	.LC1615
	.word	.LC1618
	.byte	47
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61865, %object
	.size	descriptor.61865, 24
descriptor.61865:
	.word	.LC1013
	.word	__func__.61866
	.word	.LC1615
	.word	.LC1618
	.byte	41
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61875, %object
	.size	descriptor.61875, 24
descriptor.61875:
	.word	.LC1013
	.word	__func__.61876
	.word	.LC1615
	.word	.LC1618
	.byte	53
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63475, %object
	.size	descriptor.63475, 24
descriptor.63475:
	.word	.LC1013
	.word	__func__.63476
	.word	.LC1575
	.word	.LC997
	.byte	123
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53294, %object
	.size	descriptor.53294, 24
descriptor.53294:
	.word	.LC1013
	.word	__func__.53291
	.word	.LC1733
	.word	.LC1001
	.byte	44
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30908, %object
	.size	descriptor.30908, 24
descriptor.30908:
	.word	.LC1013
	.word	__func__.30909
	.word	.LC1784
	.word	.LC1002
	.byte	69
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56635, %object
	.size	descriptor.56635, 24
descriptor.56635:
	.word	.LC1013
	.word	__func__.56636
	.word	.LC1714
	.word	.LC1009
	.byte	155
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56640, %object
	.size	descriptor.56640, 24
descriptor.56640:
	.word	.LC1013
	.word	__func__.56636
	.word	.LC1714
	.word	.LC1010
	.byte	159
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56671, %object
	.size	descriptor.56671, 24
descriptor.56671:
	.word	.LC1013
	.word	__func__.56672
	.word	.LC1714
	.word	.LC285
	.byte	214
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56658, %object
	.size	descriptor.56658, 24
descriptor.56658:
	.word	.LC1013
	.word	__func__.56659
	.word	.LC1714
	.word	.LC285
	.byte	191
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56369, %object
	.size	descriptor.56369, 24
descriptor.56369:
	.word	.LC1013
	.word	__func__.56370
	.word	.LC1725
	.word	.LC1011
	.byte	105
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56677, %object
	.size	descriptor.56677, 24
descriptor.56677:
	.word	.LC1013
	.word	__func__.56678
	.word	.LC1714
	.word	.LC285
	.byte	221
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58176, %object
	.size	descriptor.58176, 24
descriptor.58176:
	.word	.LC1013
	.word	__func__.58177
	.word	.LC1638
	.word	.LC1011
	.byte	182
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55689, %object
	.size	descriptor.55689, 24
descriptor.55689:
	.word	.LC1013
	.word	__func__.55690
	.word	.LC56
	.word	.LC1012
	.byte	187
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55523, %object
	.size	descriptor.55523, 24
descriptor.55523:
	.word	.LC1013
	.word	__func__.55524
	.word	.LC56
	.word	.LC1014
	.byte	30
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55525, %object
	.size	descriptor.55525, 24
descriptor.55525:
	.word	.LC1013
	.word	__func__.55524
	.word	.LC56
	.word	.LC1015
	.byte	34
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55526, %object
	.size	descriptor.55526, 24
descriptor.55526:
	.word	.LC1013
	.word	__func__.55524
	.word	.LC56
	.word	.LC1016
	.byte	37
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55527, %object
	.size	descriptor.55527, 24
descriptor.55527:
	.word	.LC1013
	.word	__func__.55524
	.word	.LC56
	.word	.LC1017
	.byte	43
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55528, %object
	.size	descriptor.55528, 24
descriptor.55528:
	.word	.LC1013
	.word	__func__.55524
	.word	.LC56
	.word	.LC1018
	.byte	46
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55529, %object
	.size	descriptor.55529, 24
descriptor.55529:
	.word	.LC1013
	.word	__func__.55524
	.word	.LC56
	.word	.LC1017
	.byte	52
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55530, %object
	.size	descriptor.55530, 24
descriptor.55530:
	.word	.LC1013
	.word	__func__.55524
	.word	.LC56
	.word	.LC1018
	.byte	55
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55691, %object
	.size	descriptor.55691, 24
descriptor.55691:
	.word	.LC1013
	.word	__func__.55690
	.word	.LC56
	.word	.LC1020
	.byte	223
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54401, %object
	.size	descriptor.54401, 24
descriptor.54401:
	.word	.LC1013
	.word	__func__.54402
	.word	.LC1729
	.word	.LC1021
	.byte	197
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54177, %object
	.size	descriptor.54177, 24
descriptor.54177:
	.word	.LC1013
	.word	__func__.54178
	.word	.LC1729
	.word	.LC1014
	.byte	212
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54179, %object
	.size	descriptor.54179, 24
descriptor.54179:
	.word	.LC1013
	.word	__func__.54178
	.word	.LC1729
	.word	.LC1015
	.byte	216
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54180, %object
	.size	descriptor.54180, 24
descriptor.54180:
	.word	.LC1013
	.word	__func__.54178
	.word	.LC1729
	.word	.LC1016
	.byte	219
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54181, %object
	.size	descriptor.54181, 24
descriptor.54181:
	.word	.LC1013
	.word	__func__.54178
	.word	.LC1729
	.word	.LC1017
	.byte	225
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54182, %object
	.size	descriptor.54182, 24
descriptor.54182:
	.word	.LC1013
	.word	__func__.54178
	.word	.LC1729
	.word	.LC1022
	.byte	228
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54183, %object
	.size	descriptor.54183, 24
descriptor.54183:
	.word	.LC1013
	.word	__func__.54178
	.word	.LC1729
	.word	.LC1023
	.byte	234
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54184, %object
	.size	descriptor.54184, 24
descriptor.54184:
	.word	.LC1013
	.word	__func__.54178
	.word	.LC1729
	.word	.LC1024
	.byte	237
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54403, %object
	.size	descriptor.54403, 24
descriptor.54403:
	.word	.LC1013
	.word	__func__.54402
	.word	.LC1729
	.word	.LC1020
	.byte	227
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53030, %object
	.size	descriptor.53030, 24
descriptor.53030:
	.word	.LC1013
	.word	__func__.53031
	.word	.LC1736
	.word	.LC1026
	.byte	29
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52936, %object
	.size	descriptor.52936, 24
descriptor.52936:
	.word	.LC1013
	.word	__func__.52937
	.word	.LC1736
	.word	.LC1014
	.byte	14
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52938, %object
	.size	descriptor.52938, 24
descriptor.52938:
	.word	.LC1013
	.word	__func__.52937
	.word	.LC1736
	.word	.LC1015
	.byte	18
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52939, %object
	.size	descriptor.52939, 24
descriptor.52939:
	.word	.LC1013
	.word	__func__.52937
	.word	.LC1736
	.word	.LC1016
	.byte	21
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52940, %object
	.size	descriptor.52940, 24
descriptor.52940:
	.word	.LC1013
	.word	__func__.52937
	.word	.LC1736
	.word	.LC1017
	.byte	27
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52941, %object
	.size	descriptor.52941, 24
descriptor.52941:
	.word	.LC1013
	.word	__func__.52937
	.word	.LC1736
	.word	.LC1027
	.byte	30
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53032, %object
	.size	descriptor.53032, 24
descriptor.53032:
	.word	.LC1013
	.word	__func__.53031
	.word	.LC1736
	.word	.LC1020
	.byte	58
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40923, %object
	.size	descriptor.40923, 24
descriptor.40923:
	.word	.LC1013
	.word	__func__.40924
	.word	.LC1772
	.word	.LC1034
	.byte	39
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55779, %object
	.size	descriptor.55779, 24
descriptor.55779:
	.word	.LC1013
	.word	__func__.55780
	.word	.LC56
	.word	.LC1040
	.byte	119
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54428, %object
	.size	descriptor.54428, 24
descriptor.54428:
	.word	.LC1013
	.word	__func__.54429
	.word	.LC1729
	.word	.LC1042
	.byte	0
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53050, %object
	.size	descriptor.53050, 24
descriptor.53050:
	.word	.LC1013
	.word	__func__.53051
	.word	.LC1736
	.word	.LC1047
	.byte	88
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30962, %object
	.size	descriptor.30962, 24
descriptor.30962:
	.word	.LC1013
	.word	__func__.30963
	.word	.LC1784
	.word	.LC1048
	.byte	20
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30974, %object
	.size	descriptor.30974, 24
descriptor.30974:
	.word	.LC1013
	.word	__func__.30975
	.word	.LC1784
	.word	.LC1061
	.byte	86
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30986, %object
	.size	descriptor.30986, 24
descriptor.30986:
	.word	.LC1013
	.word	__func__.30975
	.word	.LC1784
	.word	.LC1063
	.byte	111
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25165, %object
	.size	descriptor.25165, 24
descriptor.25165:
	.word	.LC1013
	.word	__func__.25166
	.word	.LC583
	.word	.LC1077
	.byte	26
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25179, %object
	.size	descriptor.25179, 24
descriptor.25179:
	.word	.LC1013
	.word	__func__.25166
	.word	.LC583
	.word	.LC1078
	.byte	55
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25182, %object
	.size	descriptor.25182, 24
descriptor.25182:
	.word	.LC1013
	.word	__func__.25166
	.word	.LC583
	.word	.LC1079
	.byte	70
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25186, %object
	.size	descriptor.25186, 24
descriptor.25186:
	.word	.LC1013
	.word	__func__.25166
	.word	.LC583
	.word	.LC1080
	.byte	82
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.65015, %object
	.size	descriptor.65015, 24
descriptor.65015:
	.word	.LC1013
	.word	__func__.65016
	.word	.LC1481
	.word	.LC1088
	.byte	196
	.byte	14
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.65019, %object
	.size	descriptor.65019, 24
descriptor.65019:
	.word	.LC1013
	.word	__func__.65016
	.word	.LC1481
	.word	.LC1518
	.byte	232
	.byte	14
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.65030, %object
	.size	descriptor.65030, 24
descriptor.65030:
	.word	.LC1013
	.word	__func__.65016
	.word	.LC1481
	.word	.LC1100
	.byte	30
	.byte	15
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25483, %object
	.size	descriptor.25483, 24
descriptor.25483:
	.word	.LC1013
	.word	__func__.25484
	.word	.LC583
	.word	.LC80
	.byte	49
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25490, %object
	.size	descriptor.25490, 24
descriptor.25490:
	.word	.LC1013
	.word	__func__.25484
	.word	.LC583
	.word	.LC1113
	.byte	56
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25491, %object
	.size	descriptor.25491, 24
descriptor.25491:
	.word	.LC1013
	.word	__func__.25484
	.word	.LC583
	.word	.LC969
	.byte	60
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46120, %object
	.size	descriptor.46120, 24
descriptor.46120:
	.word	.LC1013
	.word	__func__.46121
	.word	.LC87
	.word	.LC1114
	.byte	211
	.byte	11
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46055, %object
	.size	descriptor.46055, 24
descriptor.46055:
	.word	.LC1013
	.word	__func__.46056
	.word	.LC87
	.word	.LC1116
	.byte	199
	.byte	10
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45928, %object
	.size	descriptor.45928, 24
descriptor.45928:
	.word	.LC1013
	.word	__func__.45929
	.word	.LC87
	.word	.LC1117
	.byte	237
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46057, %object
	.size	descriptor.46057, 24
descriptor.46057:
	.word	.LC1013
	.word	__func__.46056
	.word	.LC87
	.word	.LC1119
	.byte	222
	.byte	10
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45894, %object
	.size	descriptor.45894, 24
descriptor.45894:
	.word	.LC1013
	.word	__func__.45895
	.word	.LC87
	.word	.LC1137
	.byte	124
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45806, %object
	.size	descriptor.45806, 24
descriptor.45806:
	.word	.LC1013
	.word	__func__.45807
	.word	.LC87
	.word	.LC1142
	.byte	45
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45808, %object
	.size	descriptor.45808, 24
descriptor.45808:
	.word	.LC1013
	.word	__func__.45807
	.word	.LC87
	.word	.LC1143
	.byte	48
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45713, %object
	.size	descriptor.45713, 24
descriptor.45713:
	.word	.LC1013
	.word	__func__.45714
	.word	.LC87
	.word	.LC552
	.byte	15
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45715, %object
	.size	descriptor.45715, 24
descriptor.45715:
	.word	.LC1013
	.word	__func__.45714
	.word	.LC87
	.word	.LC553
	.byte	19
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.26056, %object
	.size	descriptor.26056, 24
descriptor.26056:
	.word	.LC1013
	.word	__func__.26057
	.word	.LC1788
	.word	.LC1155
	.byte	202
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30777, %object
	.size	descriptor.30777, 24
descriptor.30777:
	.word	.LC1013
	.word	__func__.30778
	.word	.LC1787
	.word	.LC1160
	.byte	35
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30951, %object
	.size	descriptor.30951, 24
descriptor.30951:
	.word	.LC1013
	.word	__func__.30952
	.word	.LC1784
	.word	.LC1163
	.byte	244
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30795, %object
	.size	descriptor.30795, 24
descriptor.30795:
	.word	.LC1013
	.word	__func__.30796
	.word	.LC1787
	.word	.LC1164
	.byte	115
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30797, %object
	.size	descriptor.30797, 24
descriptor.30797:
	.word	.LC1013
	.word	__func__.30796
	.word	.LC1787
	.word	.LC1167
	.byte	122
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30787, %object
	.size	descriptor.30787, 24
descriptor.30787:
	.word	.LC1013
	.word	__func__.30788
	.word	.LC1787
	.word	.LC1168
	.byte	68
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30932, %object
	.size	descriptor.30932, 24
descriptor.30932:
	.word	.LC1013
	.word	__func__.30933
	.word	.LC1784
	.word	.LC1174
	.byte	198
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30859, %object
	.size	descriptor.30859, 24
descriptor.30859:
	.word	.LC1013
	.word	__func__.30860
	.word	.LC1784
	.word	.LC1178
	.byte	229
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30879, %object
	.size	descriptor.30879, 24
descriptor.30879:
	.word	.LC1013
	.word	__func__.30880
	.word	.LC1784
	.word	.LC1180
	.byte	2
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31002, %object
	.size	descriptor.31002, 24
descriptor.31002:
	.word	.LC1013
	.word	__func__.31003
	.word	.LC1784
	.word	.LC1184
	.byte	164
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31019, %object
	.size	descriptor.31019, 24
descriptor.31019:
	.word	.LC1013
	.word	__func__.31020
	.word	.LC1784
	.word	.LC1187
	.byte	209
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31042, %object
	.size	descriptor.31042, 24
descriptor.31042:
	.word	.LC1013
	.word	__func__.31043
	.word	.LC1784
	.word	.LC1189
	.byte	0
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31054, %object
	.size	descriptor.31054, 24
descriptor.31054:
	.word	.LC1013
	.word	__func__.31043
	.word	.LC1784
	.word	.LC1191
	.byte	17
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31058, %object
	.size	descriptor.31058, 24
descriptor.31058:
	.word	.LC1013
	.word	__func__.31043
	.word	.LC1784
	.word	.LC1192
	.byte	33
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31067, %object
	.size	descriptor.31067, 24
descriptor.31067:
	.word	.LC1013
	.word	__func__.31068
	.word	.LC1784
	.word	.LC1193
	.byte	58
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47323, %object
	.size	descriptor.47323, 24
descriptor.47323:
	.word	.LC1013
	.word	__func__.47324
	.word	.LC709
	.word	.LC1202
	.byte	77
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47327, %object
	.size	descriptor.47327, 24
descriptor.47327:
	.word	.LC1013
	.word	__func__.47324
	.word	.LC709
	.word	.LC1203
	.byte	100
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47328, %object
	.size	descriptor.47328, 24
descriptor.47328:
	.word	.LC1013
	.word	__func__.47324
	.word	.LC709
	.word	.LC1204
	.byte	107
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47503, %object
	.size	descriptor.47503, 24
descriptor.47503:
	.word	.LC1013
	.word	__func__.47495
	.word	.LC709
	.word	.LC1217
	.byte	137
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47541, %object
	.size	descriptor.47541, 24
descriptor.47541:
	.word	.LC1013
	.word	__func__.47542
	.word	.LC709
	.word	.LC1219
	.byte	16
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52756, %object
	.size	descriptor.52756, 24
descriptor.52756:
	.word	.LC1013
	.word	__func__.52757
	.word	.LC1737
	.word	.LC1220
	.byte	136
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52748, %object
	.size	descriptor.52748, 24
descriptor.52748:
	.word	.LC1013
	.word	__func__.52749
	.word	.LC1737
	.word	.LC1221
	.byte	92
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52750, %object
	.size	descriptor.52750, 24
descriptor.52750:
	.word	.LC1013
	.word	__func__.52749
	.word	.LC1737
	.word	.LC1222
	.byte	100
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48633, %object
	.size	descriptor.48633, 24
descriptor.48633:
	.word	.LC1013
	.word	__func__.48634
	.word	.LC1757
	.word	.LC1223
	.byte	25
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48637, %object
	.size	descriptor.48637, 24
descriptor.48637:
	.word	.LC1013
	.word	__func__.48634
	.word	.LC1757
	.word	.LC1224
	.byte	32
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48605, %object
	.size	descriptor.48605, 24
descriptor.48605:
	.word	.LC1013
	.word	__func__.48606
	.word	.LC1757
	.word	.LC1225
	.byte	164
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48504, %object
	.size	descriptor.48504, 24
descriptor.48504:
	.word	.LC1013
	.word	__func__.48505
	.word	.LC1757
	.word	.LC941
	.byte	150
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48506, %object
	.size	descriptor.48506, 24
descriptor.48506:
	.word	.LC1013
	.word	__func__.48505
	.word	.LC1757
	.word	.LC688
	.byte	156
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48639, %object
	.size	descriptor.48639, 24
descriptor.48639:
	.word	.LC1013
	.word	__func__.48634
	.word	.LC1757
	.word	.LC1227
	.byte	37
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48142, %object
	.size	descriptor.48142, 24
descriptor.48142:
	.word	.LC1013
	.word	__func__.48141
	.word	.LC1760
	.word	.LC232
	.byte	183
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48143, %object
	.size	descriptor.48143, 24
descriptor.48143:
	.word	.LC1013
	.word	__func__.48141
	.word	.LC1760
	.word	.LC229
	.byte	188
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48145, %object
	.size	descriptor.48145, 24
descriptor.48145:
	.word	.LC1013
	.word	__func__.48141
	.word	.LC1760
	.word	.LC1229
	.byte	193
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48150, %object
	.size	descriptor.48150, 24
descriptor.48150:
	.word	.LC1013
	.word	__func__.48141
	.word	.LC1760
	.word	.LC229
	.byte	222
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48176, %object
	.size	descriptor.48176, 24
descriptor.48176:
	.word	.LC1013
	.word	__func__.48177
	.word	.LC1760
	.word	.LC1230
	.byte	56
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48178, %object
	.size	descriptor.48178, 24
descriptor.48178:
	.word	.LC1013
	.word	__func__.48177
	.word	.LC1760
	.word	.LC1231
	.byte	62
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48183, %object
	.size	descriptor.48183, 24
descriptor.48183:
	.word	.LC1013
	.word	__func__.48177
	.word	.LC1760
	.word	.LC1232
	.byte	76
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48163, %object
	.size	descriptor.48163, 24
descriptor.48163:
	.word	.LC1013
	.word	__func__.48162
	.word	.LC1760
	.word	.LC1235
	.byte	251
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48164, %object
	.size	descriptor.48164, 24
descriptor.48164:
	.word	.LC1013
	.word	__func__.48162
	.word	.LC1760
	.word	.LC1236
	.byte	0
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48165, %object
	.size	descriptor.48165, 24
descriptor.48165:
	.word	.LC1013
	.word	__func__.48162
	.word	.LC1760
	.word	.LC1237
	.byte	6
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48166, %object
	.size	descriptor.48166, 24
descriptor.48166:
	.word	.LC1013
	.word	__func__.48162
	.word	.LC1760
	.word	.LC1238
	.byte	12
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48225, %object
	.size	descriptor.48225, 24
descriptor.48225:
	.word	.LC1013
	.word	__func__.48224
	.word	.LC1760
	.word	.LC1240
	.byte	212
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48236, %object
	.size	descriptor.48236, 24
descriptor.48236:
	.word	.LC1013
	.word	__func__.48237
	.word	.LC1760
	.word	.LC228
	.byte	221
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48246, %object
	.size	descriptor.48246, 24
descriptor.48246:
	.word	.LC1013
	.word	__func__.48237
	.word	.LC1760
	.word	.LC1242
	.byte	247
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48257, %object
	.size	descriptor.48257, 24
descriptor.48257:
	.word	.LC1013
	.word	__func__.48258
	.word	.LC1760
	.word	.LC285
	.byte	57
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48297, %object
	.size	descriptor.48297, 24
descriptor.48297:
	.word	.LC1013
	.word	__func__.48298
	.word	.LC1760
	.word	.LC1248
	.byte	202
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48355, %object
	.size	descriptor.48355, 24
descriptor.48355:
	.word	.LC1013
	.word	__func__.48349
	.word	.LC1760
	.word	.LC1250
	.byte	134
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48356, %object
	.size	descriptor.48356, 24
descriptor.48356:
	.word	.LC1013
	.word	__func__.48349
	.word	.LC1760
	.word	.LC232
	.byte	139
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48368, %object
	.size	descriptor.48368, 24
descriptor.48368:
	.word	.LC1013
	.word	__func__.48364
	.word	.LC1760
	.word	.LC1252
	.byte	188
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48432, %object
	.size	descriptor.48432, 24
descriptor.48432:
	.word	.LC1013
	.word	__func__.48433
	.word	.LC1760
	.word	.LC1253
	.byte	91
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48678, %object
	.size	descriptor.48678, 24
descriptor.48678:
	.word	.LC1013
	.word	__func__.48679
	.word	.LC1757
	.word	.LC1259
	.byte	148
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48689, %object
	.size	descriptor.48689, 24
descriptor.48689:
	.word	.LC1013
	.word	__func__.48690
	.word	.LC1757
	.word	.LC1259
	.byte	198
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48790, %object
	.size	descriptor.48790, 24
descriptor.48790:
	.word	.LC1013
	.word	__func__.48791
	.word	.LC1757
	.word	.LC1261
	.byte	181
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48738, %object
	.size	descriptor.48738, 24
descriptor.48738:
	.word	.LC1013
	.word	__func__.48739
	.word	.LC1757
	.word	.LC1267
	.byte	77
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49105, %object
	.size	descriptor.49105, 24
descriptor.49105:
	.word	.LC1013
	.word	__func__.49106
	.word	.LC1756
	.word	.LC1269
	.byte	10
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49120, %object
	.size	descriptor.49120, 24
descriptor.49120:
	.word	.LC1013
	.word	__func__.49121
	.word	.LC1756
	.word	.LC1271
	.byte	51
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49495, %object
	.size	descriptor.49495, 24
descriptor.49495:
	.word	.LC1013
	.word	__func__.49496
	.word	.LC1756
	.word	.LC1272
	.byte	65
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49511, %object
	.size	descriptor.49511, 24
descriptor.49511:
	.word	.LC1013
	.word	__func__.49512
	.word	.LC1756
	.word	.LC1272
	.byte	133
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49522, %object
	.size	descriptor.49522, 24
descriptor.49522:
	.word	.LC1013
	.word	__func__.49523
	.word	.LC1756
	.word	.LC1276
	.byte	217
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49426, %object
	.size	descriptor.49426, 24
descriptor.49426:
	.word	.LC1013
	.word	__func__.49427
	.word	.LC1756
	.word	.LC1267
	.byte	151
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49439, %object
	.size	descriptor.49439, 24
descriptor.49439:
	.word	.LC1013
	.word	__func__.49440
	.word	.LC1756
	.word	.LC1267
	.byte	181
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49728, %object
	.size	descriptor.49728, 24
descriptor.49728:
	.word	.LC1013
	.word	__func__.49729
	.word	.LC1752
	.word	.LC1272
	.byte	161
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49750, %object
	.size	descriptor.49750, 24
descriptor.49750:
	.word	.LC1013
	.word	__func__.49751
	.word	.LC1752
	.word	.LC1272
	.byte	217
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49817, %object
	.size	descriptor.49817, 24
descriptor.49817:
	.word	.LC1013
	.word	__func__.49818
	.word	.LC1752
	.word	.LC1282
	.byte	121
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49806, %object
	.size	descriptor.49806, 24
descriptor.49806:
	.word	.LC1013
	.word	__func__.49807
	.word	.LC1752
	.word	.LC1267
	.byte	110
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49937, %object
	.size	descriptor.49937, 24
descriptor.49937:
	.word	.LC1013
	.word	__func__.49938
	.word	.LC1751
	.word	.LC1289
	.byte	144
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49948, %object
	.size	descriptor.49948, 24
descriptor.49948:
	.word	.LC1013
	.word	__func__.49949
	.word	.LC1751
	.word	.LC1289
	.byte	174
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50923, %object
	.size	descriptor.50923, 24
descriptor.50923:
	.word	.LC1013
	.word	__func__.50924
	.word	.LC1749
	.word	.LC612
	.byte	221
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50942, %object
	.size	descriptor.50942, 24
descriptor.50942:
	.word	.LC1013
	.word	__func__.50943
	.word	.LC1749
	.word	.LC612
	.byte	22
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51020, %object
	.size	descriptor.51020, 24
descriptor.51020:
	.word	.LC1013
	.word	__func__.51019
	.word	.LC1749
	.word	.LC1282
	.byte	5
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51004, %object
	.size	descriptor.51004, 24
descriptor.51004:
	.word	.LC1013
	.word	__func__.51000
	.word	.LC1749
	.word	.LC1267
	.byte	218
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51529, %object
	.size	descriptor.51529, 24
descriptor.51529:
	.word	.LC1013
	.word	__func__.51530
	.word	.LC1748
	.word	.LC612
	.byte	226
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51546, %object
	.size	descriptor.51546, 24
descriptor.51546:
	.word	.LC1013
	.word	__func__.51547
	.word	.LC1748
	.word	.LC612
	.byte	21
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51692, %object
	.size	descriptor.51692, 24
descriptor.51692:
	.word	.LC1013
	.word	__func__.51691
	.word	.LC1748
	.word	.LC1294
	.byte	133
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51522, %object
	.size	descriptor.51522, 24
descriptor.51522:
	.word	.LC1013
	.word	__func__.51515
	.word	.LC1748
	.word	.LC164
	.byte	216
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51928, %object
	.size	descriptor.51928, 24
descriptor.51928:
	.word	.LC1013
	.word	__func__.51929
	.word	.LC1747
	.word	.LC612
	.byte	6
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51946, %object
	.size	descriptor.51946, 24
descriptor.51946:
	.word	.LC1013
	.word	__func__.51947
	.word	.LC1747
	.word	.LC612
	.byte	57
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51999, %object
	.size	descriptor.51999, 24
descriptor.51999:
	.word	.LC1013
	.word	__func__.51998
	.word	.LC1747
	.word	.LC1282
	.byte	204
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51989, %object
	.size	descriptor.51989, 24
descriptor.51989:
	.word	.LC1013
	.word	__func__.51985
	.word	.LC1747
	.word	.LC1267
	.byte	186
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52477, %object
	.size	descriptor.52477, 24
descriptor.52477:
	.word	.LC1013
	.word	__func__.52478
	.word	.LC1742
	.word	.LC612
	.byte	78
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38803, %object
	.size	descriptor.38803, 24
descriptor.38803:
	.word	.LC1013
	.word	__func__.38804
	.word	.LC1773
	.word	.LC612
	.byte	172
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38728, %object
	.size	descriptor.38728, 24
descriptor.38728:
	.word	.LC1013
	.word	__func__.38729
	.word	.LC1773
	.word	.LC1296
	.byte	19
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52497, %object
	.size	descriptor.52497, 24
descriptor.52497:
	.word	.LC1013
	.word	__func__.52498
	.word	.LC1742
	.word	.LC612
	.byte	137
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38814, %object
	.size	descriptor.38814, 24
descriptor.38814:
	.word	.LC1013
	.word	__func__.38815
	.word	.LC1773
	.word	.LC148
	.byte	192
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38816, %object
	.size	descriptor.38816, 24
descriptor.38816:
	.word	.LC1013
	.word	__func__.38815
	.word	.LC1773
	.word	.LC1297
	.byte	195
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38705, %object
	.size	descriptor.38705, 24
descriptor.38705:
	.word	.LC1013
	.word	__func__.38706
	.word	.LC1773
	.word	.LC1296
	.byte	147
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52581, %object
	.size	descriptor.52581, 24
descriptor.52581:
	.word	.LC1013
	.word	__func__.52580
	.word	.LC1742
	.word	.LC1294
	.byte	94
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52469, %object
	.size	descriptor.52469, 24
descriptor.52469:
	.word	.LC1013
	.word	__func__.52461
	.word	.LC1742
	.word	.LC1267
	.byte	67
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38977, %object
	.size	descriptor.38977, 24
descriptor.38977:
	.word	.LC1013
	.word	__func__.38976
	.word	.LC1773
	.word	.LC1307
	.byte	3
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38678, %object
	.size	descriptor.38678, 24
descriptor.38678:
	.word	.LC1013
	.word	__func__.38679
	.word	.LC1773
	.word	.LC1311
	.byte	55
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38954, %object
	.size	descriptor.38954, 24
descriptor.38954:
	.word	.LC1013
	.word	__func__.38955
	.word	.LC1773
	.word	.LC1312
	.byte	171
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38959, %object
	.size	descriptor.38959, 24
descriptor.38959:
	.word	.LC1013
	.word	__func__.38955
	.word	.LC1773
	.word	.LC1318
	.byte	221
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52824, %object
	.size	descriptor.52824, 24
descriptor.52824:
	.word	.LC1013
	.word	__func__.52825
	.word	.LC1737
	.word	.LC1324
	.byte	127
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56612, %object
	.size	descriptor.56612, 24
descriptor.56612:
	.word	.LC1013
	.word	__func__.56613
	.word	.LC1714
	.word	.LC1326
	.byte	69
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56615, %object
	.size	descriptor.56615, 24
descriptor.56615:
	.word	.LC1013
	.word	__func__.56613
	.word	.LC1714
	.word	.LC1327
	.byte	76
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56531, %object
	.size	descriptor.56531, 24
descriptor.56531:
	.word	.LC1013
	.word	__func__.56525
	.word	.LC1714
	.word	.LC1328
	.byte	26
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56534, %object
	.size	descriptor.56534, 24
descriptor.56534:
	.word	.LC1013
	.word	__func__.56525
	.word	.LC1714
	.word	.LC671
	.byte	48
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56619, %object
	.size	descriptor.56619, 24
descriptor.56619:
	.word	.LC1013
	.word	__func__.56613
	.word	.LC1714
	.word	.LC1330
	.byte	94
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56624, %object
	.size	descriptor.56624, 24
descriptor.56624:
	.word	.LC1013
	.word	__func__.56613
	.word	.LC1714
	.word	.LC1332
	.byte	118
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56302, %object
	.size	descriptor.56302, 24
descriptor.56302:
	.word	.LC1013
	.word	__func__.56303
	.word	.LC1725
	.word	.LC1336
	.byte	49
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58102, %object
	.size	descriptor.58102, 24
descriptor.58102:
	.word	.LC1013
	.word	__func__.58101
	.word	.LC1638
	.word	.LC1643
	.byte	85
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56651, %object
	.size	descriptor.56651, 24
descriptor.56651:
	.word	.LC1013
	.word	__func__.56652
	.word	.LC1714
	.word	.LC285
	.byte	174
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56797, %object
	.size	descriptor.56797, 24
descriptor.56797:
	.word	.LC1013
	.word	__func__.56798
	.word	.LC1714
	.word	.LC1339
	.byte	235
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56802, %object
	.size	descriptor.56802, 24
descriptor.56802:
	.word	.LC1013
	.word	__func__.56798
	.word	.LC1714
	.word	.LC1340
	.byte	240
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57467, %object
	.size	descriptor.57467, 24
descriptor.57467:
	.word	.LC1013
	.word	__func__.57465
	.word	.LC1662
	.word	.LC1672
	.byte	116
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57767, %object
	.size	descriptor.57767, 24
descriptor.57767:
	.word	.LC1013
	.word	__func__.57768
	.word	.LC1652
	.word	.LC1654
	.byte	239
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57769, %object
	.size	descriptor.57769, 24
descriptor.57769:
	.word	.LC1013
	.word	__func__.57768
	.word	.LC1652
	.word	.LC1653
	.byte	247
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57732, %object
	.size	descriptor.57732, 24
descriptor.57732:
	.word	.LC1013
	.word	__func__.57733
	.word	.LC1652
	.word	.LC1657
	.byte	111
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57120, %object
	.size	descriptor.57120, 24
descriptor.57120:
	.word	.LC1013
	.word	__func__.57119
	.word	.LC1705
	.word	.LC1709
	.byte	219
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57121, %object
	.size	descriptor.57121, 24
descriptor.57121:
	.word	.LC1013
	.word	__func__.57119
	.word	.LC1705
	.word	.LC1708
	.byte	252
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58735, %object
	.size	descriptor.58735, 24
descriptor.58735:
	.word	.LC1013
	.word	__func__.58736
	.word	.LC1630
	.word	.LC1632
	.byte	241
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58737, %object
	.size	descriptor.58737, 24
descriptor.58737:
	.word	.LC1013
	.word	__func__.58736
	.word	.LC1630
	.word	.LC1631
	.byte	243
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57122, %object
	.size	descriptor.57122, 24
descriptor.57122:
	.word	.LC1013
	.word	__func__.57119
	.word	.LC1705
	.word	.LC1707
	.byte	40
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57123, %object
	.size	descriptor.57123, 24
descriptor.57123:
	.word	.LC1013
	.word	__func__.57119
	.word	.LC1705
	.word	.LC1706
	.byte	48
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63974, %object
	.size	descriptor.63974, 24
descriptor.63974:
	.word	.LC1013
	.word	__func__.63975
	.word	.LC1481
	.word	.LC1561
	.byte	224
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58605, %object
	.size	descriptor.58605, 24
descriptor.58605:
	.word	.LC1013
	.word	__func__.58606
	.word	.LC1634
	.word	.LC1398
	.byte	76
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56345, %object
	.size	descriptor.56345, 24
descriptor.56345:
	.word	.LC1013
	.word	__func__.56346
	.word	.LC1725
	.word	.LC1408
	.byte	214
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56336, %object
	.size	descriptor.56336, 24
descriptor.56336:
	.word	.LC1013
	.word	__func__.56337
	.word	.LC1725
	.word	.LC1409
	.byte	158
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56338, %object
	.size	descriptor.56338, 24
descriptor.56338:
	.word	.LC1013
	.word	__func__.56337
	.word	.LC1725
	.word	.LC1410
	.byte	163
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56339, %object
	.size	descriptor.56339, 24
descriptor.56339:
	.word	.LC1013
	.word	__func__.56337
	.word	.LC1725
	.word	.LC1411
	.byte	191
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57948, %object
	.size	descriptor.57948, 24
descriptor.57948:
	.word	.LC1013
	.word	__func__.57949
	.word	.LC1648
	.word	.LC1412
	.byte	113
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57933, %object
	.size	descriptor.57933, 24
descriptor.57933:
	.word	.LC1013
	.word	__func__.57934
	.word	.LC1648
	.word	.LC1413
	.byte	46
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57935, %object
	.size	descriptor.57935, 24
descriptor.57935:
	.word	.LC1013
	.word	__func__.57934
	.word	.LC1648
	.word	.LC1414
	.byte	52
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57937, %object
	.size	descriptor.57937, 24
descriptor.57937:
	.word	.LC1013
	.word	__func__.57934
	.word	.LC1648
	.word	.LC1415
	.byte	75
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63452, %object
	.size	descriptor.63452, 24
descriptor.63452:
	.word	.LC1013
	.word	__func__.63453
	.word	.LC1575
	.word	.LC1416
	.byte	238
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63387, %object
	.size	descriptor.63387, 24
descriptor.63387:
	.word	.LC1013
	.word	__func__.63388
	.word	.LC1575
	.word	.LC1417
	.byte	129
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63389, %object
	.size	descriptor.63389, 24
descriptor.63389:
	.word	.LC1013
	.word	__func__.63388
	.word	.LC1575
	.word	.LC1418
	.byte	134
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63390, %object
	.size	descriptor.63390, 24
descriptor.63390:
	.word	.LC1013
	.word	__func__.63388
	.word	.LC1575
	.word	.LC1419
	.byte	150
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63392, %object
	.size	descriptor.63392, 24
descriptor.63392:
	.word	.LC1013
	.word	__func__.63388
	.word	.LC1575
	.word	.LC1421
	.byte	168
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58751, %object
	.size	descriptor.58751, 24
descriptor.58751:
	.word	.LC1013
	.word	__func__.58752
	.word	.LC1630
	.word	.LC1398
	.byte	62
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63925, %object
	.size	descriptor.63925, 24
descriptor.63925:
	.word	.LC1013
	.word	__func__.63924
	.word	.LC1481
	.word	.LC1565
	.byte	119
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57070, %object
	.size	descriptor.57070, 24
descriptor.57070:
	.word	.LC1013
	.word	__func__.57071
	.word	.LC1705
	.word	.LC1412
	.byte	204
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57001, %object
	.size	descriptor.57001, 24
descriptor.57001:
	.word	.LC1013
	.word	__func__.57002
	.word	.LC1705
	.word	.LC1712
	.byte	238
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57055, %object
	.size	descriptor.57055, 24
descriptor.57055:
	.word	.LC1013
	.word	__func__.57056
	.word	.LC1705
	.word	.LC1413
	.byte	125
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57057, %object
	.size	descriptor.57057, 24
descriptor.57057:
	.word	.LC1013
	.word	__func__.57056
	.word	.LC1705
	.word	.LC1414
	.byte	137
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57059, %object
	.size	descriptor.57059, 24
descriptor.57059:
	.word	.LC1013
	.word	__func__.57056
	.word	.LC1705
	.word	.LC1415
	.byte	160
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56997, %object
	.size	descriptor.56997, 24
descriptor.56997:
	.word	.LC1013
	.word	__func__.56996
	.word	.LC1705
	.word	.LC1713
	.byte	227
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58059, %object
	.size	descriptor.58059, 24
descriptor.58059:
	.word	.LC1013
	.word	__func__.58060
	.word	.LC1638
	.word	.LC1644
	.byte	203
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58135, %object
	.size	descriptor.58135, 24
descriptor.58135:
	.word	.LC1013
	.word	__func__.58136
	.word	.LC1638
	.word	.LC1409
	.byte	187
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58137, %object
	.size	descriptor.58137, 24
descriptor.58137:
	.word	.LC1013
	.word	__func__.58136
	.word	.LC1638
	.word	.LC1410
	.byte	197
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58138, %object
	.size	descriptor.58138, 24
descriptor.58138:
	.word	.LC1013
	.word	__func__.58136
	.word	.LC1638
	.word	.LC1431
	.byte	228
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61885, %object
	.size	descriptor.61885, 24
descriptor.61885:
	.word	.LC1013
	.word	__func__.61883
	.word	.LC1615
	.word	.LC1617
	.byte	92
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61807, %object
	.size	descriptor.61807, 24
descriptor.61807:
	.word	.LC1013
	.word	__func__.61808
	.word	.LC1615
	.word	.LC1625
	.byte	84
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61813, %object
	.size	descriptor.61813, 24
descriptor.61813:
	.word	.LC1013
	.word	__func__.61814
	.word	.LC1615
	.word	.LC1624
	.byte	127
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62854, %object
	.size	descriptor.62854, 24
descriptor.62854:
	.word	.LC1013
	.word	__func__.62855
	.word	.LC1582
	.word	.LC1014
	.byte	150
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62856, %object
	.size	descriptor.62856, 24
descriptor.62856:
	.word	.LC1013
	.word	__func__.62855
	.word	.LC1582
	.word	.LC1016
	.byte	157
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62857, %object
	.size	descriptor.62857, 24
descriptor.62857:
	.word	.LC1013
	.word	__func__.62855
	.word	.LC1582
	.word	.LC1586
	.byte	166
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63009, %object
	.size	descriptor.63009, 24
descriptor.63009:
	.word	.LC1013
	.word	__func__.63010
	.word	.LC1582
	.word	.LC1584
	.byte	145
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62833, %object
	.size	descriptor.62833, 24
descriptor.62833:
	.word	.LC1013
	.word	__func__.62834
	.word	.LC1582
	.word	.LC1584
	.byte	109
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63719, %object
	.size	descriptor.63719, 24
descriptor.63719:
	.word	.LC1013
	.word	__func__.63720
	.word	.LC1481
	.word	.LC1572
	.byte	158
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64384, %object
	.size	descriptor.64384, 24
descriptor.64384:
	.word	.LC1013
	.word	__func__.64385
	.word	.LC1481
	.word	.LC1544
	.byte	229
	.byte	9
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56621, %object
	.size	descriptor.56621, 24
descriptor.56621:
	.word	.LC1013
	.word	__func__.56613
	.word	.LC1714
	.word	.LC1715
	.byte	102
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56526, %object
	.size	descriptor.56526, 24
descriptor.56526:
	.word	.LC1013
	.word	__func__.56525
	.word	.LC1714
	.word	.LC1716
	.byte	7
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56524, %object
	.size	descriptor.56524, 24
descriptor.56524:
	.word	.LC1013
	.word	__func__.56525
	.word	.LC1714
	.word	.LC1717
	.byte	5
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56493, %object
	.size	descriptor.56493, 24
descriptor.56493:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC1718
	.byte	145
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56491, %object
	.size	descriptor.56491, 24
descriptor.56491:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC1719
	.byte	135
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56489, %object
	.size	descriptor.56489, 24
descriptor.56489:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC1720
	.byte	124
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56487, %object
	.size	descriptor.56487, 24
descriptor.56487:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC1721
	.byte	113
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56481, %object
	.size	descriptor.56481, 24
descriptor.56481:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC1722
	.byte	84
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56465, %object
	.size	descriptor.56465, 24
descriptor.56465:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC1723
	.byte	7
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56446, %object
	.size	descriptor.56446, 24
descriptor.56446:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC1716
	.byte	193
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56444, %object
	.size	descriptor.56444, 24
descriptor.56444:
	.word	.LC1013
	.word	__func__.56445
	.word	.LC1714
	.word	.LC1724
	.byte	191
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52359, %object
	.size	descriptor.52359, 24
descriptor.52359:
	.word	.LC1013
	.word	__func__.52360
	.word	.LC1742
	.word	.LC1743
	.byte	250
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52314, %object
	.size	descriptor.52314, 24
descriptor.52314:
	.word	.LC1013
	.word	__func__.52315
	.word	.LC1742
	.word	.LC599
	.byte	145
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52209, %object
	.size	descriptor.52209, 24
descriptor.52209:
	.word	.LC1013
	.word	__func__.52210
	.word	.LC1742
	.word	.LC1744
	.byte	156
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51433, %object
	.size	descriptor.51433, 24
descriptor.51433:
	.word	.LC1013
	.word	__func__.51434
	.word	.LC1748
	.word	.LC599
	.byte	222
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51290, %object
	.size	descriptor.51290, 24
descriptor.51290:
	.word	.LC1013
	.word	__func__.51289
	.word	.LC1748
	.word	.LC688
	.byte	159
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51288, %object
	.size	descriptor.51288, 24
descriptor.51288:
	.word	.LC1013
	.word	__func__.51289
	.word	.LC1748
	.word	.LC1744
	.byte	153
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48312, %object
	.size	descriptor.48312, 24
descriptor.48312:
	.word	.LC1013
	.word	__func__.48310
	.word	.LC1760
	.word	.LC1761
	.byte	2
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48311, %object
	.size	descriptor.48311, 24
descriptor.48311:
	.word	.LC1013
	.word	__func__.48310
	.word	.LC1760
	.word	.LC1762
	.byte	245
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48248, %object
	.size	descriptor.48248, 24
descriptor.48248:
	.word	.LC1013
	.word	__func__.48237
	.word	.LC1760
	.word	.LC1763
	.byte	254
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37213, %object
	.size	descriptor.37213, 24
descriptor.37213:
	.word	.LC1013
	.word	__func__.37214
	.word	.LC1778
	.word	.LC1779
	.byte	170
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37195, %object
	.size	descriptor.37195, 24
descriptor.37195:
	.word	.LC1013
	.word	__func__.37193
	.word	.LC1778
	.word	.LC1780
	.byte	144
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37194, %object
	.size	descriptor.37194, 24
descriptor.37194:
	.word	.LC1013
	.word	__func__.37193
	.word	.LC1778
	.word	.LC1781
	.byte	138
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25359, %object
	.size	descriptor.25359, 24
descriptor.25359:
	.word	.LC1013
	.word	__func__.25329
	.word	.LC583
	.word	.LC1790
	.byte	8
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25358, %object
	.size	descriptor.25358, 24
descriptor.25358:
	.word	.LC1013
	.word	__func__.25329
	.word	.LC583
	.word	.LC1791
	.byte	6
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.ident	"GCC: (GNU) 9.2.1 20190917"
	.section	.note.GNU-stack,"",%progbits
// Generated by Lolz Kernel
